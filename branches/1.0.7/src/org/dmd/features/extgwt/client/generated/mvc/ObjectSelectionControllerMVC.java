package org.dmd.features.extgwt.client.generated.mvc;

import com.extjs.gxt.ui.client.mvc.Controller;
import com.extjs.gxt.ui.client.mvc.Dispatcher;
import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.event.EventType;
import com.extjs.gxt.ui.client.Registry;
import org.dmd.features.extgwt.client.ApplicationIF;
import org.dmd.features.extgwt.client.extended.ObjectSelectionController;

/**
 * The ObjectSelectionController provides a common location to access the
 * current set of model objects that have been selected from whatever set of
 * views happen to be displayed. For instance, if you have a table displayed
 * and you select one or more rows in the table, the
 * ObjectSelectionController should be informed of the selection. If an item
 * is selected in a tree, likewise, the controller should be informed. The
 * ObjectSelectionController can be consulted for the current set of selected
 * objects so that various context sensitive components can determine whether
 * they are enabled or disabled. The notification functionality is provided
 * via various subclasses in the org.dmd.features.extgwt.client.widget
 * package.
 * <P>
 * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.features.extgwt.extended.MvcController.initCodeGenInfo(MvcController.java:112)
 */
abstract public class ObjectSelectionControllerMVC extends Controller {

    // Resources
    protected ApplicationIF application;
    protected ObjectSelectionController mvcObjectSelectionController;

    // Events
    public EventType MvcInit;
    public EventType MvcObjectSelectionChanged;

    // org.dmd.features.extgwt.extended.MvcController.initLocalVariables(MvcController.java:444)

    // View(s)

    protected ObjectSelectionControllerMVC(){
        // Resolve our events
        MvcInit = getApplication().getEvent("mvc.init");
        MvcObjectSelectionChanged = getApplication().getEvent("mvc.objectSelectionChanged");

        // org.dmd.features.extgwt.util.MvcGenerator.dumpController(MvcGenerator.java:177)
        registerEventTypes(MvcInit);
        registerEventTypes(MvcObjectSelectionChanged);

        // Instantiate our views

        // Instantiate our multiviews

        // Instantiate our actions

        // Instantiate our menus

        // Instantiate our menu items

        // Instantiate our menu separators
    }

    /**
     * Derived classes must override this method to perform their initialization behaviour.
     */
    abstract protected void initialize();

    // org.dmd.features.extgwt.extended.MvcController.initHandleEventFunction(MvcController.java:538)
    public void handleEvent(AppEvent event) {
        EventType type = event.getType();
        if (type == MvcInit) {
            handleMvcInitEvent(event);
        }
    }

    /**
     * The derived class must overload this method to handle the mvc.init event.
     * <P>
     * The mvc init event can be injected to cause initialization of the Dark
     * Matter MVC framework elements.
     */
    abstract protected void handleMvcInitEvent(AppEvent event);

    /**
     * @return This is the universal handle to the application.
     */
    public ApplicationIF getApplication(){
        if (application == null)
            application = (ApplicationIF) Registry.get("application");
        return(application);
    }

    /**
     * @return Handle to the object selection controller.
     */
    public ObjectSelectionController getMvcObjectSelectionController(){
        if (mvcObjectSelectionController == null)
            mvcObjectSelectionController = (ObjectSelectionController) Registry.get("mvc.objectSelectionController");
        return(mvcObjectSelectionController);
    }

    /**
     * Adds the MvcObjectSelectionController item to the Registry.
     * Handle to the object selection controller.
     */
    protected void registerMvcObjectSelectionController(ObjectSelectionController item){
            Registry.register("mvc.objectSelectionController", item);
    }

    public void dispatchMvcObjectSelectionChanged(){
        Dispatcher.get().dispatch(MvcObjectSelectionChanged);
    }

}
