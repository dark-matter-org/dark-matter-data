//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:357)
import java.io.Serializable;                                                  // Always required
import java.util.*;                                                           // Always required
import org.dmd.dmc.DmcAttribute;                                              // Any attributes
import org.dmd.dmc.DmcNamedObjectIF;                                          // Named object
import org.dmd.dmc.DmcOmni;                                                   // Lazy resolution
import org.dmd.dmc.DmcSliceInfo;                                              // Required for object slicing
import org.dmd.dmc.DmcValueException;                                         // Any attributes
import org.dmd.dmc.types.StringName;                                          // Naming attribute type
import org.dmd.dmg.generated.dmo.DmgDMSAG;                                    // Attribute from dmg schema
import org.dmd.dms.generated.dmo.MetaDMSAG;                                   // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeModifierMV;                         // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeStringMV;                           // Required type
import org.dmd.dms.generated.types.DmcTypeStringNameSV;                       // Required type
import org.dmd.dms.generated.types.DmcTypeStringSV;                           // Required type
import org.dmd.features.extgwt.generated.dmo.MvcConfigDMO;                    // Type specific set/add
import org.dmd.features.extgwt.generated.dmo.MvcDefinitionDMO;                // Base class
import org.dmd.features.extgwt.generated.types.DmcTypeMvcConfigREFMV;         // Reference type
import org.dmd.features.extgwt.generated.types.MvcConfigREF;                  // Helper class

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The MvcConfig class is stored in a file with a .mvc suffix and used to
 * define the set of files that hold the definitions of MvcEvents,
 * MvcControllers and MvcViews. Based on the definition of these objects, we
 * can generate base classes for the com.extjs.gxt.ui.client.mvc.Controller
 * and com.extjs.gxt.ui.client.mvc.View that provide some common code
 * required by these classes.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class MvcConfigDMO  extends MvcDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "MvcConfig";

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public MvcConfigDMO() {
        super("MvcConfig");
    }

    protected MvcConfigDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public MvcConfigDMO getNew(){
        MvcConfigDMO rc = new MvcConfigDMO();
        return(rc);
    }

    @Override
    public MvcConfigDMO getSlice(DmcSliceInfo info){
        MvcConfigDMO rc = new MvcConfigDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public MvcConfigDMO(DmcTypeModifierMV mods) {
        super("MvcConfig");
        modrec(true);
        setModifier(mods);
    }

    public MvcConfigDMO getModificationRecorder(){
        MvcConfigDMO rc = new MvcConfigDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:742)
    public StringName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((StringName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcConfigDMO){
            return( getObjectName().equals( ((MvcConfigDMO) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return An Iterator of MvcConfigDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:868)
    public Iterator<MvcConfigREF> getDependsOnMVC(){
        DmcTypeMvcConfigREFMV attr = (DmcTypeMvcConfigREFMV) get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null)
            return( ((List<MvcConfigREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<MvcConfigREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of MvcConfigREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:888)
    public Iterator<MvcConfigREF> getDependsOnMVCREFs(){
        DmcTypeMvcConfigREFMV attr = (DmcTypeMvcConfigREFMV) get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null)
            return( ((List<MvcConfigREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another dependsOnMVC to the specified value.
     * @param value MvcConfig
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:902)
    public DmcAttribute<?> addDependsOnMVC(MvcConfigDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null)
            attr = new DmcTypeMvcConfigREFMV(ExtgwtDMSAG.__dependsOnMVC);
        
        try{
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__dependsOnMVC,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another dependsOnMVC value.
     * @param value A value compatible with MvcConfig
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1143)
    public DmcAttribute<?> addDependsOnMVC(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null)
            attr = new DmcTypeMvcConfigREFMV(ExtgwtDMSAG.__dependsOnMVC);
        
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__dependsOnMVC,attr);
        return(attr);
    }

    /**
     * Returns the number of values in dependsOnMVC
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1160)
    public int getDependsOnMVCSize(){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dependsOnMVC);
        if (attr == null){
            if (ExtgwtDMSAG.__dependsOnMVC.indexSize == 0)
                return(0);
            else
                return(ExtgwtDMSAG.__dependsOnMVC.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a dependsOnMVC value.
     * @param value The MvcConfig to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1199)
    public DmcAttribute<?> delDependsOnMVC(Object value){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__dependsOnMVC);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeMvcConfigREFMV(ExtgwtDMSAG.__dependsOnMVC), value);
        else
            attr = del(ExtgwtDMSAG.__dependsOnMVC, value);
        
        return(attr);
    }

    /**
     * Removes the dependsOnMVC attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1253)
    public void remDependsOnMVC(){
         rem(ExtgwtDMSAG.__dependsOnMVC);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1010)
    public Iterator<String> getDependsOn(){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(MetaDMSAG.__dependsOn);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth String value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1022)
    public String getNthDependsOn(int i){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(MetaDMSAG.__dependsOn);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another dependsOn to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1036)
    public DmcAttribute<?> addDependsOn(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOn);
        if (attr == null)
            attr = new DmcTypeStringMV(MetaDMSAG.__dependsOn);
        
        try{
            setLastValue(attr.add(value));
            add(MetaDMSAG.__dependsOn,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified String.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1111)
    public boolean dependsOnContains(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOn);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another dependsOn value.
     * @param value A value compatible with String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1143)
    public DmcAttribute<?> addDependsOn(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOn);
        if (attr == null)
            attr = new DmcTypeStringMV(MetaDMSAG.__dependsOn);
        
        setLastValue(attr.add(value));
        add(MetaDMSAG.__dependsOn,attr);
        return(attr);
    }

    /**
     * Returns the number of values in dependsOn
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1160)
    public int getDependsOnSize(){
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOn);
        if (attr == null){
            if (MetaDMSAG.__dependsOn.indexSize == 0)
                return(0);
            else
                return(MetaDMSAG.__dependsOn.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a dependsOn value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1218)
    public DmcAttribute<?> delDependsOn(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOn);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(MetaDMSAG.__dependsOn), value);
        else
            attr = del(MetaDMSAG.__dependsOn, value);
        
        return(attr);
    }

    /**
     * Deletes a dependsOn from the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1234)
    public DmcAttribute<?> delDependsOn(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__dependsOn);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(MetaDMSAG.__dependsOn), value);
        else
            attr = del(MetaDMSAG.__dependsOn, value);
        
        return(attr);
    }

    /**
     * Removes the dependsOn attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1253)
    public void remDependsOn(){
         rem(MetaDMSAG.__dependsOn);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:685)
    public StringName getName(){
        DmcTypeStringNameSV attr = (DmcTypeStringNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:723)
    public void setName(StringName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:775)
    public void setName(Object value) throws DmcValueException {
        DmcTypeStringNameSV attr  = (DmcTypeStringNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:795)
    public void remName(){
         rem(MetaDMSAG.__name);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:685)
    public String getGenPackage(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmgDMSAG.__genPackage);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets genPackage to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:723)
    public void setGenPackage(String value) {
        DmcAttribute<?> attr = get(DmgDMSAG.__genPackage);
        if (attr == null)
            attr = new DmcTypeStringSV(DmgDMSAG.__genPackage);
        
        try{
            attr.set(value);
            set(DmgDMSAG.__genPackage,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets genPackage to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:775)
    public void setGenPackage(Object value) throws DmcValueException {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmgDMSAG.__genPackage);
        if (attr == null)
            attr = new DmcTypeStringSV(DmgDMSAG.__genPackage);
        
        attr.set(value);
        set(DmgDMSAG.__genPackage,attr);
    }

    /**
     * Removes the genPackage attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:795)
    public void remGenPackage(){
         rem(DmgDMSAG.__genPackage);
    }




}
