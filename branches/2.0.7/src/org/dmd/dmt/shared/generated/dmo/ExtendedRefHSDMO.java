package org.dmd.dmt.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:391)
import java.io.Serializable;                                              // Always required - (GenUtility.java:220)
import java.util.*;                                                       // Always required if we have any MV attributes - (GenUtility.java:215)
import org.dmd.dmc.DmcAttribute;                                          // Any attributes - (GenUtility.java:236)
import org.dmd.dmc.DmcObject;                                             // Structural class - (GenUtility.java:347)
import org.dmd.dmc.DmcOmni;                                               // Lazy resolution - (GenUtility.java:328)
import org.dmd.dmc.DmcSliceInfo;                                          // Required for object slicing - (GenUtility.java:225)
import org.dmd.dmc.DmcValueException;                                     // Any attributes - (GenUtility.java:237)
import org.dmd.dms.generated.dmo.MetaDMSAG;                               // Required for MODREC constructor - (GenUtility.java:224)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                     // Required for MODREC constructor - (GenUtility.java:223)
import org.dmd.dmt.shared.generated.types.DmcTypeSomeRelationSET;         // Required type - (GenUtility.java:324)
import org.dmd.dmt.shared.generated.types.SomeRelation;                   // Extended reference type - (GenUtility.java:322)

/**
 * null
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class ExtendedRefHSDMO  extends DmcObject  implements Serializable  {

    public final static String constructionClassName = "ExtendedRefHS";


    static {
    }

    public ExtendedRefHSDMO() {
        super("ExtendedRefHS");
    }

    protected ExtendedRefHSDMO(String oc) {
        super(oc);
    }

    @Override
    public ExtendedRefHSDMO getNew(){
        ExtendedRefHSDMO rc = new ExtendedRefHSDMO();
        return(rc);
    }

    @Override
    public ExtendedRefHSDMO getSlice(DmcSliceInfo info){
        ExtendedRefHSDMO rc = new ExtendedRefHSDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public ExtendedRefHSDMO(DmcTypeModifierMV mods) {
        super("ExtendedRefHS");
        modrec(true);
        setModifier(mods);
    }

    public ExtendedRefHSDMO getModificationRecorder(){
        ExtendedRefHSDMO rc = new ExtendedRefHSDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    /**
     * @return An Iterator of SomeRelationDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:960)
    public Iterator<SomeRelation> getHsExtendedRef(){
        DmcTypeSomeRelationSET attr = (DmcTypeSomeRelationSET) get(DmtDMSAG.__hsExtendedRef);
        if (attr == null)
            return( ((List<SomeRelation>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<SomeRelation>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of SomeRelationREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:980)
    public Iterator<SomeRelation> getHsExtendedRefREFs(){
        DmcTypeSomeRelationSET attr = (DmcTypeSomeRelationSET) get(DmtDMSAG.__hsExtendedRef);
        if (attr == null)
            return( ((List<SomeRelation>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another hsExtendedRef to the specified value.
     * @param value SomeRelation
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:994)
    public DmcAttribute<?> addHsExtendedRef(SomeRelation value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__hsExtendedRef);
        if (attr == null)
            attr = new DmcTypeSomeRelationSET(DmtDMSAG.__hsExtendedRef);
        
        try{
            setLastValue(attr.add(value));
            add(DmtDMSAG.__hsExtendedRef,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another hsExtendedRef value.
     * @param value A value compatible with SomeRelation
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1235)
    public DmcAttribute<?> addHsExtendedRef(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmtDMSAG.__hsExtendedRef);
        if (attr == null)
            attr = new DmcTypeSomeRelationSET(DmtDMSAG.__hsExtendedRef);
        
        setLastValue(attr.add(value));
        add(DmtDMSAG.__hsExtendedRef,attr);
        return(attr);
    }

    /**
     * Returns the number of values in hsExtendedRef
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1252)
    public int getHsExtendedRefSize(){
        DmcAttribute<?> attr = get(DmtDMSAG.__hsExtendedRef);
        if (attr == null){
            if (DmtDMSAG.__hsExtendedRef.indexSize == 0)
                return(0);
            else
                return(DmtDMSAG.__hsExtendedRef.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a hsExtendedRef value.
     * @param value The SomeRelation to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1291)
    public DmcAttribute<?> delHsExtendedRef(Object value){
        DmcAttribute<?> attr = get(DmtDMSAG.__hsExtendedRef);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeSomeRelationSET(DmtDMSAG.__hsExtendedRef), value);
        else
            attr = del(DmtDMSAG.__hsExtendedRef, value);
        
        return(attr);
    }

    /**
     * Removes the hsExtendedRef attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1345)
    public void remHsExtendedRef(){
         rem(DmtDMSAG.__hsExtendedRef);
    }




}
