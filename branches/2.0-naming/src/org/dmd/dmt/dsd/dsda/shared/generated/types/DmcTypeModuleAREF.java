package org.dmd.dmt.dsd.dsda.shared.generated.types;

import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.DmcOutputStreamIF;
import org.dmd.dmc.DmcInputStreamIF;
import org.dmd.dmc.types.DmcTypeNamedObjectREF;
import org.dmd.dmc.types.DefinitionName;

import org.dmd.dmt.dsd.dsda.shared.generated.types.ModuleAREF;

import org.dmd.dmt.dsd.dsda.shared.generated.dmo.ModuleADMO;

/**
 * This is the generated DmcAttribute derivative for values of type ModuleA
 * <P>
 * Generated from the dsdA schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoTypeFormatter.dumpNamedREFHelperType(DmoTypeFormatter.java:585)
 */
@SuppressWarnings("serial")
abstract public class DmcTypeModuleAREF extends DmcTypeNamedObjectREF<ModuleAREF, DefinitionName> {

    public DmcTypeModuleAREF(){
    
    }

    public DmcTypeModuleAREF(DmcAttributeInfo ai){
        super(ai);
    }

    @Override
    protected ModuleAREF getNewHelper(){
        return(new ModuleAREF());
    }

    @Override
    protected DefinitionName getNewName(){
        return(new DefinitionName());
    }

    @Override
    protected String getDMOClassName(){
        return( ModuleADMO.class.getName());
    }

    @Override
    protected boolean isDMO(Object value){
        if (value instanceof ModuleADMO)
            return(true);
        return(false);
    }

    @Override
    protected ModuleAREF typeCheck(Object value) throws DmcValueException {
        ModuleAREF rc = null;

        if (value instanceof ModuleAREF)
            rc = (ModuleAREF)value;
        else if (value instanceof ModuleADMO)
            rc = new ModuleAREF((ModuleADMO)value);
        else if (value instanceof DefinitionName)
            rc = new ModuleAREF((DefinitionName)value);
        else if (value instanceof String)
            rc = new ModuleAREF((String)value);
        else
            throw(new DmcValueException("Object of class: " + value.getClass().getName() + " passed where object compatible with ModuleAREF, ModuleADMO or String expected."));

        return(rc);
    }

    @Override
    public void serializeValue(DmcOutputStreamIF dos, ModuleAREF value) throws Exception {
        value.serializeIt(dos);
    }

    @Override
    public ModuleAREF deserializeValue(DmcInputStreamIF dis) throws Exception {
        ModuleAREF rc = new ModuleAREF();
        rc.deserializeIt(dis);
        return(rc);
    }

    @Override
    public ModuleAREF cloneValue(ModuleAREF value){
        return(new ModuleAREF(value));
    }



}
