package org.dmd.dmt.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:366)
import java.util.ArrayList;                                        // Support for MULTI attribute - (BaseDMWGenerator.java:2145)
import java.util.Iterator;                                         // Support copy of MV objects - (BaseDMWGenerator.java:2159)
import org.dmd.dmc.*;                                              // If any attributes - (BaseDMWGenerator.java:1006)
import org.dmd.dms.ClassDefinition;                                // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:990)
import org.dmd.dms.generated.dmo.MetaDMSAG;                        // Required for MODREC constructor - (BaseDMWGenerator.java:995)
import org.dmd.dms.generated.dmw.StringIterableDMW;                // For multi-valued String - (BaseDMWGenerator.java:2022)
import org.dmd.dms.generated.types.DmcTypeModifierMV;              // Required for MODREC constructor - (BaseDMWGenerator.java:994)
import org.dmd.dmt.shared.generated.dmo.DmtDMSAG;                  // Attribute mvIdxString from the dmt schema - (BaseDMWGenerator.java:821)
import org.dmd.dmt.shared.generated.dmo.PrimitiveMVIDXDMO;         // Class not auxiliary or abstract - (BaseDMWGenerator.java:1171)
import org.dmd.dmw.DmwWrapper;                                     // Unnamed object wrapper - (BaseDMWGenerator.java:1154)



/**
 * null
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:403)
 */
public class PrimitiveMVIDXDMW extends DmwWrapper {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:482)
    public PrimitiveMVIDXDMW() {
        super(new PrimitiveMVIDXDMO(), org.dmd.dmt.server.generated.DmtSchemaAG._PrimitiveMVIDX);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:488)
    public PrimitiveMVIDXDMW(DmcTypeModifierMV mods) {
        super(new PrimitiveMVIDXDMO(mods), org.dmd.dmt.server.generated.DmtSchemaAG._PrimitiveMVIDX);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:517)
    public PrimitiveMVIDXDMW getModificationRecorder(){
        PrimitiveMVIDXDMW rc = new PrimitiveMVIDXDMW(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:551)
    public PrimitiveMVIDXDMW(PrimitiveMVIDXDMO obj) {
        super(obj, org.dmd.dmt.server.generated.DmtSchemaAG._PrimitiveMVIDX);
    }

    public PrimitiveMVIDXDMW cloneIt() {
        PrimitiveMVIDXDMW rc = new PrimitiveMVIDXDMW();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public PrimitiveMVIDXDMO getDMO() {
        return((PrimitiveMVIDXDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:566)
    protected PrimitiveMVIDXDMW(PrimitiveMVIDXDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1590)
    public int getMvIdxStringSize(){
        return(((PrimitiveMVIDXDMO) core).getMvIdxStringSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1598)
    public boolean getMvIdxStringIsEmpty(){
        if (((PrimitiveMVIDXDMO) core).getMvIdxStringSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1608)
    public boolean getMvIdxStringHasValue(){
        if (((PrimitiveMVIDXDMO) core).getMvIdxStringSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2026)
    public StringIterableDMW getMvIdxStringIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvIdxString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((PrimitiveMVIDXDMO) core).getMvIdxString()));
    }

    /**
     * Adds another mvIdxString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2052)
    public void addMvIdxString(Object value) throws DmcValueException {
        ((PrimitiveMVIDXDMO) core).addMvIdxString(value);
    }

    /**
     * Sets a mvIdxString value at the specified index.
     * @param index The index to set.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2073)
    public void setNthMvIdxString(int index, String value){
        ((PrimitiveMVIDXDMO) core).setNthMvIdxString(index, value);
    }

    /**
     * Gets the mvIdxString value at the specified index.
     * @param index The index to retreive.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2082)
    public String getNthMvIdxString(int index){
        return(((PrimitiveMVIDXDMO) core).getNthMvIdxString(index));
    }

    /**
     * Returns true if the collection contains the mvIdxString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2119)
    public boolean mvIdxStringContains(String value){
        return(((PrimitiveMVIDXDMO) core).mvIdxStringContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2163)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getMvIdxStringCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvIdxString);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a mvIdxString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2190)
    public void delMvIdxString(Object value) throws DmcValueException {
        ((PrimitiveMVIDXDMO) core).delMvIdxString(value);
    }

    /**
     * Deletes a mvIdxString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2199)
    public void delMvIdxString(String value){
        ((PrimitiveMVIDXDMO) core).delMvIdxString(value);
    }

    /**
     * Removes the mvIdxString attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2211)
    public void remMvIdxString(){
        ((PrimitiveMVIDXDMO) core).remMvIdxString();
    }


}
