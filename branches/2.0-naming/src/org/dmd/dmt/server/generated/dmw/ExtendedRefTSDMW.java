//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2013 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmt.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:365)
import java.util.TreeSet;                                                // To support getMVCopy() - (BaseDMWGenerator.java:1098)
import org.dmd.dmc.*;                                                    // If any attributes - (BaseDMWGenerator.java:979)
import org.dmd.dms.ClassDefinition;                                      // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:963)
import org.dmd.dms.generated.dmo.MetaDMSAG;                              // Required for MODREC constructor - (BaseDMWGenerator.java:968)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                    // Required for MODREC constructor - (BaseDMWGenerator.java:967)
import org.dmd.dmt.server.extended.ObjWithRefs;                          // Is reference type - (BaseDMWGenerator.java:999)
import org.dmd.dmt.server.generated.dmw.SomeRelationIterableDMW;         // For multi-valued SomeRelation - (BaseDMWGenerator.java:1601)
import org.dmd.dmt.shared.generated.dmo.DmtDMSAG;                        // Attribute from the dmt schema - (BaseDMWGenerator.java:1602)
import org.dmd.dmt.shared.generated.dmo.ExtendedRefTSDMO;                // Class not auxiliary or abstract - (BaseDMWGenerator.java:1144)
import org.dmd.dmt.shared.generated.types.SomeRelation;                  // For addition of MV SomeRelation - (BaseDMWGenerator.java:1645)
import org.dmd.dmw.DmwWrapper;                                           // Unnamed object wrapper - (BaseDMWGenerator.java:1127)



/**
 * null
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:391)
 */
public class ExtendedRefTSDMW extends DmwWrapper  {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:470)
    public ExtendedRefTSDMW() {
        super(new ExtendedRefTSDMO(), org.dmd.dmt.server.generated.DmtSchemaAG._ExtendedRefTS);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:476)
    public ExtendedRefTSDMW(DmcTypeModifierMV mods) {
        super(new ExtendedRefTSDMO(mods), org.dmd.dmt.server.generated.DmtSchemaAG._ExtendedRefTS);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:505)
    public ExtendedRefTSDMW getModificationRecorder(){
        ExtendedRefTSDMW rc = new ExtendedRefTSDMW(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:539)
    public ExtendedRefTSDMW(ExtendedRefTSDMO obj) {
        super(obj, org.dmd.dmt.server.generated.DmtSchemaAG._ExtendedRefTS);
    }

    public ExtendedRefTSDMW cloneIt() {
        ExtendedRefTSDMW rc = new ExtendedRefTSDMW();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public ExtendedRefTSDMO getDMO() {
        return((ExtendedRefTSDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:554)
    protected ExtendedRefTSDMW(ExtendedRefTSDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    /**
     * @return The number of SomeRelation items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1563)
    public int getTsExtendedRefSize(){
        return(((ExtendedRefTSDMO) core).getTsExtendedRefSize());
    }

    /**
     * @return true if there are no SomeRelationDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1571)
    public boolean getTsExtendedRefIsEmpty(){
        if (((ExtendedRefTSDMO) core).getTsExtendedRefSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any SomeRelationDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1581)
    public boolean getTsExtendedRefHasValue(){
        if (((ExtendedRefTSDMO) core).getTsExtendedRefSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of SomeRelationDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1608)
    public SomeRelationIterableDMW getTsExtendedRefIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__tsExtendedRef);
        if (attr == null)
            return(SomeRelationIterableDMW.emptyList);
        
        return(new SomeRelationIterableDMW(((ExtendedRefTSDMO) core).getTsExtendedRef()));
    }

    /**
     * Adds another tsExtendedRef value.
     * @param value A value compatible with SomeRelation
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1651)
    public DmcAttribute<?> addTsExtendedRef(SomeRelation value){
        DmcAttribute<?> attr = ((ExtendedRefTSDMO) core).addTsExtendedRef(value);
        return(attr);
    }

    /**
     * Deletes a tsExtendedRef value.
     * @param value The SomeRelation to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1705)
    public void delTsExtendedRef(SomeRelation value){
        ((ExtendedRefTSDMO) core).delTsExtendedRef(value);
    }

    /**
     * @return A COPY of the collection of SomeRelation objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1779)
    public TreeSet<ObjWithRefs> getTsExtendedRefCopy(){
        DmcAttribute<?> attr = ((ExtendedRefTSDMO) core).get(DmtDMSAG.__tsExtendedRef);
        if (attr == null)
            return(new TreeSet<ObjWithRefs>());
        
        TreeSet<ObjWithRefs> rc = new TreeSet<ObjWithRefs>();
        
        SomeRelationIterableDMW it = getTsExtendedRefIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the tsExtendedRef attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2184)
    public void remTsExtendedRef(){
        ((ExtendedRefTSDMO) core).remTsExtendedRef();
    }


}
