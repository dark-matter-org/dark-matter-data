//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2013 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmv.server.generated;

import org.dmd.dmc.DmcOmni;
import org.dmd.dmc.DmcValueException;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.*;
import org.dmd.dmv.shared.generated.dmo.DmvDMSAG;


/**
 * The dmv schema defines classes associated with the Dark Matter
 * Validation\n (DMV) framework based on RuleDefinitions. Although you are
 * completely free to define your\n own rules, DMV provides a collection of
 * commonly useful rules taht can be used in a DMO\n run context.
 * <P>
 * Generated from the dmv schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.util.SchemaFormatter.dumpSchema(SchemaFormatter.java:182)
 */
public class DmvSchemaAG extends SchemaDefinition {

    public static ClassDefinition _AllowedAttributesRuleData;
    public static ClassDefinition _InitRuleData;
    public static ClassDefinition _NumericRangeRuleData;
    public static ClassDefinition _UCOAllowedAttributesRuleData;
    public static ClassDefinition _RelatedNumbersRuleData;
    public static ClassDefinition _CheckAttributesBasedOnValueRuleData;
    public static ClassDefinition _OneOfTheseAttributesRequiredRuleData;
    public static ClassDefinition _PatternMatchRuleData;
    public static ClassDefinition _ValueLengthRuleData;
    public static ClassDefinition _ReferencedAttributeTypeRuleData;

    public static AttributeDefinition _nrrMinimum;
    public static AttributeDefinition _nrrMaximum;
    public static AttributeDefinition _numericRelation;
    public static AttributeDefinition _lhs;
    public static AttributeDefinition _rhs;
    public static AttributeDefinition _allowedType;
    public static AttributeDefinition _basedOnAttribute;
    public static AttributeDefinition _basedOnValue;
    public static AttributeDefinition _excludeThisAttribute;
    public static AttributeDefinition _includeThisAttribute;
    public static AttributeDefinition _onePossibility;
    public static AttributeDefinition _andOnlyOne;
    public static AttributeDefinition _matchesPattern;
    public static AttributeDefinition _maxLength;
    public static AttributeDefinition _minLength;
    public static AttributeDefinition _allowedValueType;




    public static EnumDefinition _NumericRelationEnum;

    public static RuleDefinition _AllowedAttributesRule;
    public static RuleDefinition _InitRule;
    public static RuleDefinition _NumericRangeRule;
    public static RuleDefinition _UCOAllowedAttributesRule;
    public static RuleDefinition _RelatedNumbersRule;
    public static RuleDefinition _CheckAttributesBasedOnValueRule;
    public static RuleDefinition _OneOfTheseAttributesRequiredRule;
    public static RuleDefinition _PatternMatchRule;
    public static RuleDefinition _ValueLengthRule;
    public static RuleDefinition _ReferencedAttributeTypeRule;


    static DmvSchemaAG instance;

    public DmvSchemaAG() throws DmcValueException {
        generatedSchema = true;
        staticRefName   = "org.dmd.dmv.server.generated.DmvSchemaAG";

    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpSchema(SchemaFormatter.java:208)
    private void initialize() throws DmcValueException {
        if (instance == null){
            instance        = this;
            SchemaDefinitionDMO me = (SchemaDefinitionDMO) this.getDmcObject();
            me.setName("dmv");
            me.setDotName("dmv");
            me.setSchemaPackage("org.dmd.dmv.shared");
            me.setDmwPackage("org.dmd.dmv.server");
            me.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/dmv.dms");

            initClasses();
            initAttributes1();
            initTypes();
            initComplexTypes();
            initActions();
            initEnums();
            initRules();
            initDSDModules();
            DmcOmni.instance().addCompactSchema(DmvDMSAG.instance());
        }
    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpInitFunction(SchemaFormatter.java:313)
    private void initClasses() throws DmcValueException {
// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _AllowedAttributesRuleDataOBJ = new ClassDefinitionDMO();
            _AllowedAttributesRuleData = new ClassDefinition(_AllowedAttributesRuleDataOBJ,DmvDMSAG.__AllowedAttributesRuleData);
            _AllowedAttributesRuleDataOBJ.setName("AllowedAttributesRuleData");
            _AllowedAttributesRuleDataOBJ.setDmdID("-959999");
            _AllowedAttributesRuleDataOBJ.setInternallyGenerated("true");
            _AllowedAttributesRuleDataOBJ.setClassType("STRUCTURAL");
            _AllowedAttributesRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _AllowedAttributesRuleDataOBJ.setLineNumber("22");
            _AllowedAttributesRuleDataOBJ.addDescription("java.util.AbstractList$Itr@55f157b");
            _AllowedAttributesRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _AllowedAttributesRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _AllowedAttributesRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.AllowedAttributesRuleDataREF");
            _AllowedAttributesRuleDataOBJ.setRuleDefinition("dmv.AllowedAttributesRule");
            _AllowedAttributesRuleDataOBJ.setDmwIteratorClass("AllowedAttributesRuleDataIterableDMW");
            _AllowedAttributesRuleDataOBJ.addMay("meta.description");
            _AllowedAttributesRuleDataOBJ.addMust("meta.ruleName");
            _AllowedAttributesRuleDataOBJ.addMust("meta.ruleTitle");
            _AllowedAttributesRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.AllowedAttributesRuleDataIterableDMW");
            _AllowedAttributesRuleDataOBJ.setDotName("dmv.AllowedAttributesRuleData.ClassDefinition");
            _AllowedAttributesRuleData.setDefinedIn(this);
            addClassDefList(_AllowedAttributesRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _InitRuleDataOBJ = new ClassDefinitionDMO();
            _InitRuleData = new ClassDefinition(_InitRuleDataOBJ,DmvDMSAG.__InitRuleData);
            _InitRuleDataOBJ.setName("InitRuleData");
            _InitRuleDataOBJ.setDmdID("-959998");
            _InitRuleDataOBJ.setInternallyGenerated("true");
            _InitRuleDataOBJ.setClassType("EXTENSIBLE");
            _InitRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _InitRuleDataOBJ.setLineNumber("54");
            _InitRuleDataOBJ.addDescription("java.util.AbstractList$Itr@257b40fe");
            _InitRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _InitRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _InitRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.InitRuleDataREF");
            _InitRuleDataOBJ.setRuleDefinition("dmv.InitRule");
            _InitRuleDataOBJ.setDmwIteratorClass("InitRuleDataIterableDMW");
            _InitRuleDataOBJ.addMay("meta.description");
            _InitRuleDataOBJ.addMust("meta.ruleName");
            _InitRuleDataOBJ.addMust("meta.ruleTitle");
            _InitRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.InitRuleDataIterableDMW");
            _InitRuleDataOBJ.setDotName("dmv.InitRuleData.ClassDefinition");
            _InitRuleData.setDefinedIn(this);
            addClassDefList(_InitRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _NumericRangeRuleDataOBJ = new ClassDefinitionDMO();
            _NumericRangeRuleData = new ClassDefinition(_NumericRangeRuleDataOBJ,DmvDMSAG.__NumericRangeRuleData);
            _NumericRangeRuleDataOBJ.setName("NumericRangeRuleData");
            _NumericRangeRuleDataOBJ.setDmdID("-959997");
            _NumericRangeRuleDataOBJ.setInternallyGenerated("true");
            _NumericRangeRuleDataOBJ.setClassType("STRUCTURAL");
            _NumericRangeRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _NumericRangeRuleDataOBJ.setLineNumber("80");
            _NumericRangeRuleDataOBJ.addDescription("java.util.AbstractList$Itr@3ee7f6eb");
            _NumericRangeRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _NumericRangeRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _NumericRangeRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.NumericRangeRuleDataREF");
            _NumericRangeRuleDataOBJ.setRuleDefinition("dmv.NumericRangeRule");
            _NumericRangeRuleDataOBJ.setDmwIteratorClass("NumericRangeRuleDataIterableDMW");
            _NumericRangeRuleDataOBJ.addMay("meta.description");
            _NumericRangeRuleDataOBJ.addMay("dmv.nrrMinimum");
            _NumericRangeRuleDataOBJ.addMay("dmv.nrrMaximum");
            _NumericRangeRuleDataOBJ.addMust("meta.ruleName");
            _NumericRangeRuleDataOBJ.addMust("meta.ruleTitle");
            _NumericRangeRuleDataOBJ.addMust("meta.applyToAttribute");
            _NumericRangeRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.NumericRangeRuleDataIterableDMW");
            _NumericRangeRuleDataOBJ.setDotName("dmv.NumericRangeRuleData.ClassDefinition");
            _NumericRangeRuleData.setDefinedIn(this);
            addClassDefList(_NumericRangeRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _UCOAllowedAttributesRuleDataOBJ = new ClassDefinitionDMO();
            _UCOAllowedAttributesRuleData = new ClassDefinition(_UCOAllowedAttributesRuleDataOBJ,DmvDMSAG.__UCOAllowedAttributesRuleData);
            _UCOAllowedAttributesRuleDataOBJ.setName("UCOAllowedAttributesRuleData");
            _UCOAllowedAttributesRuleDataOBJ.setDmdID("-959996");
            _UCOAllowedAttributesRuleDataOBJ.setInternallyGenerated("true");
            _UCOAllowedAttributesRuleDataOBJ.setClassType("STRUCTURAL");
            _UCOAllowedAttributesRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _UCOAllowedAttributesRuleDataOBJ.setLineNumber("90");
            _UCOAllowedAttributesRuleDataOBJ.addDescription("java.util.AbstractList$Itr@6f03de90");
            _UCOAllowedAttributesRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _UCOAllowedAttributesRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _UCOAllowedAttributesRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.UCOAllowedAttributesRuleDataREF");
            _UCOAllowedAttributesRuleDataOBJ.setRuleDefinition("dmv.UCOAllowedAttributesRule");
            _UCOAllowedAttributesRuleDataOBJ.setDmwIteratorClass("UCOAllowedAttributesRuleDataIterableDMW");
            _UCOAllowedAttributesRuleDataOBJ.addMay("meta.description");
            _UCOAllowedAttributesRuleDataOBJ.addMust("meta.ruleName");
            _UCOAllowedAttributesRuleDataOBJ.addMust("meta.ruleTitle");
            _UCOAllowedAttributesRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.UCOAllowedAttributesRuleDataIterableDMW");
            _UCOAllowedAttributesRuleDataOBJ.setDotName("dmv.UCOAllowedAttributesRuleData.ClassDefinition");
            _UCOAllowedAttributesRuleData.setDefinedIn(this);
            addClassDefList(_UCOAllowedAttributesRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _RelatedNumbersRuleDataOBJ = new ClassDefinitionDMO();
            _RelatedNumbersRuleData = new ClassDefinition(_RelatedNumbersRuleDataOBJ,DmvDMSAG.__RelatedNumbersRuleData);
            _RelatedNumbersRuleDataOBJ.setName("RelatedNumbersRuleData");
            _RelatedNumbersRuleDataOBJ.setDmdID("-959994");
            _RelatedNumbersRuleDataOBJ.setInternallyGenerated("true");
            _RelatedNumbersRuleDataOBJ.setClassType("STRUCTURAL");
            _RelatedNumbersRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _RelatedNumbersRuleDataOBJ.setLineNumber("135");
            _RelatedNumbersRuleDataOBJ.addDescription("java.util.AbstractList$Itr@6708f8e0");
            _RelatedNumbersRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _RelatedNumbersRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _RelatedNumbersRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.RelatedNumbersRuleDataREF");
            _RelatedNumbersRuleDataOBJ.setRuleDefinition("dmv.RelatedNumbersRule");
            _RelatedNumbersRuleDataOBJ.setDmwIteratorClass("RelatedNumbersRuleDataIterableDMW");
            _RelatedNumbersRuleDataOBJ.addMay("meta.description");
            _RelatedNumbersRuleDataOBJ.addMust("meta.ruleName");
            _RelatedNumbersRuleDataOBJ.addMust("meta.ruleTitle");
            _RelatedNumbersRuleDataOBJ.addMust("dmv.lhs");
            _RelatedNumbersRuleDataOBJ.addMust("dmv.rhs");
            _RelatedNumbersRuleDataOBJ.addMust("dmv.numericRelation");
            _RelatedNumbersRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.RelatedNumbersRuleDataIterableDMW");
            _RelatedNumbersRuleDataOBJ.setDotName("dmv.RelatedNumbersRuleData.ClassDefinition");
            _RelatedNumbersRuleData.setDefinedIn(this);
            addClassDefList(_RelatedNumbersRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _CheckAttributesBasedOnValueRuleDataOBJ = new ClassDefinitionDMO();
            _CheckAttributesBasedOnValueRuleData = new ClassDefinition(_CheckAttributesBasedOnValueRuleDataOBJ,DmvDMSAG.__CheckAttributesBasedOnValueRuleData);
            _CheckAttributesBasedOnValueRuleDataOBJ.setName("CheckAttributesBasedOnValueRuleData");
            _CheckAttributesBasedOnValueRuleDataOBJ.setDmdID("-959993");
            _CheckAttributesBasedOnValueRuleDataOBJ.setInternallyGenerated("true");
            _CheckAttributesBasedOnValueRuleDataOBJ.setClassType("STRUCTURAL");
            _CheckAttributesBasedOnValueRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _CheckAttributesBasedOnValueRuleDataOBJ.setLineNumber("164");
            _CheckAttributesBasedOnValueRuleDataOBJ.addDescription("java.util.AbstractList$Itr@163b4b1e");
            _CheckAttributesBasedOnValueRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _CheckAttributesBasedOnValueRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _CheckAttributesBasedOnValueRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.CheckAttributesBasedOnValueRuleDataREF");
            _CheckAttributesBasedOnValueRuleDataOBJ.setRuleDefinition("dmv.CheckAttributesBasedOnValueRule");
            _CheckAttributesBasedOnValueRuleDataOBJ.setDmwIteratorClass("CheckAttributesBasedOnValueRuleDataIterableDMW");
            _CheckAttributesBasedOnValueRuleDataOBJ.addMay("meta.description");
            _CheckAttributesBasedOnValueRuleDataOBJ.addMay("dmv.excludeThisAttribute");
            _CheckAttributesBasedOnValueRuleDataOBJ.addMay("dmv.includeThisAttribute");
            _CheckAttributesBasedOnValueRuleDataOBJ.addMust("meta.ruleName");
            _CheckAttributesBasedOnValueRuleDataOBJ.addMust("meta.ruleTitle");
            _CheckAttributesBasedOnValueRuleDataOBJ.addMust("dmv.basedOnAttribute");
            _CheckAttributesBasedOnValueRuleDataOBJ.addMust("dmv.basedOnValue");
            _CheckAttributesBasedOnValueRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.CheckAttributesBasedOnValueRuleDataIterableDMW");
            _CheckAttributesBasedOnValueRuleDataOBJ.setDotName("dmv.CheckAttributesBasedOnValueRuleData.ClassDefinition");
            _CheckAttributesBasedOnValueRuleData.setDefinedIn(this);
            addClassDefList(_CheckAttributesBasedOnValueRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _OneOfTheseAttributesRequiredRuleDataOBJ = new ClassDefinitionDMO();
            _OneOfTheseAttributesRequiredRuleData = new ClassDefinition(_OneOfTheseAttributesRequiredRuleDataOBJ,DmvDMSAG.__OneOfTheseAttributesRequiredRuleData);
            _OneOfTheseAttributesRequiredRuleDataOBJ.setName("OneOfTheseAttributesRequiredRuleData");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setDmdID("-959992");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setInternallyGenerated("true");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setClassType("STRUCTURAL");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setLineNumber("199");
            _OneOfTheseAttributesRequiredRuleDataOBJ.addDescription("java.util.AbstractList$Itr@ec0a9f9");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.OneOfTheseAttributesRequiredRuleDataREF");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setRuleDefinition("dmv.OneOfTheseAttributesRequiredRule");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setDmwIteratorClass("OneOfTheseAttributesRequiredRuleDataIterableDMW");
            _OneOfTheseAttributesRequiredRuleDataOBJ.addMay("meta.description");
            _OneOfTheseAttributesRequiredRuleDataOBJ.addMay("dmv.andOnlyOne");
            _OneOfTheseAttributesRequiredRuleDataOBJ.addMust("meta.ruleName");
            _OneOfTheseAttributesRequiredRuleDataOBJ.addMust("meta.ruleTitle");
            _OneOfTheseAttributesRequiredRuleDataOBJ.addMust("dmv.onePossibility");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.OneOfTheseAttributesRequiredRuleDataIterableDMW");
            _OneOfTheseAttributesRequiredRuleDataOBJ.setDotName("dmv.OneOfTheseAttributesRequiredRuleData.ClassDefinition");
            _OneOfTheseAttributesRequiredRuleData.setDefinedIn(this);
            addClassDefList(_OneOfTheseAttributesRequiredRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _PatternMatchRuleDataOBJ = new ClassDefinitionDMO();
            _PatternMatchRuleData = new ClassDefinition(_PatternMatchRuleDataOBJ,DmvDMSAG.__PatternMatchRuleData);
            _PatternMatchRuleDataOBJ.setName("PatternMatchRuleData");
            _PatternMatchRuleDataOBJ.setDmdID("-959991");
            _PatternMatchRuleDataOBJ.setInternallyGenerated("true");
            _PatternMatchRuleDataOBJ.setClassType("STRUCTURAL");
            _PatternMatchRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _PatternMatchRuleDataOBJ.setLineNumber("227");
            _PatternMatchRuleDataOBJ.addDescription("java.util.AbstractList$Itr@ad72200");
            _PatternMatchRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _PatternMatchRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _PatternMatchRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.PatternMatchRuleDataREF");
            _PatternMatchRuleDataOBJ.setRuleDefinition("dmv.PatternMatchRule");
            _PatternMatchRuleDataOBJ.setDmwIteratorClass("PatternMatchRuleDataIterableDMW");
            _PatternMatchRuleDataOBJ.addMay("meta.description");
            _PatternMatchRuleDataOBJ.addMust("meta.ruleName");
            _PatternMatchRuleDataOBJ.addMust("meta.ruleTitle");
            _PatternMatchRuleDataOBJ.addMust("meta.applyToAttribute");
            _PatternMatchRuleDataOBJ.addMust("dmv.matchesPattern");
            _PatternMatchRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.PatternMatchRuleDataIterableDMW");
            _PatternMatchRuleDataOBJ.setDotName("dmv.PatternMatchRuleData.ClassDefinition");
            _PatternMatchRuleData.setDefinedIn(this);
            addClassDefList(_PatternMatchRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _ValueLengthRuleDataOBJ = new ClassDefinitionDMO();
            _ValueLengthRuleData = new ClassDefinition(_ValueLengthRuleDataOBJ,DmvDMSAG.__ValueLengthRuleData);
            _ValueLengthRuleDataOBJ.setName("ValueLengthRuleData");
            _ValueLengthRuleDataOBJ.setDmdID("-959990");
            _ValueLengthRuleDataOBJ.setInternallyGenerated("true");
            _ValueLengthRuleDataOBJ.setClassType("STRUCTURAL");
            _ValueLengthRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _ValueLengthRuleDataOBJ.setLineNumber("300");
            _ValueLengthRuleDataOBJ.addDescription("java.util.AbstractList$Itr@31f9338f");
            _ValueLengthRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _ValueLengthRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _ValueLengthRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.ValueLengthRuleDataREF");
            _ValueLengthRuleDataOBJ.setRuleDefinition("dmv.ValueLengthRule");
            _ValueLengthRuleDataOBJ.setDmwIteratorClass("ValueLengthRuleDataIterableDMW");
            _ValueLengthRuleDataOBJ.addMay("meta.description");
            _ValueLengthRuleDataOBJ.addMay("dmv.maxLength");
            _ValueLengthRuleDataOBJ.addMay("dmv.minLength");
            _ValueLengthRuleDataOBJ.addMust("meta.ruleName");
            _ValueLengthRuleDataOBJ.addMust("meta.ruleTitle");
            _ValueLengthRuleDataOBJ.addMust("meta.applyToAttribute");
            _ValueLengthRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.ValueLengthRuleDataIterableDMW");
            _ValueLengthRuleDataOBJ.setDotName("dmv.ValueLengthRuleData.ClassDefinition");
            _ValueLengthRuleData.setDefinedIn(this);
            addClassDefList(_ValueLengthRuleData);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            ClassDefinitionDMO _ReferencedAttributeTypeRuleDataOBJ = new ClassDefinitionDMO();
            _ReferencedAttributeTypeRuleData = new ClassDefinition(_ReferencedAttributeTypeRuleDataOBJ,DmvDMSAG.__ReferencedAttributeTypeRuleData);
            _ReferencedAttributeTypeRuleDataOBJ.setName("ReferencedAttributeTypeRuleData");
            _ReferencedAttributeTypeRuleDataOBJ.setDmdID("-959989");
            _ReferencedAttributeTypeRuleDataOBJ.setInternallyGenerated("true");
            _ReferencedAttributeTypeRuleDataOBJ.setClassType("STRUCTURAL");
            _ReferencedAttributeTypeRuleDataOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _ReferencedAttributeTypeRuleDataOBJ.setLineNumber("366");
            _ReferencedAttributeTypeRuleDataOBJ.addDescription("java.util.AbstractList$Itr@5fa80aea");
            _ReferencedAttributeTypeRuleDataOBJ.setDerivedFrom("meta.RuleData");
            _ReferencedAttributeTypeRuleDataOBJ.setIsNamedBy("meta.ruleName");
            _ReferencedAttributeTypeRuleDataOBJ.setDmtREFImport("org.dmd.dmv.shared.generated.types.ReferencedAttributeTypeRuleDataREF");
            _ReferencedAttributeTypeRuleDataOBJ.setRuleDefinition("dmv.ReferencedAttributeTypeRule");
            _ReferencedAttributeTypeRuleDataOBJ.setDmwIteratorClass("ReferencedAttributeTypeRuleDataIterableDMW");
            _ReferencedAttributeTypeRuleDataOBJ.addMay("meta.description");
            _ReferencedAttributeTypeRuleDataOBJ.addMay("dmv.allowedType");
            _ReferencedAttributeTypeRuleDataOBJ.addMay("dmv.allowedValueType");
            _ReferencedAttributeTypeRuleDataOBJ.addMust("meta.ruleName");
            _ReferencedAttributeTypeRuleDataOBJ.addMust("meta.ruleTitle");
            _ReferencedAttributeTypeRuleDataOBJ.addMust("meta.applyToAttribute");
            _ReferencedAttributeTypeRuleDataOBJ.setDmwIteratorImport("org.dmd.dmv.server.generated.dmw.ReferencedAttributeTypeRuleDataIterableDMW");
            _ReferencedAttributeTypeRuleDataOBJ.setDotName("dmv.ReferencedAttributeTypeRuleData.ClassDefinition");
            _ReferencedAttributeTypeRuleData.setDefinedIn(this);
            addClassDefList(_ReferencedAttributeTypeRuleData);

    }

    private void initAttributes1() throws DmcValueException {
// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _nrrMinimumOBJ = new AttributeDefinitionDMO();
            _nrrMinimum = new AttributeDefinition(_nrrMinimumOBJ);
            _nrrMinimumOBJ.setType("meta.Double");
            _nrrMinimumOBJ.setName("nrrMinimum");
            _nrrMinimumOBJ.setDmdID("-479999");
            _nrrMinimumOBJ.addDescription("The minimum numeric value.");
            _nrrMinimumOBJ.setDotName("dmv.nrrMinimum.AttributeDefinition");
            _nrrMinimum.setDefinedIn(this);
            _nrrMinimumOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _nrrMinimumOBJ.setLineNumber("6");
            addAttributeDefList(_nrrMinimum);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _nrrMaximumOBJ = new AttributeDefinitionDMO();
            _nrrMaximum = new AttributeDefinition(_nrrMaximumOBJ);
            _nrrMaximumOBJ.setType("meta.Double");
            _nrrMaximumOBJ.setName("nrrMaximum");
            _nrrMaximumOBJ.setDmdID("-479998");
            _nrrMaximumOBJ.addDescription("The maximum numeric value.");
            _nrrMaximumOBJ.setDotName("dmv.nrrMaximum.AttributeDefinition");
            _nrrMaximum.setDefinedIn(this);
            _nrrMaximumOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _nrrMaximumOBJ.setLineNumber("12");
            addAttributeDefList(_nrrMaximum);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _numericRelationOBJ = new AttributeDefinitionDMO();
            _numericRelation = new AttributeDefinition(_numericRelationOBJ);
            _numericRelationOBJ.setType("dmv.NumericRelationEnum");
            _numericRelationOBJ.setName("numericRelation");
            _numericRelationOBJ.setDmdID("-479997");
            _numericRelationOBJ.addDescription("The relationship between numeric values.");
            _numericRelationOBJ.setDotName("dmv.numericRelation.AttributeDefinition");
            _numericRelation.setDefinedIn(this);
            _numericRelationOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _numericRelationOBJ.setLineNumber("18");
            addAttributeDefList(_numericRelation);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _lhsOBJ = new AttributeDefinitionDMO();
            _lhs = new AttributeDefinition(_lhsOBJ);
            _lhsOBJ.setType("meta.AttributeDefinition");
            _lhsOBJ.setName("lhs");
            _lhsOBJ.setDmdID("-479996");
            _lhsOBJ.addDescription("The attribute to be used as the left hand side of some relationship. The\n type of the attribute referred to may differ from one rule to the next depending on\n the relationship being tested.");
            _lhsOBJ.setDotName("dmv.lhs.AttributeDefinition");
            _lhs.setDefinedIn(this);
            _lhsOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _lhsOBJ.setLineNumber("26");
            addAttributeDefList(_lhs);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _rhsOBJ = new AttributeDefinitionDMO();
            _rhs = new AttributeDefinition(_rhsOBJ);
            _rhsOBJ.setType("meta.AttributeDefinition");
            _rhsOBJ.setName("rhs");
            _rhsOBJ.setDmdID("-479995");
            _rhsOBJ.addDescription("The attribute to be used as the right hand side of some relationship. The\n type of the attribute referred to may differ from one rule to the next depending on\n the relationship being tested.");
            _rhsOBJ.setDotName("dmv.rhs.AttributeDefinition");
            _rhs.setDefinedIn(this);
            _rhsOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _rhsOBJ.setLineNumber("34");
            addAttributeDefList(_rhs);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _allowedTypeOBJ = new AttributeDefinitionDMO();
            _allowedType = new AttributeDefinition(_allowedTypeOBJ);
            _allowedTypeOBJ.setType("meta.TypeDefinition");
            _allowedTypeOBJ.setName("allowedType");
            _allowedTypeOBJ.setDmdID("-479994");
            _allowedTypeOBJ.addDescription("The allowedType indicates a collection of defined types to which something,\n usually and attribute, must conform.");
            _allowedTypeOBJ.setValueType("MULTI");
            _allowedTypeOBJ.setDotName("dmv.allowedType.AttributeDefinition");
            _allowedType.setDefinedIn(this);
            _allowedTypeOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _allowedTypeOBJ.setLineNumber("42");
            addAttributeDefList(_allowedType);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _basedOnAttributeOBJ = new AttributeDefinitionDMO();
            _basedOnAttribute = new AttributeDefinition(_basedOnAttributeOBJ);
            _basedOnAttributeOBJ.setType("meta.AttributeDefinition");
            _basedOnAttributeOBJ.setName("basedOnAttribute");
            _basedOnAttributeOBJ.setDmdID("-479993");
            _basedOnAttributeOBJ.addDescription("The basedOnAttribute allows for the specification of an attribute on which\n some type of a decision is made.");
            _basedOnAttributeOBJ.setDotName("dmv.basedOnAttribute.AttributeDefinition");
            _basedOnAttribute.setDefinedIn(this);
            _basedOnAttributeOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _basedOnAttributeOBJ.setLineNumber("49");
            addAttributeDefList(_basedOnAttribute);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _basedOnValueOBJ = new AttributeDefinitionDMO();
            _basedOnValue = new AttributeDefinition(_basedOnValueOBJ);
            _basedOnValueOBJ.setType("meta.String");
            _basedOnValueOBJ.setName("basedOnValue");
            _basedOnValueOBJ.setDmdID("-479992");
            _basedOnValueOBJ.addDescription("The basedOnValue attribute allows for the specification of values for some\n aspect of a rule.");
            _basedOnValueOBJ.setValueType("HASHSET");
            _basedOnValueOBJ.setDotName("dmv.basedOnValue.AttributeDefinition");
            _basedOnValue.setDefinedIn(this);
            _basedOnValueOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _basedOnValueOBJ.setLineNumber("57");
            addAttributeDefList(_basedOnValue);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _excludeThisAttributeOBJ = new AttributeDefinitionDMO();
            _excludeThisAttribute = new AttributeDefinition(_excludeThisAttributeOBJ);
            _excludeThisAttributeOBJ.setType("meta.AttributeDefinition");
            _excludeThisAttributeOBJ.setName("excludeThisAttribute");
            _excludeThisAttributeOBJ.setDmdID("-479991");
            _excludeThisAttributeOBJ.addDescription("The excludeThisAttribute indicates an optional attribute that must be\n excluded from an object under certain conditions.");
            _excludeThisAttributeOBJ.setValueType("MULTI");
            _excludeThisAttributeOBJ.setDotName("dmv.excludeThisAttribute.AttributeDefinition");
            _excludeThisAttribute.setDefinedIn(this);
            _excludeThisAttributeOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _excludeThisAttributeOBJ.setLineNumber("65");
            addAttributeDefList(_excludeThisAttribute);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _includeThisAttributeOBJ = new AttributeDefinitionDMO();
            _includeThisAttribute = new AttributeDefinition(_includeThisAttributeOBJ);
            _includeThisAttributeOBJ.setType("meta.AttributeDefinition");
            _includeThisAttributeOBJ.setName("includeThisAttribute");
            _includeThisAttributeOBJ.setDmdID("-479990");
            _includeThisAttributeOBJ.addDescription("The includeThisAttribute indicates an optional attribute that must be\n present under certain conditions.");
            _includeThisAttributeOBJ.setValueType("MULTI");
            _includeThisAttributeOBJ.setDotName("dmv.includeThisAttribute.AttributeDefinition");
            _includeThisAttribute.setDefinedIn(this);
            _includeThisAttributeOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _includeThisAttributeOBJ.setLineNumber("73");
            addAttributeDefList(_includeThisAttribute);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _onePossibilityOBJ = new AttributeDefinitionDMO();
            _onePossibility = new AttributeDefinition(_onePossibilityOBJ);
            _onePossibilityOBJ.setType("meta.AttributeDefinition");
            _onePossibilityOBJ.setName("onePossibility");
            _onePossibilityOBJ.setDmdID("-479989");
            _onePossibilityOBJ.addDescription("The onePossibility attribute indicates an attribute that is one possiblity among\n many.");
            _onePossibilityOBJ.setValueType("MULTI");
            _onePossibilityOBJ.setDotName("dmv.onePossibility.AttributeDefinition");
            _onePossibility.setDefinedIn(this);
            _onePossibilityOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _onePossibilityOBJ.setLineNumber("81");
            addAttributeDefList(_onePossibility);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _andOnlyOneOBJ = new AttributeDefinitionDMO();
            _andOnlyOne = new AttributeDefinition(_andOnlyOneOBJ);
            _andOnlyOneOBJ.setType("meta.Boolean");
            _andOnlyOneOBJ.setName("andOnlyOne");
            _andOnlyOneOBJ.setDmdID("-479988");
            _andOnlyOneOBJ.addDescription("The andOnlyOne attribute indicates that only one of a set of possibilities is\n allowed.");
            _andOnlyOneOBJ.setDotName("dmv.andOnlyOne.AttributeDefinition");
            _andOnlyOne.setDefinedIn(this);
            _andOnlyOneOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _andOnlyOneOBJ.setLineNumber("88");
            addAttributeDefList(_andOnlyOne);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _matchesPatternOBJ = new AttributeDefinitionDMO();
            _matchesPattern = new AttributeDefinition(_matchesPatternOBJ);
            _matchesPatternOBJ.setType("meta.String");
            _matchesPatternOBJ.setName("matchesPattern");
            _matchesPatternOBJ.setDmdID("-479987");
            _matchesPatternOBJ.addDescription("The matchesPattern attribute indicates a regular expression that conforms\n to the");
            _matchesPatternOBJ.setDotName("dmv.matchesPattern.AttributeDefinition");
            _matchesPattern.setDefinedIn(this);
            _matchesPatternOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _matchesPatternOBJ.setLineNumber("95");
            addAttributeDefList(_matchesPattern);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _maxLengthOBJ = new AttributeDefinitionDMO();
            _maxLength = new AttributeDefinition(_maxLengthOBJ);
            _maxLengthOBJ.setType("meta.Integer");
            _maxLengthOBJ.setName("maxLength");
            _maxLengthOBJ.setDmdID("-479986");
            _maxLengthOBJ.addDescription("The maxLength attribute indicates the maximum length of something.");
            _maxLengthOBJ.setDotName("dmv.maxLength.AttributeDefinition");
            _maxLength.setDefinedIn(this);
            _maxLengthOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _maxLengthOBJ.setLineNumber("101");
            addAttributeDefList(_maxLength);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _minLengthOBJ = new AttributeDefinitionDMO();
            _minLength = new AttributeDefinition(_minLengthOBJ);
            _minLengthOBJ.setType("meta.Integer");
            _minLengthOBJ.setName("minLength");
            _minLengthOBJ.setDmdID("-479985");
            _minLengthOBJ.addDescription("The minLength attribute indicates the minimum length of something.");
            _minLengthOBJ.setDotName("dmv.minLength.AttributeDefinition");
            _minLength.setDefinedIn(this);
            _minLengthOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _minLengthOBJ.setLineNumber("107");
            addAttributeDefList(_minLength);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            AttributeDefinitionDMO _allowedValueTypeOBJ = new AttributeDefinitionDMO();
            _allowedValueType = new AttributeDefinition(_allowedValueTypeOBJ);
            _allowedValueTypeOBJ.setType("meta.ValueTypeEnum");
            _allowedValueTypeOBJ.setName("allowedValueType");
            _allowedValueTypeOBJ.setDmdID("-479984");
            _allowedValueTypeOBJ.addDescription("The allowedValueType indicates the allowed cardinality of an attribute.");
            _allowedValueTypeOBJ.setDotName("dmv.allowedValueType.AttributeDefinition");
            _allowedValueType.setDefinedIn(this);
            _allowedValueTypeOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/attributes.dmd");
            _allowedValueTypeOBJ.setLineNumber("113");
            addAttributeDefList(_allowedValueType);

    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpInitFunction(SchemaFormatter.java:313)
    private void initTypes() throws DmcValueException {
    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpInitFunction(SchemaFormatter.java:313)
    private void initComplexTypes() throws DmcValueException {
    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpInitFunction(SchemaFormatter.java:313)
    private void initActions() throws DmcValueException {
    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpInitFunction(SchemaFormatter.java:313)
    private void initEnums() throws DmcValueException {
// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            EnumDefinitionDMO _NumericRelationEnumOBJ = new EnumDefinitionDMO();
            _NumericRelationEnum = new EnumDefinition(_NumericRelationEnumOBJ);
            _NumericRelationEnumOBJ.setName("NumericRelationEnum");
            _NumericRelationEnumOBJ.addEnumValue("0 EQUALS Equals : EQ");
            _NumericRelationEnumOBJ.addEnumValue("1 GT Greater than : GT");
            _NumericRelationEnumOBJ.addEnumValue("2 LT Less than : LT");
            _NumericRelationEnumOBJ.addEnumValue("3 NE Not equal : NE");
            _NumericRelationEnumOBJ.addEnumValue("4 GTE Greater than or equal to : GTE");
            _NumericRelationEnumOBJ.addEnumValue("5 LTE Less than or equal to : LTE");
            _NumericRelationEnumOBJ.addDescription("The NumericRelationEnum is used to specify the relationship\n that should exist between two numeric values.");
            _NumericRelationEnumOBJ.setDotName("dmv.NumericRelationEnum.EnumDefinition");
            _NumericRelationEnum.setDefinedIn(this);
            _NumericRelationEnumOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/types.dmd");
            _NumericRelationEnumOBJ.setLineNumber("10");
            addEnumDefList(_NumericRelationEnum);

    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpInitFunction(SchemaFormatter.java:313)
    private void initRules() throws DmcValueException {
// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _AllowedAttributesRuleOBJ = new RuleDefinitionDMO();
            _AllowedAttributesRule = new RuleDefinition(_AllowedAttributesRuleOBJ);
            _AllowedAttributesRuleOBJ.addRuleCategory("meta.ObjectValidation");
            _AllowedAttributesRuleOBJ.setName("AllowedAttributesRule");
            _AllowedAttributesRuleOBJ.setDmdID("-479999");
            _AllowedAttributesRuleOBJ.addDescription("The AllowedAttributesRule will determine whether or not the \n attributes of a DMO conform to the must/may specification of its class definition.\n For classes of type EXTENSIBLE, only the must have attributes are checked.\n <p/>\n Regardless of the environment in which you are running, you must ensure that the\n DmcOmni has been loaded with the appropriate schema. If you are using the dark-matter\n Model View Whatever (MVW) project for GWT, this aspect is taken care of automatically.\n <p/>\n Since this is a GLOBAL class rule, there will only ever be a single instance of\n this rule created as part of the dmv schema, as indicated below:\n <pre>\n AllowedAttributesRuleData\n ruleName    dmvAllowedAttributes\n ruleTitle 	 An object's attributes must conform to its schema.\n description Ensures that must/may attribute rules are followed.\n </pre>");
            _AllowedAttributesRuleOBJ.setDotName("dmv.AllowedAttributesRule.RuleDefinition");
            _AllowedAttributesRule.setDefinedIn(this);
            _AllowedAttributesRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _AllowedAttributesRuleOBJ.setLineNumber("22");
            addRuleDefinitionList(_AllowedAttributesRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _InitRuleOBJ = new RuleDefinitionDMO();
            _InitRule = new RuleDefinition(_InitRuleOBJ);
            _InitRuleOBJ.addRuleCategory("meta.Initialization");
            _InitRuleOBJ.setName("InitRule");
            _InitRuleOBJ.setDmdID("-479998");
            _InitRuleOBJ.addDescription("The InitRule allows you to specify attribute values for a \n newly created object or an object read from file or received in a CreateRequest\n (for instance). The InitRule will only set the values of attributes that are\n missing from the object; existing attributes are not alterred. An example\n usage might be:\n <p/>\n <pre>\n InitRuleData\n ruleName     <schema>InitX\n ruleTitle    Initialize the X class\n applyToClass X\n attributeA   some value\n attributeB   42\n attributeC   something\n attributeC   something else\n description  This provides a good initial setup for X objects. Other setups\n  may be required in other circumstances.\n </pre>");
            _InitRuleOBJ.setIsExtensible("true");
            _InitRuleOBJ.setDotName("dmv.InitRule.RuleDefinition");
            _InitRule.setDefinedIn(this);
            _InitRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _InitRuleOBJ.setLineNumber("54");
            addRuleDefinitionList(_InitRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _NumericRangeRuleOBJ = new RuleDefinitionDMO();
            _NumericRangeRule = new RuleDefinition(_NumericRangeRuleOBJ);
            _NumericRangeRuleOBJ.addRuleCategory("meta.AttributeValidation");
            _NumericRangeRuleOBJ.setName("NumericRangeRule");
            _NumericRangeRuleOBJ.setDmdID("-479997");
            _NumericRangeRuleOBJ.addDescription("The NumericRangeRule ensures that a numeric attribute has values\n that fall within a given range. It can be used for both single-valued and multi-valued\n attributes. The nrrMinimum must be less than the nrrMaximum. An example usage\n might be:\n <p/>\n <pre>\n NumericRangeRuleData\n ruleName         rangeCheckY\n ruleTitle        Attribute Y in range 1-10\n applyToAttribute Y\n nrrMinimum       1\n nrrMaximum       10\n description      This constraint is required because blah, blah blah.\n </pre>\n NOTE: this rule works by implicitly converting the values of the attributes\n to type Double in order to be able to do the range comparison. However,\n if you are dealing with large numeric values you may run into issues.");
            _NumericRangeRuleOBJ.addMay("dmv.nrrMinimum");
            _NumericRangeRuleOBJ.addMay("dmv.nrrMaximum");
            _NumericRangeRuleOBJ.setDotName("dmv.NumericRangeRule.RuleDefinition");
            _NumericRangeRule.setDefinedIn(this);
            _NumericRangeRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _NumericRangeRuleOBJ.setLineNumber("80");
            addRuleDefinitionList(_NumericRangeRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _UCOAllowedAttributesRuleOBJ = new RuleDefinitionDMO();
            _UCOAllowedAttributesRule = new RuleDefinition(_UCOAllowedAttributesRuleOBJ);
            _UCOAllowedAttributesRuleOBJ.addRuleCategory("meta.UCOValidation");
            _UCOAllowedAttributesRuleOBJ.setName("UCOAllowedAttributesRule");
            _UCOAllowedAttributesRuleOBJ.setDmdID("-479996");
            _UCOAllowedAttributesRuleOBJ.addDescription("The UCOAllowedAttributesRule will determine whether or not the \n attributes of a DmcUncheckedObject conform to the must/may specification of its\n class definition. For classes of type EXTENSIBLE only the must have attributes are checked.");
            _UCOAllowedAttributesRuleOBJ.setDotName("dmv.UCOAllowedAttributesRule.RuleDefinition");
            _UCOAllowedAttributesRule.setDefinedIn(this);
            _UCOAllowedAttributesRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _UCOAllowedAttributesRuleOBJ.setLineNumber("90");
            addRuleDefinitionList(_UCOAllowedAttributesRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _RelatedNumbersRuleOBJ = new RuleDefinitionDMO();
            _RelatedNumbersRule = new RuleDefinition(_RelatedNumbersRuleOBJ);
            _RelatedNumbersRuleOBJ.addRuleCategory("meta.ObjectValidation");
            _RelatedNumbersRuleOBJ.setName("RelatedNumbersRule");
            _RelatedNumbersRuleOBJ.setDmdID("-479994");
            _RelatedNumbersRuleOBJ.addDescription("The RelatedNumbersRule ensures that a particular numeric\n relationship exists between two single-valued, numeric values on an object.\n An example usage might be:\n <pre>\n RelatedNumbersRuleData\n ruleName        dmvHeightGirth\n ruleTitle       Your height must exceed your girth.\n applyToClass    Person\n lhs             height\n rhs             girth\n numericRelation GT\n description     If your girth exceeds your height, you're in trouble!\n </pre>\n The rule will only test the relationship if both attributes exist; if not,\n that's okay - the rule will pass.\n <p/>\n It's a good rule of thumb to indicate the relationship you expect in the\n title of the rule since this is what will be returned in the case that \n the relationship check fails.\n <p/>\n NOTE: this rule works by implicitly converting the values of the attributes\n to type Double in order to be able to compare apples to apples. However,\n if you are dealing with large numeric values you may run into issues.");
            _RelatedNumbersRuleOBJ.addMust("dmv.lhs");
            _RelatedNumbersRuleOBJ.addMust("dmv.rhs");
            _RelatedNumbersRuleOBJ.addMust("dmv.numericRelation");
            _RelatedNumbersRuleOBJ.setDotName("dmv.RelatedNumbersRule.RuleDefinition");
            _RelatedNumbersRule.setDefinedIn(this);
            _RelatedNumbersRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _RelatedNumbersRuleOBJ.setLineNumber("135");
            addRuleDefinitionList(_RelatedNumbersRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _CheckAttributesBasedOnValueRuleOBJ = new RuleDefinitionDMO();
            _CheckAttributesBasedOnValueRule = new RuleDefinition(_CheckAttributesBasedOnValueRuleOBJ);
            _CheckAttributesBasedOnValueRuleOBJ.addRuleCategory("meta.ObjectValidation");
            _CheckAttributesBasedOnValueRuleOBJ.setName("CheckAttributesBasedOnValueRule");
            _CheckAttributesBasedOnValueRuleOBJ.setDmdID("-479993");
            _CheckAttributesBasedOnValueRuleOBJ.addDescription("The CheckAttributesBasedOnValueRule allows you to specify\n that certain optional attributes must exist (or not exist) based on the value\n of another single valued attribute in an object. This allows for finer control of must/may\n attributes based on other values in an object. An example usage (from\n the dark-matter validation schema) looks like:\n <pre>\n CheckAttributesBasedOnValueRuleData\n ruleName              dmvNoMustInExtensible\n ruleTitle             If a ClassDefinition's classType is AUXILIARY, it can't have mandatory attributes\n applyToClass          ClassDefinition\n basedOnAttribute      classType\n basedOnValue          AUXILIARY\n excludeThisAttribute  must\n description           An AUXILIARY class can be added to an object dynamically and\n  we don't allow mandatory attributes in such classes.\n </pre>\n If the basedOnAttribute doesn't exist in the object being validated, the rule does nothing.");
            _CheckAttributesBasedOnValueRuleOBJ.addMay("dmv.excludeThisAttribute");
            _CheckAttributesBasedOnValueRuleOBJ.addMay("dmv.includeThisAttribute");
            _CheckAttributesBasedOnValueRuleOBJ.addMust("dmv.basedOnAttribute");
            _CheckAttributesBasedOnValueRuleOBJ.addMust("dmv.basedOnValue");
            _CheckAttributesBasedOnValueRuleOBJ.setDotName("dmv.CheckAttributesBasedOnValueRule.RuleDefinition");
            _CheckAttributesBasedOnValueRule.setDefinedIn(this);
            _CheckAttributesBasedOnValueRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _CheckAttributesBasedOnValueRuleOBJ.setLineNumber("164");
            addRuleDefinitionList(_CheckAttributesBasedOnValueRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _OneOfTheseAttributesRequiredRuleOBJ = new RuleDefinitionDMO();
            _OneOfTheseAttributesRequiredRule = new RuleDefinition(_OneOfTheseAttributesRequiredRuleOBJ);
            _OneOfTheseAttributesRequiredRuleOBJ.addRuleCategory("meta.ObjectValidation");
            _OneOfTheseAttributesRequiredRuleOBJ.setName("OneOfTheseAttributesRequiredRule");
            _OneOfTheseAttributesRequiredRuleOBJ.setDmdID("-479992");
            _OneOfTheseAttributesRequiredRuleOBJ.addDescription("The OneOfTheseAttributesRequiredRule allows you to specify\n that one of the possible optional attributes specified must be present\n in the object being checked.\n <p/>\n If only one of the possibilities is allowed, you can specify the andOnlyOne\n flag and set it to true. In this case only one of the possibilities will be allowed.\n <p/>\n An example of this rule can be seen below.\n <pre>\n OneOfTheseAttributesRequiredRuleData\n ruleName			dmvIncludeOrExclude\n ruleTitle			At least one of the excludeThisAttribute or includeThisAttribute attributes must be specified.\n applyToClass		CheckAttributesBasedOnValueRuleData\n onePossibility		excludeThisAttribute\n onePossibility		includeThisAttribute\n </pre>");
            _OneOfTheseAttributesRequiredRuleOBJ.addMay("dmv.andOnlyOne");
            _OneOfTheseAttributesRequiredRuleOBJ.addMust("dmv.onePossibility");
            _OneOfTheseAttributesRequiredRuleOBJ.setDotName("dmv.OneOfTheseAttributesRequiredRule.RuleDefinition");
            _OneOfTheseAttributesRequiredRule.setDefinedIn(this);
            _OneOfTheseAttributesRequiredRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _OneOfTheseAttributesRequiredRuleOBJ.setLineNumber("199");
            addRuleDefinitionList(_OneOfTheseAttributesRequiredRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _PatternMatchRuleOBJ = new RuleDefinitionDMO();
            _PatternMatchRule = new RuleDefinition(_PatternMatchRuleOBJ);
            _PatternMatchRuleOBJ.addRuleCategory("meta.AttributeValidation");
            _PatternMatchRuleOBJ.setName("PatternMatchRule");
            _PatternMatchRuleOBJ.setDmdID("-479991");
            _PatternMatchRuleOBJ.addDescription("The PatternMatchRule allows you to validate that an attribute\n in an object conforms to a regex pattern that you specify. If the pattern match\n fails, the ruleTitle is used as the error message, so use a clear rule title to\n indicate the intent of the pattern match. For instance the following rule is \n applied to the names of EnumDefinitions:\n <pre>\n PatternMatchRuleData\n ruleName          dmvEnumDefinitionNameCheck\n ruleTitle         An EnumDefinition's name must end with Enum\n matchesPattern    ^.*Enum\n applyToAttribute  name\n applyToClass      EnumDefinition\n </pre>");
            _PatternMatchRuleOBJ.addMust("dmv.matchesPattern");
            _PatternMatchRuleOBJ.setDotName("dmv.PatternMatchRule.RuleDefinition");
            _PatternMatchRule.setDefinedIn(this);
            _PatternMatchRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _PatternMatchRuleOBJ.setLineNumber("227");
            addRuleDefinitionList(_PatternMatchRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _ValueLengthRuleOBJ = new RuleDefinitionDMO();
            _ValueLengthRule = new RuleDefinition(_ValueLengthRuleOBJ);
            _ValueLengthRuleOBJ.addRuleCategory("meta.AttributeValidation");
            _ValueLengthRuleOBJ.setName("ValueLengthRule");
            _ValueLengthRuleOBJ.setDmdID("-479990");
            _ValueLengthRuleOBJ.addDescription("The ValueLengthRule allows you to indicate the maximum length,\n the minimum length or both the maximum and minimum length of the String form of\n a value associated with an attribute. It works for both single valued and\n multi-valued attributes.\n <p/>\n If you have added types via the TypeDefinition mechanisms,\n you should ensure that you have overloaded the toString() method \n <pre>\n ValueLengthRuleData\n ruleName         userNameLength\n ruleTitle        The user name must be between 6 and 20 characters\n applyToAttribute userNameString\n minLength        6\n maxLength        20\n </pre>\n Or, just a minimum length:\n <pre>\n ValueLengthRuleData\n ruleName         tagLength\n ruleTitle        Tag information must be 4 characters or more.\n applyToAttribute dataTag\n applyToClass     chunkOfData\n minLength        4\n </pre>\n Or, just a maximum length:\n <pre>\n ValueLengthRuleData\n ruleName         infoLength\n ruleTitle        The info must be less than or equal to 50 characters.\n applyToAttribute info\n applyToClass     chunkOfData\n maxLength        50\n </pre>\n NOTE: If you have added types via the TypeDefinition mechanisms, you should ensure\n that you have overloaded the toString() method of the primitiveType that\n you're using.");
            _ValueLengthRuleOBJ.addMay("dmv.maxLength");
            _ValueLengthRuleOBJ.addMay("dmv.minLength");
            _ValueLengthRuleOBJ.setDotName("dmv.ValueLengthRule.RuleDefinition");
            _ValueLengthRule.setDefinedIn(this);
            _ValueLengthRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _ValueLengthRuleOBJ.setLineNumber("300");
            addRuleDefinitionList(_ValueLengthRule);

// Generated from: org.dmd.dmg.util.SchemaFormatter.getObjectAsCode(SchemaFormatter.java:585)
            RuleDefinitionDMO _ReferencedAttributeTypeRuleOBJ = new RuleDefinitionDMO();
            _ReferencedAttributeTypeRule = new RuleDefinition(_ReferencedAttributeTypeRuleOBJ);
            _ReferencedAttributeTypeRuleOBJ.addRuleCategory("meta.AttributeValidation");
            _ReferencedAttributeTypeRuleOBJ.setName("ReferencedAttributeTypeRule");
            _ReferencedAttributeTypeRuleOBJ.setDmdID("-479989");
            _ReferencedAttributeTypeRuleOBJ.addDescription("The ReferencedAttributeTypeRule allowes you to restrict the type of\n an attribute referred to by an AttributeDefinition reference. Some examples include:\n <pre>\n ReferencedAttributeTypeRuleData\n ruleName          dmvNRRApplyToAttribute\n ruleTitle         The applyToAttribute attribute in a NumericRangeRuleData instance must refer to an Integer, Long, Float or Double attribute\n applyToAttribute  applyToAttribute\n applyToClass      NumericRangeRuleData\n allowedType       Integer\n allowedType       Long\n allowedType       Float\n allowedType       Double\n </pre>\n In this case, we're restricting the applyToAttribute to be a numeric type, either Integer, Long Float or Double.\n <p/>\n You can also restrict the valueType of an attribute reference, for instance:\n <pre>\n ReferencedAttributeTypeRuleData\n ruleName          dmvLhs\n ruleTitle         The lhs attribute must be a single valued Integer, Long, Float or Double\n applyToAttribute  lhs\n applyToClass      RelatedNumbersRuleData\n allowedType       Integer\n allowedType       Long\n allowedType       Float\n allowedType       Double\n allowedValueType  SINGLE\n </pre>\n Here, we're indicating that the lhs (left hand side) attribute must be single valued.");
            _ReferencedAttributeTypeRuleOBJ.addMay("dmv.allowedType");
            _ReferencedAttributeTypeRuleOBJ.addMay("dmv.allowedValueType");
            _ReferencedAttributeTypeRuleOBJ.setDotName("dmv.ReferencedAttributeTypeRule.RuleDefinition");
            _ReferencedAttributeTypeRule.setDefinedIn(this);
            _ReferencedAttributeTypeRuleOBJ.setFile("/src/org/dmd/dmv/shared/dmdconfig/v0dot1/rules.dmd");
            _ReferencedAttributeTypeRuleOBJ.setLineNumber("366");
            addRuleDefinitionList(_ReferencedAttributeTypeRule);

    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpInitFunction(SchemaFormatter.java:313)
    private void initDSDModules() throws DmcValueException {
    }

    // Generated from: org.dmd.dmg.util.SchemaFormatter.dumpSchema(SchemaFormatter.java:272)

    @Override
    public synchronized DmvSchemaAG getInstance() throws DmcValueException{
    	   if (instance == null)
    		   initialize();
    	   return(instance);
    }
}

