//ComplexTypeDefinition
//name			Field
//// fieldSeparator - no separator, so space is used
//field				TypeDefinition		type        The type of the field
//field			String         name        The name of the field
//field			String         description The description of the field
//description     The Field complex type is used to describe the fields of a ComplexTypeDefinition.
// A Field attribute is comprised of three chunks of text, the Field type
// which is a reference to any valid schema type, a name for the field and
// a brief description of the field. A Field specification might appear 
// as follows:
// <pre>
// field String whatzits The whatzits field indicates the number of whatzits per square kilometer.
// </pre>
// In this case, the type is String, the name of the field is whatzits and that's 
// followed by the description.

ComplexTypeDefinition
name			Part
// fieldSeparator - no separator, so space is used
requiredPart	TypeDefinition	type        "The type of the Part"
requiredPart	String			name        "The name of the Part"
requiredPart	String			description "The description of the Part"  quoted=true
//optionalPart	String			label 		"The label of the Part"			quoted=true
optionalPart	Boolean			quoted 		"Indicates if the Part allows for a quoted value or if it's intended to be a single token"
optionalPart	Boolean			multivalued	"Indicates if the Part is multivalued. This can be specified on any optionalPart
 but can only be used on a requiredPart if it's the only part in the ComplexTypeDefinition"
optionalPart	Boolean			weakref		"Indicates that a reference type is weak i.e. that no exception will be thrown if the reference can't be resolved - this is only applicable to optional Parts."
optionalPart	Boolean			greedy		"This flag can only be used on a Part composed of requiredParts and only on the last requiredPart. It is not compatible
 with other flags such as quoted, multivalued or weakref. It allows for a set of required parts followed by chunk of text that extends to the end of the attribute value."
description     The Part complex type is used to describe the Parts of a ComplexTypeDefinition.
// NOTE: IF YOU ADD A NEW PART TO PART, UPDATE MetaComplexTypeFormatter

ComplexTypeDefinition
name			NameValuePair
requiredPart	String			name		"The name of the value"
requiredPart	String			value		"The value" quoted=true
description		The NameValuePair type provides a general extensibility mechanism for DMOs
 by allowing for the addition of name value pairs to an object. This is a quick and dirty
 alternative to using auxiliary classes to extend an object especially the DSDefinition object
 that provides a common base class for all domain specific definitions.

ComplexTypeDefinition
name			SchemaAndReason
requiredPart	String			schema		"The fully qualified name of the schema to load"
requiredPart	String			hint		"A hint as to why the schema is required" quoted=true
description		The SchemaAndReason type is used when schemas are loaded dynamically by
 some piece of software. For documentation purposes, it's useful to know why the schema
 is being loaded, since the class name may not informative enough.

ComplexTypeDefinition
name			Example
fieldSeparator	:
requiredPart	String			type		"The type of the example - this is just a single token string that gives a
 hint to your example formatter of what to do with the content"
requiredPart	String			title		"A title for the example - this doesn't have to be used by your example formatter"
requiredPart	String			content		"The textual content of the example - this can be anything you want" greedy=true
description If you want to get rid of the &#92;n use: .replaceAll("&#92;&#92;&#92;&#92;n","&#92;&#92;&#92;n")

ComplexTypeDefinition
name			Optimize
fieldSeparator	:
requiredPart	String			what	"A description of the change to be made"
optionalPart	String			who		"Who made the suggestion" quoted=true
optionalPart	String			when	"A suggested timeframe for the change" quoted=true
optionalPart	Concinnity		why		"A suggested timeframe for the change" weakref=true multivalued=true
description		Allows for capture of optimization notes.
example			code : Specifying an Optimization/Improvement : 
 <pre>
 optimize We could improve compression if we indicated the blah, blah, blah who="Me" when="release 5" why="reduce bandwidth charges"
 </pre>

ComplexTypeDefinition
name			DmwTypeToWrapperType
requiredPart	String          dmwType     "The Dark Matter Wrapper type"
requiredPart	WrapperTypeEnum wrapperType "The type of wrapper to be used in this context"
description The DmwTypeToWrapperType complex type is used as the type of
 the dmwWrapperType attribute which is used to indicate the type of wrappers
 to generate for a class in a particular generation context.

ComplexTypeDefinition
name			RuleParam
fieldSeparator  :
requiredPart	String         importStatement "The import for the type of parameter"
requiredPart	String         genericArgs     "The generic arguments associated with this parameter" quoted=true
requiredPart	String         name            "The name of the parameter"
requiredPart	String         description     "A description of the parameter"
description The RuleParam type is used to succintly describe a parameter
 to be supplied to a rule when it is executed.
