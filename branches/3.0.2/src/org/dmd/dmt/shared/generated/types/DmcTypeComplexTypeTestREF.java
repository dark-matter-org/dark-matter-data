package org.dmd.dmt.shared.generated.types;

import java.io.Serializable;
import org.dmd.dmc.DmcInputStreamIF;
import org.dmd.dmc.DmcOutputStreamIF;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmt.shared.generated.dmo.ComplexTypeTestDMO;

/**
 * This is the generated DmcAttribute derivative for values of type ComplexTypeTest
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoTypeFormatter.dumpNormalREFType(DmoTypeFormatter.java:197)
 */
@SuppressWarnings("serial")
abstract public class DmcTypeComplexTypeTestREF extends DmcAttribute<ComplexTypeTestDMO> implements Serializable {

    public DmcTypeComplexTypeTestREF(){
    }

    public DmcTypeComplexTypeTestREF(DmcAttributeInfo ai){
        super(ai);
    }

    protected ComplexTypeTestDMO typeCheck(Object value) throws DmcValueException {
        if (value instanceof ComplexTypeTestDMO)
            return((ComplexTypeTestDMO)value);
        
        throw(new DmcValueException("Object of class: " + value.getClass().getName() + " passed where object compatible with ComplexTypeTestDMO expected."));
    }

    @Override
    public void serializeValue(DmcOutputStreamIF dos, ComplexTypeTestDMO value) throws Exception {
        value.serializeIt(dos);
    }

    @Override
    public ComplexTypeTestDMO deserializeValue(DmcInputStreamIF dis) throws Exception {
        ComplexTypeTestDMO rc = (ComplexTypeTestDMO)dis.getDMOInstance(dis);
        rc.deserializeIt(dis);
        return(rc);
    }

    @Override
    public ComplexTypeTestDMO cloneValue(ComplexTypeTestDMO value){
        return((ComplexTypeTestDMO)value.cloneIt());
    }

}
