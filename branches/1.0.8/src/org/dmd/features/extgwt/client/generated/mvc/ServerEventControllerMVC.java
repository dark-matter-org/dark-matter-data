package org.dmd.features.extgwt.client.generated.mvc;

import com.extjs.gxt.ui.client.mvc.Controller;
import com.extjs.gxt.ui.client.mvc.Dispatcher;
import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.event.EventType;
import com.extjs.gxt.ui.client.Registry;
import org.dmd.features.extgwt.client.ApplicationIF;
import org.dmd.features.extgwt.client.extended.ServerEventController;

/**
 * The ServerEventController controller is used to establish the event
 * connection to the server. By defining MvcServerEvents and indicating that
 * your Controllers/Views handle server events, they will be automatically
 * registered with the ServerEventController to receive server events.
 * <P>
 * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.features.extgwt.extended.MvcController.initCodeGenInfo(MvcController.java:112)
 */
abstract public class ServerEventControllerMVC extends Controller {

    // Resources
    protected ApplicationIF application;
    protected ServerEventController mvcServerEventController;

    // Events
    public EventType MvcInit;
    public EventType MvcInitEventFramework;

    // org.dmd.features.extgwt.extended.MvcController.initLocalVariables(MvcController.java:444)

    // View(s)

    protected ServerEventControllerMVC(){
        // Resolve our events
        MvcInit = getApplication().getEvent("mvc.init");
        MvcInitEventFramework = getApplication().getEvent("mvc.init.eventFramework");

        // org.dmd.features.extgwt.util.MvcGenerator.dumpController(MvcGenerator.java:177)
        registerEventTypes(MvcInit);
        registerEventTypes(MvcInitEventFramework);

        // Instantiate our views

        // Instantiate our multiviews

        // Instantiate our actions

        // Instantiate our menus

        // Instantiate our menu items

        // Instantiate our menu separators
    }

    /**
     * Derived classes must override this method to perform their initialization behaviour.
     */
    abstract protected void initialize();

    // org.dmd.features.extgwt.extended.MvcController.initHandleEventFunction(MvcController.java:538)
    public void handleEvent(AppEvent event) {
        EventType type = event.getType();
        if (type == MvcInit) {
            handleMvcInitEvent(event);
        }
    }

    /**
     * The derived class must overload this method to handle the mvc.init event.
     * <P>
     * The mvc init event can be injected to cause initialization of the Dark
     * Matter MVC framework elements.
     */
    abstract protected void handleMvcInitEvent(AppEvent event);

    /**
     * @return This is the universal handle to the application.
     */
    public ApplicationIF getApplication(){
        if (application == null)
            application = (ApplicationIF) Registry.get("application");
        return(application);
    }

    /**
     * @return Handle to the server event controller.
     */
    public ServerEventController getMvcServerEventController(){
        if (mvcServerEventController == null)
            mvcServerEventController = (ServerEventController) Registry.get("mvc.serverEventController");
        return(mvcServerEventController);
    }

    /**
     * Adds the MvcServerEventController item to the Registry.
     * Handle to the server event controller.
     */
    protected void registerMvcServerEventController(ServerEventController item){
            Registry.register("mvc.serverEventController", item);
    }

    public void dispatchMvcInitEventFramework(){
        Dispatcher.get().dispatch(MvcInitEventFramework);
    }

}
