
RuleDefinition
name			AllowedAttributesRule
dmdID			1
ruleCategory	ObjectValidation
//ruleCategory	ObjectModifierValidation
description		The AllowedAttributesRule will determine whether or not the 
 attributes of a DMO conform to the must/may specification of its class definition.
 For classes of type EXTENSIBLE only the must have attributes are checked.
 <p/>
 Regardless of the environment in which you are running, you must ensure that the
 DmcOmni has been loaded with the appropriate schema. If you are using the Dark Matter
 Model View Whatever (MVW) project for GWT, this aspect is taken care of automatically.
 <p/>
 Since this is a GLOBAL class rule, there will only ever be a single instance of
 this rule created as part of the dmv schema.

AllowedAttributesRuleData
ruleName    dmvAllowedAttributes
ruleTitle 	Validate allowed attributes on objects.
description	Ensures that must/may attribute rules are followed.

///////////////////////////////////////////////////////////////////////////////

RuleDefinition
name			InitRule
dmdID			2
ruleCategory	Initialization
isExtensible	true
description		The InitRule allows you to specify attribute values for a 
 newly created object or an object read from file or received in a CreateRequest
 (for instance). The InitRule will only set the values of attributes that are
 missing from the object; existing attributes are not alterred. An example
 usage might be:
 <p/>
 <pre>
 InitRuleData
 ruleName     <schema>InitX
 ruleTitle    Initialize the X class
 applyToClass X
 attributeA   some value
 attributeB   42
 attributeC   something
 attributeC   something else
 description  This provides a good initial setup for X objects. Other setups
  may be required in other circumstances.
 </pre>

///////////////////////////////////////////////////////////////////////////////
 
RuleDefinition
name			IntegerRangeRule
dmdID			3
ruleCategory	AttributeValidation
//ruleCategory	AttributeModifierValidation
must			irrMinimum
must			irrMaximum
description		The IntegerRangeRule ensures that an Integer attribute has a value that falls
 within a given range. The irrMinimum must be less than the irrMaximum. An example usage
 might be:
 <p/>
 <pre>
 IntegerRangeRuleData
 ruleName         <schema>RangeCheckY
 ruleTitle        Attribute Y in range 1-10
 applyToAttribute Y
 irrMinimum       1
 irrMaximum       10
 description      This constraint is required because blah, blah blah.
 </pre>

///////////////////////////////////////////////////////////////////////////////

RuleDefinition
name			UCOAllowedAttributesRule
dmdID			4
ruleCategory	UCOValidation
description		The UCOAllowedAttributesRule will determine whether or not the 
 attributes of a DmcUncheckedObject conform to the must/may specification of its
 class definition. For classes of type EXTENSIBLE only the must have attributes are checked.

///////////////////////////////////////////////////////////////////////////////

RuleDefinition
name			AttributeTypeRule
dmdID			5
ruleCategory	AttributeValidation
must			allowedType
description		The AttributeTypeRule allowes you to restrict the type of
 an attribute of a particular AttributeDefinition reference.

///////////////////////////////////////////////////////////////////////////////

RuleDefinition
name			RelatedNumbersRule
dmdID			6
ruleCategory	ObjectValidation
//ruleCategory	ObjectModifierValidation
must			lhs
must			rhs
must			numericRelation
description		The RelatedNumbersRule ensures that a particular numeric
 relationship exists between two single-valued, numeric values on an object.
 An example usage might be:
 <pre>
 RelatedNumbersRuleData
 ruleName        dmvHeightGirth
 ruleTitle       Your height must exceed your girth.
 applyToClass    Person
 lhs             height
 rhs             girth
 numericRelation GT
 description     If your girth exceeds your height, you're in trouble!
 </pre>

AttributeTypeRuleData
ruleName			dmvLhs
ruleTitle           The lhs attribute can be Integer, Float or Double
applyToAttribute	lhs
applyToClass 		RelatedNumbersRuleData
allowedType 		Integer
allowedType 		Float
allowedType 		Double

AttributeTypeRuleData
ruleName			dmvRhs
ruleTitle			The rhs attribute can be Integer, Float or Double
applyToAttribute	rhs
applyToClass 		RelatedNumbersRuleData
allowedType 		Integer
allowedType 		Float
allowedType 		Double

///////////////////////////////////////////////////////////////////////////////

RuleDefinition
name				CheckAttributesBasedOnValueRule
dmdID				7
ruleCategory		ObjectValidation
//ruleCategory		ObjectModifierValidation
must				basedOnAttribute
must				basedOnValue
may					excludeThisAttribute
may					includeThisAttribute
description			The CheckAttributesBasedOnValueRule allows you to specify
 that certain optional attributes must exist (or not exist) based on the value
 of another attribute in an object. This allows for finer control of must/may
 attributes based on enumerated values in an object. An example usage might look like:
 <pre>
 CheckAttributesBasedOnValueRuleData
 ruleName             <schema>ExcludeSunRoof
 ruleTitle            The sun roof option is not avilable on four cyclinder vehicles.
 applyToClass         Car
 basedOnAttribute     engineType
 basedOnValue         FOURCYLINDER
 excludeThisAttribute sunRoofOption
 </pre>

CheckAttributesBasedOnValueRuleData
ruleName				dmvNoMustInExtensible
ruleTitle				If a ClassDefinition's classType is AUXILIARY, it can't have mandatory attributes
applyToClass			ClassDefinition
basedOnAttribute		classType
basedOnValue			AUXILIARY
excludeThisAttribute	must
description				An AUXILIARY class can be added to an object dynamically and
 we don't allow mandatory attributes in such classes.

///////////////////////////////////////////////////////////////////////////////
 
RuleDefinition
name				OneOfTheseAttributesRequiredRule
dmdID				8
ruleCategory		ObjectValidation
must				onePossibility
may					andOnlyOne
description			The OneOfTheseAttributesRequiredRule allows you to specify
 that one of the possible optional attributes specified must be present
 in the object being checked.
 <p/>
 If only one of the possibilities is allowed, you can specify the andOnlyOne
 flag and set it to true. In this case only one of the possibilities will be allowed.

OneOfTheseAttributesRequiredRuleData
ruleName			dmvIncludeOrExclude
ruleTitle			At least one of the excludeThisAttribute or includeThisAttribute attributes must be specified.
applyToClass		CheckAttributesBasedOnValueRuleData
onePossibility		excludeThisAttribute
onePossibility		includeThisAttribute

///////////////////////////////////////////////////////////////////////////////

RuleDefinition
name				PatternMatchRule
dmdID				9
ruleCategory		AttributeValidation
must				matchesPattern
description			The PatternMatchRule allows you to validate that an attribute
 in an object conforms to a regex patern that you specify. If the pattern match
 fails, the ruleTitle is used as the error message, so use a clear rule title to
 indicate the intent of the pattern match. For instance the following rule is 
 applied to the names of EnumDefinitions:
 <pre>
 PatternMatchRuleData
 ruleName			dmvEnumDefinitionNameCheck
 ruleTitle			An EnumDefinition's name must end with Enum
 matchesPattern		^.*Enum
 applyToAttribute	name
 applyToClass		EnumDefinition
 </pre>

PatternMatchRuleData
ruleName			dmvEnumDefinitionNameCheck
ruleTitle			An EnumDefinition's name must end with Enum
matchesPattern		^.*Enum
applyToAttribute	name
applyToClass		EnumDefinition
description			This is really just a convention, but the generation of
 autogenerated static types depends on knowing if a type is an enum so that
 the enum can be imported in the static implementation. The dumpSTATICType()
 method in GenUtility checks to see if the type ends with Enum and adds
 the appropriate import if that's the case.