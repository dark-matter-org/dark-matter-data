Serialization
-------------

Move toward GPB approach of defining attribute identifiers within the context of the class.

Have to have a migration mechanism that allows for shift from existing serialization mechanism
to the new approach. This would include:
- regenerating the ClassDefinitions to use the new attribute specification mechanism
  that provides the identifier to be associated with attribute e.g.
  
  ClassDefinition
  name X
  must A
  may  B
  may  C
  
  ClassDefinition
  name X
  must A 1
  may  B 2
  may  B 3

- 


Classes will still require unique identifiers within a .dms - however, move towards a mechanism 
that allows for dopplering of the identifier space i.e. be able to set the base identifier of
a schema at run time. 

To handle auxiliary classes, we'll encode each class in a separate chunk e.g.
[number of classes] [class 1] [attributes for class1] [class2] [attributes for class2] etc.

Internally, the DmcObject will maintain a separate hash of attributes for each class. this
allows us to still use integers as the hash key. 

This might make things tricky with rules for auxiliary extended objects?

-------------------------------------------------------------------------------

Need to generate the schema handling infrastructure from the metaschema!

May need a special mode for the DmwGenerator or something.

--------------------------------------------------------------------------------

Need rules for the DMW space - see dmv rule definitions file for problem





-------------------------------------------------------------------------------

Schema management

- need to implement the doppler mechanisms so that the identifier space of a schema
  can be shifted as required to prevent clashes
  
- generated schemas shouldn't need any "processing" to generate internal types, classes
  or anything else. After all related schemas are loaded, they should only require
  resolution
  
-------------------------------------------------------------------------------
Repositories

Mapping to:
MySQL
MongoDB
Neo4J
LDAP


-------------------------------------------------------------------------------
