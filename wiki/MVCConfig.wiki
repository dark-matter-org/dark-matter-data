#summary An Overview of the Model View Controller Configuration Files.

= Generating a GXT MVC Application =

== MVC Config File ==

Files ending with `.mvc` are MVC config files and contain a variety of DMOs defined by the extgwt schema. There are two broad categories of configuration, structural and behavioral; an over is given of each category in the following tables.

=== Structural Configuration ===

The following objects help define the overall structure of your application. The details of each object is dealt with on its on page.

<table width="820">

<tr>
<td width="120" valign="top">
*`MvcConfig`*
</td>
<td>
The [MVCConfig MvcConfig] class is stored in a file with a .mvc suffix and used to define the set of files that hold the definitions of `MvcEvents`, `MvcControllers` and `MvcViews`.

Based on the definition of these objects, we can generate base classes for the com.extjs.gxt.ui.client.mvc.Controller an com.extjs.gxt.ui.client.mvc.View that provide some common code required by these classes.
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcEvent`*
</td>
<td>
The [MVCEvent MvcEvent] class allows for the definition of events that are  handled or emitted by Views and Controllers. By providing a description, you help to document your application. 
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcRegistryItem`*
</td>
<td>
The [MVCRegistryItem MvcRegistryItem] defines something that's stored in the Registry.
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcController`*
</td>
<td>
The [MVCController MvcController] class allows for the definition of controllers. The abstract controller generated by this definition will automatically register for the events you specify via the handlesEvent attribute. Likewise, it will have a standard handleEvent() method that forwards typed events to abstract handler functions that you'll have to write.
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcView`*
</td>
<td>
The [MVCView MvcView] class allows for the definition of views. MvcView
 instance are derived from the ExtGWT View class.
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcMultiView`*
</td>
<td>
The MvcMultiView provides the same functionality as an MvcView, but is intended to allow for the concept of a controller controlling several views of the same type of object. For instance, if you several views of different objects, you would want to be able have a different instance of the view for each object.
</td>
</tr>


<tr>
<td width="120" valign="top">
*`MvcApplication`*
</td>
<td>
The MvcApplication class allows for the definition of an application
 that makes uses of the ExtGWT MVC framework. It pulls together the functionality provided by a set of [MVCController MvcControllers]. It also provides the overall logic for your application.
</td>
</tr>

</table>

=== Behavioral Configuration ===

<table width="820">

<tr>
<td width="120" valign="top">
*`MvcAction`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcMenuBar`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcToolBar`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcSubMenu`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcPopupMenu`*
</td>
<td>
The `MvcPopupMenu` class is meant to allow for the definition of menus that can be popped up on a variety components, for instance tree nodes and table rows.

Although implemented as standard com.extjs.gxt.ui.client.widget.menu.Menu instances, the display of popup menus is controlled by the MenuController infrastructure.
</td>
</tr>

<tr>
<td width="120" valign="top">
*`MvcBackgroundMenu`*
</td>
<td>
 Column 2
</td>
</tr>
</table>