#summary A discussion of Events and Views in Model View Whatever.

= Events & Views: Introduction =

There's an awful lot of syntactic cruft surrounding Model View Controller, Model View Presenter, Model View Activity Place [http://code.google.com/webtoolkit/doc/latest/DevGuideMvpActivitiesAndPlaces.html#ClientFactory ClientFactory] [http://code.google.com/webtoolkit/doc/latest/DevGuideRequestFactory.html RequestFactory] etc. etc. etc.

That's why I've called this approach Model View Whatever.

The two things that are common across all of these approaches are Model (which we've defined using Dark Matter Schema) and Views (which we'll discuss shortly) and frankly, I don't care what you call the rest of it; use "Whatever" nomenclature makes sense in your particular development activity.

The goal of making your software more easily testable is a noble goal; this is primarily achieved in the various GWT approaches to web application/site structure by defining interfaces for everything. The approach obviously has its merits, but it takes a while to sift through the various examples and develop a clear idea of all the bits and pieces you need to define to make a real, functional web application/site using these approaches.

The focus of the next few sections to is provide a solid conceptual foundation of the role that Events and Views play in the overall architecture of an application and how they relate to the Model.

= Events: Local and Broadcast =

Events are the driving force behind any significantly complex system. The basic role of events is described  in the [http://code.google.com/webtoolkit/articles/mvp-architecture.html#events Events and the event Bus] section of the [http://code.google.com/webtoolkit/articles/mvp-architecture.html MVP overview]

One import note regarding events is nicely described:
<table width="600">
<tr>
<td width="20" valign="top">
</td>
<td valign="top">
_It's important to keep in mind that not all events should be placed on the Event Bus. Blindly dumping all of the possible events within your app on the Event Bus can lead to chatty applications that get bogged down in event handling. Not to mention, you'll find yourself writing a fair amount of boilerplate code to define, source, sink, and act upon these events._

</td>
</tr>
</table>
What this statement implies is that events have an implied "scope" i.e. some events are only meant for immediate handling by some entity (controller, presenter, activity, whatever) that is directly related to a View, while other events are more global in scope i.e. meant to be broadcast on the Event Bus.

MVW makes a clear distinction between these types of events and refers to them as *Local Events* and *Broadcast Events*. It is always clear what the scope of an event is when you're defining different aspects of the MVW configuration.
<table border=0 width="100%">
  <tr>
    <td><img width="500" src="http://www.dark-matter-data.org/images/mvwEvents.png" />

</td>
  </tr>
</table>

Now, although we refer to Local Events, it should be understood that Local Events are not full fledged `GwtEvents`, they are, in fact, merely method signatures in an interface. Only Broadcast Events are generated as `GwtEvents`.

This should become more clear as we define views required for our Contacts example.

= Views =

A View is some representation of one or more instances of data objects as defined by a model.

Users may interact with the View and cause various events to take place. Some of these events are data related e.g. modify this data, create some new data, delete this data, I've selected this data etc.

Other events generated by Views influence the flow of the overall user interaction e.g. close this View, open a different View, navigate to another place etc.

I don't think there's anything too controversial in those three statements, or, maybe I'm wrong, maybe I'm completely off base. Regardless, I'm going to proceed on the assumption that all is well.