#summary An overview of the MVW event architecture.

= MVW Events =

MVW Events are just GWT Events, but there is a great deal of [http://www.shakespeare-navigators.com/hamlet/HamletNotes22.html#393 buzz, buzz] surrounding events and the latest approaches to GWT application architecture.

So, stepping back and looking at things in a generic way, here's the event architecture used by Model View Whatever.

== Basic Definition of Terms ==

When discussing MVW Events, the following terms will be used:

<table width="650">

<tr>
<td width="150" valign="top">
*Local Event*
</td> 
<td valign="top">
is an event that implies the definition of an event handler interface. It is expected that any component that wants to handle the event must implement the event handler interface.
</td>
</tr>

<tr>
<td valign="top">
*Broadcast Event*
</td>
<td valign="top">
is an event that is broadcast on the Event Bus
</td>
</tr>

<tr>
<td valign="top">
*Producer*
</td>
<td valign="top">
fires events.
</td>
</tr>

<tr>
<td valign="top">
*Consumer*
</td>
<td valign="top">
handles events.
</td>
</tr>

<tr>
<td valign="top">
*Prosumer*
</td>
<td valign="top">
both fires and handles events.
</td>
</tr>

</table>

So, the basic conceptual model of MVW Events is:

<img src="http://www.dark-matter-data.org/images/mvwEvents.png" />

== Event Channels ==

There are times when you want to have a common set of events that indicate that something of overall significance has occurred; that's where the Event Channel concept comes in handy. Event Channels result in the generation of abstract base Events/Handlers that share some characteristic.

Conceptually, you can view this as:

<img src="http://www.dark-matter-data.org/images/mvwEventChannels.png" />


An excellent example of this is object selection and context sensitive operations. Context is often 

