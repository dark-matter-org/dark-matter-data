#summary An overview of the Dark Matter Protocol.

<wiki:toc />

= The Dark Matter Protocol =

Many of the interfaces to data that I've seen for applications, web and desktop alike, have been ad hoc in nature. When you access data in this way, the interface tends to grow in an organic way and access methods tend to follow the whim of the individual designers who work on the project.

Some will argue that this is the appropriate way to approach interface design; that you're dealing with an object oriented system and you should name your methods according to their purpose to make things more clearly understandable. On this topic, you will get no argument from me, I like well designed, well named interfaces.

However, when dealing with data, it's useful to have a clear set of standard interfaces to perform CRUDE operations - see the [DMDOverview#It_Starts_with_a_Model Dark Matter Overview] for a definition of CRUDE. The Dark Matter Protocol provides that standard interface to data, as well to the events associated with the data and being able to trigger behavior against your objects.

The protocol is composed of the following messages:

<table width="820">

<tr>
<td width="120" valign="top">
*`GetRequest`*
*`GetResponse`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td valign="top">
*`SetRequest`*
*`SetResponse`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td valign="top">
*`CreateRequest`*
*`CreateResponse`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td valign="top">
*`DeleteRequest`*
*`DeleteResponse`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td valign="top">
*`ActionRequest`*
*`ActionResponse`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td valign="top">
*`NotifyRequest`*
*`NotifyResponse`*
</td>
<td>
 Column 2
</td>
</tr>

<tr>
<td valign="top">
*`DMPEvent`*
</td>
<td>
 Column 2
</td>
</tr>

</table>

== The `Request` ==