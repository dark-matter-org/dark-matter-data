#summary An overview of the Dark Matter Protocol.

<wiki:toc />

= The Dark Matter Protocol =

Many of the interfaces to data that I've seen for applications, web and desktop alike, have been ad hoc in nature. When you access data in this way, the interface tends to grow in an organic way and access methods tend to follow the whim of the individual designers who work on the project.

Some will argue that this is the appropriate way to approach interface design; that you're dealing with an object oriented system and you should name your methods according to their purpose to make things more clearly understandable. On this topic, you will get no argument from me, I like well designed, well named interfaces.

However, when dealing with data, it's useful to have a clear set of standard interfaces to perform CRUDE operations - see the [DMDOverview#It_Starts_with_a_Model Dark Matter Overview] for a definition of CRUDE. The Dark Matter Protocol provides that standard interface to data, as well to the events associated with the data and being able to trigger behavior against your objects.

As mentioned in [DMDGoalsAndPhilosophy#Manipulate_Your_Data_in_a_Rational_Way Goals & Philosophy] page, the Dark Matter Protocol is based on the [http://en.wikipedia.org/wiki/Common_management_information_protocol Common Management Information Protocol] (CMIP). Although CMIP and the [http://en.wikipedia.org/wiki/Open_Systems_Interconnection Open Systems Interconnection] (OSI) intiative of which it was a part are now pretty much obsolete, the basic concepts of CMIP remain quite valid.

[http://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Don.27t_Panic DON'T PANIC!] The Dark Matter Protocol IS NOT AN IMPLEMENTATION OF CMIP!

"Using concepts from" and "implementation of" are two different things. Just so that we're clear. 
 

The protocol is composed of the following messages:

<table width="820">

<tr>
<td width="140" valign="top">
*`GetRequest`*
*`GetResponse`*
</td>
<td valign="top">
The `GetRequest` provides the `R` part of `CRUDE` i.e. the Retrieval of one or more [DMOOverview DMOs].
</td>
</tr>

<tr>
<td valign="top">
*`SetRequest`*
*`SetResponse`*
</td>
<td valign="top">
The `SetRequest` provides the `U` part of `CRUDE` and lets you Update the attributes of one or more [DMOOverview DMOs].
</td>
</tr>

<tr>
<td valign="top">
*`CreateRequest`*
*`CreateResponse`*
</td>
<td valign="top">
The `CreateRequest` provides, you guessed it, the `C` part of `CRUDE` i.e. the ability to Create a new object.
</td>
</tr>

<tr>
<td valign="top">
*`DeleteRequest`*
*`DeleteResponse`*
</td>
<td valign="top">
The `DeleteRequest` allows for the Deletion of one or more objects. That's the `D` part of `CRUDE`, for those who may have missed it ;-)
</td>
</tr>

<tr>
<td valign="top">
*`ActionRequest`*
*`ActionResponse`*
</td>
<td valign="top">
Here's your opportunity to get "organic" and trigger behaviour on objects based on your previously defined [DMSActionDefinition ActionDefinitions]. You are free to name actions whatever you want so that you can put your stamp of individuality on your protocol.
</td>
</tr>

<tr>
<td valign="top">
*`NotifyRequest`*
*`NotifyResponse`*
</td>
<td valign="top">
The `NotifyRequest` allows you to register for events that indicate when [DMOOverview DMOs] are created, deleted or modified.
</td>
</tr>

<tr>
<td valign="top">
*`DMPEvent`*
</td>
<td valign="top">
The DMPEvent is an autonomous notification of creation of, deletion of, or modifications to [DMOOverview DMOs]. This is also the `E` part of `CRUDE`, but I've named it DMPEvent so that people don't get it confused with all of the other "Event" classes out there. So many events! So few names for them!
</td>
</tr>

</table>

== The `Request` and `Response` Base Classes ==