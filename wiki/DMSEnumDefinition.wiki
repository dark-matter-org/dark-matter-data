#summary The Dark Matter Schema EnumDefinition

= Enum Definitions =

Enums are a very useful aspect of the Java language and Dark Matter provides a standard way to define them and generate an Enum that has some additional useful methods and mechanisms.

An example enum definition:

{{{
EnumDefinition
name         ColumnLayoutEnum
enumValue    1 ONE Indicates a single column layout.
enumValue    2 TWO Indicates two column layout.
enumValue    3 THREE Indicates a three column layout.
description  The ColumnLayoutEnum indicates how many columns a portal should have.
}}}


{{{
import java.util.*;

import org.dmd.dmc.DmcEnumIF;

/**
 * The ColumnLayoutEnum indicates how many columns a portal should have.
 * <P>
 * Generated from the portlets schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.dms.util.DmoEnumFormatter.dumpEnum(DmoEnumFormatter.java:100)
 */
public enum ColumnLayoutEnum implements DmcEnumIF
{
    ONE(1,"Indicates a single column layout."),

    TWO(2,"Indicates two column layout."),

    THREE(3,"Indicates a three column layout.");

    // Maps our integer value to the enumeration value
    private static final Map<Integer,ColumnLayoutEnum> lookup = new HashMap<Integer,ColumnLayoutEnum>();

    static {
        for(ColumnLayoutEnum s : EnumSet.allOf(ColumnLayoutEnum.class))
            lookup.put(s.intValue(), s);
    }

    // Maps our enumeration (string) value to the enumeration value
    private static final Map<String,ColumnLayoutEnum> lookupString = new HashMap<String, ColumnLayoutEnum>();

    static {
        for(ColumnLayoutEnum s : EnumSet.allOf(ColumnLayoutEnum.class))
            lookupString.put(s.name(), s);
    }

    // Our current value as an int - normally, this isn't available in an enum
    private int ival;

    // Our current display value as a String
    private String dval;

    /**
     * This private constructor allows us to access our int value when required.
     */
    private ColumnLayoutEnum(int i, String d){
        ival = i;
        dval = d;
    }

    /**
     * Returns the value of this enum value as an int.
     */
    public int intValue(){
        return(ival);
    }

    /**
     * Returns the display value of this enum value as a String.
     */
    public String displayValue(){
        return(dval);
    }

    /**
     * Returns the enum value of the specified int or null if it's not valid.
     */
    public static ColumnLayoutEnum get(int code) {
        return(lookup.get(code));
    }

    /**
     * Returns a value for this enum or throws an exception if the String value isn't
     * a valid member of this enum.
     */
    public static ColumnLayoutEnum get(String str) {
        return(lookupString.get(str));
    }

}
}}}