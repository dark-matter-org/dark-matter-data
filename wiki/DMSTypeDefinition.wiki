#summary The Dark Matter Schema TypeDefinition

<font color="#6a6a6a">
= Type Definitions =
</font>
The `TypeDefinition` forms the heart of all data representation in Dark Matter and, whether or not you need to define your own types, deserves a a bit of your attention. If you don't give a rat's ass about implementation related stuff, jump straight to the [WikiSyntax#Built_in_types Built in Types] section.


<font color="#9a9a9a">
== Built in Types ==
</font>



----
=== Basic Types ===

These should be pretty self explanatory.

<table width="100%">
<tr>
<td> *Boolean* </td>
<td> `java.lang.Boolean` </td>
</tr>

<tr>
<td> *Date* </td>
<td> `java.lang.Date` </td>
</tr>

<tr>
<td> *Double* </td>
<td> `java.lang.Double` </td>
</tr>

<tr>
<td> *Float* </td>
<td> `java.lang.Float` </td>
</tr>

<tr>
<td> *Integer* </td>
<td> `java.lang.Integer` </td>
</tr>

<tr>
<td> *Long* </td>
<td> `java.lang.Long` </td>
</tr>

<tr>
<td width="100"> *String* </td>
<td> `java.lang.String` </td>
</tr>

</table>

----
=== Other Primitive Types ===

This section lists some types that are primitive in nature and used to support various various capabilities within the Dark Matter Framework. Many of these types are pretty esoteric, so don't worry if the reason for the type escapes you!
<table>

<tr>
<td valign="top"> *`DmcObject`* </td>
<td valign="top"> `org.dmd.dmc.DmcObject`

When you want to hold values which are [DMOOverview DMOs] themselves, you use the `DmcObject` type. This is used in places like the [DMPGetRequest DMP Get Response] object to return a set of objects.
</td>
</tr>

</table>



----
=== Name Types ===

[DMONaming DMO Naming] is a fundamental concept in Dark Matter and, since naming is very application specific, these types are merely examples of naming mechanisms. All values associated name types must be derived from the [http://code.google.com/p/dark-matter-data/source/browse/trunk/%20dark-matter-data/dark-matter-data/src/org/dmd/dmc/DmcObjectName.java DmcObjectName] class which provides a standard interface for all names.

Another standard base for naming is the `DmcHierarchicObjectName`. This is derived from `DmcObjectName` and adds the concept of being able to get the name of a parent object. This is especially useful when representing hierarchic data relationships.

<table>

<tr>
<td valign="top"> *`DotName`* </td>
<td valign="top"> `org.dmd.dmc.types.DotName` derived from `DmcHierarchicObjectName`

Dot names are a fairly common naming mechanism that includes hierarchy in the structure of a name. The `DotName` type lets you easily represent names of this type. If you a name of the form `grandparent.parent.child`, calling `getParentName()` will return `grandparent.parent`, as you might expect.
</td>
</tr>

<tr>
<td valign="top"> *`IntegerName`* </td>
<td valign="top"> `org.dmd.dmc.types.IntegerName` derived from `DmcObjectName`

If you just need need things numerically identified, the `IntegerName` may fit your needs. Nothing complex, just an Integer.
</td>
</tr>

<tr>
<td width="100" valign="top"> *`StringName`* </td>
<td valign="top"> `org.dmd.dmc.types.StringName` derived from `DmcObjectName`

At base, the `StringName` is just a String. It used as the basic naming mechanism for schema definitions and a variety of other configuration definitions.
</td>
</tr>

<tr>
<td valign="top"> *`UUIDName`* </td>
<td valign="top"> `org.dmd.dmc.types.UUIDName` derived from `DmcObjectName`

A common mechanism for uniquely naming objects is using [http://en.wikipedia.org/wiki/Universally_unique_identifier UUIDs]. The `UUIDName` provides this mechanism in a GWT friendly way by using the `UUIDLite` type as its basis. 
</td>
</tr>

</table>