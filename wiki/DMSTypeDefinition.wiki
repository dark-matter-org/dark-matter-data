#summary The Dark Matter Schema TypeDefinition

<font color="#6a6a6a">
= Type Definitions =
</font>
The `TypeDefinition` forms the heart of all data representation in Dark Matter and, whether or not you need to define your own types, deserves a a bit of your attention. If you don't give a rat's ass about implementation related stuff, jump straight to the [WikiSyntax#Built_in_types Built in Types] section.


<font color="#9a9a9a">
== Built in Types ==
</font>



----
=== Basic Types ===

These should be pretty self explanatory.

<table width="100%">
<tr>
<td> *Boolean* </td>
<td> `java.lang.Boolean` </td>
</tr>

<tr>
<td> *Date* </td>
<td> `java.lang.Date` </td>
</tr>

<tr>
<td> *Double* </td>
<td> `java.lang.Double` </td>
</tr>

<tr>
<td> *Float* </td>
<td> `java.lang.Float` </td>
</tr>

<tr>
<td> *Integer* </td>
<td> `java.lang.Integer` </td>
</tr>

<tr>
<td> *Long* </td>
<td> `java.lang.Long` </td>
</tr>

<tr>
<td width="100"> *String* </td>
<td> `java.lang.String` </td>
</tr>

</table>

----
=== Name Types ===

[DMONaming DMO Naming] is a fundamental concept in Dark Matter and, since naming is very application specific, these types are merely examples of naming mechanisms. All values associated name types must be derived from the [http://code.google.com/p/dark-matter-data/source/browse/trunk/%20dark-matter-data/dark-matter-data/src/org/dmd/dmc/DmcObjectName.java DmcObjectName] class which provides a standard interface for all names.

<table>

<tr>
<td valign="top"> *StringName* </td>
<td valign="top"> `org.dmd.dmc.types.StringName`

 At base, the StringName is just a String. It used as the basic naming mechanism for schema definitions and a variety of other configuration definitions.
</td>
</tr>

</table>