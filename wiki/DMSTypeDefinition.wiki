#summary The Dark Matter Schema TypeDefinition

<wiki:toc />

= Type Definitions =


The `TypeDefinition` forms the heart of all data representation in Dark Matter and, whether or not you need to define your own types, deserves a bit of your attention. If you don't give a rat's ass about implementation related stuff, jump straight to the [WikiSyntax#Built_in_Types Built in Types] section.



== Built in Types ==

The following types are defined as part of the Dark Matter metaschema.


=== Basic Types ===

These should be pretty self explanatory.

<table width="820">
<tr>
<td> *Boolean* </td>
<td> `java.lang.Boolean` </td>
</tr>

<tr>
<td> *Date* </td>
<td> `java.lang.Date` </td>
</tr>

<tr>
<td> *Double* </td>
<td> `java.lang.Double` </td>
</tr>

<tr>
<td> *Float* </td>
<td> `java.lang.Float` </td>
</tr>

<tr>
<td> *Integer* </td>
<td> `java.lang.Integer` </td>
</tr>

<tr>
<td> *Long* </td>
<td> `java.lang.Long` </td>
</tr>

<tr>
<td width="220"> *String* </td>
<td> `java.lang.String` </td>
</tr>

</table>

----
=== Other Primitive Types ===

This section lists some types that are primitive in nature and used to support various various capabilities within the Dark Matter Framework. Many of these types are pretty esoteric, so don't worry if the reason for the type escapes you!
<table width="820">

<tr>
<td width="220" valign="top"> *`DmcObject`* </td>
<td valign="top"> `org.dmd.dmc.DmcObject`

When you want to hold values which are [DMOOverview DMOs] themselves, you use the `DmcObject` type. This is used in places like the [DMPGetRequest DMP Get Response] object to return a set of objects.
</td>
</tr>

<tr>
<td valign="top"> *`Modifier`* </td>
<td valign="top"> `org.dmd.dmc.type.Modifier`

One of the more interesting aspects of [DMOOverview DMOs] is that they allow for recording of the changes that you make to them. Any operation that you can perform against the collection of attributes in a [DMOOverview DMO] can be represented by a `Modifier`. See the [DMPSetRequest Set Request] page for examples of how this type (used for the `modify` attribute.
</td>
</tr>

<tr>
<td valign="top"> *`NameContainer`* </td>
<td valign="top"> `org.dmd.dmc.types.NameContainer`

As discussed on the [DMONaming DMO Naming] page, [Name_Types Name Types] are specialized types that represent the names of [DMOOverview DMOs]. When the names of things are transported, they have to maintain their identity because the actual implementation of the name is type specific. The `NameContainer` type provides this mechanism for holding a self described object name.

As I said, some of these types are pretty esoteric, so if none of that made sense, check out places where the `NameContainer` type is used e.g. in [DMPOverview Dark Matter Protocol] requests for the `target` attribute and for the `source` attribute in [DMPEvent DMP Events].
</td>
</tr>

</table>

----
=== Graphing/Plotting Types ===

Displaying data in charts is a fairly common operation in many applications and it's good to have some types that facilitate this activity.

<table width="820">

<tr>
<td width="220" valign="top"> *`LabelledIntegerDataPoint`* </td>
<td valign="top"> `org.dmd.dmc.types.LabelledIntegerDataPoint`

Need to populate a [http://code.google.com/apis/visualization/documentation/gallery/piechart.html Pie Chart]? Then request a series of LabelledIntegerDataPoints. This is simple a label string followed by an integer value. A multi-valued attribute of this type called data series,might appear as follows in OIF form:
{{{
dataSeries  Work 11
dataSeries  Eat 2
dataSeries  Commute 2
dataSeries  Watch TV 2
dataSeries  Sleep 7
}}}
</td>
</tr>

<tr>
<td valign="top"> *`TimeDoubleDataPoint`* </td>
<td valign="top"> `org.dmd.dmc.types.TimeDoubleDataPoint`

Need to plot a series of values over time? The `TimeDoubleDataPoint` may be what you need. This type is very handy as well for providing ongoing updates to a chart since values may be removed from the trailing edge of the data series and added to leading edge. 
</td>
</tr>

</table>

----
=== Name Types ===

[DMONaming DMO Naming] is a fundamental concept in Dark Matter and, since naming is very application specific, these types are merely examples of naming mechanisms. All values associated name types must be derived from the [http://code.google.com/p/dark-matter-data/source/browse/trunk/%20dark-matter-data/dark-matter-data/src/org/dmd/dmc/DmcObjectName.java DmcObjectName] class which provides a standard interface for all names.

Another standard base for naming is the `DmcHierarchicObjectName`. This is derived from `DmcObjectName` and adds the concept of being able to get the name of a parent object. This is especially useful when representing hierarchic data relationships.

<table width="820">

<tr>
<td valign="top"> *`DotName`* </td>
<td valign="top"> `org.dmd.dmc.types.DotName` derived from `DmcHierarchicObjectName`

Dot names are a fairly common naming mechanism that includes hierarchy in the structure of a name. The `DotName` type lets you easily represent names of this type. If you a name of the form `grandparent.parent.child`, calling `getParentName()` will return `grandparent.parent`, as you might expect.
</td>
</tr>
<tr>
<td valign="top"> *`IntegerName`* </td>
<td valign="top"> `org.dmd.dmc.types.IntegerName` derived from `DmcObjectName`

If you just need things numerically identified, the `IntegerName` may fit your needs. Nothing complex, just an Integer.
</td>
</tr>
<tr>
<td width="220" valign="top"> *`StringName`* </td>
<td valign="top"> `org.dmd.dmc.types.StringName` derived from `DmcObjectName`

At base, the `StringName` is just a String. It used as the basic naming mechanism for schema definitions and a variety of other configuration definitions.
</td>
</tr>
<tr>
<td valign="top"> *`UUIDName`* </td>
<td valign="top"> `org.dmd.dmc.types.UUIDName` derived from `DmcObjectName`

A common mechanism for uniquely naming objects is using [http://en.wikipedia.org/wiki/Universally_unique_identifier UUIDs]. The `UUIDName` provides this mechanism in a GWT friendly way by using the `UUIDLite` type as its basis. 
</td>
</tr>
</table>

----
=== Mapped Types ===

Mapped types are required if you want to create `HASHMAP` or 'TREEMAP` attributes. All mapped types implement the `DmcMappedAttributeIF` interface which allows the Dark Matter infrastructure to retrieve the key for a particular value.

All [DMONaming DMO Names] are mapped types since `DmcObjectName` implements the `DmcMappedAttributeIF`.

All [DMOReferences DMO Object References], which are generated automatically for named objects as part of the [DMOGenerator DMO Generation Process] also implement this interface so that they can be stored in `MAPPED` attributes. 

<table>

<tr>
<td width="220" valign="top"> *`IntegerToBoolean`* </td>
<td valign="top"> `org.dmd.dmc.types.IntegerToBoolean` implements `DmcMappedAttributeIF`
</td>
</tr>

<tr>
<td valign="top"> *`IntegerToString`* </td>
<td valign="top"> `org.dmd.dmc.types.IntegerToString` implements `DmcMappedAttributeIF`
</td>
</tr>

<tr>
<td valign="top"> *`IntegerToUUIDLite`* </td>
<td valign="top"> `org.dmd.dmc.types.IntegerToUUIDLite` implements `DmcMappedAttributeIF `
</td>
</tr>

</table>

== Defining Your Own Types ==

COMING SOON!