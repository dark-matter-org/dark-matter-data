#summary The Dark Matter Contacts example - looking at the Contacts DMO

<wiki:toc />

= The `ContactDMO` Object =

Okay.

So, you've just specified a simple schema and generated some stuff.

What have you gotten for it?

Well, you now have the `ContactDMO` object that we'll use through the rest of this example.

It has all of the basic characteristics of a [DMOOverview Dark Matter Object], but we'll just look at three of these for now:

 * standard presentation in [http://code.google.com/p/dark-matter-data/wiki/DMOOverview#Object_Instance_Format Object Instance Format]
 * the ability to record modifications made to it
 * the ability to [DMOSlice slice] the object i.e. take a subset of its attributes

== `ContactDMO` in OIF Format ==

There's really not a lot to say about [http://code.google.com/p/dark-matter-data/wiki/DMOOverview#Object_Instance_Format Object Instance Format], other than it's very handy for debug purposes and can be used for all [DMOOverviews DMOs].

When you realize that everything you do with the Dark Matter Framework can be displayed as OIF, you'll begin to appreciate it; if you don't already.

You'll really appreciate it when you realize that all [DMPOverview Dark Matter Protocol (DMP)] interactions can also be displayed in this way; we'll get into DMP a little later in this example.

For now, realize that writing some code like this...

{{{
ContactDMO contact = new ContactDMO();
		
contact.setUuidName(getUUIDName());
contact.setFirstName("Hollie");
contact.setLastName("Voss");
contact.addUrlCE("http://example.com");
contact.addUrlCE("http://contacts.com");
contact.setBirthdayCE("19750804:000000");
contact.setEmailCE("holliev@example.com");
contact.setMiddleName("Margeurite");
contact.setNickName("vossie");
contact.setNotesCE("Kids are Jason and Amanda");
contact.setPhoneNumberCE("555-793-1212");
contact.setPrefixCE("Dr.");

System.out.println(contact);
}}}

gets you this...

{{{
Contact
birthdayCE      19750804:000000
emailCE         holliev@example.com
firstName       Hollie
lastName        Voss
middleName      Margeurite
nickName        vossie
notesCE         Kids are Jason and Amanda
phoneNumberCE   555-793-1212
prefixCE        Dr.
urlCE           http://example.com
urlCE           http://contacts.com
uuidName        f9e8fd62-7242-472c-8665-66c4397f616a
}}}

== Modification Recording ==

Okay. Now I'm jumping ahead a bit, since this next capability comes into play when dealing with Views that alter data, communicating those changes to the server via [DMPOverview DMP] and sending events about those modifications via [DMPEvent DMP Events].

However, if you haven't yet been convinced that Dark Matter can save you time and effort, maybe modification recording will change your mind.



== Slicing ==

In the original [http://code.google.com/webtoolkit/articles/mvp-architecture.html Contacts] project, there is a tiny section on the model aspects, I'll quote it here verbatim:

<table width="600">
<tr>
<td width="20" valign="top">
</td>
<td valign="top">
 * _Contact: A representation of a contact within the contact list. For simplicity, this object contains a first name, last name, and email address. In a more complex application, this object would have more fields._ 
</td>
</tr>
<tr>
<td valign="top">
</td>
<td valign="top">
 * _`ContactDetails`: A light version of the Contact that contains only the unique identifier and display name. <font color="#9E0B0F> This "light" version of the Contact object will make the Contact list retrieval more efficient, as there will be fewer bits to serialize and transport across the wire. </font> In the case of our example application, this optimization has less impact than it would in a more complex app where Contact objects have substantially more fields. The initial RPC will return a list of `ContactDetails`, and we've added a display name field so that there is some amount of data that can be displayed (within the `ContactsView`) without having to making subsequent RPCs._
</td>
</tr>
</table>

This concept of having a "light version" of the Contact object seems useful, but the pain of having to create a light version of every object that you wanted to display in this manner sounds painful, especially when the title of the piece is "Large scale application development and MVP".

The "light version" of the contact had the unique identifer for the contact, and the first name, last name and email address of the contact.

Here's how to get the same functionality without creating additional code:

<table width="820">

<tr>
<td width="20" valign="top">

</td>
<td valign="top">
*1.* Create a `slices.dmd` file in your `dmdconfig` folder
</td>
</tr>

<tr>
<td valign="top">

</td>
<td valign="top">
*2.* Define a `slice` as follows:
{{{
SliceDefinition
name            lightContact
selectAttribute	firstName
selectAttribute	lastName
selectAttribute emailCE
description 	Get a light version of the Contact.
}}}
</td>
</tr>

<tr>
<td valign="top">

</td>
<td valign="top">
*3.* Add the `slices.dmd` to your `contacts.dms` file.
{{{
SchemaDefinition
name            contacts
schemaPackage   com.google.gwt.sample.contacts.shared
schemaBaseID    1000
schemaIDRange   50
defFiles        attributes.dmd
defFiles        classes.dmd
defFiles	slices.dmd
description     The contacts schema defines objects associated with the contacts
 GWT application example.
}}}
</td>
</tr>

<tr>
<td valign="top">

</td>
<td valign="top">
*4.* Run the [DMOGenerator] DMO Generator

This will result in the regeneration of a single file, `ContactsASAG` - this is the Attribute Schema Auto Generated (ASAG). It contains a variety of information that, for the most part, you don't need to worry about at the moment (and probably never).

However, it also contains a handy static member which is the handle to your slice definition: `ContactsASAG.__lightContact`
</td>
</tr>

<tr>
<td valign="top">

</td>
<td valign="top">
*5.* You can now "slice" a complete `Contact` object as follows:

{{{
ContactDMO heavy = new ContactDMO();
		
heavy.setUuidName(getUUIDName());
heavy.setFirstName("Hollie");
heavy.setLastName("Voss");
heavy.addUrlCE("http://example.com");
heavy.addUrlCE("http://contacts.com");
heavy.setBirthdayCE("19750804:000000");
heavy.setEmailCE("holliev@example.com");
heavy.setMiddleName("Margeurite");
heavy.setNickName("vossie");
heavy.setNotesCE("Kids are Jason and Amanda");
heavy.setPhoneNumberCE("555-793-1212");
heavy.setPrefixCE("Dr.");

System.out.println(heavy.toOIF());

ContactDMO light = heavy.getSlice(ContactsASAG.__lightContact);
		
System.out.println(light.toOIF());

}}}

And here's the associated output:

{{{
Contact
birthdayCE      19750804:000000
emailCE         holliev@example.com
firstName       Hollie
lastName        Voss
middleName      Margeurite
nickName        vossie
notesCE         Kids are Jason and Amanda
phoneNumberCE   555-793-1212
prefixCE        Dr.
urlCE           http://example.com
urlCE           http://contacts.com
uuidName        f9e8fd62-7242-472c-8665-66c4397f616a

Contact
emailCE     holliev@example.com
firstName   Hollie
lastName    Voss
uuidName    f9e8fd62-7242-472c-8665-66c4397f616a


}}}


</td>
</tr>


</table>