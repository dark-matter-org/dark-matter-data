#summary An overview of Dark Matter Objects

<wiki:toc />

== Dark Matter Objects ==

<table>
<tr>
<td width="200">
<img width="180"src="http://www.dark-matter-data.org/images/dmo.png" />
</td>
<td>
A Dark Matter Object (DMO - pronounced - dee mo) is a standard Java object that is generated by the [DMOGenerator DMO Generator] tool. All DMOs derive from [http://code.google.com/p/dark-matter-data/source/browse/trunk/%20dark-matter-data/dark-matter-data/src/org/dmd/dmc/DmcObject.java org.dmd.dmc.DmcObject], sometimes referred to as the Dark Matter Core object. Despite being a fairly large class, the `DmcObject` just provides a holder for a collection of attributes; that's basically it.

Instead of generating classes that have discrete member attributes, Dark Matter relies on a hash map of attribute containers that hold the attribute values, either single or multi-valued. This approach may seem odd, but it allows for a great deal of common functionality to be provided by `DmcObject`. In addition, the overhead introduced by this mechanism is very low on a per object basis, and, in fact keeps the memory footprint of objects as low as possible because you aren't maintaining handles to attributes that have no values.

The only other storage associated with a DMO is the info vector which is used to facilitate things like [DMOBackReferenceTracking Back Reference Tracking] and [DMOModRec Modification Recording]. The info vector is designed to grow/shrink as required so that we always use the least amount of space required.
</td>
</tr>
</table>

The following standards features are supported by DMOs:

 * presentation in [DMOObjectInstanceFormat Object Instance Format] (OIF), a very clean, human readable form of an object

 * presentation in [http://www.json.org/ JSON] format

 * the ability to access attributes by name (very handy for data binding in various frameworks)

 * the ability to access attributes by integer ID. This provides a very efficient check for attribute existence.

 * the ability to serialize/deserialize the object in a manner very similar to [http://code.google.com/apis/protocolbuffers/ Google Protocol Buffers] 

 * the ability to [DMOModRec record modifications] made to the object so that these modifications can be transmitted in a [DMPOverview Dark Matter Protocol] `SetRequest` or in a [DMPEvent Dark Matter Protocol] event.

 * the ability to perform [DMOLazyObjectReferenceResolution Lazy Object Reference Resolution]

 * the ability to perform [DMOBackReferenceTracking Back Reference Tracking]

 * the ability to automatically remove references to an object when it is deleted (which does not depend on the [http://download.oracle.com/javase/1.4.2/docs/api/java/lang/ref/WeakReference.html Weak Reference] concept. This is useful in GWT environments where the [http://code.google.com/webtoolkit/doc/1.6/RefJreEmulation.html JRE Emulation] does not support WeakReference

 * the ability cast a DMO to the appropriate type of [DMWOverview Dark Matter Wrapper] object that provides behavior in a particular operational context

 * the ability to take a [DMOSlice Slice] of an object i.e. to grab a subset of its attributes; very handy when you only need summary information from an object when it is first displayed by a client

=== Object Instance Format ===

Object Instance Format (OIF) is an ASCII form of a DMO that's suitable for debugging and/or object persistence and is also used to represent object instances in all Dark Matter configuration files. It is easily parsed by using a `DmoParser` or a `DmwParser` which are schema driven object parsers.

{{{
}}}