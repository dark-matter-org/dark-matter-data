#summary The Dark Matter Schema SchemaDefinition

<wiki:toc />

<font color="#6a6a6a">
= Schema Definitions =
</font>

This page provides you with a basic overview of the Dark Matter Schema (DMS) definition mechanisms.

== A Note About Project Structure ==

A great deal of the infrastructure required by applications that use Dark Matter is automatically generated from the schema that you define. Code is generated in relation to where you place certain configuration files, for instance the DMS files that end with `.dms` extensions.

You are free to place these files wherever you want but certain source structures fit with the spirit of [http://code.google.com/webtoolkit/overview.html GWT] which generally structures the source hierarchy as follows:

{{{
src
    client
        (client specific code)
    server
        (server specific code)
    shared
        (code shared by client and server)
}}}

The code generated from DMS falls into the shared category and your `.dms` file should be placed accordingly:

{{{
src
    client
    server
    shared
        dmdconfig
            (a standard name for a folder where DMD config files live)
            v0dot1
                (an optional versioning folder - see the Versioning section)
               myschema.dms

}}}

All code generated by the various generators used by Dark Matter will be created beneath a *`generated`* folder; this makes it quite clear which subfolders should be specified in your `.gwt.xml` source path declarations (if you don't follow the convention of placing shared code in a single folder). 

After running the [DMOGenerator DMO Generator] on your schema, the source structure will appear as follows:

{{{
src
    client
    server
    shared
        dmdconfig
            v0dot1
               myschema.dms
        generated
           dmo
           enums
           types
           ...
}}}

== Versioning of DMD Configurations ==

Although not implemented yet, mechanisms will be available to provide you with succinct descriptions of what has changed between versions of various DMD configuration files, including schema definitions. 

By creating subfolders beneath the dmdconfig folder (which can be named arbitrarily) with a naming convention of `v`#`dot`#, you can maintain separate versions of configurations that will make it easy to provide difference reports that go far beyond using `diff`.

At a schema level, these delta reports will indicate clearly things like
 * classes added/deleted
 * attributes added/deleted to a class
 * changes in derivation hierarchy
 * changes in attribute type
 * etc.

One benefit of this is to make the creation of release notes about your data API very easy and clear.

Anyway, you don't have to follow this convention, but there will be benefits later. Trust me. ;-)

== An Example Schema Definition ==

A `.dms` file contains the instance of a `SchemaDefinition` [DMOOverview DMO]. Here's an example in file named `featureD.dms`:

{{{
SchemaDefinition
name            featureD
schemaBaseID    1000
schemaIDRange   50
dependsOn       featuresBase
dependsOn       featureA
defFiles        types.dmd
defFiles        attributes.dmd
defFiles        classes.dmd
description     The featureD schema defines objects associated with
 management of whatsits in the overall context of the whosits.
}}}

Let's look at the basic aspects of a `SchemaDefinition`.

<table width="820">

<tr>
<td  valign="top" width="150">
*`SchemaDefinition`*
</td>
<td>
all Dark Matter configurations are specified in [DMOOverview#Object_Instance_Format Object Instance Format] so this is the class of object we're dealing with (I'll stop harping about [DMOOverview#Object_Instance_Format OIF] shortly, but it's fundamental, so bear with me).

</td>
</tr>

<tr>
<td valign="top">
*`name`*
</td>
<td>
this is the name of the schema which *MUST* match the name of the `.dms` file in which it is defined. This name must be globally unique within the set of schemas that you are going to use for an application.

When you refer to a schema through a `dependsOn` attribute, this is the name you're referring to.

</td>
</tr>


<tr>
<td valign="top">
*`schemaBaseID`*
</td>
<td>
attributes and classes have unique integer identifiers that allow for very compact DMO serialization. The `schemaBaseID` indicates the base identifier for all definitions in your schema. Identifiers below 2000 are reserved for Dark Matter internal use, so be sure to start your numbering above 2000.

</td>
</tr>


<tr>
<td valign="top">
*`schemaIDRange`*
</td>
<td>
if you are building your application in a modular way, you will likely have many schemas that describe the objects associated with different feature sets. The `schemaIDRange` just puts an upper bound on the identifiers associated with this schema.

</td>
</tr>


<tr>
<td valign="top">
*`dependsOn`*
</td>
<td>
this is an [DMONaming object reference] to an existing schema. You may refer to other schemas to allow for class derivation or the reuse of attributes, types etc. You'll notice that it's a multi-valued attribute (just repeat the name of the attribute and provide another value).
</td>
</tr>

<tr>
<td valign="top">
*`defFiles`*
</td>
<td>
these are the names of other definition files that will be read when this schema configuration is read. They can be named anything, but the convention is to name them for the kinds of definitions that they contain e.g. [DMSAttributeDefinition attributes], [DMSTypeDefinition types], [DMCClassDefinition classes] etc.

</td>
</tr>

<tr>
<td valign="top">
*`description`*
</td>
<td>
you are encouraged to provide descriptions of your definitions so that useful documentation can be generated. 
</td>
</tr>

</table>