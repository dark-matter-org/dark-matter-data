#summary The Dark Matter Schema SchemaDefinition

<font color="#6a6a6a">
= Schema Definitions =
</font>

This page provides you with a basic overview of the Dark Matter Schema (DMS) definition mechanisms.

=== A Note About Project Structure ===

A great deal of the infrastructure required by applications that use Dark Matter is automatically generated from the schema that you define. Code is generated in relation to where you place certain configuration files, for instance the DMS files that end with `.dms` extensions.

You are free to place these files wherever you want but certain source structures fit with the spirit of [http://code.google.com/webtoolkit/overview.html GWT] which generally structures the source hierarchy as follows:

{{{
src
    client
        (client specific code)
    server
        (server specific code)
    shared
        (code shared by client and server)
}}}

The code generated from DMS falls into the shared category and your `.dms` file should be placed accordingly:

{{{
src
    client
    server
    shared
        dmdconfig
            (a standard name for a folder where DMD config files live)
            v0dot1
                (an optional versioning folder - see the Versioning section)
               myschema.dms

}}}

All code generated by the various generators used by Dark Matter will be created beneath a *`generated`* folder; this makes it quite clear which subfolders should be specified in your `.gwt.xml` source path declarations (if you don't follow the convention of placing shared code in a single folder). 

After running the [DMOGenerator DMO Generator] on your schema, the source structure will appear as follows:

{{{
src
    client
    server
    shared
        dmdconfig
            v0dot1
               myschema.dms
        generated
           dmo
           enums
           types
           ...
}}}

=== Versioning of DMD Configurations ===

Although not implemented yet, mechanisms will be available to provide you with succinct descriptions of what has changed between versions of various DMD configuration files, including schema definitions. 

By creating subfolders beneath the dmdconfig folder (which can be named arbitrarily) with a naming convention of `v`#`dot`#, you can maintain separate versions of configurations that will make it easy to provide difference reports go far beyond using `diff`.

At a schema level, these delta reports will indicate clearly things like
 * classes added/deleted
 * attributes added/deleted to a class
 * changes in derivation hierarchy
 * changes in attribute type
 * etc.

One benefit of this is to make the creation of release notes about your data API very easy and clear.

Anyway, you don't have to follow this convention, but there will be benefits later. Trust me. ;-)

=== An Example Schema Definition ===

A `.dms` file contains the instance of a `SchemaDefinition` [DMOOverview DMO]. Here's an example in file named `featureD.dms`:

{{{
SchemaDefinition
name            featureD
schemaBaseID    1000
schemaIDRange   50
dependsOn       featuresBase
dependsOn       featureA
defFiles        types.dmd
defFiles        attributes.dmd
defFiles        classes.dmd
description     The featureD schema defines objects associated with
 management of whatsits in the overall context of the whosits.
}}}