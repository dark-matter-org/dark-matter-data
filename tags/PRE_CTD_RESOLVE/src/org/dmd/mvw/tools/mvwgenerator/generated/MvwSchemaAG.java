package org.dmd.mvw.tools.mvwgenerator.generated;

import org.dmd.dmc.DmcValueException;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.*;


/**
 * The MVW (Model-View-Whatever) schema defines classes that can be used to
 * model aspects of both Model-View-Controller or Model-View-Presenter style
 * applications.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.util.SchemaFormatter.dumpSchema(SchemaFormatter.java:159)
 */
public class MvwSchemaAG extends SchemaDefinition {

    public static ClassDefinition _MvwDefinition;
    public static ClassDefinition _MvwEvent;
    public static ClassDefinition _LocalEvent;
    public static ClassDefinition _BroadcastEvent;
    public static ClassDefinition _SingleDMOSelectedEvent;
    public static ClassDefinition _MultipleDMOSelectedEvent;
    public static ClassDefinition _Module;
    public static ClassDefinition _Component;
    public static ClassDefinition _View;
    public static ClassDefinition _DMOView;

    public static AttributeDefinition _definedInModule;
    public static AttributeDefinition _firesEvent;
    public static AttributeDefinition _handlesEvent;
    public static AttributeDefinition _userDataType;
    public static AttributeDefinition _userDataImport;
    public static AttributeDefinition _dependsOnModule;
    public static AttributeDefinition _selectedDMO;
    public static AttributeDefinition _useBaseClass;
    public static AttributeDefinition _dependsOnSchema;
    public static AttributeDefinition _eventCause;




    static MvwSchemaAG instance;

    public MvwSchemaAG() throws DmcValueException {
        generatedSchema = true;
        staticRefName   = "org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG";

        dependsOnSchemaClasses.put("dmg","null.generated.DmgSchemaAG");

    }

    private void initialize() throws DmcValueException {
        if (instance == null){
            instance        = this;
            SchemaDefinitionDMO me = (SchemaDefinitionDMO) this.getDmcObject();
            me.setName("mvw");
            me.setSchemaPackage("org.dmd.mvw.tools.mvwgenerator");
            me.setDmwPackage("org.dmd.mvw.tools.mvwgenerator");
            me.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/mvw.dms");


            me.addDependsOn("dmg");
            dependsOnSchemaClasses.put("dmg","null.generated.DmgSchemaAG");


            initClasses();
            initAttributes();
            initTypes();
            initActions();
            initEnums();
        }
    }

    private void initClasses() throws DmcValueException {
            ClassDefinitionDMO _MvwDefinitionOBJ = new ClassDefinitionDMO();
            _MvwDefinition = new ClassDefinition(_MvwDefinitionOBJ);
            _MvwDefinitionOBJ.setName("MvwDefinition");
            _MvwDefinitionOBJ.setClassType("ABSTRACT");
            _MvwDefinitionOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _MvwDefinitionOBJ.setLineNumber("13");
            _MvwDefinitionOBJ.setDescription("The MvwDefinition class provide a common base for all MVW definition classes.");
            _MvwDefinitionOBJ.setIsNamedBy("camelCaseName");
            _MvwDefinitionOBJ.setUseWrapperType("EXTENDED");
            _MvwDefinitionOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.MvwDefinitionREF");
            _MvwDefinitionOBJ.setDmwIteratorClass("MvwDefinitionIterableDMW");
            _MvwDefinitionOBJ.addMay("file");
            _MvwDefinitionOBJ.addMay("lineNumber");
            _MvwDefinitionOBJ.addMay("description");
            _MvwDefinitionOBJ.addMust("camelCaseName");
            _MvwDefinitionOBJ.addMust("definedInModule");
            _MvwDefinitionOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.MvwDefinitionIterableDMW");
            _MvwDefinition.setDefinedIn(this);
            addClassDefList(_MvwDefinition);

            ClassDefinitionDMO _MvwEventOBJ = new ClassDefinitionDMO();
            _MvwEvent = new ClassDefinition(_MvwEventOBJ);
            _MvwEventOBJ.setName("MvwEvent");
            _MvwEventOBJ.setClassType("ABSTRACT");
            _MvwEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _MvwEventOBJ.setLineNumber("41");
            _MvwEventOBJ.setDescription("The MvwEvent is an autonomous definition of some kind of event that is fired and handled by components in a Model-View-Whatever application. Specification of an MvwEvent will result the creation of a GwtEvent.Type<H> class and its associated EventHandler class.");
            _MvwEventOBJ.setDerivedFrom("MvwDefinition");
            _MvwEventOBJ.setIsNamedBy("eventCause");
            _MvwEventOBJ.setUseWrapperType("EXTENDED");
            _MvwEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.MvwEventREF");
            _MvwEventOBJ.setDmwIteratorClass("MvwEventIterableDMW");
            _MvwEventOBJ.addMay("description");
            _MvwEventOBJ.addMay("userDataType");
            _MvwEventOBJ.addMay("userDataImport");
            _MvwEventOBJ.addMust("eventCause");
            _MvwEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.MvwEventIterableDMW");
            _MvwEvent.setDefinedIn(this);
            addClassDefList(_MvwEvent);

            ClassDefinitionDMO _LocalEventOBJ = new ClassDefinitionDMO();
            _LocalEvent = new ClassDefinition(_LocalEventOBJ);
            _LocalEventOBJ.setName("LocalEvent");
            _LocalEventOBJ.setClassType("STRUCTURAL");
            _LocalEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _LocalEventOBJ.setLineNumber("51");
            _LocalEventOBJ.setDescription("The LocalEvent is fired by producers that want to define a tightly bound event interface so that consumers can register just for events that the producer fires.");
            _LocalEventOBJ.setDerivedFrom("MvwEvent");
            _LocalEventOBJ.setIsNamedBy("eventCause");
            _LocalEventOBJ.setUseWrapperType("EXTENDED");
            _LocalEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.LocalEventREF");
            _LocalEventOBJ.setDmwIteratorClass("LocalEventIterableDMW");
            _LocalEventOBJ.addMust("eventCause");
            _LocalEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.LocalEventIterableDMW");
            _LocalEvent.setDefinedIn(this);
            addClassDefList(_LocalEvent);

            ClassDefinitionDMO _BroadcastEventOBJ = new ClassDefinitionDMO();
            _BroadcastEvent = new ClassDefinition(_BroadcastEventOBJ);
            _BroadcastEventOBJ.setName("BroadcastEvent");
            _BroadcastEventOBJ.setClassType("STRUCTURAL");
            _BroadcastEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _BroadcastEventOBJ.setLineNumber("65");
            _BroadcastEventOBJ.setDescription("The BroadcastEvent is fired by producers that want to publish an event on the Event Bus. An additional concept associated with BroadcastEvents is that they may be associated with an EventChannel. What this means it that when the producer fires a BroadcastEvent associated with an EventChannel, all listeners of that EventChannel will receive it. And, since many BroadcastEvents can share an EventChannel, it mean sthat you can group together events that have something in common.");
            _BroadcastEventOBJ.setDerivedFrom("MvwEvent");
            _BroadcastEventOBJ.setIsNamedBy("eventCause");
            _BroadcastEventOBJ.setUseWrapperType("EXTENDED");
            _BroadcastEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.BroadcastEventREF");
            _BroadcastEventOBJ.setDmwIteratorClass("BroadcastEventIterableDMW");
            _BroadcastEventOBJ.addMust("eventCause");
            _BroadcastEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.BroadcastEventIterableDMW");
            _BroadcastEvent.setDefinedIn(this);
            addClassDefList(_BroadcastEvent);

            ClassDefinitionDMO _SingleDMOSelectedEventOBJ = new ClassDefinitionDMO();
            _SingleDMOSelectedEvent = new ClassDefinition(_SingleDMOSelectedEventOBJ);
            _SingleDMOSelectedEventOBJ.setName("SingleDMOSelectedEvent");
            _SingleDMOSelectedEventOBJ.setClassType("STRUCTURAL");
            _SingleDMOSelectedEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _SingleDMOSelectedEventOBJ.setLineNumber("79");
            _SingleDMOSelectedEventOBJ.setDescription("The SingleDMOSelectedEvent is a BroadcastEvent that indicates that a single  Dark Matter Object has been selected, usually in an MvwView component. By defining an event of this type, your component will have the event added to its event interface and, when that event is fired, the framework will also fire a generic DMO event that is handled by the  MvwSelectionManager component.");
            _SingleDMOSelectedEventOBJ.setDerivedFrom("BroadcastEvent");
            _SingleDMOSelectedEventOBJ.setIsNamedBy("eventCause");
            _SingleDMOSelectedEventOBJ.setUseWrapperType("EXTENDED");
            _SingleDMOSelectedEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.SingleDMOSelectedEventREF");
            _SingleDMOSelectedEventOBJ.setDmwIteratorClass("SingleDMOSelectedEventIterableDMW");
            _SingleDMOSelectedEventOBJ.addMust("eventCause");
            _SingleDMOSelectedEventOBJ.addMust("selectedDMO");
            _SingleDMOSelectedEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.SingleDMOSelectedEventIterableDMW");
            _SingleDMOSelectedEvent.setDefinedIn(this);
            addClassDefList(_SingleDMOSelectedEvent);

            ClassDefinitionDMO _MultipleDMOSelectedEventOBJ = new ClassDefinitionDMO();
            _MultipleDMOSelectedEvent = new ClassDefinition(_MultipleDMOSelectedEventOBJ);
            _MultipleDMOSelectedEventOBJ.setName("MultipleDMOSelectedEvent");
            _MultipleDMOSelectedEventOBJ.setClassType("STRUCTURAL");
            _MultipleDMOSelectedEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _MultipleDMOSelectedEventOBJ.setLineNumber("91");
            _MultipleDMOSelectedEventOBJ.setDescription("The MultipleDMOSelectedEvent is a BroadcastEvent that indicates that multiple DMOs have been selected. As with the single select event, a generic DMO event that is handled by the MvwSelectionManager is fired as well.");
            _MultipleDMOSelectedEventOBJ.setDerivedFrom("BroadcastEvent");
            _MultipleDMOSelectedEventOBJ.setIsNamedBy("eventCause");
            _MultipleDMOSelectedEventOBJ.setUseWrapperType("EXTENDED");
            _MultipleDMOSelectedEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.MultipleDMOSelectedEventREF");
            _MultipleDMOSelectedEventOBJ.setDmwIteratorClass("MultipleDMOSelectedEventIterableDMW");
            _MultipleDMOSelectedEventOBJ.addMust("eventCause");
            _MultipleDMOSelectedEventOBJ.addMust("selectedDMO");
            _MultipleDMOSelectedEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.MultipleDMOSelectedEventIterableDMW");
            _MultipleDMOSelectedEvent.setDefinedIn(this);
            addClassDefList(_MultipleDMOSelectedEvent);

            ClassDefinitionDMO _ModuleOBJ = new ClassDefinitionDMO();
            _Module = new ClassDefinition(_ModuleOBJ);
            _ModuleOBJ.setName("Module");
            _ModuleOBJ.setClassType("STRUCTURAL");
            _ModuleOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ModuleOBJ.setLineNumber("104");
            _ModuleOBJ.setDescription("The Module is used to define a reusable set of MVW functionality which can be referred to in Application definitions or other Module definitions.");
            _ModuleOBJ.setDerivedFrom("MvwDefinition");
            _ModuleOBJ.setIsNamedBy("camelCaseName");
            _ModuleOBJ.setUseWrapperType("EXTENDED");
            _ModuleOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ModuleREF");
            _ModuleOBJ.setDmwIteratorClass("ModuleIterableDMW");
            _ModuleOBJ.addMay("dependsOnModule");
            _ModuleOBJ.addMay("dependsOnSchema");
            _ModuleOBJ.addMust("camelCaseName");
            _ModuleOBJ.addMust("genPackage");
            _ModuleOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ModuleIterableDMW");
            _Module.setDefinedIn(this);
            addClassDefList(_Module);

            ClassDefinitionDMO _ComponentOBJ = new ClassDefinitionDMO();
            _Component = new ClassDefinition(_ComponentOBJ);
            _ComponentOBJ.setName("Component");
            _ComponentOBJ.setClassType("ABSTRACT");
            _ComponentOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ComponentOBJ.setLineNumber("118");
            _ComponentOBJ.setDescription("The Component is an abstract base for classes that define the building blocks of Applications. The primary feature of an Component is that it fires and/or handles events. Beyond that, a component can be whatever you require it to be. A variety of derived component types provide more focussed behavioural units.");
            _ComponentOBJ.setDerivedFrom("MvwDefinition");
            _ComponentOBJ.setIsNamedBy("camelCaseName");
            _ComponentOBJ.setUseWrapperType("EXTENDED");
            _ComponentOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ComponentREF");
            _ComponentOBJ.setDmwIteratorClass("ComponentIterableDMW");
            _ComponentOBJ.addMay("firesEvent");
            _ComponentOBJ.addMay("handlesEvent");
            _ComponentOBJ.addMust("camelCaseName");
            _ComponentOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ComponentIterableDMW");
            _Component.setDefinedIn(this);
            addClassDefList(_Component);

            ClassDefinitionDMO _ViewOBJ = new ClassDefinitionDMO();
            _View = new ClassDefinition(_ViewOBJ);
            _ViewOBJ.setName("View");
            _ViewOBJ.setClassType("STRUCTURAL");
            _ViewOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ViewOBJ.setLineNumber("138");
            _ViewOBJ.setDescription("The View is used to define a reusable set of MVW functionality which can be referred to in Application definitions or other Module definitions. Due to the fact there is no common base class for Views in GWT, the View definition allows you to specific your own base class for the View implementation if you happen to have one. That way, you can insert common functonality into the generated abstract View implementations. <P> Each firesEvent/handlesEvent specified for a View will add that event to the View's interface definition. <P> Generated artifacts: the view's event/data interface,  an abstract view implementation with abstract functions for each handlesEvent and set/add data.");
            _ViewOBJ.setDerivedFrom("Component");
            _ViewOBJ.setIsNamedBy("camelCaseName");
            _ViewOBJ.setUseWrapperType("EXTENDED");
            _ViewOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ViewREF");
            _ViewOBJ.setDmwIteratorClass("ViewIterableDMW");
            _ViewOBJ.addMay("useBaseClass");
            _ViewOBJ.addMust("camelCaseName");
            _ViewOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ViewIterableDMW");
            _View.setDefinedIn(this);
            addClassDefList(_View);

            ClassDefinitionDMO _DMOViewOBJ = new ClassDefinitionDMO();
            _DMOView = new ClassDefinition(_DMOViewOBJ);
            _DMOViewOBJ.setName("DMOView");
            _DMOViewOBJ.setClassType("STRUCTURAL");
            _DMOViewOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _DMOViewOBJ.setLineNumber("148");
            _DMOViewOBJ.setDescription("The DMOView provides a more structured view based on standardized DMO interfaces.");
            _DMOViewOBJ.setDerivedFrom("Component");
            _DMOViewOBJ.setIsNamedBy("camelCaseName");
            _DMOViewOBJ.setUseWrapperType("EXTENDED");
            _DMOViewOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.DMOViewREF");
            _DMOViewOBJ.setDmwIteratorClass("DMOViewIterableDMW");
            _DMOViewOBJ.addMay("useBaseClass");
            _DMOViewOBJ.addMust("camelCaseName");
            _DMOViewOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.DMOViewIterableDMW");
            _DMOView.setDefinedIn(this);
            addClassDefList(_DMOView);

    }

    private void initAttributes() throws DmcValueException {
            AttributeDefinitionDMO _definedInModuleOBJ = new AttributeDefinitionDMO();
            _definedInModule = new AttributeDefinition(_definedInModuleOBJ);
            _definedInModuleOBJ.setType("Module");
            _definedInModuleOBJ.setName("definedInModule");
            _definedInModuleOBJ.setDmdID("800");
            _definedInModuleOBJ.setDescription("All MvwDefinitions are defined in an Module file that ends with a .mvw extension.");
            _definedInModule.setDefinedIn(this);
            _definedInModuleOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _definedInModuleOBJ.setLineNumber("7");
            addAttributeDefList(_definedInModule);

            AttributeDefinitionDMO _firesEventOBJ = new AttributeDefinitionDMO();
            _firesEvent = new AttributeDefinition(_firesEventOBJ);
            _firesEventOBJ.setType("MvwEvent");
            _firesEventOBJ.setName("firesEvent");
            _firesEventOBJ.setDmdID("801");
            _firesEventOBJ.setDescription("Indicates the MvwEvents that are fired by various MVW components.");
            _firesEventOBJ.setValueType("TREEMAPPED");
            _firesEvent.setDefinedIn(this);
            _firesEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _firesEventOBJ.setLineNumber("14");
            addAttributeDefList(_firesEvent);

            AttributeDefinitionDMO _handlesEventOBJ = new AttributeDefinitionDMO();
            _handlesEvent = new AttributeDefinition(_handlesEventOBJ);
            _handlesEventOBJ.setType("MvwEvent");
            _handlesEventOBJ.setName("handlesEvent");
            _handlesEventOBJ.setDmdID("802");
            _handlesEventOBJ.setDescription("This attributes holds a list of MvwEvents that are handled by various MVW components.");
            _handlesEventOBJ.setValueType("TREEMAPPED");
            _handlesEvent.setDefinedIn(this);
            _handlesEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _handlesEventOBJ.setLineNumber("22");
            addAttributeDefList(_handlesEvent);

            AttributeDefinitionDMO _userDataTypeOBJ = new AttributeDefinitionDMO();
            _userDataType = new AttributeDefinition(_userDataTypeOBJ);
            _userDataTypeOBJ.setType("String");
            _userDataTypeOBJ.setName("userDataType");
            _userDataTypeOBJ.setDmdID("803");
            _userDataTypeOBJ.setDescription("Various interfaces allow for the specification of user data that gets passed through them. For instance, an MvwEvent might carry a data payload of an ArrayList<String> or, TreeMap<Integer,MyDataDMO> or whatever. This attribute lets you specify that data type information. You will use this in conjunction with the userDataImport attribute that lets you tell the MVW Generator what import statements it needs.");
            _userDataTypeOBJ.setValueType("MULTI");
            _userDataType.setDefinedIn(this);
            _userDataTypeOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _userDataTypeOBJ.setLineNumber("34");
            addAttributeDefList(_userDataType);

            AttributeDefinitionDMO _userDataImportOBJ = new AttributeDefinitionDMO();
            _userDataImport = new AttributeDefinition(_userDataImportOBJ);
            _userDataImportOBJ.setType("String");
            _userDataImportOBJ.setName("userDataImport");
            _userDataImportOBJ.setDmdID("804");
            _userDataImportOBJ.setDescription("The additionalImport attribute indicates the fully qualified class names of types taht are required to support your userDataType indications. You need not explicitly indicate Java native types such as String, Integer etc. but you will have to specify things like java.util.TreeMap.");
            _userDataImportOBJ.setValueType("TREESET");
            _userDataImport.setDefinedIn(this);
            _userDataImportOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _userDataImportOBJ.setLineNumber("44");
            addAttributeDefList(_userDataImport);

            AttributeDefinitionDMO _dependsOnModuleOBJ = new AttributeDefinitionDMO();
            _dependsOnModule = new AttributeDefinition(_dependsOnModuleOBJ);
            _dependsOnModuleOBJ.setType("Module");
            _dependsOnModuleOBJ.setName("dependsOnModule");
            _dependsOnModuleOBJ.setDmdID("805");
            _dependsOnModuleOBJ.setDescription("This attribute allows an MvwConfig to refer to other configurations on which it depends.");
            _dependsOnModuleOBJ.setValueType("TREESET");
            _dependsOnModule.setDefinedIn(this);
            _dependsOnModuleOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _dependsOnModuleOBJ.setLineNumber("52");
            addAttributeDefList(_dependsOnModule);

            AttributeDefinitionDMO _selectedDMOOBJ = new AttributeDefinitionDMO();
            _selectedDMO = new AttributeDefinition(_selectedDMOOBJ);
            _selectedDMOOBJ.setType("ClassDefinition");
            _selectedDMOOBJ.setName("selectedDMO");
            _selectedDMOOBJ.setDmdID("806");
            _selectedDMOOBJ.setDescription("This attribute indicates the class of DMO that is selected by a  SingleDMOSelectedEvent.");
            _selectedDMO.setDefinedIn(this);
            _selectedDMOOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _selectedDMOOBJ.setLineNumber("59");
            addAttributeDefList(_selectedDMO);

            AttributeDefinitionDMO _useBaseClassOBJ = new AttributeDefinitionDMO();
            _useBaseClass = new AttributeDefinition(_useBaseClassOBJ);
            _useBaseClassOBJ.setType("String");
            _useBaseClassOBJ.setName("useBaseClass");
            _useBaseClassOBJ.setDmdID("807");
            _useBaseClassOBJ.setDescription("The useBaseClass attribute is used to specify the class from which a generated component class should be derived. It should be fully qualified name of a class.");
            _useBaseClass.setDefinedIn(this);
            _useBaseClassOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _useBaseClassOBJ.setLineNumber("67");
            addAttributeDefList(_useBaseClass);

            AttributeDefinitionDMO _dependsOnSchemaOBJ = new AttributeDefinitionDMO();
            _dependsOnSchema = new AttributeDefinition(_dependsOnSchemaOBJ);
            _dependsOnSchemaOBJ.setType("SchemaDefinition");
            _dependsOnSchemaOBJ.setName("dependsOnSchema");
            _dependsOnSchemaOBJ.setDmdID("808");
            _dependsOnSchemaOBJ.setDescription("Indicates a schema on which a Module depends.");
            _dependsOnSchema.setDefinedIn(this);
            _dependsOnSchemaOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _dependsOnSchemaOBJ.setLineNumber("73");
            addAttributeDefList(_dependsOnSchema);

            AttributeDefinitionDMO _eventCauseOBJ = new AttributeDefinitionDMO();
            _eventCause = new AttributeDefinition(_eventCauseOBJ);
            _eventCauseOBJ.setType("CamelCaseName");
            _eventCauseOBJ.setName("eventCause");
            _eventCauseOBJ.setDmdID("809");
            _eventCauseOBJ.setDescription("The cause of an event.");
            _eventCause.setDefinedIn(this);
            _eventCauseOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _eventCauseOBJ.setLineNumber("79");
            addAttributeDefList(_eventCause);

    }

    private void initTypes() throws DmcValueException {
    }

    private void initActions() throws DmcValueException {
    }

    private void initEnums() throws DmcValueException {
    }


    @Override
    public MvwSchemaAG getInstance() throws DmcValueException{
    	   if (instance == null)
    		   initialize();
    	   return(instance);
    }
}

