package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:349)
import java.util.ArrayList;                                                             // To support getMVCopy() - (BaseDMWGeneratorNewest.java:997)
import java.util.Iterator;                                                              // Support copy of MV objects - (BaseDMWGeneratorNewest.java:2048)
import java.util.TreeSet;                                                               // To support getMVCopy() - (BaseDMWGeneratorNewest.java:1022)
import org.dmd.dmc.*;                                                                   // If any attributes - (BaseDMWGeneratorNewest.java:903)
import org.dmd.dmc.types.CamelCaseName;                                                 // Is named by - (BaseDMWGeneratorNewest.java:884)
import org.dmd.dms.*;                                                                   // Always 2 - (BaseDMWGeneratorNewest.java:888)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                             // Attribute extendsInterface from the meta schema - (BaseDMWGeneratorNewest.java:720)
import org.dmd.dms.generated.dmw.StringIterableDMW;                                     // For multi-valued String - (BaseDMWGeneratorNewest.java:1913)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                   // Required for MODREC constructor - (BaseDMWGeneratorNewest.java:891)
import org.dmd.mvw.tools.mvwgenerator.extended.Event;                                   // Is reference type - (BaseDMWGeneratorNewest.java:923)
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                           // Derived class - (BaseDMWGeneratorNewest.java:1064)
import org.dmd.mvw.tools.mvwgenerator.extended.RunContextItem;                          // Is reference type - (BaseDMWGeneratorNewest.java:923)
import org.dmd.mvw.tools.mvwgenerator.extended.View;                                    // Required for getModificationRecorder() - (BaseDMWGeneratorNewest.java:896)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.EventDMO;                           // For multi-valued adds of Event - (BaseDMWGeneratorNewest.java:1579)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                           // Attribute broadcast from the mvw schema - (BaseDMWGeneratorNewest.java:720)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                  // For multi-valued adds of RunContextItem - (BaseDMWGeneratorNewest.java:1579)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;                            // Class not auxiliary or abstract - (BaseDMWGeneratorNewest.java:1068)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.DisplayDataSpecIterableDMW;         // For multi-valued DisplayDataSpec - (BaseDMWGeneratorNewest.java:1913)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventIterableDMW;                   // For multi-valued Event - (BaseDMWGeneratorNewest.java:1521)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventSpecIterableDMW;               // For multi-valued EventSpec - (BaseDMWGeneratorNewest.java:1913)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.MethodWithArgsIterableDMW;          // For multi-valued MethodWithArgs - (BaseDMWGeneratorNewest.java:1913)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.OperationSpecIterableDMW;           // For multi-valued OperationSpec - (BaseDMWGeneratorNewest.java:1913)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW;          // For multi-valued RunContextItem - (BaseDMWGeneratorNewest.java:1521)
import org.dmd.mvw.tools.mvwgenerator.generated.types.DisplayDataSpec;                  // Primitive type - (BaseDMWGeneratorNewest.java:966)
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventSpec;                        // Primitive type - (BaseDMWGeneratorNewest.java:966)
import org.dmd.mvw.tools.mvwgenerator.generated.types.OperationSpec;                    // Primitive type - (BaseDMWGeneratorNewest.java:966)
import org.dmd.mvw.tools.mvwgenerator.types.MethodWithArgs;                             // Primitive type - (BaseDMWGeneratorNewest.java:966)


/**
 * The View is used to define the aspects of two kinds of interfaces that
 * define the functionality provided by a view of a model; the event
 * interface and the  data interface.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:366)
 */
abstract public class ViewDMW extends MvwDefinition implements DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:443)
    public ViewDMW() {
        super(new ViewDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:449)
    public ViewDMW(DmcTypeModifierMV mods) {
        super(new ViewDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:491)
    public View getModificationRecorder(){
        View rc = new View();
        rc.setViewName(getViewName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:512)
    public ViewDMW(ViewDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public View cloneIt() {
        View rc = new View();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public ViewDMO getDMO() {
        return((ViewDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:527)
    protected ViewDMW(ViewDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.getAccessFunctions(BaseDMWGeneratorNewest.java:1113)
    public CamelCaseName getObjectName(){
        return(((ViewDMO) core).getViewName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ViewDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ViewDMW){
            return( getObjectName().equals( ((ViewDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of Event items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getBroadcastSize(){
        return(((ViewDMO) core).getBroadcastSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getBroadcastIsEmpty(){
        if (((ViewDMO) core).getBroadcastSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getBroadcastHasValue(){
        if (((ViewDMO) core).getBroadcastSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of EventDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1528)
    public EventIterableDMW getBroadcastIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__broadcast);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(((ViewDMO) core).getBroadcast()));
    }

    /**
     * Adds another broadcast value.
     * @param value A value compatible with Event
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1585)
    public DmcAttribute<?> addBroadcast(Event value){
        DmcAttribute<?> attr = ((ViewDMO) core).addBroadcast(((EventDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a broadcast value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1635)
    public void delBroadcast(Event value){
        ((ViewDMO) core).delBroadcast(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1697)
    public ArrayList<Event> getBroadcastCopy(){
        DmcAttribute<?> attr = ((ViewDMO) core).get(MvwDMSAG.__broadcast);
        if (attr == null)
            return(new ArrayList<Event>());
        
        ArrayList<Event> rc = new ArrayList<Event>(attr.getMVSize());
        
        EventIterableDMW it = getBroadcastIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the broadcast attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remBroadcast(){
        ((ViewDMO) core).remBroadcast();
    }

    /**
     * @return The number of Event items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getBroadcastOnlySize(){
        return(((ViewDMO) core).getBroadcastOnlySize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getBroadcastOnlyIsEmpty(){
        if (((ViewDMO) core).getBroadcastOnlySize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getBroadcastOnlyHasValue(){
        if (((ViewDMO) core).getBroadcastOnlySize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of EventDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1528)
    public EventIterableDMW getBroadcastOnlyIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__broadcastOnly);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(((ViewDMO) core).getBroadcastOnly()));
    }

    /**
     * Adds another broadcastOnly value.
     * @param value A value compatible with Event
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1585)
    public DmcAttribute<?> addBroadcastOnly(Event value){
        DmcAttribute<?> attr = ((ViewDMO) core).addBroadcastOnly(((EventDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a broadcastOnly value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1635)
    public void delBroadcastOnly(Event value){
        ((ViewDMO) core).delBroadcastOnly(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1697)
    public ArrayList<Event> getBroadcastOnlyCopy(){
        DmcAttribute<?> attr = ((ViewDMO) core).get(MvwDMSAG.__broadcastOnly);
        if (attr == null)
            return(new ArrayList<Event>());
        
        ArrayList<Event> rc = new ArrayList<Event>(attr.getMVSize());
        
        EventIterableDMW it = getBroadcastOnlyIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the broadcastOnly attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remBroadcastOnly(){
        ((ViewDMO) core).remBroadcastOnly();
    }

    /**
     * @return The number of OperationSpec items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getClickEventSize(){
        return(((ViewDMO) core).getClickEventSize());
    }

    /**
     * @return true if there are no OperationSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getClickEventIsEmpty(){
        if (((ViewDMO) core).getClickEventSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any OperationSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getClickEventHasValue(){
        if (((ViewDMO) core).getClickEventSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of OperationSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public OperationSpecIterableDMW getClickEventIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__clickEvent);
        if (attr == null)
            return(OperationSpecIterableDMW.emptyList);
        
        return(new OperationSpecIterableDMW(((ViewDMO) core).getClickEvent()));
    }

    /**
     * Adds another clickEvent value.
     * @param value A value compatible with OperationSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addClickEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).addClickEvent(value);
    }

    /**
     * Adds another clickEvent value.
     * @param value A value compatible with OperationSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addClickEvent(OperationSpec value){
        ((ViewDMO) core).addClickEvent(value);
    }

    /**
     * Returns true if the collection contains the clickEvent value.
     * @param value A value compatible with OperationSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean clickEventContains(OperationSpec value){
        return(((ViewDMO) core).clickEventContains(value));
    }

    /**
     * @return A COPY of the collection of OperationSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<OperationSpec> getClickEventCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__clickEvent);
        if (attr == null)
            return(new ArrayList<OperationSpec>());
        
        ArrayList<OperationSpec> rc = new ArrayList<OperationSpec>(attr.getMVSize());
        
        Iterator<OperationSpec> it = (Iterator<OperationSpec>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a clickEvent value.
     * @param value The OperationSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delClickEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).delClickEvent(value);
    }

    /**
     * Deletes a clickEvent value.
     * @param value The OperationSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delClickEvent(OperationSpec value){
        ((ViewDMO) core).delClickEvent(value);
    }

    /**
     * Removes the clickEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remClickEvent(){
        ((ViewDMO) core).remClickEvent();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public OperationSpec getCreateEvent(){
        return(((ViewDMO) core).getCreateEvent());
    }

    /**
     * Sets createEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setCreateEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).setCreateEvent(value);
    }

    /**
     * Sets createEvent to the specified value.
     * @param value OperationSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setCreateEvent(OperationSpec value){
        ((ViewDMO) core).setCreateEvent(value);
    }

    /**
     * Removes the createEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remCreateEvent(){
        ((ViewDMO) core).remCreateEvent();
    }

    /**
     * @return The number of EventSpec items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getDeleteEventSize(){
        return(((ViewDMO) core).getDeleteEventSize());
    }

    /**
     * @return true if there are no EventSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getDeleteEventIsEmpty(){
        if (((ViewDMO) core).getDeleteEventSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any EventSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getDeleteEventHasValue(){
        if (((ViewDMO) core).getDeleteEventSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of EventSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public EventSpecIterableDMW getDeleteEventIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__deleteEvent);
        if (attr == null)
            return(EventSpecIterableDMW.emptyList);
        
        return(new EventSpecIterableDMW(((ViewDMO) core).getDeleteEvent()));
    }

    /**
     * Adds another deleteEvent value.
     * @param value A value compatible with EventSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addDeleteEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).addDeleteEvent(value);
    }

    /**
     * Adds another deleteEvent value.
     * @param value A value compatible with EventSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addDeleteEvent(EventSpec value){
        ((ViewDMO) core).addDeleteEvent(value);
    }

    /**
     * Returns true if the collection contains the deleteEvent value.
     * @param value A value compatible with EventSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean deleteEventContains(EventSpec value){
        return(((ViewDMO) core).deleteEventContains(value));
    }

    /**
     * @return A COPY of the collection of EventSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<EventSpec> getDeleteEventCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__deleteEvent);
        if (attr == null)
            return(new ArrayList<EventSpec>());
        
        ArrayList<EventSpec> rc = new ArrayList<EventSpec>(attr.getMVSize());
        
        Iterator<EventSpec> it = (Iterator<EventSpec>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a deleteEvent value.
     * @param value The EventSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delDeleteEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).delDeleteEvent(value);
    }

    /**
     * Deletes a deleteEvent value.
     * @param value The EventSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delDeleteEvent(EventSpec value){
        ((ViewDMO) core).delDeleteEvent(value);
    }

    /**
     * Removes the deleteEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remDeleteEvent(){
        ((ViewDMO) core).remDeleteEvent();
    }

    /**
     * @return The number of DisplayDataSpec items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getDisplayDMOSize(){
        return(((ViewDMO) core).getDisplayDMOSize());
    }

    /**
     * @return true if there are no DisplayDataSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getDisplayDMOIsEmpty(){
        if (((ViewDMO) core).getDisplayDMOSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any DisplayDataSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getDisplayDMOHasValue(){
        if (((ViewDMO) core).getDisplayDMOSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of DisplayDataSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public DisplayDataSpecIterableDMW getDisplayDMOIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__displayDMO);
        if (attr == null)
            return(DisplayDataSpecIterableDMW.emptyList);
        
        return(new DisplayDataSpecIterableDMW(((ViewDMO) core).getDisplayDMO()));
    }

    /**
     * Adds another displayDMO value.
     * @param value A value compatible with DisplayDataSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addDisplayDMO(Object value) throws DmcValueException {
        ((ViewDMO) core).addDisplayDMO(value);
    }

    /**
     * Adds another displayDMO value.
     * @param value A value compatible with DisplayDataSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addDisplayDMO(DisplayDataSpec value){
        ((ViewDMO) core).addDisplayDMO(value);
    }

    /**
     * Returns true if the collection contains the displayDMO value.
     * @param value A value compatible with DisplayDataSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean displayDMOContains(DisplayDataSpec value){
        return(((ViewDMO) core).displayDMOContains(value));
    }

    /**
     * @return A COPY of the collection of DisplayDataSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<DisplayDataSpec> getDisplayDMOCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__displayDMO);
        if (attr == null)
            return(new ArrayList<DisplayDataSpec>());
        
        ArrayList<DisplayDataSpec> rc = new ArrayList<DisplayDataSpec>(attr.getMVSize());
        
        Iterator<DisplayDataSpec> it = (Iterator<DisplayDataSpec>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a displayDMO value.
     * @param value The DisplayDataSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delDisplayDMO(Object value) throws DmcValueException {
        ((ViewDMO) core).delDisplayDMO(value);
    }

    /**
     * Deletes a displayDMO value.
     * @param value The DisplayDataSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delDisplayDMO(DisplayDataSpec value){
        ((ViewDMO) core).delDisplayDMO(value);
    }

    /**
     * Removes the displayDMO attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remDisplayDMO(){
        ((ViewDMO) core).remDisplayDMO();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getExtendsInterfaceSize(){
        return(((ViewDMO) core).getExtendsInterfaceSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getExtendsInterfaceIsEmpty(){
        if (((ViewDMO) core).getExtendsInterfaceSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getExtendsInterfaceHasValue(){
        if (((ViewDMO) core).getExtendsInterfaceSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public StringIterableDMW getExtendsInterfaceIterable(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__extendsInterface);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ViewDMO) core).getExtendsInterface()));
    }

    /**
     * Adds another extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addExtendsInterface(Object value) throws DmcValueException {
        ((ViewDMO) core).addExtendsInterface(value);
    }

    /**
     * Adds another extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addExtendsInterface(String value){
        ((ViewDMO) core).addExtendsInterface(value);
    }

    /**
     * Returns true if the collection contains the extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean extendsInterfaceContains(String value){
        return(((ViewDMO) core).extendsInterfaceContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getExtendsInterfaceCopy(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__extendsInterface);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a extendsInterface value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delExtendsInterface(Object value) throws DmcValueException {
        ((ViewDMO) core).delExtendsInterface(value);
    }

    /**
     * Deletes a extendsInterface value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delExtendsInterface(String value){
        ((ViewDMO) core).delExtendsInterface(value);
    }

    /**
     * Removes the extendsInterface attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remExtendsInterface(){
        ((ViewDMO) core).remExtendsInterface();
    }

    /**
     * @return The number of Event items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getLocalSize(){
        return(((ViewDMO) core).getLocalSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getLocalIsEmpty(){
        if (((ViewDMO) core).getLocalSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getLocalHasValue(){
        if (((ViewDMO) core).getLocalSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of EventDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1528)
    public EventIterableDMW getLocalIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__local);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(((ViewDMO) core).getLocal()));
    }

    /**
     * Adds another local value.
     * @param value A value compatible with Event
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1585)
    public DmcAttribute<?> addLocal(Event value){
        DmcAttribute<?> attr = ((ViewDMO) core).addLocal(((EventDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a local value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1635)
    public void delLocal(Event value){
        ((ViewDMO) core).delLocal(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1697)
    public TreeSet<Event> getLocalCopy(){
        DmcAttribute<?> attr = ((ViewDMO) core).get(MvwDMSAG.__local);
        if (attr == null)
            return(new TreeSet<Event>());
        
        TreeSet<Event> rc = new TreeSet<Event>();
        
        EventIterableDMW it = getLocalIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the local attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remLocal(){
        ((ViewDMO) core).remLocal();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public OperationSpec getModifyEvent(){
        return(((ViewDMO) core).getModifyEvent());
    }

    /**
     * Sets modifyEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setModifyEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).setModifyEvent(value);
    }

    /**
     * Sets modifyEvent to the specified value.
     * @param value OperationSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setModifyEvent(OperationSpec value){
        ((ViewDMO) core).setModifyEvent(value);
    }

    /**
     * Removes the modifyEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remModifyEvent(){
        ((ViewDMO) core).remModifyEvent();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getPresenterImportSize(){
        return(((ViewDMO) core).getPresenterImportSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getPresenterImportIsEmpty(){
        if (((ViewDMO) core).getPresenterImportSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getPresenterImportHasValue(){
        if (((ViewDMO) core).getPresenterImportSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public StringIterableDMW getPresenterImportIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__presenterImport);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ViewDMO) core).getPresenterImport()));
    }

    /**
     * Adds another presenterImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addPresenterImport(Object value) throws DmcValueException {
        ((ViewDMO) core).addPresenterImport(value);
    }

    /**
     * Adds another presenterImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addPresenterImport(String value){
        ((ViewDMO) core).addPresenterImport(value);
    }

    /**
     * Returns true if the collection contains the presenterImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean presenterImportContains(String value){
        return(((ViewDMO) core).presenterImportContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public TreeSet<String> getPresenterImportCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__presenterImport);
        if (attr == null)
            return(new TreeSet<String>());
        
        TreeSet<String> rc = new TreeSet<String>();
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a presenterImport value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delPresenterImport(Object value) throws DmcValueException {
        ((ViewDMO) core).delPresenterImport(value);
    }

    /**
     * Deletes a presenterImport value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delPresenterImport(String value){
        ((ViewDMO) core).delPresenterImport(value);
    }

    /**
     * Removes the presenterImport attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remPresenterImport(){
        ((ViewDMO) core).remPresenterImport();
    }

    /**
     * @return The number of MethodWithArgs items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getPresenterMethodSize(){
        return(((ViewDMO) core).getPresenterMethodSize());
    }

    /**
     * @return true if there are no MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getPresenterMethodIsEmpty(){
        if (((ViewDMO) core).getPresenterMethodSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getPresenterMethodHasValue(){
        if (((ViewDMO) core).getPresenterMethodSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public MethodWithArgsIterableDMW getPresenterMethodIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__presenterMethod);
        if (attr == null)
            return(MethodWithArgsIterableDMW.emptyList);
        
        return(new MethodWithArgsIterableDMW(((ViewDMO) core).getPresenterMethod()));
    }

    /**
     * Adds another presenterMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addPresenterMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).addPresenterMethod(value);
    }

    /**
     * Adds another presenterMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addPresenterMethod(MethodWithArgs value){
        ((ViewDMO) core).addPresenterMethod(value);
    }

    /**
     * Returns true if the collection contains the presenterMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean presenterMethodContains(MethodWithArgs value){
        return(((ViewDMO) core).presenterMethodContains(value));
    }

    /**
     * @return A COPY of the collection of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<MethodWithArgs> getPresenterMethodCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__presenterMethod);
        if (attr == null)
            return(new ArrayList<MethodWithArgs>());
        
        ArrayList<MethodWithArgs> rc = new ArrayList<MethodWithArgs>(attr.getMVSize());
        
        Iterator<MethodWithArgs> it = (Iterator<MethodWithArgs>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a presenterMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delPresenterMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).delPresenterMethod(value);
    }

    /**
     * Deletes a presenterMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delPresenterMethod(MethodWithArgs value){
        ((ViewDMO) core).delPresenterMethod(value);
    }

    /**
     * Removes the presenterMethod attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remPresenterMethod(){
        ((ViewDMO) core).remPresenterMethod();
    }

    /**
     * @return The number of EventSpec items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getSelectEventSize(){
        return(((ViewDMO) core).getSelectEventSize());
    }

    /**
     * @return true if there are no EventSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getSelectEventIsEmpty(){
        if (((ViewDMO) core).getSelectEventSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any EventSpecDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getSelectEventHasValue(){
        if (((ViewDMO) core).getSelectEventSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of EventSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public EventSpecIterableDMW getSelectEventIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__selectEvent);
        if (attr == null)
            return(EventSpecIterableDMW.emptyList);
        
        return(new EventSpecIterableDMW(((ViewDMO) core).getSelectEvent()));
    }

    /**
     * Adds another selectEvent value.
     * @param value A value compatible with EventSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addSelectEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).addSelectEvent(value);
    }

    /**
     * Adds another selectEvent value.
     * @param value A value compatible with EventSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addSelectEvent(EventSpec value){
        ((ViewDMO) core).addSelectEvent(value);
    }

    /**
     * Returns true if the collection contains the selectEvent value.
     * @param value A value compatible with EventSpec
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean selectEventContains(EventSpec value){
        return(((ViewDMO) core).selectEventContains(value));
    }

    /**
     * @return A COPY of the collection of EventSpec objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<EventSpec> getSelectEventCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__selectEvent);
        if (attr == null)
            return(new ArrayList<EventSpec>());
        
        ArrayList<EventSpec> rc = new ArrayList<EventSpec>(attr.getMVSize());
        
        Iterator<EventSpec> it = (Iterator<EventSpec>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a selectEvent value.
     * @param value The EventSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delSelectEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).delSelectEvent(value);
    }

    /**
     * Deletes a selectEvent value.
     * @param value The EventSpec to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delSelectEvent(EventSpec value){
        ((ViewDMO) core).delSelectEvent(value);
    }

    /**
     * Removes the selectEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remSelectEvent(){
        ((ViewDMO) core).remSelectEvent();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getSharedImportSize(){
        return(((ViewDMO) core).getSharedImportSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getSharedImportIsEmpty(){
        if (((ViewDMO) core).getSharedImportSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getSharedImportHasValue(){
        if (((ViewDMO) core).getSharedImportSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public StringIterableDMW getSharedImportIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sharedImport);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ViewDMO) core).getSharedImport()));
    }

    /**
     * Adds another sharedImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addSharedImport(Object value) throws DmcValueException {
        ((ViewDMO) core).addSharedImport(value);
    }

    /**
     * Adds another sharedImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addSharedImport(String value){
        ((ViewDMO) core).addSharedImport(value);
    }

    /**
     * Returns true if the collection contains the sharedImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean sharedImportContains(String value){
        return(((ViewDMO) core).sharedImportContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public TreeSet<String> getSharedImportCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sharedImport);
        if (attr == null)
            return(new TreeSet<String>());
        
        TreeSet<String> rc = new TreeSet<String>();
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sharedImport value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delSharedImport(Object value) throws DmcValueException {
        ((ViewDMO) core).delSharedImport(value);
    }

    /**
     * Deletes a sharedImport value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delSharedImport(String value){
        ((ViewDMO) core).delSharedImport(value);
    }

    /**
     * Removes the sharedImport attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remSharedImport(){
        ((ViewDMO) core).remSharedImport();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public String getSubpackage(){
        return(((ViewDMO) core).getSubpackage());
    }

    /**
     * Sets subpackage to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setSubpackage(Object value) throws DmcValueException {
        ((ViewDMO) core).setSubpackage(value);
    }

    /**
     * Sets subpackage to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setSubpackage(String value){
        ((ViewDMO) core).setSubpackage(value);
    }

    /**
     * Removes the subpackage attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remSubpackage(){
        ((ViewDMO) core).remSubpackage();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public String getUseBaseClass(){
        return(((ViewDMO) core).getUseBaseClass());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setUseBaseClass(Object value) throws DmcValueException {
        ((ViewDMO) core).setUseBaseClass(value);
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setUseBaseClass(String value){
        ((ViewDMO) core).setUseBaseClass(value);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remUseBaseClass(){
        ((ViewDMO) core).remUseBaseClass();
    }

    /**
     * @return The number of RunContextItem items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getUsesRunContextItemSize(){
        return(((ViewDMO) core).getUsesRunContextItemSize());
    }

    /**
     * @return true if there are no RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getUsesRunContextItemIsEmpty(){
        if (((ViewDMO) core).getUsesRunContextItemSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getUsesRunContextItemHasValue(){
        if (((ViewDMO) core).getUsesRunContextItemSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1528)
    public RunContextItemIterableDMW getUsesRunContextItemIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return(RunContextItemIterableDMW.emptyList);
        
        return(new RunContextItemIterableDMW(((ViewDMO) core).getUsesRunContextItem()));
    }

    /**
     * Adds another usesRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1585)
    public DmcAttribute<?> addUsesRunContextItem(RunContextItem value){
        DmcAttribute<?> attr = ((ViewDMO) core).addUsesRunContextItem(((RunContextItemDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a usesRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1635)
    public void delUsesRunContextItem(RunContextItem value){
        ((ViewDMO) core).delUsesRunContextItem(value.getDMO());
    }

    /**
     * @return A COPY of the collection of RunContextItem objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1697)
    public TreeSet<RunContextItem> getUsesRunContextItemCopy(){
        DmcAttribute<?> attr = ((ViewDMO) core).get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return(new TreeSet<RunContextItem>());
        
        TreeSet<RunContextItem> rc = new TreeSet<RunContextItem>();
        
        RunContextItemIterableDMW it = getUsesRunContextItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the usesRunContextItem attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remUsesRunContextItem(){
        ((ViewDMO) core).remUsesRunContextItem();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getViewImportSize(){
        return(((ViewDMO) core).getViewImportSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getViewImportIsEmpty(){
        if (((ViewDMO) core).getViewImportSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getViewImportHasValue(){
        if (((ViewDMO) core).getViewImportSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public StringIterableDMW getViewImportIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__viewImport);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ViewDMO) core).getViewImport()));
    }

    /**
     * Adds another viewImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addViewImport(Object value) throws DmcValueException {
        ((ViewDMO) core).addViewImport(value);
    }

    /**
     * Adds another viewImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addViewImport(String value){
        ((ViewDMO) core).addViewImport(value);
    }

    /**
     * Returns true if the collection contains the viewImport value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean viewImportContains(String value){
        return(((ViewDMO) core).viewImportContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public TreeSet<String> getViewImportCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__viewImport);
        if (attr == null)
            return(new TreeSet<String>());
        
        TreeSet<String> rc = new TreeSet<String>();
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a viewImport value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delViewImport(Object value) throws DmcValueException {
        ((ViewDMO) core).delViewImport(value);
    }

    /**
     * Deletes a viewImport value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delViewImport(String value){
        ((ViewDMO) core).delViewImport(value);
    }

    /**
     * Removes the viewImport attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remViewImport(){
        ((ViewDMO) core).remViewImport();
    }

    /**
     * @return The number of MethodWithArgs items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getViewMethodSize(){
        return(((ViewDMO) core).getViewMethodSize());
    }

    /**
     * @return true if there are no MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getViewMethodIsEmpty(){
        if (((ViewDMO) core).getViewMethodSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getViewMethodHasValue(){
        if (((ViewDMO) core).getViewMethodSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public MethodWithArgsIterableDMW getViewMethodIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__viewMethod);
        if (attr == null)
            return(MethodWithArgsIterableDMW.emptyList);
        
        return(new MethodWithArgsIterableDMW(((ViewDMO) core).getViewMethod()));
    }

    /**
     * Adds another viewMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addViewMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).addViewMethod(value);
    }

    /**
     * Adds another viewMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addViewMethod(MethodWithArgs value){
        ((ViewDMO) core).addViewMethod(value);
    }

    /**
     * Returns true if the collection contains the viewMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean viewMethodContains(MethodWithArgs value){
        return(((ViewDMO) core).viewMethodContains(value));
    }

    /**
     * @return A COPY of the collection of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<MethodWithArgs> getViewMethodCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__viewMethod);
        if (attr == null)
            return(new ArrayList<MethodWithArgs>());
        
        ArrayList<MethodWithArgs> rc = new ArrayList<MethodWithArgs>(attr.getMVSize());
        
        Iterator<MethodWithArgs> it = (Iterator<MethodWithArgs>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a viewMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delViewMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).delViewMethod(value);
    }

    /**
     * Deletes a viewMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delViewMethod(MethodWithArgs value){
        ((ViewDMO) core).delViewMethod(value);
    }

    /**
     * Removes the viewMethod attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remViewMethod(){
        ((ViewDMO) core).remViewMethod();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public CamelCaseName getViewName(){
        return(((ViewDMO) core).getViewName());
    }

    /**
     * Sets viewName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setViewName(Object value) throws DmcValueException {
        ((ViewDMO) core).setViewName(value);
    }

    /**
     * Sets viewName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setViewName(CamelCaseName value){
        ((ViewDMO) core).setViewName(value);
    }

    /**
     * Removes the viewName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remViewName(){
        ((ViewDMO) core).remViewName();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public Boolean isWidget(){
        return(((ViewDMO) core).isWidget());
    }

    /**
     * Sets widget to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setWidget(Object value) throws DmcValueException {
        ((ViewDMO) core).setWidget(value);
    }

    /**
     * Sets widget to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setWidget(Boolean value){
        ((ViewDMO) core).setWidget(value);
    }

    /**
     * Removes the widget attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remWidget(){
        ((ViewDMO) core).remWidget();
    }


}
