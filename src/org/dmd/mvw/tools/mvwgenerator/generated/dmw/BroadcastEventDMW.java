package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import org.dmd.dmc.*;                                                          // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                        // Primitive type
import org.dmd.dms.*;                                                          // Always 2
import org.dmd.dms.generated.types.DmcTypeModifierMV;                          // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.BroadcastEvent;                 // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.extended.MvwEvent;                       // Derived class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.BroadcastEventDMO;         // Class not auxiliary or abstract

/**
 * The BroadcastEvent is fired by producers that want to publish an event on
 * the Event Bus. An additional concept associated with BroadcastEvents is
 * that they may be associated with an EventChannel. What this means it that
 * when the producer fires a BroadcastEvent associated with an EventChannel,
 * all listeners of that EventChannel will receive it. And, since many
 * BroadcastEvents can share an EventChannel, it mean sthat you can group
 * together events that have something in common.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class BroadcastEventDMW extends MvwEvent implements DmcNamedObjectIF {

    public BroadcastEventDMW() {
        super(new BroadcastEventDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._BroadcastEvent);
    }

    public BroadcastEventDMW(DmcTypeModifierMV mods) {
        super(new BroadcastEventDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._BroadcastEvent);
    }

    public BroadcastEvent getModificationRecorder(){
        BroadcastEvent rc = new BroadcastEvent();
        rc.setEventCause(getEventCause());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public BroadcastEventDMW(BroadcastEventDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._BroadcastEvent);
    }

    public BroadcastEventDMO getDMO() {
        return((BroadcastEventDMO) core);
    }

    protected BroadcastEventDMW(BroadcastEventDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((BroadcastEventDMO) core).getEventCause());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((BroadcastEventDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof BroadcastEventDMW){
            return( getObjectName().equals( ((BroadcastEventDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getEventCause(){
        return(((BroadcastEventDMO) core).getEventCause());
    }

    /**
     * Sets eventCause to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setEventCause(Object value) throws DmcValueException {
        ((BroadcastEventDMO) core).setEventCause(value);
    }

    /**
     * Sets eventCause to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setEventCause(CamelCaseName value){
        ((BroadcastEventDMO) core).setEventCause(value);
    }

    /**
     * Removes the eventCause attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remEventCause(){
        ((BroadcastEventDMO) core).remEventCause();
    }


}
