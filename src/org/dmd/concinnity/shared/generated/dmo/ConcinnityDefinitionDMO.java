//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.concinnity.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:408)
import java.io.Serializable;                                                           // Always required - (GenUtility.java:227)
import org.dmd.concinnity.shared.generated.dmo.ConcinnityModuleDMO;                    // Type specific set/add - (GenUtility.java:318)
import org.dmd.concinnity.shared.generated.types.ConcinnityModuleREF;                  // Helper class - (GenUtility.java:346)
import org.dmd.concinnity.shared.generated.types.DmcTypeConcinnityModuleREFSV;         // Reference type - (GenUtility.java:311)
import org.dmd.dmc.DmcAttribute;                                                       // Named object - (GenUtility.java:388)
import org.dmd.dmc.DmcNamedObjectIF;                                                   // Named object - (GenUtility.java:387)
import org.dmd.dmc.DmcOmni;                                                            // Lazy resolution - (GenUtility.java:331)
import org.dmd.dmc.DmcValueException;                                                  // Any attributes - (GenUtility.java:249)
import org.dmd.dmc.types.DefinitionName;                                               // Naming attribute type - (GenUtility.java:382)
import org.dmd.dmc.types.DotName;                                                      // Primitive type - (GenUtility.java:282)
import org.dmd.dms.generated.dmo.ConcinnityDMO;                                        // Base class - (GenUtility.java:367)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                            // Attribute from meta schema - (GenUtility.java:197)
import org.dmd.dms.generated.types.DmcTypeDefinitionNameSV;                            // Required type - (GenUtility.java:339)
import org.dmd.dms.generated.types.DmcTypeDotNameSV;                                   // Required type - (GenUtility.java:339)

// Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:678)
/**
 * The ConcinnityDefinition provides a common base for all Concinnity related
 * definitions.
 * <P>
 * Generated from the dmconcinnity schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:134)
 */
@SuppressWarnings("serial")
abstract public class ConcinnityDefinitionDMO  extends ConcinnityDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "ConcinnityDefinition";


    static {
    }

    public ConcinnityDefinitionDMO() {
        super("ConcinnityDefinition");
    }

    protected ConcinnityDefinitionDMO(String oc) {
        super(oc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:752)
    public DefinitionName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((DefinitionName)name.getSV());
    
        return(null);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:769)
    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:776)
    public boolean equals(Object obj){
        if (obj instanceof ConcinnityDefinitionDMO){
            return( getObjectName().equals( ((ConcinnityDefinitionDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:784)
    public int hashCode(){
        DefinitionName objn = getObjectName();
        if (objn == null)
            return(0);
        
        return(objn.hashCode());
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:789)
    public DefinitionName getName(){
        DmcTypeDefinitionNameSV attr = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:829)
    public void setName(DefinitionName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:882)
    public void setName(Object value) throws DmcValueException {
        DmcTypeDefinitionNameSV attr  = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:902)
    public void remName(){
         rem(MetaDMSAG.__name);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:789)
    public DotName getDotName(){
        DmcTypeDotNameSV attr = (DmcTypeDotNameSV) get(MetaDMSAG.__dotName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets dotName to the specified value.
     * @param value DotName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:829)
    public void setDotName(DotName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__dotName);
        if (attr == null)
            attr = new DmcTypeDotNameSV(MetaDMSAG.__dotName);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__dotName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets dotName to the specified value.
     * @param value A value compatible with DmcTypeDotNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:882)
    public void setDotName(Object value) throws DmcValueException {
        DmcTypeDotNameSV attr  = (DmcTypeDotNameSV) get(MetaDMSAG.__dotName);
        if (attr == null)
            attr = new DmcTypeDotNameSV(MetaDMSAG.__dotName);
        
        attr.set(value);
        set(MetaDMSAG.__dotName,attr);
    }

    /**
     * Removes the dotName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:902)
    public void remDotName(){
         rem(MetaDMSAG.__dotName);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:660)
    public ConcinnityModuleREF getDefinedInConcinnityModule(){
        DmcTypeConcinnityModuleREFSV attr = (DmcTypeConcinnityModuleREFSV) get(DmconcinnityDMSAG.__definedInConcinnityModule);
        if (attr == null)
            return(null);

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return(null);
            }
        }

        return(attr.getSV());
    }

    /**
     * Returns the reference to ConcinnityModule without attempting lazy resolution (if turned on).
     */
    public ConcinnityModuleREF getDefinedInConcinnityModuleREF(){
        DmcTypeConcinnityModuleREFSV attr = (DmcTypeConcinnityModuleREFSV) get(DmconcinnityDMSAG.__definedInConcinnityModule);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets definedInConcinnityModule to the specified value.
     * @param value ConcinnityModuleDMO
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:714)
    public void setDefinedInConcinnityModule(ConcinnityModuleDMO value) {
        DmcAttribute<?> attr = get(DmconcinnityDMSAG.__definedInConcinnityModule);
        if (attr == null)
            attr = new DmcTypeConcinnityModuleREFSV(DmconcinnityDMSAG.__definedInConcinnityModule);
        else
            ((DmcTypeConcinnityModuleREFSV)attr).removeBackReferences();
        
        try{
            attr.set(value);
            set(DmconcinnityDMSAG.__definedInConcinnityModule,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets definedInConcinnityModule to the specified value.
     * @param value A value compatible with DmcTypeConcinnityModuleREFSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:882)
    public void setDefinedInConcinnityModule(Object value) throws DmcValueException {
        DmcTypeConcinnityModuleREFSV attr  = (DmcTypeConcinnityModuleREFSV) get(DmconcinnityDMSAG.__definedInConcinnityModule);
        if (attr == null)
            attr = new DmcTypeConcinnityModuleREFSV(DmconcinnityDMSAG.__definedInConcinnityModule);
        else
            attr.removeBackReferences();
        
        attr.set(value);
        set(DmconcinnityDMSAG.__definedInConcinnityModule,attr);
    }

    /**
     * Removes the definedInConcinnityModule attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:902)
    public void remDefinedInConcinnityModule(){
         rem(DmconcinnityDMSAG.__definedInConcinnityModule);
    }




}
