package org.dmd.concinnity.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import java.util.ArrayList;                                                             // To support getMVCopy() - (BaseDMWGenerator.java:1181)
import java.util.Iterator;                                                              // Support copy of MV objects - (BaseDMWGenerator.java:2240)
import org.dmd.concinnity.server.extended.Concept;                                      // A definition from the ConcinnityModule Module - (DSDefinitionModule.java:191)
import org.dmd.concinnity.server.extended.ConcinnityDefinition;                         // Derived class - (BaseDMWGenerator.java:1248)
import org.dmd.concinnity.server.extended.ConcinnityModule;                             // Required for getModificationRecorder() - (BaseDMWGenerator.java:1076)
import org.dmd.concinnity.server.generated.dmw.ConcinnityModuleIterableDMW;             // For multi-valued ConcinnityModule - (BaseDMWGenerator.java:1709)
import org.dmd.concinnity.server.generated.dsd.ConcinnityModuleScopedInterface;         // Required to manage module definition - (DMWGenerator.java:170)
import org.dmd.concinnity.shared.generated.dmo.ConcinnityModuleDMO;                     // Class not auxiliary or abstract - (BaseDMWGenerator.java:1252)
import org.dmd.concinnity.shared.generated.dmo.DmconcinnityDMSAG;                       // Attribute dependsOnConcinnityModule from the dmconcinnity schema - (BaseDMWGenerator.java:897)
import org.dmd.concinnity.shared.generated.types.ConcinnityModuleREF;                   // Required to access defined in module name - (DMWGenerator.java:181)
import org.dmd.dmc.*;                                                                   // If any attributes - (BaseDMWGenerator.java:1087)
import org.dmd.dmc.definitions.DmcDefinitionIF;                                         // The object is a domain specific definition - (BaseDMWGenerator.java:411)
import org.dmd.dmc.definitions.DmcDefinitionSet;                                        // Our base to provide definition set storage - (DMWGenerator.java:171)
import org.dmd.dmc.types.DefinitionName;                                                // Is named by - (BaseDMWGenerator.java:1062)
import org.dmd.dmc.types.DotName;                                                       // To support the find method for definitions - (DSDefinitionModule.java:180)
import org.dmd.dms.ClassDefinition;                                                     // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:1067)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                             // Attribute defFiles from the meta schema - (BaseDMWGenerator.java:897)
import org.dmd.dms.generated.dmw.SchemaAndReasonIterableDMW;                            // For multi-valued SchemaAndReason - (BaseDMWGenerator.java:2103)
import org.dmd.dms.generated.dmw.StringIterableDMW;                                     // For multi-valued String - (BaseDMWGenerator.java:2103)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                   // Required for MODREC constructor - (BaseDMWGenerator.java:1071)
import org.dmd.dms.generated.types.SchemaAndReason;                                     // Primitive type - (BaseDMWGenerator.java:1150)



/**
 * <P>
 * Generated from the dmconcinnity schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:479)
 */
abstract public class ConcinnityModuleDMW extends ConcinnityDefinition implements ConcinnityModuleScopedInterface, DmcDefinitionIF, DmcNamedObjectIF {

    // Generated from: org.dmd.util.codegen.MemberManager.getFormattedMembers(MemberManager.java:64)
    // Called from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperDefinitions(DMWGenerator.java:204)
    DmcDefinitionSet<ConcinnityDefinition>     ConcinnityDefinitionDefs    = new DmcDefinitionSet<ConcinnityDefinition>("ConcinnityModule-allDefinitions");     // All definitions associated with this module
    DmcDefinitionSet<Concept>                  ConceptDefs                 = new DmcDefinitionSet<Concept>("ConcinnityModule-ConceptDefs");                     // All Concept definitions
    DmcDefinitionSet<ConcinnityModule>         ConcinnityModuleDefs        = new DmcDefinitionSet<ConcinnityModule>("ConcinnityModule-ConcinnityModuleDefs");   // All ConcinnityModule definitions

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:558)
    public ConcinnityModuleDMW() {
        super(new ConcinnityModuleDMO(), org.dmd.concinnity.server.generated.DmconcinnitySchemaAG._ConcinnityModule);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:564)
    public ConcinnityModuleDMW(DmcTypeModifierMV mods) {
        super(new ConcinnityModuleDMO(mods), org.dmd.concinnity.server.generated.DmconcinnitySchemaAG._ConcinnityModule);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:606)
    public ConcinnityModule getModificationRecorder(){
        ConcinnityModule rc = new ConcinnityModule();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:627)
    public ConcinnityModuleDMW(ConcinnityModuleDMO obj) {
        super(obj, org.dmd.concinnity.server.generated.DmconcinnitySchemaAG._ConcinnityModule);
    }

    public ConcinnityModule cloneIt() {
        ConcinnityModule rc = new ConcinnityModule();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public ConcinnityModuleDMO getDMO() {
        return((ConcinnityModuleDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:642)
    protected ConcinnityModuleDMW(ConcinnityModuleDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1297)
    public DefinitionName getObjectName(){
        return(((ConcinnityModuleDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ConcinnityModuleDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ConcinnityModuleDMW){
            return( getObjectName().equals( ((ConcinnityModuleDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getDefFilesSize(){
        return(((ConcinnityModuleDMO) core).getDefFilesSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getDefFilesIsEmpty(){
        if (((ConcinnityModuleDMO) core).getDefFilesSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getDefFilesHasValue(){
        if (((ConcinnityModuleDMO) core).getDefFilesSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2107)
    public StringIterableDMW getDefFilesIterable(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__defFiles);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ConcinnityModuleDMO) core).getDefFiles()));
    }

    /**
     * Adds another defFiles value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2133)
    public void addDefFiles(Object value) throws DmcValueException {
        ((ConcinnityModuleDMO) core).addDefFiles(value);
    }

    /**
     * Adds another defFiles value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2143)
    public void addDefFiles(String value){
        ((ConcinnityModuleDMO) core).addDefFiles(value);
    }

    /**
     * Returns true if the collection contains the defFiles value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2200)
    public boolean defFilesContains(String value){
        return(((ConcinnityModuleDMO) core).defFilesContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2244)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getDefFilesCopy(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__defFiles);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a defFiles value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2271)
    public void delDefFiles(Object value) throws DmcValueException {
        ((ConcinnityModuleDMO) core).delDefFiles(value);
    }

    /**
     * Deletes a defFiles value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2280)
    public void delDefFiles(String value){
        ((ConcinnityModuleDMO) core).delDefFiles(value);
    }

    /**
     * Removes the defFiles attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remDefFiles(){
        ((ConcinnityModuleDMO) core).remDefFiles();
    }

    /**
     * @return The number of ConcinnityModule items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getDependsOnConcinnityModuleSize(){
        return(((ConcinnityModuleDMO) core).getDependsOnConcinnityModuleSize());
    }

    /**
     * @return true if there are no ConcinnityModuleDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getDependsOnConcinnityModuleIsEmpty(){
        if (((ConcinnityModuleDMO) core).getDependsOnConcinnityModuleSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any ConcinnityModuleDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getDependsOnConcinnityModuleHasValue(){
        if (((ConcinnityModuleDMO) core).getDependsOnConcinnityModuleSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of ConcinnityModuleDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1716)
    public ConcinnityModuleIterableDMW getDependsOnConcinnityModuleIterable(){
        DmcAttribute<?> attr = core.get(DmconcinnityDMSAG.__dependsOnConcinnityModule);
        if (attr == null)
            return(ConcinnityModuleIterableDMW.emptyList);
        
        return(new ConcinnityModuleIterableDMW(((ConcinnityModuleDMO) core).getDependsOnConcinnityModule()));
    }

    /**
     * Adds another dependsOnConcinnityModule value.
     * @param value A value compatible with ConcinnityModule
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1773)
    public DmcAttribute<?> addDependsOnConcinnityModule(ConcinnityModule value){
        DmcAttribute<?> attr = ((ConcinnityModuleDMO) core).addDependsOnConcinnityModule(((ConcinnityModuleDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a dependsOnConcinnityModule value.
     * @param value The ConcinnityModule to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1823)
    public void delDependsOnConcinnityModule(ConcinnityModule value){
        ((ConcinnityModuleDMO) core).delDependsOnConcinnityModule(value.getDMO());
    }

    /**
     * @return A COPY of the collection of ConcinnityModule objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1887)
    public ArrayList<ConcinnityModule> getDependsOnConcinnityModuleCopy(){
        DmcAttribute<?> attr = ((ConcinnityModuleDMO) core).get(DmconcinnityDMSAG.__dependsOnConcinnityModule);
        if (attr == null)
            return(new ArrayList<ConcinnityModule>());
        
        ArrayList<ConcinnityModule> rc = new ArrayList<ConcinnityModule>(attr.getMVSize());
        
        ConcinnityModuleIterableDMW it = getDependsOnConcinnityModuleIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the dependsOnConcinnityModule attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remDependsOnConcinnityModule(){
        ((ConcinnityModuleDMO) core).remDependsOnConcinnityModule();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getDescriptionSize(){
        return(((ConcinnityModuleDMO) core).getDescriptionSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getDescriptionIsEmpty(){
        if (((ConcinnityModuleDMO) core).getDescriptionSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getDescriptionHasValue(){
        if (((ConcinnityModuleDMO) core).getDescriptionSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2107)
    public StringIterableDMW getDescriptionIterable(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__description);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ConcinnityModuleDMO) core).getDescription()));
    }

    /**
     * Adds another description value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2133)
    public void addDescription(Object value) throws DmcValueException {
        ((ConcinnityModuleDMO) core).addDescription(value);
    }

    /**
     * Adds another description value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2143)
    public void addDescription(String value){
        ((ConcinnityModuleDMO) core).addDescription(value);
    }

    /**
     * Returns true if the collection contains the description value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2200)
    public boolean descriptionContains(String value){
        return(((ConcinnityModuleDMO) core).descriptionContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2244)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getDescriptionCopy(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__description);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a description value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2271)
    public void delDescription(Object value) throws DmcValueException {
        ((ConcinnityModuleDMO) core).delDescription(value);
    }

    /**
     * Deletes a description value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2280)
    public void delDescription(String value){
        ((ConcinnityModuleDMO) core).delDescription(value);
    }

    /**
     * Removes the description attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remDescription(){
        ((ConcinnityModuleDMO) core).remDescription();
    }

    /**
     * @return The number of SchemaAndReason items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getLoadSchemaClassSize(){
        return(((ConcinnityModuleDMO) core).getLoadSchemaClassSize());
    }

    /**
     * @return true if there are no SchemaAndReasonDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getLoadSchemaClassIsEmpty(){
        if (((ConcinnityModuleDMO) core).getLoadSchemaClassSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any SchemaAndReasonDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getLoadSchemaClassHasValue(){
        if (((ConcinnityModuleDMO) core).getLoadSchemaClassSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of SchemaAndReason objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2107)
    public SchemaAndReasonIterableDMW getLoadSchemaClassIterable(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__loadSchemaClass);
        if (attr == null)
            return(SchemaAndReasonIterableDMW.emptyList);
        
        return(new SchemaAndReasonIterableDMW(((ConcinnityModuleDMO) core).getLoadSchemaClass()));
    }

    /**
     * Adds another loadSchemaClass value.
     * @param value A value compatible with SchemaAndReason
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2133)
    public void addLoadSchemaClass(Object value) throws DmcValueException {
        ((ConcinnityModuleDMO) core).addLoadSchemaClass(value);
    }

    /**
     * Adds another loadSchemaClass value.
     * @param value A value compatible with SchemaAndReason
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2143)
    public void addLoadSchemaClass(SchemaAndReason value){
        ((ConcinnityModuleDMO) core).addLoadSchemaClass(value);
    }

    /**
     * Returns true if the collection contains the loadSchemaClass value.
     * @param value A value compatible with SchemaAndReason
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2200)
    public boolean loadSchemaClassContains(SchemaAndReason value){
        return(((ConcinnityModuleDMO) core).loadSchemaClassContains(value));
    }

    /**
     * @return A COPY of the collection of SchemaAndReason objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2244)
    @SuppressWarnings("unchecked")
    public ArrayList<SchemaAndReason> getLoadSchemaClassCopy(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__loadSchemaClass);
        if (attr == null)
            return(new ArrayList<SchemaAndReason>());
        
        ArrayList<SchemaAndReason> rc = new ArrayList<SchemaAndReason>(attr.getMVSize());
        
        Iterator<SchemaAndReason> it = (Iterator<SchemaAndReason>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a loadSchemaClass value.
     * @param value The SchemaAndReason to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2271)
    public void delLoadSchemaClass(Object value) throws DmcValueException {
        ((ConcinnityModuleDMO) core).delLoadSchemaClass(value);
    }

    /**
     * Deletes a loadSchemaClass value.
     * @param value The SchemaAndReason to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2280)
    public void delLoadSchemaClass(SchemaAndReason value){
        ((ConcinnityModuleDMO) core).delLoadSchemaClass(value);
    }

    /**
     * Removes the loadSchemaClass attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remLoadSchemaClass(){
        ((ConcinnityModuleDMO) core).remLoadSchemaClass();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public DefinitionName getName(){
        return(((ConcinnityModuleDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setName(Object value) throws DmcValueException {
        ((ConcinnityModuleDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setName(DefinitionName value){
        ((ConcinnityModuleDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remName(){
        ((ConcinnityModuleDMO) core).remName();
    }

    // Generated from: org.dmd.dms.DSDefinitionModule.getInterfaceMethodsImplementations(DSDefinitionModule.java:302)
    // Called from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperFunctions(DMWGenerator.java:212)
    /**
     * All definitions are added to the base definition collection.
     */
    void addConcinnityDefinition(ConcinnityDefinition def){
        ConcinnityDefinitionDefs.add(def);
    }

    public int getConcinnityDefinitionCount(){
        return(ConcinnityDefinitionDefs.size());
    }

    public ConcinnityDefinition getConcinnityDefinition(DotName name){
        return(ConcinnityDefinitionDefs.getDefinition(name));
    }

    public Iterator<ConcinnityDefinition> getAllConcinnityDefinition(){
        return(ConcinnityDefinitionDefs.values().iterator());
    }

    // Generated from: org.dmd.dms.DSDefinitionModule.getInterfaceMethodsImplementations(DSDefinitionModule.java:337)
    public void addConcept(Concept def){
        ConceptDefs.add(def);
        addConcinnityDefinition(def);
    }

    public int getConceptCount(){
        return(ConceptDefs.size());
    }

    public Concept getConcept(DotName name){
        return(ConceptDefs.getDefinition(name));
    }

    public Iterator<Concept> getAllConcept(){
        return(ConceptDefs.values().iterator());
    }

    public Concept getConceptDefinition(String name) throws DmcNameClashException, DmcValueException{
        return(ConceptDefs.getDefinition(name));
    }

    public Iterator<Concept> getConceptDefinitionsByName(String name) throws DmcValueException{
        return(ConceptDefs.getDefinitionsByName(name));
    }

    public int getConceptDefinitionCountByName(String name) throws DmcValueException{
        return(ConceptDefs.getDefinitionCountByName(name));
    }

    // Generated from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperFunctions(DMWGenerator.java:221)
    /**
     * This method indicates the name of the module from which this definition was loaded.
     * And, since this is a module, it's just the name of the module.
     */
    @Override
    public String getNameOfModuleWhereThisCameFrom(){
        return(getName().getNameString());
    }


}
