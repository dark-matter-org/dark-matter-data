package org.dmd.dmp.server.servlet.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:349)
import org.dmd.dmc.*;                                                 // If any attributes - (BaseDMWGeneratorNewest.java:903)
import org.dmd.dmc.types.DotName;                                     // Is named by - (BaseDMWGeneratorNewest.java:884)
import org.dmd.dmp.server.servlet.extended.SessionRI;                 // Required for getModificationRecorder() - (BaseDMWGeneratorNewest.java:896)
import org.dmd.dmp.server.servlet.generated.dmo.SessionRIDMO;         // Class not auxiliary or abstract - (BaseDMWGeneratorNewest.java:1068)
import org.dmd.dmp.server.servlet.generated.dmw.UserRIDMW;            // Is reference type - (BaseDMWGeneratorNewest.java:923)
import org.dmd.dmp.server.servlet.generated.types.UserRIREF;          // Is reference type REF - (BaseDMWGeneratorNewest.java:931)
import org.dmd.dms.*;                                                 // Always 2 - (BaseDMWGeneratorNewest.java:888)
import org.dmd.dms.generated.dmo.MetaDMSAG;                           // Required for MODREC constructor - (BaseDMWGeneratorNewest.java:892)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                 // Required for MODREC constructor - (BaseDMWGeneratorNewest.java:891)
import org.dmd.dmw.DmwHierarchicObjectWrapper;                        // Hierarchic object wrapper - (BaseDMWGeneratorNewest.java:1055)


/**
 * The SessionRI represents an authenticated user session and is an important
 * aspect of any serious application. All interactions are usually associated
 * with a valid session and, in the case of the reference implementation of
 * the Dark MAtter Protocol service are also associated with the handling of
 * asynchronous message handling and events.
 * <P>
 * Generated from the dmp.server schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:366)
 */
public class SessionRIDMW extends DmwHierarchicObjectWrapper implements DmcHierarchicNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:443)
    public SessionRIDMW() {
        super(new SessionRIDMO(), org.dmd.dmp.server.servlet.generated.DmpServerSchemaAG._SessionRI);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:449)
    public SessionRIDMW(DmcTypeModifierMV mods) {
        super(new SessionRIDMO(mods), org.dmd.dmp.server.servlet.generated.DmpServerSchemaAG._SessionRI);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:491)
    public SessionRI getModificationRecorder(){
        SessionRI rc = new SessionRI();
        rc.setDotName(getDotName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:512)
    public SessionRIDMW(SessionRIDMO obj) {
        super(obj, org.dmd.dmp.server.servlet.generated.DmpServerSchemaAG._SessionRI);
    }

    public SessionRI cloneIt() {
        SessionRI rc = new SessionRI();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public SessionRIDMO getDMO() {
        return((SessionRIDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:527)
    protected SessionRIDMW(SessionRIDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.getAccessFunctions(BaseDMWGeneratorNewest.java:1113)
    public DotName getObjectName(){
        return(((SessionRIDMO) core).getDotName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((SessionRIDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof SessionRIDMW){
            return( getObjectName().equals( ((SessionRIDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.getAccessFunctions(BaseDMWGeneratorNewest.java:1134)
    public DotName getHierarchicObjectName(){
        return(((SessionRIDMO) core).getDotName());
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public DotName getDotName(){
        return(((SessionRIDMO) core).getDotName());
    }

    /**
     * Sets dotName to the specified value.
     * @param value A value compatible with DmcTypeDotName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setDotName(Object value) throws DmcValueException {
        ((SessionRIDMO) core).setDotName(value);
    }

    /**
     * Sets dotName to the specified value.
     * @param value DotName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setDotName(DotName value){
        ((SessionRIDMO) core).setDotName(value);
    }

    /**
     * Removes the dotName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remDotName(){
        ((SessionRIDMO) core).remDotName();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public String getSessionHostRI(){
        return(((SessionRIDMO) core).getSessionHostRI());
    }

    /**
     * Sets sessionHostRI to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setSessionHostRI(Object value) throws DmcValueException {
        ((SessionRIDMO) core).setSessionHostRI(value);
    }

    /**
     * Sets sessionHostRI to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setSessionHostRI(String value){
        ((SessionRIDMO) core).setSessionHostRI(value);
    }

    /**
     * Removes the sessionHostRI attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remSessionHostRI(){
        ((SessionRIDMO) core).remSessionHostRI();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public String getSessionIDRI(){
        return(((SessionRIDMO) core).getSessionIDRI());
    }

    /**
     * Sets sessionIDRI to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setSessionIDRI(Object value) throws DmcValueException {
        ((SessionRIDMO) core).setSessionIDRI(value);
    }

    /**
     * Sets sessionIDRI to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setSessionIDRI(String value){
        ((SessionRIDMO) core).setSessionIDRI(value);
    }

    /**
     * Removes the sessionIDRI attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remSessionIDRI(){
        ((SessionRIDMO) core).remSessionIDRI();
    }

    /**
     * @return A UserRIDMW object.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1246)
    public UserRIDMW getUserRefRI(){
        UserRIREF ref = ((SessionRIDMO) core).getUserRefRI();
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((UserRIDMW)ref.getObject().getContainer());
    }

    /**
     * Sets the userRefRI to the specified value.
     * @param value A value compatible with UserRIREF
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1331)
    public void setUserRefRI(UserRIDMW value) {
        ((SessionRIDMO) core).setUserRefRI(value.getDMO());
    }

    /**
     * Sets the userRefRI to the specified value.
     * @param value A value compatible with UserRIREF
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1340)
    public void setUserRefRI(Object value) throws DmcValueException {
        ((SessionRIDMO) core).setUserRefRI(value);
    }

    /**
     * Removes the userRefRI attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remUserRefRI(){
        ((SessionRIDMO) core).remUserRefRI();
    }


}
