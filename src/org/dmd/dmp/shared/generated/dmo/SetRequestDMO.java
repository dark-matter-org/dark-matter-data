//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmp.shared.generated.dmo;

// Generated from: org.dmd.util.artifact.java.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dms.tools.dmogen.DmoFormatter.dumpDMO(DmoFormatter.java:101)
import java.io.Serializable;                                                   // Always required - (ImportUtil.java:300)
import java.util.*;                                                            // Always required if we have any MV attributes - (ImportUtil.java:297)
import org.dmd.core.DmcAttribute;                                              // Any attributes - (ImportUtil.java:309)
import org.dmd.core.DmcObjectName;                                             // Alternative type for NameContainer values - (ImportUtil.java:358)
import org.dmd.core.DmcOmni;                                                   // Lazy resolution - (ImportUtil.java:378)
import org.dmd.core.feedback.DMFeedbackSet;                                    // Any attributes - (ImportUtil.java:310)
import org.dmd.core.schema.DmcSliceInfo;                                       // Required for object slicing - (ImportUtil.java:305)
import org.dmd.dmp.shared.generated.dmo.RequestDMO;                            // Base class - (ImportUtil.java:412)
import org.dmd.dms.shared.generated.dmo.ClassDefinitionDMO;                    // Type specific set/add - (ImportUtil.java:370)
import org.dmd.dms.shared.generated.dmo.MetaCompactSchema;                     // Attribute from meta schema - (ImportUtil.java:281)
import org.dmd.dms.shared.generated.types.ClassDefinitionREF;                  // Reference type helper class - (ImportUtil.java:375)
import org.dmd.dms.shared.generated.types.DmcTypeClassDefinitionREFSV;         // Reference type - (ImportUtil.java:363)
import org.dmd.dms.shared.generated.types.DmcTypeModifierMV;                   // Required for MODREC constructor - (ImportUtil.java:303)
import org.dmd.dms.shared.generated.types.DmcTypeNameContainerSV;              // Required type - (ImportUtil.java:386)
import org.dmd.dms.shared.types.Modifier;                                      // Primitive type and !auxiliary class - (ImportUtil.java:334)
import org.dmd.dms.shared.types.NameContainer;                                 // Primitive type and !auxiliary class - (ImportUtil.java:334)

// Generated from: org.dmd.dms.tools.dmogen.DmoFormatter.getClassHeader(DmoFormatter.java:360)
/**
 * The SetRequest allows you to alter the attribute values associated
 with
 * an object. Like the get request, the set of attributes that can be
 * manipulated
 will depend on the object type that is specified.
 * <P>
 * Generated from the dmp schema
 * <P>
 * This code was auto-generated by the dmogen utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.tools.dmogen.DmoFormatter.dumpDMO(DmoFormatter.java:103)
 */
@SuppressWarnings("serial")
public class SetRequestDMO  extends RequestDMO  implements Serializable  {

    public final static String constructionClassName = "SetRequest";


    static {
    }

    public SetRequestDMO() {
        super("SetRequest");
    }

    protected SetRequestDMO(String oc) {
        super(oc);
    }

    @Override
    public SetRequestDMO getNew(){
        SetRequestDMO rc = new SetRequestDMO();
        return(rc);
    }

    @Override
    public SetRequestDMO getSlice(DmcSliceInfo info){
        SetRequestDMO rc = new SetRequestDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public SetRequestDMO(DmcTypeModifierMV mods) {
        super("SetRequest");
        modrec(true);
        setModifier(mods);
    }

    public SetRequestDMO getModificationRecorder(){
        SetRequestDMO rc = new SetRequestDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaCompactSchema.__modify));
        rc.modrec(true);
        return(rc);
    }

    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:47)
    public ClassDefinitionREF getTargetObjectClass(){
        DmcTypeClassDefinitionREFSV attr = (DmcTypeClassDefinitionREFSV) get(DmpCompactSchema.__targetObjectClass);
        if (attr == null)
            return(null);

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return(null);
            }
        }

        return(attr.getSV());
    }

    /**
     * Returns the reference to ClassDefinition without attempting lazy resolution (if turned on).
     */
    public ClassDefinitionREF getTargetObjectClassREF(){
        DmcTypeClassDefinitionREFSV attr = (DmcTypeClassDefinitionREFSV) get(DmpCompactSchema.__targetObjectClass);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets targetObjectClass to the specified value.
     * @param value ClassDefinitionDMO
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:101)
    public void setTargetObjectClass(ClassDefinitionDMO value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__targetObjectClass);
        if (attr == null)
            attr = new DmcTypeClassDefinitionREFSV(DmpCompactSchema.__targetObjectClass);
        else
            ((DmcTypeClassDefinitionREFSV)attr).removeBackReferences();
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__targetObjectClass,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets targetObjectClass to the specified value.
     * @param value A value compatible with DmcTypeClassDefinitionREFSV
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:263)
    public void setTargetObjectClass(Object value) throws DMFeedbackSet {
        DmcTypeClassDefinitionREFSV attr  = (DmcTypeClassDefinitionREFSV) get(DmpCompactSchema.__targetObjectClass);
        if (attr == null)
            attr = new DmcTypeClassDefinitionREFSV(DmpCompactSchema.__targetObjectClass);
        else
            attr.removeBackReferences();
        
        attr.set(value);
        set(DmpCompactSchema.__targetObjectClass,attr);
    }

    /**
     * Removes the targetObjectClass attribute value.
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:282)
    public void remTargetObjectClass(){
         rem(DmpCompactSchema.__targetObjectClass);
    }

    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:175)
    public NameContainer getTarget(){
        DmcTypeNameContainerSV attr = (DmcTypeNameContainerSV) get(DmpCompactSchema.__target);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets target to the specified value.
     * @param value NameContainer
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:215)
    public void setTarget(NameContainer value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__target);
        if (attr == null)
            attr = new DmcTypeNameContainerSV(DmpCompactSchema.__target);
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__target,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets target to the specified value.
     * @param value NameContainer
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:238)
    public void setTarget(DmcObjectName value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__target);
        if (attr == null)
            attr = new DmcTypeNameContainerSV(DmpCompactSchema.__target);
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__target,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The alternative type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets target to the specified value.
     * @param value A value compatible with DmcTypeNameContainerSV
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:263)
    public void setTarget(Object value) throws DMFeedbackSet {
        DmcTypeNameContainerSV attr  = (DmcTypeNameContainerSV) get(DmpCompactSchema.__target);
        if (attr == null)
            attr = new DmcTypeNameContainerSV(DmpCompactSchema.__target);
        
        attr.set(value);
        set(DmpCompactSchema.__target,attr);
    }

    /**
     * Removes the target attribute value.
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:282)
    public void remTarget(){
         rem(DmpCompactSchema.__target);
    }

    /**
     * @return An Iterator of Modifier objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:493)
    public Iterator<Modifier> getModify(){
        DmcTypeModifierMV attr = (DmcTypeModifierMV) get(MetaCompactSchema.__modify);
        if (attr == null)
            return( ((List<Modifier>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth Modifier value.
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:505)
    public Modifier getNthModify(int i){
        DmcTypeModifierMV attr = (DmcTypeModifierMV) get(MetaCompactSchema.__modify);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another modify to the specified value.
     * @param value Modifier
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:519)
    public DmcAttribute<?> addModify(Modifier value) {
        DmcAttribute<?> attr = get(MetaCompactSchema.__modify);
        if (attr == null)
            attr = new DmcTypeModifierMV(MetaCompactSchema.__modify);
        
        try{
            setLastValue(attr.add(value));
            add(MetaCompactSchema.__modify,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified Modifier.
     * @param value Modifier
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:594)
    public boolean modifyContains(Modifier value) {
        DmcAttribute<?> attr = get(MetaCompactSchema.__modify);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another modify value.
     * @param value A value compatible with Modifier
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:626)
    public DmcAttribute<?> addModify(Object value) throws DMFeedbackSet {
        DmcAttribute<?> attr = get(MetaCompactSchema.__modify);
        if (attr == null)
            attr = new DmcTypeModifierMV(MetaCompactSchema.__modify);
        
        setLastValue(attr.add(value));
        add(MetaCompactSchema.__modify,attr);
        return(attr);
    }

    /**
     * Returns the number of values in modify
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:643)
    public int getModifySize(){
        DmcAttribute<?> attr = get(MetaCompactSchema.__modify);
        if (attr == null){
            if (MetaCompactSchema.__modify.indexSize == 0)
                return(0);
            else
                return(MetaCompactSchema.__modify.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a modify value.
     * @param value The Modifier to be deleted from set of attribute values.
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:700)
    public DmcAttribute<?> delModify(Object value) throws DMFeedbackSet {
        DmcAttribute<?> attr = get(MetaCompactSchema.__modify);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeModifierMV(MetaCompactSchema.__modify), value);
        else
            attr = del(MetaCompactSchema.__modify, value);
        
        return(attr);
    }

    /**
     * Deletes a modify from the specified value.
     * @param value Modifier
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:716)
    public DmcAttribute<?> delModify(Modifier value) {
        DmcAttribute<?> attr = get(MetaCompactSchema.__modify);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeModifierMV(MetaCompactSchema.__modify), value);
        else
            attr = del(MetaCompactSchema.__modify, value);
        
        return(attr);
    }

    /**
     * Removes the modify attribute value.
     */
    // org.dmd.dms.tools.dmogen.AccessFunctionFormatter.formatMV(AccessFunctionFormatter.java:735)
    public void remModify(){
         rem(MetaCompactSchema.__modify);
    }




}
