//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmp.shared.generated.dmo;

// Generated from: org.dmd.util.artifact.java.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dms.tools.generation.dmogen.DmoFormatter.dumpDMO(DmoFormatter.java:101)
import java.io.Serializable;                                                     // Always required - (ImportUtil.java:300)
import org.dmd.core.DmcAttribute;                                                // Any attributes - (ImportUtil.java:309)
import org.dmd.core.feedback.DMFeedbackSet;                                      // Any attributes - (ImportUtil.java:310)
import org.dmd.core.schema.DmcSliceInfo;                                         // Required for object slicing - (ImportUtil.java:305)
import org.dmd.dmp.shared.generated.dmo.DMPMessageDMO;                           // Base class - (ImportUtil.java:412)
import org.dmd.dmp.shared.generated.enums.ResponseCategoryEnum;                  // Primitive type and !auxiliary class - (ImportUtil.java:334)
import org.dmd.dmp.shared.generated.enums.ResponseTypeEnum;                      // Primitive type and !auxiliary class - (ImportUtil.java:334)
import org.dmd.dmp.shared.generated.types.DmcTypeResponseCategoryEnumSV;         // Required type - (ImportUtil.java:386)
import org.dmd.dmp.shared.generated.types.DmcTypeResponseTypeEnumSV;             // Required type - (ImportUtil.java:386)
import org.dmd.dms.shared.generated.dmo.MetaCompactSchema;                       // Required for MODREC constructor - (ImportUtil.java:304)
import org.dmd.dms.shared.generated.types.DmcTypeBooleanSV;                      // Required type - (ImportUtil.java:386)
import org.dmd.dms.shared.generated.types.DmcTypeIntegerSV;                      // Required type - (ImportUtil.java:386)
import org.dmd.dms.shared.generated.types.DmcTypeModifierMV;                     // Required for MODREC constructor - (ImportUtil.java:303)
import org.dmd.dms.shared.generated.types.DmcTypeStringSV;                       // Required type - (ImportUtil.java:386)

// Generated from: org.dmd.dms.tools.generation.dmogen.DmoFormatter.getClassHeader(DmoFormatter.java:360)
/**
 * The Response class serves as a common base for all response messages. It
 * used to be
 that the Response was abstract, but because we could receive a
 * completely unknown request (for instance
 via a JSON/XML interface), we
 * had to have the ability to return a generic error response.
 * <P>
 * Generated from the dmp schema
 * <P>
 * This code was auto-generated by the dmogen utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.tools.generation.dmogen.DmoFormatter.dumpDMO(DmoFormatter.java:103)
 */
@SuppressWarnings("serial")
public class ResponseDMO  extends DMPMessageDMO  implements de.novanic.eventservice.client.event.Event, Serializable  {

    public final static String constructionClassName = "Response";


    static {
    }

    public ResponseDMO() {
        super("Response");
    }

    protected ResponseDMO(String oc) {
        super(oc);
    }

    @Override
    public ResponseDMO getNew(){
        ResponseDMO rc = new ResponseDMO();
        return(rc);
    }

    @Override
    public ResponseDMO getSlice(DmcSliceInfo info){
        ResponseDMO rc = new ResponseDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public ResponseDMO(DmcTypeModifierMV mods) {
        super("Response");
        modrec(true);
        setModifier(mods);
    }

    public ResponseDMO getModificationRecorder(){
        ResponseDMO rc = new ResponseDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaCompactSchema.__modify));
        rc.modrec(true);
        return(rc);
    }

    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:175)
    public Integer getHandlerID(){
        DmcTypeIntegerSV attr = (DmcTypeIntegerSV) get(DmpCompactSchema.__handlerID);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets handlerID to the specified value.
     * @param value Integer
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:215)
    public void setHandlerID(Integer value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__handlerID);
        if (attr == null)
            attr = new DmcTypeIntegerSV(DmpCompactSchema.__handlerID);
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__handlerID,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets handlerID to the specified value.
     * @param value A value compatible with DmcTypeIntegerSV
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:263)
    public void setHandlerID(Object value) throws DMFeedbackSet {
        DmcTypeIntegerSV attr  = (DmcTypeIntegerSV) get(DmpCompactSchema.__handlerID);
        if (attr == null)
            attr = new DmcTypeIntegerSV(DmpCompactSchema.__handlerID);
        
        attr.set(value);
        set(DmpCompactSchema.__handlerID,attr);
    }

    /**
     * Removes the handlerID attribute value.
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:282)
    public void remHandlerID(){
         rem(DmpCompactSchema.__handlerID);
    }

    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:175)
    public String getResponseText(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmpCompactSchema.__responseText);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets responseText to the specified value.
     * @param value String
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:215)
    public void setResponseText(String value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__responseText);
        if (attr == null)
            attr = new DmcTypeStringSV(DmpCompactSchema.__responseText);
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__responseText,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets responseText to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:263)
    public void setResponseText(Object value) throws DMFeedbackSet {
        DmcTypeStringSV attr  = (DmcTypeStringSV) get(DmpCompactSchema.__responseText);
        if (attr == null)
            attr = new DmcTypeStringSV(DmpCompactSchema.__responseText);
        
        attr.set(value);
        set(DmpCompactSchema.__responseText,attr);
    }

    /**
     * Removes the responseText attribute value.
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:282)
    public void remResponseText(){
         rem(DmpCompactSchema.__responseText);
    }

    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:175)
    public ResponseCategoryEnum getResponseCategory(){
        DmcTypeResponseCategoryEnumSV attr = (DmcTypeResponseCategoryEnumSV) get(DmpCompactSchema.__responseCategory);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets responseCategory to the specified value.
     * @param value ResponseCategoryEnum
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:215)
    public void setResponseCategory(ResponseCategoryEnum value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__responseCategory);
        if (attr == null)
            attr = new DmcTypeResponseCategoryEnumSV(DmpCompactSchema.__responseCategory);
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__responseCategory,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets responseCategory to the specified value.
     * @param value A value compatible with DmcTypeResponseCategoryEnumSV
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:263)
    public void setResponseCategory(Object value) throws DMFeedbackSet {
        DmcTypeResponseCategoryEnumSV attr  = (DmcTypeResponseCategoryEnumSV) get(DmpCompactSchema.__responseCategory);
        if (attr == null)
            attr = new DmcTypeResponseCategoryEnumSV(DmpCompactSchema.__responseCategory);
        
        attr.set(value);
        set(DmpCompactSchema.__responseCategory,attr);
    }

    /**
     * Removes the responseCategory attribute value.
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:282)
    public void remResponseCategory(){
         rem(DmpCompactSchema.__responseCategory);
    }

    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:175)
    public Boolean isLastResponse(){
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(DmpCompactSchema.__lastResponse);
        if (attr == null)
            return(true);

        return(attr.getSV());
    }

    /**
     * Sets lastResponse to the specified value.
     * @param value Boolean
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:215)
    public void setLastResponse(Boolean value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__lastResponse);
        if (attr == null)
            attr = new DmcTypeBooleanSV(DmpCompactSchema.__lastResponse);
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__lastResponse,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets lastResponse to the specified value.
     * @param value A value compatible with DmcTypeBooleanSV
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:263)
    public void setLastResponse(Object value) throws DMFeedbackSet {
        DmcTypeBooleanSV attr  = (DmcTypeBooleanSV) get(DmpCompactSchema.__lastResponse);
        if (attr == null)
            attr = new DmcTypeBooleanSV(DmpCompactSchema.__lastResponse);
        
        attr.set(value);
        set(DmpCompactSchema.__lastResponse,attr);
    }

    /**
     * Removes the lastResponse attribute value.
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:282)
    public void remLastResponse(){
         rem(DmpCompactSchema.__lastResponse);
    }

    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:175)
    public ResponseTypeEnum getResponseType(){
        DmcTypeResponseTypeEnumSV attr = (DmcTypeResponseTypeEnumSV) get(DmpCompactSchema.__responseType);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets responseType to the specified value.
     * @param value ResponseTypeEnum
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:215)
    public void setResponseType(ResponseTypeEnum value) {
        DmcAttribute<?> attr = get(DmpCompactSchema.__responseType);
        if (attr == null)
            attr = new DmcTypeResponseTypeEnumSV(DmpCompactSchema.__responseType);
        
        try{
            attr.set(value);
            set(DmpCompactSchema.__responseType,attr);
        }
        catch(DMFeedbackSet ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets responseType to the specified value.
     * @param value A value compatible with DmcTypeResponseTypeEnumSV
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:263)
    public void setResponseType(Object value) throws DMFeedbackSet {
        DmcTypeResponseTypeEnumSV attr  = (DmcTypeResponseTypeEnumSV) get(DmpCompactSchema.__responseType);
        if (attr == null)
            attr = new DmcTypeResponseTypeEnumSV(DmpCompactSchema.__responseType);
        
        attr.set(value);
        set(DmpCompactSchema.__responseType,attr);
    }

    /**
     * Removes the responseType attribute value.
     */
    // org.dmd.dms.tools.generation.dmogen.AccessFunctionFormatter.formatSV(AccessFunctionFormatter.java:282)
    public void remResponseType(){
         rem(DmpCompactSchema.__responseType);
    }




}
