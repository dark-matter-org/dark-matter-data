//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.templates.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import org.dmd.dmc.*;                                                   // If any attributes - (BaseDMWGenerator.java:977)
import org.dmd.dmc.definitions.DmcDefinitionIF;                         // The object is a domain specific definition - (BaseDMWGenerator.java:411)
import org.dmd.dmc.types.DefinitionName;                                // Is named by - (BaseDMWGenerator.java:939)
import org.dmd.dms.ClassDefinition;                                     // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:944)
import org.dmd.dms.generated.dmo.MetaDMSAG;                             // Required for MODREC constructor - (BaseDMWGenerator.java:949)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                   // Required for MODREC constructor - (BaseDMWGenerator.java:948)
import org.dmd.templates.server.extended.ContainedElement;              // Derived class - (BaseDMWGenerator.java:1138)
import org.dmd.templates.server.extended.ExtensionHook;                 // Required for getModificationRecorder() - (BaseDMWGenerator.java:953)
import org.dmd.templates.server.extended.Section;                       // Is reference type - (BaseDMWGenerator.java:997)
import org.dmd.templates.shared.generated.dmo.ExtensionHookDMO;         // Class not auxiliary or abstract - (BaseDMWGenerator.java:1142)
import org.dmd.templates.shared.generated.types.SectionREF;             // Is reference type REF - (BaseDMWGenerator.java:1005)
import org.dmd.templates.shared.generated.types.TdlModuleREF;           // Required to access defined in module name - (DMWGenerator.java:181)



/**
 * The dark-matter Domain Specific Definition (DSD) mechanisms allow for
 * the\n extension of objects using auxliary classes and arbitrary name value
 * pairs (via the nvp attribute).\n These mechanisms are useful because they
 * allow you to augment an existing Domain Specific Language\n (DSL) with
 * your own information that can be used to facilitate generation of other
 * types\n of artifacts.\n <p/>\n However, you might also want that
 * additional information to show up in the documentation\n produced as part
 * of the base DSL. That's where the ExtensionHook mechanism comes into
 * play;\n although you can use this for your own purposes to allow others to
 * extend the\n content of your generated artifacts - there's nothing
 * dark-matter specific about \n the mechanism.\n <p/>\n When defining your
 * Sections, you may indicate that they contain ExtensionHooks.  This\n will
 * result in the generation of an ExtensionHook interface for the template
 * definition module.\n Other designers who have extended your DSL then
 * create a class that implements the ExtensionHook\n interface and have it
 * dynamically loaded when the artifact generator is invoked (this is
 * usually\n done via commandline arguments that are passed to the generated
 * TemplateLoader). It's up to the\n designer of the base DSL to provide
 * these mechanisms.\n <p/>\n When formatting the artifact, the base DSL
 * designer will call the method on a Section\n (in the appropriate sequence)
 * to have the TemplateLoader call any registered classes that\n implement
 * the ExtensionHook interface.
 * <P>
 * Generated from the dmtdl schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:488)
 */
abstract public class ExtensionHookDMW extends ContainedElement implements DmcDefinitionIF, DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:577)
    public ExtensionHookDMW() {
        super(new ExtensionHookDMO(), org.dmd.templates.server.generated.DmtdlSchemaAG._ExtensionHook);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:583)
    public ExtensionHookDMW(DmcTypeModifierMV mods) {
        super(new ExtensionHookDMO(mods), org.dmd.templates.server.generated.DmtdlSchemaAG._ExtensionHook);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:625)
    public ExtensionHook getModificationRecorder(){
        ExtensionHook rc = new ExtensionHook();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:646)
    public ExtensionHookDMW(ExtensionHookDMO obj) {
        super(obj, org.dmd.templates.server.generated.DmtdlSchemaAG._ExtensionHook);
    }

    public ExtensionHook cloneIt() {
        ExtensionHook rc = new ExtensionHook();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public ExtensionHookDMO getDMO() {
        return((ExtensionHookDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:661)
    protected ExtensionHookDMW(ExtensionHookDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1187)
    public DefinitionName getObjectName(){
        return(((ExtensionHookDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ExtensionHookDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ExtensionHookDMW){
            return( getObjectName().equals( ((ExtensionHookDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public DefinitionName getName(){
        return(((ExtensionHookDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public void setName(Object value) throws DmcValueException {
        ((ExtensionHookDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1483)
    public void setName(DefinitionName value){
        ((ExtensionHookDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1509)
    public void remName(){
        ((ExtensionHookDMO) core).remName();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public String getTargetObjectClass(){
        return(((ExtensionHookDMO) core).getTargetObjectClass());
    }

    /**
     * Sets targetObjectClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public void setTargetObjectClass(Object value) throws DmcValueException {
        ((ExtensionHookDMO) core).setTargetObjectClass(value);
    }

    /**
     * Sets targetObjectClass to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1483)
    public void setTargetObjectClass(String value){
        ((ExtensionHookDMO) core).setTargetObjectClass(value);
    }

    /**
     * Removes the targetObjectClass attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1509)
    public void remTargetObjectClass(){
        ((ExtensionHookDMO) core).remTargetObjectClass();
    }

    /**
     * @return A Section object.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1324)
    public Section getUsesSection(){
        SectionREF ref = ((ExtensionHookDMO) core).getUsesSection();
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((Section)ref.getObject().getContainer());
    }

    /**
     * Sets the usesSection to the specified value.
     * @param value A value compatible with SectionREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1409)
    public void setUsesSection(Section value) {
        ((ExtensionHookDMO) core).setUsesSection(value.getDMO());
    }

    /**
     * Sets the usesSection to the specified value.
     * @param value A value compatible with SectionREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1418)
    public void setUsesSection(Object value) throws DmcValueException {
        ((ExtensionHookDMO) core).setUsesSection(value);
    }

    /**
     * Removes the usesSection attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1509)
    public void remUsesSection(){
        ((ExtensionHookDMO) core).remUsesSection();
    }

    // Generated from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperFunctions(DMWGenerator.java:234)
    /**
     * This method indicates the name of the module from which this definition was loaded.
     */
    @Override
    public String getNameOfModuleWhereThisCameFrom(){
        TdlModuleREF ref = ((ExtensionHookDMO) core).getDefinedInTdlModule();
        return(ref.getName().getNameString());
    }


}
