//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2012 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dms.shared.generated.types;

// Generated from: org.dmd.util.artifact.java.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dms.tools.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:104)
import java.io.Serializable;                                       // Marker interface for serialization - (ComplexTypeFormatter.java:79)
import java.util.ArrayList;                                        // To store ParsedNameValuePairs - (ComplexTypeFormatter.java:86)
import org.dmd.core.feedback.DMFeedbackSet;                        // For type checking - (ComplexTypeFormatter.java:100)
import org.dmd.core.interfaces.DmcInputStreamIF;                   // To support serialization - (ComplexTypeFormatter.java:80)
import org.dmd.core.interfaces.DmcOutputStreamIF;                  // To support serialization - (ComplexTypeFormatter.java:81)
import org.dmd.core.schema.DmcAttributeInfo;                       // For fake DmcAttributeInfo - (ComplexTypeFormatter.java:84)
import org.dmd.core.util.ComplexTypeSplitter;                      // For parsing initial input - (ComplexTypeFormatter.java:85)
import org.dmd.core.util.ParsedNameValuePair;                      // To store values parsed from initial input - (ComplexTypeFormatter.java:87)
import org.dmd.dms.shared.generated.enums.DataTypeEnum;            // For fake DmcAttributeInfo - (ComplexTypeFormatter.java:82)
import org.dmd.dms.shared.generated.enums.ValueTypeEnum;           // For fake DmcAttributeInfo - (ComplexTypeFormatter.java:83)
import org.dmd.dms.shared.generated.enums.WrapperTypeEnum;         // Type for field: wrapperType - (ComplexTypeFormatter.java:381)



@SuppressWarnings("serial")
/**
 * The DmwTypeToWrapperType class.
 * This code was auto-generated by the MetaGen utility and shouldn't be alterred
 * manually.
 * Generated from: org.dmd.dms.tools.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:111)
 */
public class DmwTypeToWrapperType implements Serializable {

    // The Dark Matter Wrapper type
    String dmwType;
    final static DmcAttributeInfo dmwTypeAI = new DmcAttributeInfo("dmwType",0,"String",ValueTypeEnum.SINGLE,DataTypeEnum.UNKNOWN);

    // The type of wrapper to be used in this context
    WrapperTypeEnum wrapperType;
    final static DmcAttributeInfo wrapperTypeAI = new DmcAttributeInfo("wrapperType",0,"WrapperTypeEnum",ValueTypeEnum.SINGLE,DataTypeEnum.UNKNOWN);

    final static int requiredParts = 2;

    /**
     * Default constructor.
     */
    public DmwTypeToWrapperType(){
    }

    /**
     * Copy constructor.
     */
    public DmwTypeToWrapperType(DmwTypeToWrapperType original){
        dmwType = original.dmwType;
        wrapperType = original.wrapperType;
    }

    // Generated from: org.dmd.dms.tools.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:136)
    /**
     * All fields constructor.
     */
    public DmwTypeToWrapperType(String f1, WrapperTypeEnum f2) throws DMFeedbackSet {
        dmwType = DmcTypeStringSTATIC.instance.typeCheck(f1);
        wrapperType = DmcTypeWrapperTypeEnumSTATIC.instance.typeCheck(f2);
    }

    // Generated from: org.dmd.dms.tools.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:163)
    /**
     * String based constructor.
     */
    public DmwTypeToWrapperType(String initialInput) throws DMFeedbackSet {
        initialize(initialInput);
    }

    // Generated from: org.dmd.dms.tools.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:171)
    void initialize(String initialInput) throws DMFeedbackSet {
        ArrayList<ParsedNameValuePair> nvp = ComplexTypeSplitter.parse(initialInput);

        if (nvp.size() < requiredParts)
            throw(new DMFeedbackSet("Missing required values for complex type: DmwTypeToWrapperType"));

        dmwType = DmcTypeStringSTATIC.instance.typeCheck(nvp.get(0).getValue());
        wrapperType = DmcTypeWrapperTypeEnumSTATIC.instance.typeCheck(nvp.get(1).getValue());
    }

    /**
     * Serialization.
     */
    public void serializeIt(DmcOutputStreamIF dos) throws Exception {
        dos.writeUTF(toString());
    }

    /**
     * Deserialization.
     */
    public void deserializeIt(DmcInputStreamIF dis) throws Exception {
        initialize(dis.readUTF());
    }

    /**
     * String form.
     * Generated from: org.dmd.dms.tools.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:260)
     */
    public String toString(){
        StringBuffer sb = new StringBuffer();
        sb.append(dmwType.toString());
        sb.append(' ');
        sb.append(wrapperType.toString());
        return(sb.toString());
    }

    public String getDmwType(){
        return(dmwType);
    }

    public WrapperTypeEnum getWrapperType(){
        return(wrapperType);
    }

}
