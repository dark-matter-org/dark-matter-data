//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2012 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dms.shared.generated.types;

// Generated from: org.dmd.util.artifact.java.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dms.tools.generation.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:104)
import java.io.Serializable;                                              // Marker interface for serialization - (ComplexTypeFormatter.java:79)
import java.util.ArrayList;                                               // To store ParsedNameValuePairs - (ComplexTypeFormatter.java:86)
import org.dmd.core.DmcNamedObjectREF;                                    // Reference resolution - (ComplexTypeFormatter.java:94)
import org.dmd.core.DmcObject;                                            // Ambiguous reference resolution - (ComplexTypeFormatter.java:96)
import org.dmd.core.feedback.DMFeedbackSet;                               // Ambiguous reference resolution - (ComplexTypeFormatter.java:97)
import org.dmd.core.interfaces.DmcContainerIF;                            // Reference resolution - (ComplexTypeFormatter.java:95)
import org.dmd.core.interfaces.DmcInputStreamIF;                          // To support serialization - (ComplexTypeFormatter.java:80)
import org.dmd.core.interfaces.DmcNameClashResolverIF;                    // Ambiguous reference resolution - (ComplexTypeFormatter.java:91)
import org.dmd.core.interfaces.DmcNameResolverIF;                         // Reference resolution - (ComplexTypeFormatter.java:92)
import org.dmd.core.interfaces.DmcNameResolverWithClashSupportIF;         // Ambiguous reference resolution - (ComplexTypeFormatter.java:90)
import org.dmd.core.interfaces.DmcNamedObjectIF;                          // Reference resolution - (ComplexTypeFormatter.java:93)
import org.dmd.core.interfaces.DmcOutputStreamIF;                         // To support serialization - (ComplexTypeFormatter.java:81)
import org.dmd.core.schema.DmcAttributeInfo;                              // For fake DmcAttributeInfo - (ComplexTypeFormatter.java:84)
import org.dmd.core.util.ComplexTypeSplitter;                             // For parsing initial input - (ComplexTypeFormatter.java:85)
import org.dmd.core.util.ParsedNameValuePair;                             // To store values parsed from initial input - (ComplexTypeFormatter.java:87)
import org.dmd.dms.shared.generated.enums.DataTypeEnum;                   // For fake DmcAttributeInfo - (ComplexTypeFormatter.java:82)
import org.dmd.dms.shared.generated.enums.ValueTypeEnum;                  // For fake DmcAttributeInfo - (ComplexTypeFormatter.java:83)



@SuppressWarnings("serial")
/**
 * The Optimize class.
 * This code was auto-generated by the MetaGen utility and shouldn't be alterred
 * manually.
 * Generated from: org.dmd.dms.tools.generation.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:111)
 */
public class Optimize implements Serializable {

    // A description of the change to be made
    String what;
    final static DmcAttributeInfo whatAI = new DmcAttributeInfo("what",0,"String",ValueTypeEnum.SINGLE,DataTypeEnum.UNKNOWN);

    // Who made the suggestion
    String who;
    final static DmcAttributeInfo whoAI = new DmcAttributeInfo("who",0,"String",ValueTypeEnum.SINGLE,DataTypeEnum.UNKNOWN);

    // A suggested timeframe for the change
    String when;
    final static DmcAttributeInfo whenAI = new DmcAttributeInfo("when",0,"String",ValueTypeEnum.SINGLE,DataTypeEnum.UNKNOWN);

    // A description of why the change should be considered or a reference to a Concinnity definition e.g. a feature request
    ConcinnityREF why;
    final static DmcAttributeInfo whyAI = new DmcAttributeInfo("why",0,"ConcinnityREF",ValueTypeEnum.SINGLE,DataTypeEnum.UNKNOWN);

    final static int requiredParts = 1;

    /**
     * Default constructor.
     */
    public Optimize(){
    }

    /**
     * Copy constructor.
     */
    public Optimize(Optimize original){
        what = original.what;
        who = original.who;
        when = original.when;
        why = original.why;
    }

    // Generated from: org.dmd.dms.tools.generation.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:136)
    /**
     * All fields constructor.
     */
    public Optimize(String f1, String f2, String f3, ConcinnityREF f4) throws DMFeedbackSet {
        what = DmcTypeStringSTATIC.instance.typeCheck(f1);
        if (f2 != null)
            who = DmcTypeStringSTATIC.instance.typeCheck(f2);
        if (f3 != null)
            when = DmcTypeStringSTATIC.instance.typeCheck(f3);
        if (f4 != null)
            why = DmcTypeConcinnityREFSTATIC.instance.typeCheck(f4);
    }

    // Generated from: org.dmd.dms.tools.generation.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:163)
    /**
     * String based constructor.
     */
    public Optimize(String initialInput) throws DMFeedbackSet {
        initialize(initialInput);
    }

    // Generated from: org.dmd.dms.tools.generation.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:171)
    void initialize(String initialInput) throws DMFeedbackSet {
        ArrayList<ParsedNameValuePair> nvp = ComplexTypeSplitter.parse(initialInput,':');

        if (nvp.size() < requiredParts)
            throw(new DMFeedbackSet("Missing required values for complex type: Optimize"));

        what = DmcTypeStringSTATIC.instance.typeCheck(nvp.get(0).getValue());

        if (nvp.size() > requiredParts){
            for(int i=1; i<nvp.size(); i++){
                if (nvp.get(i).getName() == null){
                    if (nvp.get(i).getValue() == null)
                        throw(new DMFeedbackSet("Expecting a partname=\"some value\" in complex type: Optimize"));
                    else
                        throw(new DMFeedbackSet("Expecting a partname=\"" + nvp.get(i).getValue() + "\" in complex type: Optimize"));
                }
                if (nvp.get(i).getName().equals("who"))
                    who = DmcTypeStringSTATIC.instance.typeCheck(nvp.get(i).getValue());
                else if (nvp.get(i).getName().equals("when"))
                    when = DmcTypeStringSTATIC.instance.typeCheck(nvp.get(i).getValue());
                else if (nvp.get(i).getName().equals("why"))
                    why = DmcTypeConcinnityREFSTATIC.instance.typeCheck(nvp.get(i).getValue());
                else{
                    throw(new DMFeedbackSet("Unknown field for complex type Optimize: "  + nvp.get(i).getName()));
                }
            }
        }

    }

    /**
     * Serialization.
     */
    public void serializeIt(DmcOutputStreamIF dos) throws Exception {
        dos.writeUTF(toString());
    }

    /**
     * Deserialization.
     */
    public void deserializeIt(DmcInputStreamIF dis) throws Exception {
        initialize(dis.readUTF());
    }

    /**
     * String form.
     * Generated from: org.dmd.dms.tools.generation.meta.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:260)
     */
    public String toString(){
        StringBuffer sb = new StringBuffer();
        sb.append(what.toString());
        if (who != null){
            sb.append(':');
            sb.append("who=" + "\"" + who.toString() + "\"");
        }

        if (when != null){
            sb.append(':');
            sb.append("when=" + "\"" + when.toString() + "\"");
        }

        if (why != null){
            sb.append(':');
            sb.append("why=" + why.toString());
        }

        return(sb.toString());
    }

    public String getWhat(){
        return(what);
    }

    public String getWho(){
        return(who);
    }

    public String getWhen(){
        return(when);
    }

    public ConcinnityREF getWhy(){
        return(why);
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    public void resolve(DmcNameResolverIF resolver, String attrName) throws DMFeedbackSet {
        DmcNamedObjectIF  obj = null;

        if ((why != null) && (!why.isResolved())){
            obj = resolver.findNamedObject(why.getObjectName());
            if (obj == null)
                throw(new DMFeedbackSet("Could not resolve reference to: " + why.getObjectName() + " via attribute: " + attrName));
        
            if (obj instanceof DmcContainerIF)
                ((DmcNamedObjectREF)why).setObject((DmcNamedObjectIF) ((DmcContainerIF)obj).getDmcObject());
            else
                ((DmcNamedObjectREF)why).setObject(obj);
        }
        
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    public void resolve(DmcNameResolverWithClashSupportIF resolver, DmcObject object, DmcNameClashResolverIF ncr, DmcAttributeInfo ai) throws DMFeedbackSet {
        DmcNamedObjectIF  obj = null;

        if ((why != null) && (!why.isResolved())){
            obj = resolver.findNamedObjectMayClash(object, why.getObjectName(), ncr, whyAI);
            if (obj == null)
                throw(new DMFeedbackSet("Could not resolve reference to: " + why.getObjectName() + " via attribute: " + ai.name));
        
            if (obj instanceof DmcContainerIF)
                ((DmcNamedObjectREF)why).setObject((DmcNamedObjectIF) ((DmcContainerIF)obj).getDmcObject());
            else
                ((DmcNamedObjectREF)why).setObject(obj);
        }
        
    }

}
