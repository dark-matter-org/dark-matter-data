//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2012 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dms;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dms.meta.MetaGenerator.dumpMetaSchemaNew(MetaGenerator.java:257)
import org.dmd.dmc.DmcValueException;         // To handle potential value exceptions. - (MetaGenerator.java:240)
import org.dmd.dms.generated.dmo.*;           // Access to meta schema DMOs - (MetaGenerator.java:241)


/**
  * This class creates the basic definitions that allow for the definition of schemas.
  * Generated from: org.dmd.dms.meta.MetaGenerator.dumpMetaSchemaNew(MetaGenerator.java:261)
  */
abstract public class MetaSchemaAG extends SchemaDefinition {
    public static SchemaDefinition    _metaSchema;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:320)
    public static ClassDefinition     _ActionTriggerInfo;
    public static ClassDefinition     _DmsDefinition;
    public static ClassDefinition     _ClassDefinition;
    public static ClassDefinition     _EnumDefinition;
    public static ClassDefinition     _TypeDefinition;
    public static ClassDefinition     _ComplexTypeDefinition;
    public static ClassDefinition     _ExtendedReferenceTypeDefinition;
    public static ClassDefinition     _AttributeDefinition;
    public static ClassDefinition     _SliceDefinition;
    public static ClassDefinition     _ActionDefinition;
    public static ClassDefinition     _SchemaDefinition;
    public static ClassDefinition     _RuleCategory;
    public static ClassDefinition     _RuleDefinition;
    public static ClassDefinition     _RuleData;
    public static ClassDefinition     _Dependency;
    public static ClassDefinition     _DependencyImplementation;
    public static ClassDefinition     _RunContext;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:327)
    public static EnumDefinition      _ClassTypeEnum;
    public static EnumDefinition      _ModifyTypeEnum;
    public static EnumDefinition      _OperationalContextEnum;
    public static EnumDefinition      _RuleTypeEnum;
    public static EnumDefinition      _DataTypeEnum;
    public static EnumDefinition      _ValueTypeEnum;
    public static EnumDefinition      _BaseTypeEnum;
    public static EnumDefinition      _FilterTypeEnum;
    public static EnumDefinition      _DebugEnum;
    public static EnumDefinition      _WrapperTypeEnum;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:333)
    public static TypeDefinition      _String;
    public static TypeDefinition      _DmcObject;
    public static TypeDefinition      _ClassInfoRef;
    public static TypeDefinition      _DmcAttribute;
    public static TypeDefinition      _NameContainer;
    public static TypeDefinition      _FilterContainer;
    public static TypeDefinition      _AttributeID;
    public static TypeDefinition      _Integer;
    public static TypeDefinition      _Float;
    public static TypeDefinition      _Double;
    public static TypeDefinition      _Long;
    public static TypeDefinition      _Date;
    public static TypeDefinition      _Boolean;
    public static TypeDefinition      _EnumValue;
    public static TypeDefinition      _Modifier;
    public static TypeDefinition      _StringName;
    public static TypeDefinition      _CamelCaseName;
    public static TypeDefinition      _RuleName;
    public static TypeDefinition      _IntegerName;
    public static TypeDefinition      _LongName;
    public static TypeDefinition      _DotName;
    public static TypeDefinition      _ClassFilter;
    public static TypeDefinition      _IntegerToString;
    public static TypeDefinition      _StringToString;
    public static TypeDefinition      _UUIDLite;
    public static TypeDefinition      _UUIDName;
    public static TypeDefinition      _IntegerToBoolean;
    public static TypeDefinition      _IntegerToUUIDLite;
    public static TypeDefinition      _FullyQualifiedName;
    public static TypeDefinition      _LabelledIntegerDataPoint;
    public static TypeDefinition      _TimeDoubleDataPoint;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:345)
    public static AttributeDefinition _name;
    public static AttributeDefinition _dmdID;
    public static AttributeDefinition _schemaExtension;
    public static AttributeDefinition _typeClassName;
    public static AttributeDefinition _wrapperClassName;
    public static AttributeDefinition _nullReturnValue;
    public static AttributeDefinition _primitiveType;
    public static AttributeDefinition _abbrev;
    public static AttributeDefinition _classType;
    public static AttributeDefinition _dataType;
    public static AttributeDefinition _valueType;
    public static AttributeDefinition _isRefType;
    public static AttributeDefinition _isSchemaRtype;
    public static AttributeDefinition _isEnumType;
    public static AttributeDefinition _isDefaultValue;
    public static AttributeDefinition _description;
    public static AttributeDefinition _type;
    public static AttributeDefinition _internalTypeRef;
    public static AttributeDefinition _derivedFrom;
    public static AttributeDefinition _intendedToExtend;
    public static AttributeDefinition _usesInterface;
    public static AttributeDefinition _derivedClasses;
    public static AttributeDefinition _must;
    public static AttributeDefinition _may;
    public static AttributeDefinition _mustParm;
    public static AttributeDefinition _mayParm;
    public static AttributeDefinition _mustReturn;
    public static AttributeDefinition _mayReturn;
    public static AttributeDefinition _actions;
    public static AttributeDefinition _enumValue;
    public static AttributeDefinition _javaClass;
    public static AttributeDefinition _dmoImport;
    public static AttributeDefinition _dmoClass;
    public static AttributeDefinition _dmoAuxClass;
    public static AttributeDefinition _dmoAuxClassImport;
    public static AttributeDefinition _dmwAuxClass;
    public static AttributeDefinition _dmwAuxClassImport;
    public static AttributeDefinition _dmwImport;
    public static AttributeDefinition _dmwClass;
    public static AttributeDefinition _dmeImport;
    public static AttributeDefinition _dmeClass;
    public static AttributeDefinition _dmtImport;
    public static AttributeDefinition _dmtClass;
    public static AttributeDefinition _helperClassName;
    public static AttributeDefinition _getType;
    public static AttributeDefinition _getMethod;
    public static AttributeDefinition _ruleParam;
    public static AttributeDefinition _preserveNewlines;
    public static AttributeDefinition _schemaPackage;
    public static AttributeDefinition _dmwPackage;
    public static AttributeDefinition _classDefList;
    public static AttributeDefinition _typeDefList;
    public static AttributeDefinition _internalTypeDefList;
    public static AttributeDefinition _enumDefList;
    public static AttributeDefinition _attributeDefList;
    public static AttributeDefinition _actionDefList;
    public static AttributeDefinition _definedIn;
    public static AttributeDefinition _allowedParents;
    public static AttributeDefinition _namingAttribute;
    public static AttributeDefinition _attachToClass;
    public static AttributeDefinition _dependsOn;
    public static AttributeDefinition _dependsOnRef;
    public static AttributeDefinition _defFiles;
    public static AttributeDefinition _enumInt;
    public static AttributeDefinition _enumString;
    public static AttributeDefinition _blockWhenLocked;
    public static AttributeDefinition _isGetAction;
    public static AttributeDefinition _obsoleteVersion;
    public static AttributeDefinition _file;
    public static AttributeDefinition _lineNumber;
    public static AttributeDefinition _maySendProgress;
    public static AttributeDefinition _internallyGenerated;
    public static AttributeDefinition _secure;
    public static AttributeDefinition _isNamedBy;
    public static AttributeDefinition _generatedFileHeader;
    public static AttributeDefinition _useWrapperType;
    public static AttributeDefinition _originalClass;
    public static AttributeDefinition _FQN;
    public static AttributeDefinition _modify;
    public static AttributeDefinition _schemaBaseID;
    public static AttributeDefinition _schemaIDRange;
    public static AttributeDefinition _subpackage;
    public static AttributeDefinition _createAttributeFactory;
    public static AttributeDefinition _nameAttributeDef;
    public static AttributeDefinition _dmwIteratorImport;
    public static AttributeDefinition _dmwIteratorClass;
    public static AttributeDefinition _dmtREFImport;
    public static AttributeDefinition _genericArgs;
    public static AttributeDefinition _isNameType;
    public static AttributeDefinition _keyClass;
    public static AttributeDefinition _keyImport;
    public static AttributeDefinition _genericArgsImport;
    public static AttributeDefinition _enumName;
    public static AttributeDefinition _integerName;
    public static AttributeDefinition _uuidName;
    public static AttributeDefinition _designatedNameAttribute;
    public static AttributeDefinition _fieldSeparator;
    public static AttributeDefinition _field;
    public static AttributeDefinition _extendedClass;
    public static AttributeDefinition _dotName;
    public static AttributeDefinition _altType;
    public static AttributeDefinition _altTypeImport;
    public static AttributeDefinition _selectAttribute;
    public static AttributeDefinition _sliceDefList;
    public static AttributeDefinition _opContext;
    public static AttributeDefinition _camelCaseName;
    public static AttributeDefinition _complexTypeDefList;
    public static AttributeDefinition _supportsBackrefTracking;
    public static AttributeDefinition _extendsInterface;
    public static AttributeDefinition _dependsOnSchema;
    public static AttributeDefinition _isHierarchicName;
    public static AttributeDefinition _internalUse;
    public static AttributeDefinition _dmwTypeToPackage;
    public static AttributeDefinition _dmwWrapperType;
    public static AttributeDefinition _isFilterType;
    public static AttributeDefinition _designatedFilterAttribute;
    public static AttributeDefinition _filterAttributeDef;
    public static AttributeDefinition _classFilter;
    public static AttributeDefinition _indexSize;
    public static AttributeDefinition _excludeFromContext;
    public static AttributeDefinition _extendedReferenceClass;
    public static AttributeDefinition _extendedReferenceTypeDefList;
    public static AttributeDefinition _isExtendedRefType;
    public static AttributeDefinition _longName;
    public static AttributeDefinition _baseType;
    public static AttributeDefinition _ruleType;
    public static AttributeDefinition _immediateHalt;
    public static AttributeDefinition _ruleTitle;
    public static AttributeDefinition _ruleCategory;
    public static AttributeDefinition _ruleCategoryID;
    public static AttributeDefinition _isExtensible;
    public static AttributeDefinition _ruleCategoryList;
    public static AttributeDefinition _ruleDefinitionList;
    public static AttributeDefinition _ruleDefinition;
    public static AttributeDefinition _dependency;
    public static AttributeDefinition _dependencies;
    public static AttributeDefinition _instantiation;
    public static AttributeDefinition _runContext;
    public static AttributeDefinition _useInterface;
    public static AttributeDefinition _classInfoFromParam;
    public static AttributeDefinition _ruleImport;
    public static AttributeDefinition _ruleName;
    public static AttributeDefinition _applyToClass;
    public static AttributeDefinition _attributeInfoFromParam;
    public static AttributeDefinition _ruleDataList;
    public static AttributeDefinition _applyToAttribute;
    public static AttributeDefinition _objectClass;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:351)
    public static ComplexTypeDefinition _Field;
    public static ComplexTypeDefinition _DmwTypeToWrapperType;
    public static ComplexTypeDefinition _RuleParam;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:357)
    public static RuleCategory        _Initialization;
    public static RuleCategory        _ObjectValidation;
    public static RuleCategory        _AttributeValidation;
    public static RuleCategory        _UCOValidation;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:363)

    public MetaSchemaAG() throws DmcValueException {

        super("meta");

        // We only ever want to initialize the schema once, so check
        // to see if we've initialized the first class definition
        if (_metaSchema == null){
            _metaSchema = this;
            staticRefName = new String("MetaSchema._");

            this.setDescription("The meta schema defines the elements used to define schemas.");
            this.setSchemaPackage("org.dmd.dms");
            this.setDmwPackage("org.dmd.dms");
            this.setSchemaBaseID(0);
            this.setSchemaIDRange(200);
            initClasses();
            initAttributes();
            initTypes();
            initEnums();
            initRuleCategories();
            initComplexTypes();
        }
    }

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitClasses(MetaGenerator.java:371)
    private void initClasses() throws DmcValueException {

        ClassDefinitionDMO _ActionTriggerInfoOBJ = new ClassDefinitionDMO();
        _ActionTriggerInfo = new ClassDefinition(_ActionTriggerInfoOBJ,MetaDMSAG.__ActionTriggerInfo);
        _ActionTriggerInfoOBJ.setClassType("ABSTRACT");
        _ActionTriggerInfoOBJ.setDescription("The ActionTriggerInfo class simply provides a common base for the bundle\n of information required to remotely trigger an action on an object. \n Derivatives of this class are generated as part of the DMO generation\n process and have action specific interfaces to handle the parameters \n required by an action.\n <P>\n This mechanism is a replacement for the concept that ActionRequests were\n EXTENSIBLE objects. This way, the user can ask an object for the \n ActionTriggerInfo (ATI) for a particular action and have a well defined\n interface to specify the parameters for the action.");
        _ActionTriggerInfoOBJ.setDmdID("14");
        _ActionTriggerInfoOBJ.setDmoImport("org.dmd.dms.generated.dmo.ActionTriggerInfoDMO");
        _ActionTriggerInfoOBJ.setFile("metaSchema.dms");
        _ActionTriggerInfoOBJ.setJavaClass("org.dmd.dms.extended.ActionTriggerInfo");
        _ActionTriggerInfoOBJ.setLineNumber("1753");
        _ActionTriggerInfoOBJ.addMust("name");
        _ActionTriggerInfoOBJ.setName("ActionTriggerInfo");
        _ActionTriggerInfo.setDefinedIn(this);
        addClassDefList(_ActionTriggerInfo);

        ClassDefinitionDMO _DmsDefinitionOBJ = new ClassDefinitionDMO();
        _DmsDefinition = new ClassDefinition(_DmsDefinitionOBJ,MetaDMSAG.__DmsDefinition);
        _DmsDefinitionOBJ.setClassType("ABSTRACT");
        _DmsDefinitionOBJ.setDescription("The DmsDefinition class provides a common base for all definition classes.");
        _DmsDefinitionOBJ.setDmdID("1");
        _DmsDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.DmsDefinitionDMO");
        _DmsDefinitionOBJ.setFile("metaSchema.dms");
        _DmsDefinitionOBJ.setIsNamedBy("name");
        _DmsDefinitionOBJ.setJavaClass("org.dmd.dms.DmsDefinition");
        _DmsDefinitionOBJ.setLineNumber("1768");
        _DmsDefinitionOBJ.addMay("definedIn");
        _DmsDefinitionOBJ.addMay("file");
        _DmsDefinitionOBJ.addMay("lineNumber");
        _DmsDefinitionOBJ.addMust("name");
        _DmsDefinitionOBJ.setName("DmsDefinition");
        _DmsDefinitionOBJ.setUseWrapperType("EXTENDED");
        _DmsDefinition.setDefinedIn(this);
        addClassDefList(_DmsDefinition);

        ClassDefinitionDMO _ClassDefinitionOBJ = new ClassDefinitionDMO();
        _ClassDefinition = new ClassDefinition(_ClassDefinitionOBJ,MetaDMSAG.__ClassDefinition);
        _ClassDefinitionOBJ.setClassType("STRUCTURAL");
        _ClassDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _ClassDefinitionOBJ.setDescription("This class provides the basic mechanism to define new classes for a schema.");
        _ClassDefinitionOBJ.setDmdID("2");
        _ClassDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ClassDefinitionDMO");
        _ClassDefinitionOBJ.setFile("metaSchema.dms");
        _ClassDefinitionOBJ.setIsNamedBy("name");
        _ClassDefinitionOBJ.setJavaClass("org.dmd.dms.ClassDefinition");
        _ClassDefinitionOBJ.setLineNumber("1821");
        _ClassDefinitionOBJ.addMay("description");
        _ClassDefinitionOBJ.addMay("derivedFrom");
        _ClassDefinitionOBJ.addMay("must");
        _ClassDefinitionOBJ.addMay("may");
        _ClassDefinitionOBJ.addMay("isNamedBy");
        _ClassDefinitionOBJ.addMay("javaClass");
        _ClassDefinitionOBJ.addMay("intendedToExtend");
        _ClassDefinitionOBJ.addMay("usesInterface");
        _ClassDefinitionOBJ.addMay("useWrapperType");
        _ClassDefinitionOBJ.addMay("dmwWrapperType");
        _ClassDefinitionOBJ.addMay("allowedParents");
        _ClassDefinitionOBJ.addMay("subpackage");
        _ClassDefinitionOBJ.addMay("dataType");
        _ClassDefinitionOBJ.addMay("supportsBackrefTracking");
        _ClassDefinitionOBJ.addMay("excludeFromContext");
        _ClassDefinitionOBJ.addMay("abbrev");
        _ClassDefinitionOBJ.addMay("obsoleteVersion");
        _ClassDefinitionOBJ.addMay("internallyGenerated");
        _ClassDefinitionOBJ.addMay("ruleDefinition");
        _ClassDefinitionOBJ.addMay("derivedClasses");
        _ClassDefinitionOBJ.addMay("actions");
        _ClassDefinitionOBJ.addMay("internalTypeRef");
        _ClassDefinitionOBJ.addMay("dmoImport");
        _ClassDefinitionOBJ.addMay("dmoClass");
        _ClassDefinitionOBJ.addMay("dmwImport");
        _ClassDefinitionOBJ.addMay("dmwClass");
        _ClassDefinitionOBJ.addMay("dmeImport");
        _ClassDefinitionOBJ.addMay("dmeClass");
        _ClassDefinitionOBJ.addMay("dmtImport");
        _ClassDefinitionOBJ.addMay("dmtREFImport");
        _ClassDefinitionOBJ.addMay("dmtClass");
        _ClassDefinitionOBJ.addMay("dmoAuxClass");
        _ClassDefinitionOBJ.addMay("dmoAuxClassImport");
        _ClassDefinitionOBJ.addMay("dmwAuxClass");
        _ClassDefinitionOBJ.addMay("dmwAuxClassImport");
        _ClassDefinitionOBJ.addMay("dmwIteratorImport");
        _ClassDefinitionOBJ.addMay("dmwIteratorClass");
        _ClassDefinitionOBJ.addMust("name");
        _ClassDefinitionOBJ.addMust("classType");
        _ClassDefinitionOBJ.addMust("dmdID");
        _ClassDefinitionOBJ.setName("ClassDefinition");
        _ClassDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ClassDefinition.setDefinedIn(this);
        addClassDefList(_ClassDefinition);

        ClassDefinitionDMO _EnumDefinitionOBJ = new ClassDefinitionDMO();
        _EnumDefinition = new ClassDefinition(_EnumDefinitionOBJ,MetaDMSAG.__EnumDefinition);
        _EnumDefinitionOBJ.setClassType("STRUCTURAL");
        _EnumDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _EnumDefinitionOBJ.setDescription("The EnumDefinition allows for the definition of real Java enums that provide\n inherent mapping of the string and integer values of the enum into actual enum values. Once\n defined, EnumDefinitions can be used where ever you would use a TypeDefinition name i.e.\n they can be used in the type attribute of AttributeDefinitions.");
        _EnumDefinitionOBJ.setDmdID("3");
        _EnumDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.EnumDefinitionDMO");
        _EnumDefinitionOBJ.setFile("metaSchema.dms");
        _EnumDefinitionOBJ.setIsNamedBy("name");
        _EnumDefinitionOBJ.setJavaClass("org.dmd.dms.EnumDefinition");
        _EnumDefinitionOBJ.setLineNumber("1839");
        _EnumDefinitionOBJ.addMay("description");
        _EnumDefinitionOBJ.addMay("nullReturnValue");
        _EnumDefinitionOBJ.addMust("name");
        _EnumDefinitionOBJ.addMust("enumValue");
        _EnumDefinitionOBJ.setName("EnumDefinition");
        _EnumDefinitionOBJ.setUseWrapperType("EXTENDED");
        _EnumDefinition.setDefinedIn(this);
        addClassDefList(_EnumDefinition);

        ClassDefinitionDMO _TypeDefinitionOBJ = new ClassDefinitionDMO();
        _TypeDefinition = new ClassDefinition(_TypeDefinitionOBJ,MetaDMSAG.__TypeDefinition);
        _TypeDefinitionOBJ.setClassType("STRUCTURAL");
        _TypeDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _TypeDefinitionOBJ.setDescription("The TypeDefinition is used to define the types of attributes that can be used\n as the basis for attribute values. The name of the type definition should be the same as the\n actual Java class that is used to store the value of an attribute e.g. the name of the type\n used to store strings is String. The typeClassName is the fully qualified name of the class\n derived from DmcAttribute that stores this type of value; they are always, by conventional,\n named DmcTypeXXX.\n <P>\n TypeDefinitions are automatically generated internally for ClassDefinitions and\n EnumDefinitions so that these objects can be referred to via the type attribute of AttributeDefinitions.\n These definitions are marked as internallyGenerated.");
        _TypeDefinitionOBJ.setDmdID("4");
        _TypeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.TypeDefinitionDMO");
        _TypeDefinitionOBJ.setFile("metaSchema.dms");
        _TypeDefinitionOBJ.setIsNamedBy("name");
        _TypeDefinitionOBJ.setJavaClass("org.dmd.dms.TypeDefinition");
        _TypeDefinitionOBJ.setLineNumber("1887");
        _TypeDefinitionOBJ.addMay("description");
        _TypeDefinitionOBJ.addMay("nullReturnValue");
        _TypeDefinitionOBJ.addMay("wrapperClassName");
        _TypeDefinitionOBJ.addMay("primitiveType");
        _TypeDefinitionOBJ.addMay("internallyGenerated");
        _TypeDefinitionOBJ.addMay("isEnumType");
        _TypeDefinitionOBJ.addMay("enumName");
        _TypeDefinitionOBJ.addMay("isRefType");
        _TypeDefinitionOBJ.addMay("helperClassName");
        _TypeDefinitionOBJ.addMay("originalClass");
        _TypeDefinitionOBJ.addMay("dmwIteratorImport");
        _TypeDefinitionOBJ.addMay("dmwIteratorClass");
        _TypeDefinitionOBJ.addMay("genericArgs");
        _TypeDefinitionOBJ.addMay("isNameType");
        _TypeDefinitionOBJ.addMay("isFilterType");
        _TypeDefinitionOBJ.addMay("isHierarchicName");
        _TypeDefinitionOBJ.addMay("keyClass");
        _TypeDefinitionOBJ.addMay("keyImport");
        _TypeDefinitionOBJ.addMay("nameAttributeDef");
        _TypeDefinitionOBJ.addMay("filterAttributeDef");
        _TypeDefinitionOBJ.addMay("altType");
        _TypeDefinitionOBJ.addMay("altTypeImport");
        _TypeDefinitionOBJ.addMay("isExtendedRefType");
        _TypeDefinitionOBJ.addMust("name");
        _TypeDefinitionOBJ.addMust("typeClassName");
        _TypeDefinitionOBJ.setName("TypeDefinition");
        _TypeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _TypeDefinition.setDefinedIn(this);
        addClassDefList(_TypeDefinition);

        ClassDefinitionDMO _ComplexTypeDefinitionOBJ = new ClassDefinitionDMO();
        _ComplexTypeDefinition = new ClassDefinition(_ComplexTypeDefinitionOBJ,MetaDMSAG.__ComplexTypeDefinition);
        _ComplexTypeDefinitionOBJ.setClassType("STRUCTURAL");
        _ComplexTypeDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _ComplexTypeDefinitionOBJ.setDescription("The ComplexTypeDefinition provides a mechanism for defining the structure of\n a complex type composed of other types. From this definition, a new DmcType is generated that\n has all of the required methods automatically defined.\n <p/>\n An example definition is the RuleParam:\n <pre>\n ComplexTypeDefinition\n name			RuleParam\n fieldSeparator :\n field String importStatement The import for the type of parameter\n field String genericArgs     The generic arguments associated with this parameter\n field String name            The name of the parameter\n field String description     A description of the parameter\n description The RuleParam type is used to succintly describe a parameter\n  to be supplied to a rule when it is executed.\n </pre>\n In this case, the type has four fields, all of String type. An example of the String\n format of the field might be: <pre> org.dmc.DmcObject::obj:The object to be validated</pre> In this\n case, the generic args field isn't available and will be the empty string. When a field\n seperator is specified, all fields are, more or less optional, but the underlying type\n must be able to handle the empty string as a valid value. This wouldn't work with Integer.\n <p/>\n If no field separator is specified, the separator is assumed to be whitespace and additional\n whitespace is consumed during the parsing.");
        _ComplexTypeDefinitionOBJ.setDmdID("5");
        _ComplexTypeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ComplexTypeDefinitionDMO");
        _ComplexTypeDefinitionOBJ.setFile("metaSchema.dms");
        _ComplexTypeDefinitionOBJ.setIsNamedBy("name");
        _ComplexTypeDefinitionOBJ.setJavaClass("org.dmd.dms.ComplexTypeDefinition");
        _ComplexTypeDefinitionOBJ.setLineNumber("1926");
        _ComplexTypeDefinitionOBJ.addMay("fieldSeparator");
        _ComplexTypeDefinitionOBJ.addMay("extendedClass");
        _ComplexTypeDefinitionOBJ.addMay("description");
        _ComplexTypeDefinitionOBJ.addMust("name");
        _ComplexTypeDefinitionOBJ.addMust("field");
        _ComplexTypeDefinitionOBJ.setName("ComplexTypeDefinition");
        _ComplexTypeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ComplexTypeDefinition.setDefinedIn(this);
        addClassDefList(_ComplexTypeDefinition);

        ClassDefinitionDMO _ExtendedReferenceTypeDefinitionOBJ = new ClassDefinitionDMO();
        _ExtendedReferenceTypeDefinition = new ClassDefinition(_ExtendedReferenceTypeDefinitionOBJ,MetaDMSAG.__ExtendedReferenceTypeDefinition);
        _ExtendedReferenceTypeDefinitionOBJ.setClassType("STRUCTURAL");
        _ExtendedReferenceTypeDefinitionOBJ.setDerivedFrom("ComplexTypeDefinition");
        _ExtendedReferenceTypeDefinitionOBJ.setDescription("The ExtendedReferenceTypeDefinition provides a mechanism for extending \n the automatically generated named object reference attribute types with additional\n information. This can be seen as adding additional information to the relationship\n between two objects.");
        _ExtendedReferenceTypeDefinitionOBJ.setDmdID("6");
        _ExtendedReferenceTypeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ExtendedReferenceTypeDefinitionDMO");
        _ExtendedReferenceTypeDefinitionOBJ.setFile("metaSchema.dms");
        _ExtendedReferenceTypeDefinitionOBJ.setIsNamedBy("name");
        _ExtendedReferenceTypeDefinitionOBJ.setJavaClass("org.dmd.dms.ExtendedReferenceTypeDefinition");
        _ExtendedReferenceTypeDefinitionOBJ.setLineNumber("1942");
        _ExtendedReferenceTypeDefinitionOBJ.addMust("name");
        _ExtendedReferenceTypeDefinitionOBJ.addMust("extendedReferenceClass");
        _ExtendedReferenceTypeDefinitionOBJ.setName("ExtendedReferenceTypeDefinition");
        _ExtendedReferenceTypeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ExtendedReferenceTypeDefinition.setDefinedIn(this);
        addClassDefList(_ExtendedReferenceTypeDefinition);

        ClassDefinitionDMO _AttributeDefinitionOBJ = new ClassDefinitionDMO();
        _AttributeDefinition = new ClassDefinition(_AttributeDefinitionOBJ,MetaDMSAG.__AttributeDefinition);
        _AttributeDefinitionOBJ.setClassType("STRUCTURAL");
        _AttributeDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _AttributeDefinitionOBJ.setDescription("This class is used to define attributes to be used\n as part of a class definition.");
        _AttributeDefinitionOBJ.setDmdID("7");
        _AttributeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.AttributeDefinitionDMO");
        _AttributeDefinitionOBJ.setFile("metaSchema.dms");
        _AttributeDefinitionOBJ.setIsNamedBy("name");
        _AttributeDefinitionOBJ.setJavaClass("org.dmd.dms.AttributeDefinition");
        _AttributeDefinitionOBJ.setLineNumber("1971");
        _AttributeDefinitionOBJ.addMay("description");
        _AttributeDefinitionOBJ.addMay("valueType");
        _AttributeDefinitionOBJ.addMay("nullReturnValue");
        _AttributeDefinitionOBJ.addMay("abbrev");
        _AttributeDefinitionOBJ.addMay("obsoleteVersion");
        _AttributeDefinitionOBJ.addMay("secure");
        _AttributeDefinitionOBJ.addMay("dataType");
        _AttributeDefinitionOBJ.addMay("dmdID");
        _AttributeDefinitionOBJ.addMay("genericArgs");
        _AttributeDefinitionOBJ.addMay("genericArgsImport");
        _AttributeDefinitionOBJ.addMay("designatedNameAttribute");
        _AttributeDefinitionOBJ.addMay("designatedFilterAttribute");
        _AttributeDefinitionOBJ.addMay("internalUse");
        _AttributeDefinitionOBJ.addMay("indexSize");
        _AttributeDefinitionOBJ.addMay("preserveNewlines");
        _AttributeDefinitionOBJ.addMust("name");
        _AttributeDefinitionOBJ.addMust("type");
        _AttributeDefinitionOBJ.setName("AttributeDefinition");
        _AttributeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _AttributeDefinition.setDefinedIn(this);
        addClassDefList(_AttributeDefinition);

        ClassDefinitionDMO _SliceDefinitionOBJ = new ClassDefinitionDMO();
        _SliceDefinition = new ClassDefinition(_SliceDefinitionOBJ,MetaDMSAG.__SliceDefinition);
        _SliceDefinitionOBJ.setClassType("STRUCTURAL");
        _SliceDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _SliceDefinitionOBJ.setDescription("The SliceDefinition class is used to define a named set of attributes\n that are used to retrieve a slice of an object i.e. an abbreviated set of\n values. These are used in the generation of static, named DmcSliceInfo instances.");
        _SliceDefinitionOBJ.setDmdID("8");
        _SliceDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.SliceDefinitionDMO");
        _SliceDefinitionOBJ.setFile("metaSchema.dms");
        _SliceDefinitionOBJ.setIsNamedBy("name");
        _SliceDefinitionOBJ.setJavaClass("org.dmd.dms.SliceDefinition");
        _SliceDefinitionOBJ.setLineNumber("1987");
        _SliceDefinitionOBJ.addMay("description");
        _SliceDefinitionOBJ.addMust("name");
        _SliceDefinitionOBJ.addMust("selectAttribute");
        _SliceDefinitionOBJ.setName("SliceDefinition");
        _SliceDefinitionOBJ.setUseWrapperType("EXTENDED");
        _SliceDefinition.setDefinedIn(this);
        addClassDefList(_SliceDefinition);

        ClassDefinitionDMO _ActionDefinitionOBJ = new ClassDefinitionDMO();
        _ActionDefinition = new ClassDefinition(_ActionDefinitionOBJ,MetaDMSAG.__ActionDefinition);
        _ActionDefinitionOBJ.setClassType("STRUCTURAL");
        _ActionDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _ActionDefinitionOBJ.setDescription("This class is used to define the actions that may be triggered on\n an object.");
        _ActionDefinitionOBJ.setDmdID("11");
        _ActionDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ActionDefinitionDMO");
        _ActionDefinitionOBJ.setFile("metaSchema.dms");
        _ActionDefinitionOBJ.setIsNamedBy("name");
        _ActionDefinitionOBJ.setJavaClass("org.dmd.dms.ActionDefinition");
        _ActionDefinitionOBJ.setLineNumber("2044");
        _ActionDefinitionOBJ.addMay("description");
        _ActionDefinitionOBJ.addMay("mustParm");
        _ActionDefinitionOBJ.addMay("mayParm");
        _ActionDefinitionOBJ.addMay("mustReturn");
        _ActionDefinitionOBJ.addMay("mayReturn");
        _ActionDefinitionOBJ.addMay("attachToClass");
        _ActionDefinitionOBJ.addMay("blockWhenLocked");
        _ActionDefinitionOBJ.addMay("isGetAction");
        _ActionDefinitionOBJ.addMay("obsoleteVersion");
        _ActionDefinitionOBJ.addMay("maySendProgress");
        _ActionDefinitionOBJ.addMust("name");
        _ActionDefinitionOBJ.setName("ActionDefinition");
        _ActionDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ActionDefinition.setDefinedIn(this);
        addClassDefList(_ActionDefinition);

        ClassDefinitionDMO _SchemaDefinitionOBJ = new ClassDefinitionDMO();
        _SchemaDefinition = new ClassDefinition(_SchemaDefinitionOBJ,MetaDMSAG.__SchemaDefinition);
        _SchemaDefinitionOBJ.setClassType("STRUCTURAL");
        _SchemaDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _SchemaDefinitionOBJ.setDescription("This class is used to define a schema as a discrete, nameable entity.");
        _SchemaDefinitionOBJ.setDmdID("12");
        _SchemaDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.SchemaDefinitionDMO");
        _SchemaDefinitionOBJ.setFile("metaSchema.dms");
        _SchemaDefinitionOBJ.setIsNamedBy("name");
        _SchemaDefinitionOBJ.setJavaClass("org.dmd.dms.SchemaDefinition");
        _SchemaDefinitionOBJ.setLineNumber("2088");
        _SchemaDefinitionOBJ.addMay("dependsOn");
        _SchemaDefinitionOBJ.addMay("defFiles");
        _SchemaDefinitionOBJ.addMay("generatedFileHeader");
        _SchemaDefinitionOBJ.addMay("dmwPackage");
        _SchemaDefinitionOBJ.addMay("schemaExtension");
        _SchemaDefinitionOBJ.addMay("createAttributeFactory");
        _SchemaDefinitionOBJ.addMay("dmwTypeToPackage");
        _SchemaDefinitionOBJ.addMay("classDefList");
        _SchemaDefinitionOBJ.addMay("typeDefList");
        _SchemaDefinitionOBJ.addMay("complexTypeDefList");
        _SchemaDefinitionOBJ.addMay("extendedReferenceTypeDefList");
        _SchemaDefinitionOBJ.addMay("internalTypeDefList");
        _SchemaDefinitionOBJ.addMay("attributeDefList");
        _SchemaDefinitionOBJ.addMay("actionDefList");
        _SchemaDefinitionOBJ.addMay("enumDefList");
        _SchemaDefinitionOBJ.addMay("sliceDefList");
        _SchemaDefinitionOBJ.addMay("dependsOnRef");
        _SchemaDefinitionOBJ.addMay("ruleCategoryList");
        _SchemaDefinitionOBJ.addMay("ruleDefinitionList");
        _SchemaDefinitionOBJ.addMay("ruleDataList");
        _SchemaDefinitionOBJ.addMust("name");
        _SchemaDefinitionOBJ.addMust("description");
        _SchemaDefinitionOBJ.addMust("schemaPackage");
        _SchemaDefinitionOBJ.addMust("schemaBaseID");
        _SchemaDefinitionOBJ.addMust("schemaIDRange");
        _SchemaDefinitionOBJ.setName("SchemaDefinition");
        _SchemaDefinitionOBJ.setUseWrapperType("EXTENDED");
        _SchemaDefinition.setDefinedIn(this);
        addClassDefList(_SchemaDefinition);

        ClassDefinitionDMO _RuleCategoryOBJ = new ClassDefinitionDMO();
        _RuleCategory = new ClassDefinition(_RuleCategoryOBJ,MetaDMSAG.__RuleCategory);
        _RuleCategoryOBJ.setClassType("STRUCTURAL");
        _RuleCategoryOBJ.setDerivedFrom("DmsDefinition");
        _RuleCategoryOBJ.setDescription("The RuleCategory allows for the definition of categories of rules to be applied\n to various objects and indicates the expected interface to be implemented by a rule instance.\n A RuleDefinition may belong to multiple categories. \n <p/>\n RuleCategories fall into two broad types, ATTRIBUTE and CLASS level, as specified via the ruleType\n attribute. When a RuleDefinition belongs to an ATTRIBUTE level category, its instances will have\n a mandatory applyToAttribute attribute. Both ATTRIBUTE and CLASS level RuleDefinitions have an optional\n applyToClass attribute by default.\n <p/>\n Specifying a RuleCategory will cause the generation of several artifacts including:\n <ul>\n <li> a category interface: this interface will be created based on the ruleParam values and will be\n implemented by RuleDefinitions that are part of the category\n </li> a rule collection: this is a category specific collection of rules that organize the rule instances\n in this category.\n </ul>\n Exactly how a RuleCategory applies rule instances is category specific and this behaviour should be\n part of the description of a rule category.\n <p/>\n For CLASS level rules, you must specify the classInfoFromParam attribute to indicate how to \n get the DmcClassInfo from whatever object you are passing to the rule. For ATTRIBUTE level rules,\n you must specify both attributeInfoFromParam and classInfoFromParam.");
        _RuleCategoryOBJ.setDmdID("15");
        _RuleCategoryOBJ.setDmoImport("org.dmd.dms.generated.dmo.RuleCategoryDMO");
        _RuleCategoryOBJ.setFile("metaSchema.dms");
        _RuleCategoryOBJ.setIsNamedBy("name");
        _RuleCategoryOBJ.setJavaClass("org.dmd.dms.RuleCategory");
        _RuleCategoryOBJ.setLineNumber("2131");
        _RuleCategoryOBJ.addMay("ruleImport");
        _RuleCategoryOBJ.addMay("attributeInfoFromParam");
        _RuleCategoryOBJ.addMust("name");
        _RuleCategoryOBJ.addMust("opContext");
        _RuleCategoryOBJ.addMust("ruleCategoryID");
        _RuleCategoryOBJ.addMust("ruleType");
        _RuleCategoryOBJ.addMust("ruleParam");
        _RuleCategoryOBJ.addMust("classInfoFromParam");
        _RuleCategoryOBJ.addMust("description");
        _RuleCategoryOBJ.setName("RuleCategory");
        _RuleCategoryOBJ.setUseWrapperType("EXTENDED");
        _RuleCategory.setDefinedIn(this);
        addClassDefList(_RuleCategory);

        ClassDefinitionDMO _RuleDefinitionOBJ = new ClassDefinitionDMO();
        _RuleDefinition = new ClassDefinition(_RuleDefinitionOBJ,MetaDMSAG.__RuleDefinition);
        _RuleDefinitionOBJ.setClassType("STRUCTURAL");
        _RuleDefinitionOBJ.setDerivedFrom("DmsDefinition");
        _RuleDefinitionOBJ.setDescription("The RuleDefinition allows for the definition of rules that can\n be applied to attributes or classes. Rules are not just for validation, they\n can be applied to objects at different times in an object's life cycle e.g. \n the InitRule can initialize a set of attributes to known values.\n <p/>\n RuleDefinitions will result in the generation of ClassDefinitions that define the \n DMOs that will carry the parameters associated with the rule and the expectation\n that you will define an implementation class for the rule that derives from\n an abstract BaseImpl (base implementation) of the rule that provides common\n rule infrastructure and appropriate abstract methods that must be filled in.\n <p/>\n RuleDefinitions and ClassDefinitions share the same dmdID space and the IDs must\n be unique. This is because each RuleDefinition results in the creation of a \n ClassDefinition for the DMO part of the rule that carries the rule parameters.");
        _RuleDefinitionOBJ.setDmdID("16");
        _RuleDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.RuleDefinitionDMO");
        _RuleDefinitionOBJ.setFile("metaSchema.dms");
        _RuleDefinitionOBJ.setIsNamedBy("name");
        _RuleDefinitionOBJ.setJavaClass("org.dmd.dms.RuleDefinition");
        _RuleDefinitionOBJ.setLineNumber("2164");
        _RuleDefinitionOBJ.addMay("must");
        _RuleDefinitionOBJ.addMay("may");
        _RuleDefinitionOBJ.addMay("isExtensible");
        _RuleDefinitionOBJ.addMay("dependency");
        _RuleDefinitionOBJ.addMust("name");
        _RuleDefinitionOBJ.addMust("ruleCategory");
        _RuleDefinitionOBJ.addMust("dmdID");
        _RuleDefinitionOBJ.addMust("description");
        _RuleDefinitionOBJ.setName("RuleDefinition");
        _RuleDefinitionOBJ.setUseWrapperType("EXTENDED");
        _RuleDefinition.setDefinedIn(this);
        addClassDefList(_RuleDefinition);

        ClassDefinitionDMO _RuleDataOBJ = new ClassDefinitionDMO();
        _RuleData = new ClassDefinition(_RuleDataOBJ,MetaDMSAG.__RuleData);
        _RuleDataOBJ.setClassType("ABSTRACT");
        _RuleDataOBJ.setDescription("The RuleData class serves as a common base for all ClassDefinitions\n that are generated internally to represent the data associated with RuleDefinitions.");
        _RuleDataOBJ.setDmdID("17");
        _RuleDataOBJ.setDmoImport("org.dmd.dms.generated.dmo.RuleDataDMO");
        _RuleDataOBJ.setFile("metaSchema.dms");
        _RuleDataOBJ.setIsNamedBy("ruleName");
        _RuleDataOBJ.setJavaClass("org.dmd.dms.RuleData");
        _RuleDataOBJ.setLineNumber("2184");
        _RuleDataOBJ.addMay("description");
        _RuleDataOBJ.addMay("definedIn");
        _RuleDataOBJ.addMay("file");
        _RuleDataOBJ.addMay("lineNumber");
        _RuleDataOBJ.addMay("applyToClass");
        _RuleDataOBJ.addMay("immediateHalt");
        _RuleDataOBJ.addMust("ruleTitle");
        _RuleDataOBJ.addMust("ruleName");
        _RuleDataOBJ.setName("RuleData");
        _RuleDataOBJ.setUseWrapperType("EXTENDED");
        _RuleData.setDefinedIn(this);
        addClassDefList(_RuleData);

        ClassDefinitionDMO _DependencyOBJ = new ClassDefinitionDMO();
        _Dependency = new ClassDefinition(_DependencyOBJ,MetaDMSAG.__Dependency);
        _DependencyOBJ.setClassType("STRUCTURAL");
        _DependencyOBJ.setDerivedFrom("DmsDefinition");
        _DependencyOBJ.setDescription("The Dependency class allows for the definition of a named dependency\n on something; usually an interface. In the current schema mechanisms, the only place\n that this mechanism is used is in the specification of RuleDefinitions. Rule instances are\n created by injecting RuleData into a rule implementation. If the rule implementation\n has dependencies on other objects, those dependencies are specified via references to\n Dependencies.\n <p/>\n A Dependency can be referred to via a RunContext definition which directs the generation\n of code that can instantiate the required object instances. Satisfying a Dependency relies\n on there being a DependencyImplementation that indicates how to instantiate the object\n that implements the interface defined by the dependency.\n <p/>\n If a Dependency specifies an instantiation, this is considered the default mechanism to\n fulfill the dependency. Other DependencyImplementations may be specified that override\n the specified instantiation in particular contexts.");
        _DependencyOBJ.setDmdID("18");
        _DependencyOBJ.setDmoImport("org.dmd.dms.generated.dmo.DependencyDMO");
        _DependencyOBJ.setFile("metaSchema.dms");
        _DependencyOBJ.setIsNamedBy("name");
        _DependencyOBJ.setJavaClass("org.dmd.dms.Dependency");
        _DependencyOBJ.setLineNumber("2215");
        _DependencyOBJ.addMay("dependencies");
        _DependencyOBJ.addMay("instantiation");
        _DependencyOBJ.addMust("name");
        _DependencyOBJ.addMust("useInterface");
        _DependencyOBJ.setName("Dependency");
        _DependencyOBJ.setUseWrapperType("EXTENDED");
        _Dependency.setDefinedIn(this);
        addClassDefList(_Dependency);

        ClassDefinitionDMO _DependencyImplementationOBJ = new ClassDefinitionDMO();
        _DependencyImplementation = new ClassDefinition(_DependencyImplementationOBJ,MetaDMSAG.__DependencyImplementation);
        _DependencyImplementationOBJ.setClassType("STRUCTURAL");
        _DependencyImplementationOBJ.setDerivedFrom("DmsDefinition");
        _DependencyImplementationOBJ.setDescription("The DependencyImplementation allows you to fulfill a defined Dependency.\n When a RunContext is specified, it will indicate a set of dependencies. For each of the\n specified dependencies, there must be at least one related DependencyImplementation,\n otherwise, we have no way to fulfill the dependency.");
        _DependencyImplementationOBJ.setDmdID("19");
        _DependencyImplementationOBJ.setDmoImport("org.dmd.dms.generated.dmo.DependencyImplementationDMO");
        _DependencyImplementationOBJ.setFile("metaSchema.dms");
        _DependencyImplementationOBJ.setIsNamedBy("name");
        _DependencyImplementationOBJ.setJavaClass("org.dmd.dms.DependencyImplementation");
        _DependencyImplementationOBJ.setLineNumber("2234");
        _DependencyImplementationOBJ.addMay("description");
        _DependencyImplementationOBJ.addMust("name");
        _DependencyImplementationOBJ.addMust("dependency");
        _DependencyImplementationOBJ.addMust("runContext");
        _DependencyImplementationOBJ.addMust("instantiation");
        _DependencyImplementationOBJ.setName("DependencyImplementation");
        _DependencyImplementationOBJ.setUseWrapperType("EXTENDED");
        _DependencyImplementation.setDefinedIn(this);
        addClassDefList(_DependencyImplementation);

        ClassDefinitionDMO _RunContextOBJ = new ClassDefinitionDMO();
        _RunContext = new ClassDefinition(_RunContextOBJ,MetaDMSAG.__RunContext);
        _RunContextOBJ.setClassType("STRUCTURAL");
        _RunContextOBJ.setDerivedFrom("DmsDefinition");
        _RunContextOBJ.setDmdID("20");
        _RunContextOBJ.setDmoImport("org.dmd.dms.generated.dmo.DependencyDMO");
        _RunContextOBJ.setFile("metaSchema.dms");
        _RunContextOBJ.setIsNamedBy("name");
        _RunContextOBJ.setJavaClass("org.dmd.dms.Dependency");
        _RunContextOBJ.setLineNumber("2248");
        _RunContextOBJ.addMay("description");
        _RunContextOBJ.addMust("name");
        _RunContextOBJ.addMust("dependencies");
        _RunContextOBJ.setName("RunContext");
        _RunContextOBJ.setUseWrapperType("EXTENDED");
        _RunContext.setDefinedIn(this);
        addClassDefList(_RunContext);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitAttributes(MetaGenerator.java:392)
    private void initAttributes() throws DmcValueException {

        AttributeDefinitionDMO _FQNOBJ = new AttributeDefinitionDMO();
        _FQN = new AttributeDefinition(_FQNOBJ);
        _FQNOBJ.setDescription("The fully qualified name of a hierarchic object. The exact form of\n the fqn is application specific.");
        _FQNOBJ.setDesignatedNameAttribute("true");
        _FQNOBJ.setDmdID("84");
        _FQNOBJ.setFile("metaSchema.dms");
        _FQNOBJ.setLineNumber("1187");
        _FQNOBJ.setName("FQN");
        _FQNOBJ.setType("FullyQualifiedName");
        _FQN.setDefinedIn(this);
        addAttributeDefList(_FQN);

        AttributeDefinitionDMO _abbrevOBJ = new AttributeDefinitionDMO();
        _abbrev = new AttributeDefinition(_abbrevOBJ);
        _abbrevOBJ.setDescription("This attribute stores an abbreviated form of the name of an attribute or class. This\n concept is borrowed from directory technology where shortened name forms are often\n used as part of distinguished names (DNs).");
        _abbrevOBJ.setDmdID("9");
        _abbrevOBJ.setFile("metaSchema.dms");
        _abbrevOBJ.setLineNumber("613");
        _abbrevOBJ.setName("abbrev");
        _abbrevOBJ.setType("String");
        _abbrev.setDefinedIn(this);
        addAttributeDefList(_abbrev);

        AttributeDefinitionDMO _actionDefListOBJ = new AttributeDefinitionDMO();
        _actionDefList = new AttributeDefinition(_actionDefListOBJ);
        _actionDefListOBJ.setDescription("A list of action definition references.");
        _actionDefListOBJ.setDmdID("60");
        _actionDefListOBJ.setFile("metaSchema.dms");
        _actionDefListOBJ.setInternalUse("true");
        _actionDefListOBJ.setLineNumber("991");
        _actionDefListOBJ.setName("actionDefList");
        _actionDefListOBJ.setType("ActionDefinition");
        _actionDefListOBJ.setValueType("MULTI");
        _actionDefList.setDefinedIn(this);
        addAttributeDefList(_actionDefList);

        AttributeDefinitionDMO _actionsOBJ = new AttributeDefinitionDMO();
        _actions = new AttributeDefinition(_actionsOBJ);
        _actionsOBJ.setDescription("Indicates the set of actions that are supported by a class of objects.");
        _actionsOBJ.setDmdID("32");
        _actionsOBJ.setFile("metaSchema.dms");
        _actionsOBJ.setLineNumber("775");
        _actionsOBJ.setName("actions");
        _actionsOBJ.setType("ActionDefinition");
        _actionsOBJ.setValueType("MULTI");
        _actions.setDefinedIn(this);
        addAttributeDefList(_actions);

        AttributeDefinitionDMO _allowedParentsOBJ = new AttributeDefinitionDMO();
        _allowedParents = new AttributeDefinition(_allowedParentsOBJ);
        _allowedParentsOBJ.setDescription("Indicates the classes of object that may be parents of the\n current class when objects are created in an instance hierarchy.");
        _allowedParentsOBJ.setDmdID("62");
        _allowedParentsOBJ.setFile("metaSchema.dms");
        _allowedParentsOBJ.setLineNumber("1006");
        _allowedParentsOBJ.setName("allowedParents");
        _allowedParentsOBJ.setType("ClassDefinition");
        _allowedParentsOBJ.setValueType("MULTI");
        _allowedParents.setDefinedIn(this);
        addAttributeDefList(_allowedParents);

        AttributeDefinitionDMO _altTypeOBJ = new AttributeDefinitionDMO();
        _altType = new AttributeDefinition(_altTypeOBJ);
        _altTypeOBJ.setDescription("The altType indicates an alternate type for a value. For instance\n when dealing with NameContainers, the value interface is obviously NameContainer, but\n the secret sauce of NameContainers is that they also take any DmcObjectName derivative.\n Specifying the altType on the NameContainer TypeDefinition allows for generation of \n the DmcObjectName interface as well.");
        _altTypeOBJ.setDmdID("108");
        _altTypeOBJ.setFile("metaSchema.dms");
        _altTypeOBJ.setLineNumber("1365");
        _altTypeOBJ.setName("altType");
        _altTypeOBJ.setType("String");
        _altType.setDefinedIn(this);
        addAttributeDefList(_altType);

        AttributeDefinitionDMO _altTypeImportOBJ = new AttributeDefinitionDMO();
        _altTypeImport = new AttributeDefinition(_altTypeImportOBJ);
        _altTypeImportOBJ.setDescription("An additional import (if required) by the altType attribute value.");
        _altTypeImportOBJ.setDmdID("109");
        _altTypeImportOBJ.setFile("metaSchema.dms");
        _altTypeImportOBJ.setLineNumber("1371");
        _altTypeImportOBJ.setName("altTypeImport");
        _altTypeImportOBJ.setType("String");
        _altTypeImport.setDefinedIn(this);
        addAttributeDefList(_altTypeImport);

        AttributeDefinitionDMO _applyToAttributeOBJ = new AttributeDefinitionDMO();
        _applyToAttribute = new AttributeDefinition(_applyToAttributeOBJ);
        _applyToAttributeOBJ.setDescription("Indicates the attribute to which an ATTRIBUTE type rule is applied.");
        _applyToAttributeOBJ.setDmdID("157");
        _applyToAttributeOBJ.setFile("metaSchema.dms");
        _applyToAttributeOBJ.setLineNumber("1716");
        _applyToAttributeOBJ.setName("applyToAttribute");
        _applyToAttributeOBJ.setType("AttributeDefinition");
        _applyToAttribute.setDefinedIn(this);
        addAttributeDefList(_applyToAttribute);

        AttributeDefinitionDMO _applyToClassOBJ = new AttributeDefinitionDMO();
        _applyToClass = new AttributeDefinition(_applyToClassOBJ);
        _applyToClassOBJ.setDescription("The class to which a rule should be applied.");
        _applyToClassOBJ.setDmdID("154");
        _applyToClassOBJ.setFile("metaSchema.dms");
        _applyToClassOBJ.setLineNumber("1695");
        _applyToClassOBJ.setName("applyToClass");
        _applyToClassOBJ.setType("ClassDefinition");
        _applyToClass.setDefinedIn(this);
        addAttributeDefList(_applyToClass);

        AttributeDefinitionDMO _attachToClassOBJ = new AttributeDefinitionDMO();
        _attachToClass = new AttributeDefinition(_attachToClassOBJ);
        _attachToClassOBJ.setDescription("Indicates the classes of object to which an action is to be attached.\n This mechanism allows for the extension of a class's behaviour without having\n to alter the schema of the class involved. This can be viewed as the auxiliary\n class equivalent for behaviour.");
        _attachToClassOBJ.setDmdID("65");
        _attachToClassOBJ.setFile("metaSchema.dms");
        _attachToClassOBJ.setLineNumber("1034");
        _attachToClassOBJ.setName("attachToClass");
        _attachToClassOBJ.setType("ClassDefinition");
        _attachToClassOBJ.setValueType("MULTI");
        _attachToClass.setDefinedIn(this);
        addAttributeDefList(_attachToClass);

        AttributeDefinitionDMO _attributeDefListOBJ = new AttributeDefinitionDMO();
        _attributeDefList = new AttributeDefinition(_attributeDefListOBJ);
        _attributeDefListOBJ.setDescription("A list of attribute definition references.");
        _attributeDefListOBJ.setDmdID("59");
        _attributeDefListOBJ.setFile("metaSchema.dms");
        _attributeDefListOBJ.setInternalUse("true");
        _attributeDefListOBJ.setLineNumber("983");
        _attributeDefListOBJ.setName("attributeDefList");
        _attributeDefListOBJ.setType("AttributeDefinition");
        _attributeDefListOBJ.setValueType("MULTI");
        _attributeDefList.setDefinedIn(this);
        addAttributeDefList(_attributeDefList);

        AttributeDefinitionDMO _attributeInfoFromParamOBJ = new AttributeDefinitionDMO();
        _attributeInfoFromParam = new AttributeDefinition(_attributeInfoFromParamOBJ);
        _attributeInfoFromParamOBJ.setDescription("Indicates how the DmcAttributeInfo should be extracted from one of the ruleParam values\n associated with a RuleCategory. If additional classes are required to support this access, you can specify ruleImport\n values as appropriate.");
        _attributeInfoFromParamOBJ.setDmdID("155");
        _attributeInfoFromParamOBJ.setFile("metaSchema.dms");
        _attributeInfoFromParamOBJ.setLineNumber("1703");
        _attributeInfoFromParamOBJ.setName("attributeInfoFromParam");
        _attributeInfoFromParamOBJ.setType("String");
        _attributeInfoFromParam.setDefinedIn(this);
        addAttributeDefList(_attributeInfoFromParam);

        AttributeDefinitionDMO _baseTypeOBJ = new AttributeDefinitionDMO();
        _baseType = new AttributeDefinition(_baseTypeOBJ);
        _baseTypeOBJ.setDescription("The broad base type of the data.");
        _baseTypeOBJ.setDmdID("135");
        _baseTypeOBJ.setFile("metaSchema.dms");
        _baseTypeOBJ.setLineNumber("1564");
        _baseTypeOBJ.setName("baseType");
        _baseTypeOBJ.setType("BaseTypeEnum");
        _baseType.setDefinedIn(this);
        addAttributeDefList(_baseType);

        AttributeDefinitionDMO _blockWhenLockedOBJ = new AttributeDefinitionDMO();
        _blockWhenLocked = new AttributeDefinition(_blockWhenLockedOBJ);
        _blockWhenLockedOBJ.setDescription("This flag indicates whether or not an Action will be blocked from\n proceeding if there is a DAF lock on the object against which the action is\n performed. The default is to block all incoming actions against a locked\n object. By setting this flag to false, you can allow an action to proceed.");
        _blockWhenLockedOBJ.setDmdID("71");
        _blockWhenLockedOBJ.setFile("metaSchema.dms");
        _blockWhenLockedOBJ.setLineNumber("1079");
        _blockWhenLockedOBJ.setName("blockWhenLocked");
        _blockWhenLockedOBJ.setType("Boolean");
        _blockWhenLocked.setDefinedIn(this);
        addAttributeDefList(_blockWhenLocked);

        AttributeDefinitionDMO _camelCaseNameOBJ = new AttributeDefinitionDMO();
        _camelCaseName = new AttributeDefinition(_camelCaseNameOBJ);
        _camelCaseNameOBJ.setDescription("The camelCaseName attribute is used to store a single camelCase format name for something.\n The name starts with a single letter and can be followed by a mix of letters and numbers. No spaces or \n other characters are allowed.");
        _camelCaseNameOBJ.setDesignatedNameAttribute("true");
        _camelCaseNameOBJ.setDmdID("116");
        _camelCaseNameOBJ.setFile("metaSchema.dms");
        _camelCaseNameOBJ.setLineNumber("1409");
        _camelCaseNameOBJ.setName("camelCaseName");
        _camelCaseNameOBJ.setType("CamelCaseName");
        _camelCaseName.setDefinedIn(this);
        addAttributeDefList(_camelCaseName);

        AttributeDefinitionDMO _classDefListOBJ = new AttributeDefinitionDMO();
        _classDefList = new AttributeDefinition(_classDefListOBJ);
        _classDefListOBJ.setDescription("A list of class definition references.");
        _classDefListOBJ.setDmdID("55");
        _classDefListOBJ.setFile("metaSchema.dms");
        _classDefListOBJ.setInternalUse("true");
        _classDefListOBJ.setLineNumber("950");
        _classDefListOBJ.setName("classDefList");
        _classDefListOBJ.setType("ClassDefinition");
        _classDefListOBJ.setValueType("MULTI");
        _classDefList.setDefinedIn(this);
        addAttributeDefList(_classDefList);

        AttributeDefinitionDMO _classFilterOBJ = new AttributeDefinitionDMO();
        _classFilter = new AttributeDefinition(_classFilterOBJ);
        _classFilterOBJ.setDescription("The classFilter is used to performing matching of objects based on\n their class or auxiliary classes.");
        _classFilterOBJ.setDesignatedFilterAttribute("true");
        _classFilterOBJ.setDmdID("128");
        _classFilterOBJ.setFile("metaSchema.dms");
        _classFilterOBJ.setLineNumber("1507");
        _classFilterOBJ.setName("classFilter");
        _classFilterOBJ.setType("ClassFilter");
        _classFilter.setDefinedIn(this);
        addAttributeDefList(_classFilter);

        AttributeDefinitionDMO _classInfoFromParamOBJ = new AttributeDefinitionDMO();
        _classInfoFromParam = new AttributeDefinition(_classInfoFromParamOBJ);
        _classInfoFromParamOBJ.setDescription("Indicates how the DmcClassInfo should be extracted from one of the ruleParam values\n associated with a RuleCategory. If additional classes are required to support this access, you can specify ruleImport\n values as appropriate.");
        _classInfoFromParamOBJ.setDmdID("151");
        _classInfoFromParamOBJ.setFile("metaSchema.dms");
        _classInfoFromParamOBJ.setLineNumber("1672");
        _classInfoFromParamOBJ.setName("classInfoFromParam");
        _classInfoFromParamOBJ.setType("String");
        _classInfoFromParam.setDefinedIn(this);
        addAttributeDefList(_classInfoFromParam);

        AttributeDefinitionDMO _classTypeOBJ = new AttributeDefinitionDMO();
        _classType = new AttributeDefinition(_classTypeOBJ);
        _classTypeOBJ.setDescription("This attribute indicates the type of a class definition.");
        _classTypeOBJ.setDmdID("10");
        _classTypeOBJ.setFile("metaSchema.dms");
        _classTypeOBJ.setLineNumber("619");
        _classTypeOBJ.setName("classType");
        _classTypeOBJ.setType("ClassTypeEnum");
        _classType.setDefinedIn(this);
        addAttributeDefList(_classType);

        AttributeDefinitionDMO _complexTypeDefListOBJ = new AttributeDefinitionDMO();
        _complexTypeDefList = new AttributeDefinition(_complexTypeDefListOBJ);
        _complexTypeDefListOBJ.setDescription("A list of complex type definition references.");
        _complexTypeDefListOBJ.setDmdID("117");
        _complexTypeDefListOBJ.setFile("metaSchema.dms");
        _complexTypeDefListOBJ.setInternalUse("true");
        _complexTypeDefListOBJ.setLineNumber("1417");
        _complexTypeDefListOBJ.setName("complexTypeDefList");
        _complexTypeDefListOBJ.setType("ComplexTypeDefinition");
        _complexTypeDefListOBJ.setValueType("MULTI");
        _complexTypeDefList.setDefinedIn(this);
        addAttributeDefList(_complexTypeDefList);

        AttributeDefinitionDMO _createAttributeFactoryOBJ = new AttributeDefinitionDMO();
        _createAttributeFactory = new AttributeDefinition(_createAttributeFactoryOBJ);
        _createAttributeFactoryOBJ.setDescription("When specified as true on a SchemaDefinition, the DMO generation\n utility will create a free standing AttributeFactory for the schema. This allows for\n the creation of attributes taht can then be embedded in complex objects and properly\n serialized/deserialized.");
        _createAttributeFactoryOBJ.setDmdID("89");
        _createAttributeFactoryOBJ.setFile("metaSchema.dms");
        _createAttributeFactoryOBJ.setLineNumber("1227");
        _createAttributeFactoryOBJ.setName("createAttributeFactory");
        _createAttributeFactoryOBJ.setType("Boolean");
        _createAttributeFactory.setDefinedIn(this);
        addAttributeDefList(_createAttributeFactory);

        AttributeDefinitionDMO _dataTypeOBJ = new AttributeDefinitionDMO();
        _dataType = new AttributeDefinition(_dataTypeOBJ);
        _dataTypeOBJ.setDescription("This attribute indicates the persistence characteristics of an attribute or\n class of object. How this information is used is application dependent.");
        _dataTypeOBJ.setDmdID("11");
        _dataTypeOBJ.setFile("metaSchema.dms");
        _dataTypeOBJ.setLineNumber("626");
        _dataTypeOBJ.setName("dataType");
        _dataTypeOBJ.setType("DataTypeEnum");
        _dataType.setDefinedIn(this);
        addAttributeDefList(_dataType);

        AttributeDefinitionDMO _defFilesOBJ = new AttributeDefinitionDMO();
        _defFiles = new AttributeDefinition(_defFilesOBJ);
        _defFilesOBJ.setDescription("A list of files that contain the class, attribute and type definitions\n that comprise a schema.");
        _defFilesOBJ.setDmdID("68");
        _defFilesOBJ.setFile("metaSchema.dms");
        _defFilesOBJ.setLineNumber("1058");
        _defFilesOBJ.setName("defFiles");
        _defFilesOBJ.setType("String");
        _defFilesOBJ.setValueType("MULTI");
        _defFiles.setDefinedIn(this);
        addAttributeDefList(_defFiles);

        AttributeDefinitionDMO _definedInOBJ = new AttributeDefinitionDMO();
        _definedIn = new AttributeDefinition(_definedInOBJ);
        _definedInOBJ.setDescription("Indicates the schema in which a type, attribute or class is defined.");
        _definedInOBJ.setDmdID("61");
        _definedInOBJ.setFile("metaSchema.dms");
        _definedInOBJ.setInternalUse("true");
        _definedInOBJ.setLineNumber("998");
        _definedInOBJ.setName("definedIn");
        _definedInOBJ.setType("SchemaDefinition");
        _definedIn.setDefinedIn(this);
        addAttributeDefList(_definedIn);

        AttributeDefinitionDMO _dependenciesOBJ = new AttributeDefinitionDMO();
        _dependencies = new AttributeDefinition(_dependenciesOBJ);
        _dependenciesOBJ.setDescription("A set of references to Dependencies.");
        _dependenciesOBJ.setDmdID("147");
        _dependenciesOBJ.setFile("metaSchema.dms");
        _dependenciesOBJ.setLineNumber("1646");
        _dependenciesOBJ.setName("dependencies");
        _dependenciesOBJ.setType("Dependency");
        _dependenciesOBJ.setValueType("MULTI");
        _dependencies.setDefinedIn(this);
        addAttributeDefList(_dependencies);

        AttributeDefinitionDMO _dependencyOBJ = new AttributeDefinitionDMO();
        _dependency = new AttributeDefinition(_dependencyOBJ);
        _dependencyOBJ.setDescription("A reference to a single Dependency.");
        _dependencyOBJ.setDmdID("146");
        _dependencyOBJ.setFile("metaSchema.dms");
        _dependencyOBJ.setLineNumber("1639");
        _dependencyOBJ.setName("dependency");
        _dependencyOBJ.setType("Dependency");
        _dependency.setDefinedIn(this);
        addAttributeDefList(_dependency);

        AttributeDefinitionDMO _dependsOnOBJ = new AttributeDefinitionDMO();
        _dependsOn = new AttributeDefinition(_dependsOnOBJ);
        _dependsOnOBJ.setDescription("A list of schema names.");
        _dependsOnOBJ.setDmdID("66");
        _dependsOnOBJ.setFile("metaSchema.dms");
        _dependsOnOBJ.setLineNumber("1041");
        _dependsOnOBJ.setName("dependsOn");
        _dependsOnOBJ.setType("String");
        _dependsOnOBJ.setValueType("MULTI");
        _dependsOn.setDefinedIn(this);
        addAttributeDefList(_dependsOn);

        AttributeDefinitionDMO _dependsOnRefOBJ = new AttributeDefinitionDMO();
        _dependsOnRef = new AttributeDefinition(_dependsOnRefOBJ);
        _dependsOnRefOBJ.setDescription("A list of schema references that are based on the contents of the dependsOn\n attribute.");
        _dependsOnRefOBJ.setDmdID("67");
        _dependsOnRefOBJ.setFile("metaSchema.dms");
        _dependsOnRefOBJ.setInternalUse("true");
        _dependsOnRefOBJ.setLineNumber("1050");
        _dependsOnRefOBJ.setName("dependsOnRef");
        _dependsOnRefOBJ.setType("SchemaDefinition");
        _dependsOnRefOBJ.setValueType("MULTI");
        _dependsOnRef.setDefinedIn(this);
        addAttributeDefList(_dependsOnRef);

        AttributeDefinitionDMO _dependsOnSchemaOBJ = new AttributeDefinitionDMO();
        _dependsOnSchema = new AttributeDefinition(_dependsOnSchemaOBJ);
        _dependsOnSchemaOBJ.setDescription("Indicates the schema(s) on which something depends.");
        _dependsOnSchemaOBJ.setDmdID("120");
        _dependsOnSchemaOBJ.setFile("metaSchema.dms");
        _dependsOnSchemaOBJ.setLineNumber("1440");
        _dependsOnSchemaOBJ.setName("dependsOnSchema");
        _dependsOnSchemaOBJ.setType("String");
        _dependsOnSchemaOBJ.setValueType("MULTI");
        _dependsOnSchema.setDefinedIn(this);
        addAttributeDefList(_dependsOnSchema);

        AttributeDefinitionDMO _derivedClassesOBJ = new AttributeDefinitionDMO();
        _derivedClasses = new AttributeDefinition(_derivedClassesOBJ);
        _derivedClassesOBJ.setDescription("Indicates the classes that are known to be derived from a class.");
        _derivedClassesOBJ.setDmdID("25");
        _derivedClassesOBJ.setFile("metaSchema.dms");
        _derivedClassesOBJ.setInternalUse("true");
        _derivedClassesOBJ.setLineNumber("720");
        _derivedClassesOBJ.setName("derivedClasses");
        _derivedClassesOBJ.setType("ClassDefinition");
        _derivedClassesOBJ.setValueType("MULTI");
        _derivedClasses.setDefinedIn(this);
        addAttributeDefList(_derivedClasses);

        AttributeDefinitionDMO _derivedFromOBJ = new AttributeDefinitionDMO();
        _derivedFrom = new AttributeDefinition(_derivedFromOBJ);
        _derivedFromOBJ.setDescription("Indicates the abstract or structural class from which this class is derived.");
        _derivedFromOBJ.setDmdID("21");
        _derivedFromOBJ.setFile("metaSchema.dms");
        _derivedFromOBJ.setLineNumber("693");
        _derivedFromOBJ.setName("derivedFrom");
        _derivedFromOBJ.setType("ClassDefinition");
        _derivedFrom.setDefinedIn(this);
        addAttributeDefList(_derivedFrom);

        AttributeDefinitionDMO _descriptionOBJ = new AttributeDefinitionDMO();
        _description = new AttributeDefinition(_descriptionOBJ);
        _descriptionOBJ.setDescription("The description attribute is used to provide descriptive\n documentation for schema related definitions. The text provided should conform\n to XHTML concepts since it will be dumped in the context of the generated HTML\n documentation.");
        _descriptionOBJ.setDmdID("18");
        _descriptionOBJ.setFile("metaSchema.dms");
        _descriptionOBJ.setLineNumber("672");
        _descriptionOBJ.setName("description");
        _descriptionOBJ.setPreserveNewlines("true");
        _descriptionOBJ.setType("String");
        _description.setDefinedIn(this);
        addAttributeDefList(_description);

        AttributeDefinitionDMO _designatedFilterAttributeOBJ = new AttributeDefinitionDMO();
        _designatedFilterAttribute = new AttributeDefinition(_designatedFilterAttributeOBJ);
        _designatedFilterAttributeOBJ.setDescription("The designatedFilterAttribute flag is used to identify the attribute\n designated as the standard wrapper for filters of a particular type. \n One, and only one, attribute definition can be the designatedFilterAttribute for a \n TypeDefinition that is identified as isFilterType.");
        _designatedFilterAttributeOBJ.setDmdID("126");
        _designatedFilterAttributeOBJ.setFile("metaSchema.dms");
        _designatedFilterAttributeOBJ.setLineNumber("1491");
        _designatedFilterAttributeOBJ.setName("designatedFilterAttribute");
        _designatedFilterAttributeOBJ.setType("Boolean");
        _designatedFilterAttribute.setDefinedIn(this);
        addAttributeDefList(_designatedFilterAttribute);

        AttributeDefinitionDMO _designatedNameAttributeOBJ = new AttributeDefinitionDMO();
        _designatedNameAttribute = new AttributeDefinition(_designatedNameAttributeOBJ);
        _designatedNameAttributeOBJ.setDescription("The designatedNameAttribute flag is used to identify the attribute\n designated as the standard wrapper for names of a particular type. One, and only one,\n attribute definition can be the designatedNameAttribute for a TypeDefinition that has\n isNameType true.");
        _designatedNameAttributeOBJ.setDmdID("102");
        _designatedNameAttributeOBJ.setFile("metaSchema.dms");
        _designatedNameAttributeOBJ.setLineNumber("1324");
        _designatedNameAttributeOBJ.setName("designatedNameAttribute");
        _designatedNameAttributeOBJ.setType("Boolean");
        _designatedNameAttribute.setDefinedIn(this);
        addAttributeDefList(_designatedNameAttribute);

        AttributeDefinitionDMO _dmdIDOBJ = new AttributeDefinitionDMO();
        _dmdID = new AttributeDefinition(_dmdIDOBJ);
        _dmdIDOBJ.setDescription("The dmdID attribute is used to store a unique Dark Matter Definition ID for attributes.\n This is used as part of the serialization mechanisms built into Dark Matter Objects.");
        _dmdIDOBJ.setDmdID("3");
        _dmdIDOBJ.setFile("metaSchema.dms");
        _dmdIDOBJ.setLineNumber("563");
        _dmdIDOBJ.setName("dmdID");
        _dmdIDOBJ.setType("Integer");
        _dmdID.setDefinedIn(this);
        addAttributeDefList(_dmdID);

        AttributeDefinitionDMO _dmeClassOBJ = new AttributeDefinitionDMO();
        _dmeClass = new AttributeDefinition(_dmeClassOBJ);
        _dmeClassOBJ.setDescription("This attribute indicates just the Dark Matter Extended (DME) class name.");
        _dmeClassOBJ.setDmdID("44");
        _dmeClassOBJ.setFile("metaSchema.dms");
        _dmeClassOBJ.setInternalUse("true");
        _dmeClassOBJ.setLineNumber("868");
        _dmeClassOBJ.setName("dmeClass");
        _dmeClassOBJ.setType("String");
        _dmeClass.setDefinedIn(this);
        addAttributeDefList(_dmeClass);

        AttributeDefinitionDMO _dmeImportOBJ = new AttributeDefinitionDMO();
        _dmeImport = new AttributeDefinition(_dmeImportOBJ);
        _dmeImportOBJ.setDescription("This attribute indicates the full name of the class that extends a DMW class.\n Dark Matter Extended (DME).");
        _dmeImportOBJ.setDmdID("43");
        _dmeImportOBJ.setFile("metaSchema.dms");
        _dmeImportOBJ.setInternalUse("true");
        _dmeImportOBJ.setLineNumber("861");
        _dmeImportOBJ.setName("dmeImport");
        _dmeImportOBJ.setType("String");
        _dmeImport.setDefinedIn(this);
        addAttributeDefList(_dmeImport);

        AttributeDefinitionDMO _dmoAuxClassOBJ = new AttributeDefinitionDMO();
        _dmoAuxClass = new AttributeDefinition(_dmoAuxClassOBJ);
        _dmoAuxClassOBJ.setDescription("This attribute indicates just the DMO class name e.g. MyClassAUXDMO");
        _dmoAuxClassOBJ.setDmdID("37");
        _dmoAuxClassOBJ.setFile("metaSchema.dms");
        _dmoAuxClassOBJ.setInternalUse("true");
        _dmoAuxClassOBJ.setLineNumber("816");
        _dmoAuxClassOBJ.setName("dmoAuxClass");
        _dmoAuxClassOBJ.setType("String");
        _dmoAuxClass.setDefinedIn(this);
        addAttributeDefList(_dmoAuxClass);

        AttributeDefinitionDMO _dmoAuxClassImportOBJ = new AttributeDefinitionDMO();
        _dmoAuxClassImport = new AttributeDefinition(_dmoAuxClassImportOBJ);
        _dmoAuxClassImportOBJ.setDescription("This attribute indicates the full name of the MyClassAUXDMO class");
        _dmoAuxClassImportOBJ.setDmdID("38");
        _dmoAuxClassImportOBJ.setFile("metaSchema.dms");
        _dmoAuxClassImportOBJ.setInternalUse("true");
        _dmoAuxClassImportOBJ.setLineNumber("823");
        _dmoAuxClassImportOBJ.setName("dmoAuxClassImport");
        _dmoAuxClassImportOBJ.setType("String");
        _dmoAuxClassImport.setDefinedIn(this);
        addAttributeDefList(_dmoAuxClassImport);

        AttributeDefinitionDMO _dmoClassOBJ = new AttributeDefinitionDMO();
        _dmoClass = new AttributeDefinition(_dmoClassOBJ);
        _dmoClassOBJ.setDescription("This attribute indicates just the DMO class name e.g. MyClassDMO");
        _dmoClassOBJ.setDmdID("36");
        _dmoClassOBJ.setFile("metaSchema.dms");
        _dmoClassOBJ.setInternalUse("true");
        _dmoClassOBJ.setLineNumber("809");
        _dmoClassOBJ.setName("dmoClass");
        _dmoClassOBJ.setType("String");
        _dmoClass.setDefinedIn(this);
        addAttributeDefList(_dmoClass);

        AttributeDefinitionDMO _dmoImportOBJ = new AttributeDefinitionDMO();
        _dmoImport = new AttributeDefinition(_dmoImportOBJ);
        _dmoImportOBJ.setDescription("This attribute indicates the full name of the generated Dark Matter Object (DMO)\n class (including package) that is generated for this class. The class will always have DmcObject\n at the top of its derivation hierarchy.");
        _dmoImportOBJ.setDmdID("35");
        _dmoImportOBJ.setFile("metaSchema.dms");
        _dmoImportOBJ.setInternalUse("true");
        _dmoImportOBJ.setLineNumber("802");
        _dmoImportOBJ.setName("dmoImport");
        _dmoImportOBJ.setType("String");
        _dmoImport.setDefinedIn(this);
        addAttributeDefList(_dmoImport);

        AttributeDefinitionDMO _dmtClassOBJ = new AttributeDefinitionDMO();
        _dmtClass = new AttributeDefinition(_dmtClassOBJ);
        _dmtClassOBJ.setDescription("This attribute indicates just the DmcType class name.");
        _dmtClassOBJ.setDmdID("46");
        _dmtClassOBJ.setFile("metaSchema.dms");
        _dmtClassOBJ.setInternalUse("true");
        _dmtClassOBJ.setLineNumber("883");
        _dmtClassOBJ.setName("dmtClass");
        _dmtClassOBJ.setType("String");
        _dmtClass.setDefinedIn(this);
        addAttributeDefList(_dmtClass);

        AttributeDefinitionDMO _dmtImportOBJ = new AttributeDefinitionDMO();
        _dmtImport = new AttributeDefinition(_dmtImportOBJ);
        _dmtImportOBJ.setDescription("This attribute indicates the full name of the DmcType class used to reference\n a class. These types are auto generated and named DmcType<classname>REF.");
        _dmtImportOBJ.setDmdID("45");
        _dmtImportOBJ.setFile("metaSchema.dms");
        _dmtImportOBJ.setInternalUse("true");
        _dmtImportOBJ.setLineNumber("876");
        _dmtImportOBJ.setName("dmtImport");
        _dmtImportOBJ.setType("String");
        _dmtImport.setDefinedIn(this);
        addAttributeDefList(_dmtImport);

        AttributeDefinitionDMO _dmtREFImportOBJ = new AttributeDefinitionDMO();
        _dmtREFImport = new AttributeDefinition(_dmtREFImportOBJ);
        _dmtREFImportOBJ.setDescription("This attribute indicates the full name of the class used to reference\n a class. These types are auto generated and named <classname>REF.");
        _dmtREFImportOBJ.setDmdID("93");
        _dmtREFImportOBJ.setFile("metaSchema.dms");
        _dmtREFImportOBJ.setInternalUse("true");
        _dmtREFImportOBJ.setLineNumber("1260");
        _dmtREFImportOBJ.setName("dmtREFImport");
        _dmtREFImportOBJ.setType("String");
        _dmtREFImport.setDefinedIn(this);
        addAttributeDefList(_dmtREFImport);

        AttributeDefinitionDMO _dmwAuxClassOBJ = new AttributeDefinitionDMO();
        _dmwAuxClass = new AttributeDefinition(_dmwAuxClassOBJ);
        _dmwAuxClassOBJ.setDescription("This attribute indicates just the DMO class name e.g. MyClassAUX");
        _dmwAuxClassOBJ.setDmdID("39");
        _dmwAuxClassOBJ.setFile("metaSchema.dms");
        _dmwAuxClassOBJ.setInternalUse("true");
        _dmwAuxClassOBJ.setLineNumber("830");
        _dmwAuxClassOBJ.setName("dmwAuxClass");
        _dmwAuxClassOBJ.setType("String");
        _dmwAuxClass.setDefinedIn(this);
        addAttributeDefList(_dmwAuxClass);

        AttributeDefinitionDMO _dmwAuxClassImportOBJ = new AttributeDefinitionDMO();
        _dmwAuxClassImport = new AttributeDefinition(_dmwAuxClassImportOBJ);
        _dmwAuxClassImportOBJ.setDescription("This attribute indicates the full name of the MyClassAUX class");
        _dmwAuxClassImportOBJ.setDmdID("40");
        _dmwAuxClassImportOBJ.setFile("metaSchema.dms");
        _dmwAuxClassImportOBJ.setInternalUse("true");
        _dmwAuxClassImportOBJ.setLineNumber("837");
        _dmwAuxClassImportOBJ.setName("dmwAuxClassImport");
        _dmwAuxClassImportOBJ.setType("String");
        _dmwAuxClassImport.setDefinedIn(this);
        addAttributeDefList(_dmwAuxClassImport);

        AttributeDefinitionDMO _dmwClassOBJ = new AttributeDefinitionDMO();
        _dmwClass = new AttributeDefinition(_dmwClassOBJ);
        _dmwClassOBJ.setDescription("This attribute indicates just the DMW class name, eg MyClassDMW");
        _dmwClassOBJ.setDmdID("42");
        _dmwClassOBJ.setFile("metaSchema.dms");
        _dmwClassOBJ.setInternalUse("true");
        _dmwClassOBJ.setLineNumber("853");
        _dmwClassOBJ.setName("dmwClass");
        _dmwClassOBJ.setType("String");
        _dmwClass.setDefinedIn(this);
        addAttributeDefList(_dmwClass);

        AttributeDefinitionDMO _dmwImportOBJ = new AttributeDefinitionDMO();
        _dmwImport = new AttributeDefinition(_dmwImportOBJ);
        _dmwImportOBJ.setDescription("This attribute indicates the full name of the generated Dark Matter Wrapper (DMW)\n class (including package) that is wrapped by this class. The class will always be a derived class of\n DmwWrapperBase.");
        _dmwImportOBJ.setDmdID("41");
        _dmwImportOBJ.setFile("metaSchema.dms");
        _dmwImportOBJ.setInternalUse("true");
        _dmwImportOBJ.setLineNumber("846");
        _dmwImportOBJ.setName("dmwImport");
        _dmwImportOBJ.setType("String");
        _dmwImport.setDefinedIn(this);
        addAttributeDefList(_dmwImport);

        AttributeDefinitionDMO _dmwIteratorClassOBJ = new AttributeDefinitionDMO();
        _dmwIteratorClass = new AttributeDefinition(_dmwIteratorClassOBJ);
        _dmwIteratorClassOBJ.setDescription("This attribute indicates just the DmcContainerIterator name for a\n class of object.");
        _dmwIteratorClassOBJ.setDmdID("92");
        _dmwIteratorClassOBJ.setFile("metaSchema.dms");
        _dmwIteratorClassOBJ.setInternalUse("true");
        _dmwIteratorClassOBJ.setLineNumber("1252");
        _dmwIteratorClassOBJ.setName("dmwIteratorClass");
        _dmwIteratorClassOBJ.setType("String");
        _dmwIteratorClass.setDefinedIn(this);
        addAttributeDefList(_dmwIteratorClass);

        AttributeDefinitionDMO _dmwIteratorImportOBJ = new AttributeDefinitionDMO();
        _dmwIteratorImport = new AttributeDefinition(_dmwIteratorImportOBJ);
        _dmwIteratorImportOBJ.setDescription("This attribute indicates the full name of the DmcContainerIterator \n derived class that allows us to iterate over a set of object references and get back\n the DMW wrapper object instead of the DMO.");
        _dmwIteratorImportOBJ.setDmdID("91");
        _dmwIteratorImportOBJ.setFile("metaSchema.dms");
        _dmwIteratorImportOBJ.setInternalUse("true");
        _dmwIteratorImportOBJ.setLineNumber("1244");
        _dmwIteratorImportOBJ.setName("dmwIteratorImport");
        _dmwIteratorImportOBJ.setType("String");
        _dmwIteratorImport.setDefinedIn(this);
        addAttributeDefList(_dmwIteratorImport);

        AttributeDefinitionDMO _dmwPackageOBJ = new AttributeDefinitionDMO();
        _dmwPackage = new AttributeDefinition(_dmwPackageOBJ);
        _dmwPackageOBJ.setDescription("Indicates the package where server related Dark Matter Wrapper classes \n were generated for this schema. This is used when we're generating derived wrapper\n classes.");
        _dmwPackageOBJ.setDmdID("54");
        _dmwPackageOBJ.setFile("metaSchema.dms");
        _dmwPackageOBJ.setLineNumber("942");
        _dmwPackageOBJ.setName("dmwPackage");
        _dmwPackageOBJ.setType("String");
        _dmwPackage.setDefinedIn(this);
        addAttributeDefList(_dmwPackage);

        AttributeDefinitionDMO _dmwTypeToPackageOBJ = new AttributeDefinitionDMO();
        _dmwTypeToPackage = new AttributeDefinition(_dmwTypeToPackageOBJ);
        _dmwTypeToPackageOBJ.setDescription("The dmwTypeToPackage attribute is used to indicate alternative generation\n packages for the Dark Matter Wrapper (DMW) code generation mechanisms. For instance, if we \n want to generate GXT wrappers for use with Sencha's GXT model classes, we could specify\n dmwTypeToPackage gxt com.example.client. Each of schemas that's loaded for generation would\n have to have this same attribute specified so that, if there were derived classes across\n schemas, the appropriate wrapper derivations could be determined. See the ClassDefintion.adjustClass()\n method to see how this is used.");
        _dmwTypeToPackageOBJ.setDmdID("123");
        _dmwTypeToPackageOBJ.setFile("metaSchema.dms");
        _dmwTypeToPackageOBJ.setLineNumber("1468");
        _dmwTypeToPackageOBJ.setName("dmwTypeToPackage");
        _dmwTypeToPackageOBJ.setType("StringToString");
        _dmwTypeToPackageOBJ.setValueType("MULTI");
        _dmwTypeToPackage.setDefinedIn(this);
        addAttributeDefList(_dmwTypeToPackage);

        AttributeDefinitionDMO _dmwWrapperTypeOBJ = new AttributeDefinitionDMO();
        _dmwWrapperType = new AttributeDefinition(_dmwWrapperTypeOBJ);
        _dmwWrapperTypeOBJ.setDescription("The dmwWrapperType is used to indicate whether or not you want extended wrappers\n when the wrappers are generated for an object in a particular generation context.");
        _dmwWrapperTypeOBJ.setDmdID("124");
        _dmwWrapperTypeOBJ.setFile("metaSchema.dms");
        _dmwWrapperTypeOBJ.setLineNumber("1476");
        _dmwWrapperTypeOBJ.setName("dmwWrapperType");
        _dmwWrapperTypeOBJ.setType("DmwTypeToWrapperType");
        _dmwWrapperTypeOBJ.setValueType("MULTI");
        _dmwWrapperType.setDefinedIn(this);
        addAttributeDefList(_dmwWrapperType);

        AttributeDefinitionDMO _dotNameOBJ = new AttributeDefinitionDMO();
        _dotName = new AttributeDefinition(_dotNameOBJ);
        _dotNameOBJ.setDescription("The dotName attribute is used to store dot separated names.");
        _dotNameOBJ.setDesignatedNameAttribute("true");
        _dotNameOBJ.setDmdID("107");
        _dotNameOBJ.setFile("metaSchema.dms");
        _dotNameOBJ.setLineNumber("1355");
        _dotNameOBJ.setName("dotName");
        _dotNameOBJ.setType("DotName");
        _dotName.setDefinedIn(this);
        addAttributeDefList(_dotName);

        AttributeDefinitionDMO _enumDefListOBJ = new AttributeDefinitionDMO();
        _enumDefList = new AttributeDefinition(_enumDefListOBJ);
        _enumDefListOBJ.setDescription("A list of EnumDefinitions.");
        _enumDefListOBJ.setDmdID("58");
        _enumDefListOBJ.setFile("metaSchema.dms");
        _enumDefListOBJ.setInternalUse("true");
        _enumDefListOBJ.setLineNumber("975");
        _enumDefListOBJ.setName("enumDefList");
        _enumDefListOBJ.setType("EnumDefinition");
        _enumDefListOBJ.setValueType("MULTI");
        _enumDefList.setDefinedIn(this);
        addAttributeDefList(_enumDefList);

        AttributeDefinitionDMO _enumIntOBJ = new AttributeDefinitionDMO();
        _enumInt = new AttributeDefinition(_enumIntOBJ);
        _enumIntOBJ.setDescription("The integer value associated with an enumeration value.");
        _enumIntOBJ.setDmdID("69");
        _enumIntOBJ.setFile("metaSchema.dms");
        _enumIntOBJ.setLineNumber("1064");
        _enumIntOBJ.setName("enumInt");
        _enumIntOBJ.setType("Integer");
        _enumInt.setDefinedIn(this);
        addAttributeDefList(_enumInt);

        AttributeDefinitionDMO _enumNameOBJ = new AttributeDefinitionDMO();
        _enumName = new AttributeDefinition(_enumNameOBJ);
        _enumNameOBJ.setDescription("The original name of an enum as referred to in the internally generated type for enums.");
        _enumNameOBJ.setDmdID("99");
        _enumNameOBJ.setFile("metaSchema.dms");
        _enumNameOBJ.setLineNumber("1301");
        _enumNameOBJ.setName("enumName");
        _enumNameOBJ.setType("String");
        _enumName.setDefinedIn(this);
        addAttributeDefList(_enumName);

        AttributeDefinitionDMO _enumStringOBJ = new AttributeDefinitionDMO();
        _enumString = new AttributeDefinition(_enumStringOBJ);
        _enumStringOBJ.setDescription("The string value associated with an enumeration value.");
        _enumStringOBJ.setDmdID("70");
        _enumStringOBJ.setFile("metaSchema.dms");
        _enumStringOBJ.setLineNumber("1070");
        _enumStringOBJ.setName("enumString");
        _enumStringOBJ.setType("String");
        _enumString.setDefinedIn(this);
        addAttributeDefList(_enumString);

        AttributeDefinitionDMO _enumValueOBJ = new AttributeDefinitionDMO();
        _enumValue = new AttributeDefinition(_enumValueOBJ);
        _enumValueOBJ.setDescription("Indicates the set of enum values associated with an enumeration type\n definition.");
        _enumValueOBJ.setDmdID("33");
        _enumValueOBJ.setFile("metaSchema.dms");
        _enumValueOBJ.setLineNumber("783");
        _enumValueOBJ.setName("enumValue");
        _enumValueOBJ.setType("EnumValue");
        _enumValueOBJ.setValueType("MULTI");
        _enumValue.setDefinedIn(this);
        addAttributeDefList(_enumValue);

        AttributeDefinitionDMO _excludeFromContextOBJ = new AttributeDefinitionDMO();
        _excludeFromContext = new AttributeDefinition(_excludeFromContextOBJ);
        _excludeFromContextOBJ.setDescription("The excludeFromContext attribute is used to indicate that\n a class of object (and all of its derivatives) should be excluded from the wrapper\n generation for the specified context. An example usage is in the Dark Matter Protocol\n where we don't want to generate wrappers for the message objects in a GXT context.");
        _excludeFromContextOBJ.setDmdID("130");
        _excludeFromContextOBJ.setFile("metaSchema.dms");
        _excludeFromContextOBJ.setLineNumber("1528");
        _excludeFromContextOBJ.setName("excludeFromContext");
        _excludeFromContextOBJ.setType("String");
        _excludeFromContextOBJ.setValueType("MULTI");
        _excludeFromContext.setDefinedIn(this);
        addAttributeDefList(_excludeFromContext);

        AttributeDefinitionDMO _extendedClassOBJ = new AttributeDefinitionDMO();
        _extendedClass = new AttributeDefinition(_extendedClassOBJ);
        _extendedClassOBJ.setDescription("The extendedClass indicates the fully qualified name of the class\n that is derived from the generated ComplexType to provide additional behaviour.");
        _extendedClassOBJ.setDmdID("106");
        _extendedClassOBJ.setFile("metaSchema.dms");
        _extendedClassOBJ.setLineNumber("1348");
        _extendedClassOBJ.setName("extendedClass");
        _extendedClassOBJ.setType("String");
        _extendedClass.setDefinedIn(this);
        addAttributeDefList(_extendedClass);

        AttributeDefinitionDMO _extendedReferenceClassOBJ = new AttributeDefinitionDMO();
        _extendedReferenceClass = new AttributeDefinition(_extendedReferenceClassOBJ);
        _extendedReferenceClassOBJ.setDescription("Indicates the class of object to which an \n ExtendedReferenceTypeDefinition refers.");
        _extendedReferenceClassOBJ.setDmdID("131");
        _extendedReferenceClassOBJ.setFile("metaSchema.dms");
        _extendedReferenceClassOBJ.setLineNumber("1535");
        _extendedReferenceClassOBJ.setName("extendedReferenceClass");
        _extendedReferenceClassOBJ.setType("ClassDefinition");
        _extendedReferenceClass.setDefinedIn(this);
        addAttributeDefList(_extendedReferenceClass);

        AttributeDefinitionDMO _extendedReferenceTypeDefListOBJ = new AttributeDefinitionDMO();
        _extendedReferenceTypeDefList = new AttributeDefinition(_extendedReferenceTypeDefListOBJ);
        _extendedReferenceTypeDefListOBJ.setDescription("A list of extended reference type definition references.");
        _extendedReferenceTypeDefListOBJ.setDmdID("132");
        _extendedReferenceTypeDefListOBJ.setFile("metaSchema.dms");
        _extendedReferenceTypeDefListOBJ.setInternalUse("true");
        _extendedReferenceTypeDefListOBJ.setLineNumber("1543");
        _extendedReferenceTypeDefListOBJ.setName("extendedReferenceTypeDefList");
        _extendedReferenceTypeDefListOBJ.setType("ExtendedReferenceTypeDefinition");
        _extendedReferenceTypeDefListOBJ.setValueType("MULTI");
        _extendedReferenceTypeDefList.setDefinedIn(this);
        addAttributeDefList(_extendedReferenceTypeDefList);

        AttributeDefinitionDMO _extendsInterfaceOBJ = new AttributeDefinitionDMO();
        _extendsInterface = new AttributeDefinition(_extendsInterfaceOBJ);
        _extendsInterfaceOBJ.setDescription("Indicates the fully qualifed name of an interface that an interface extends.");
        _extendsInterfaceOBJ.setDmdID("119");
        _extendsInterfaceOBJ.setFile("metaSchema.dms");
        _extendsInterfaceOBJ.setLineNumber("1433");
        _extendsInterfaceOBJ.setName("extendsInterface");
        _extendsInterfaceOBJ.setType("String");
        _extendsInterfaceOBJ.setValueType("MULTI");
        _extendsInterface.setDefinedIn(this);
        addAttributeDefList(_extendsInterface);

        AttributeDefinitionDMO _fieldOBJ = new AttributeDefinitionDMO();
        _field = new AttributeDefinition(_fieldOBJ);
        _fieldOBJ.setDescription("The field indicates a type and name for a field in a ComplexType.");
        _fieldOBJ.setDmdID("105");
        _fieldOBJ.setFile("metaSchema.dms");
        _fieldOBJ.setLineNumber("1341");
        _fieldOBJ.setName("field");
        _fieldOBJ.setType("Field");
        _fieldOBJ.setValueType("MULTI");
        _field.setDefinedIn(this);
        addAttributeDefList(_field);

        AttributeDefinitionDMO _fieldSeparatorOBJ = new AttributeDefinitionDMO();
        _fieldSeparator = new AttributeDefinition(_fieldSeparatorOBJ);
        _fieldSeparatorOBJ.setDescription("The fieldSeparator is used to indicate the separation character used\n when a ComplexType is represented as a String. If a fieldSeparator isn't specified, it is\n assumed to be a space.");
        _fieldSeparatorOBJ.setDmdID("104");
        _fieldSeparatorOBJ.setFile("metaSchema.dms");
        _fieldSeparatorOBJ.setLineNumber("1334");
        _fieldSeparatorOBJ.setName("fieldSeparator");
        _fieldSeparatorOBJ.setType("String");
        _fieldSeparator.setDefinedIn(this);
        addAttributeDefList(_fieldSeparator);

        AttributeDefinitionDMO _fileOBJ = new AttributeDefinitionDMO();
        _file = new AttributeDefinition(_fileOBJ);
        _fileOBJ.setDescription("Indicates the file from which a definition was loaded.");
        _fileOBJ.setDmdID("74");
        _fileOBJ.setFile("metaSchema.dms");
        _fileOBJ.setInternalUse("true");
        _fileOBJ.setLineNumber("1104");
        _fileOBJ.setName("file");
        _fileOBJ.setType("String");
        _file.setDefinedIn(this);
        addAttributeDefList(_file);

        AttributeDefinitionDMO _filterAttributeDefOBJ = new AttributeDefinitionDMO();
        _filterAttributeDef = new AttributeDefinition(_filterAttributeDefOBJ);
        _filterAttributeDefOBJ.setDescription("The filterAttributeDef is a reference to the attribute that is locked\n to a TypeDefinition that is flagged as filterType. This mechanism is used to create the\n correct type of DmcType[FILTERTYPE]SV derivative for a value of type DmcFilter.");
        _filterAttributeDefOBJ.setDmdID("127");
        _filterAttributeDefOBJ.setFile("metaSchema.dms");
        _filterAttributeDefOBJ.setLineNumber("1499");
        _filterAttributeDefOBJ.setName("filterAttributeDef");
        _filterAttributeDefOBJ.setType("AttributeDefinition");
        _filterAttributeDef.setDefinedIn(this);
        addAttributeDefList(_filterAttributeDef);

        AttributeDefinitionDMO _generatedFileHeaderOBJ = new AttributeDefinitionDMO();
        _generatedFileHeader = new AttributeDefinition(_generatedFileHeaderOBJ);
        _generatedFileHeaderOBJ.setDescription("The name of file that coresides with the schema.dms file that\n contains a common header to be applied to all generated code. For instance, you\n might want a common licensing comment at the top of your generated files.");
        _generatedFileHeaderOBJ.setDmdID("81");
        _generatedFileHeaderOBJ.setFile("metaSchema.dms");
        _generatedFileHeaderOBJ.setLineNumber("1165");
        _generatedFileHeaderOBJ.setName("generatedFileHeader");
        _generatedFileHeaderOBJ.setType("String");
        _generatedFileHeader.setDefinedIn(this);
        addAttributeDefList(_generatedFileHeader);

        AttributeDefinitionDMO _genericArgsOBJ = new AttributeDefinitionDMO();
        _genericArgs = new AttributeDefinition(_genericArgsOBJ);
        _genericArgsOBJ.setDescription("This attribute indicates the generic arguments to be supplied in the\n use of a class in an autogenerated Iterable.");
        _genericArgsOBJ.setDmdID("94");
        _genericArgsOBJ.setFile("metaSchema.dms");
        _genericArgsOBJ.setLineNumber("1267");
        _genericArgsOBJ.setName("genericArgs");
        _genericArgsOBJ.setType("String");
        _genericArgs.setDefinedIn(this);
        addAttributeDefList(_genericArgs);

        AttributeDefinitionDMO _genericArgsImportOBJ = new AttributeDefinitionDMO();
        _genericArgsImport = new AttributeDefinition(_genericArgsImportOBJ);
        _genericArgsImportOBJ.setDescription("Indicates the import required to support a genericArgs specification i.e. if you're\n not specifying something like <?>, an additional import may be required.");
        _genericArgsImportOBJ.setDmdID("98");
        _genericArgsImportOBJ.setFile("metaSchema.dms");
        _genericArgsImportOBJ.setLineNumber("1295");
        _genericArgsImportOBJ.setName("genericArgsImport");
        _genericArgsImportOBJ.setType("String");
        _genericArgsImport.setDefinedIn(this);
        addAttributeDefList(_genericArgsImport);

        AttributeDefinitionDMO _getMethodOBJ = new AttributeDefinitionDMO();
        _getMethod = new AttributeDefinition(_getMethodOBJ);
        _getMethodOBJ.setDescription("If you want to return a value other than the native value class, use the appropriate\n getType and specify the method you need to call on the DmdValue derived class to return it.");
        _getMethodOBJ.setDmdID("49");
        _getMethodOBJ.setFile("metaSchema.dms");
        _getMethodOBJ.setLineNumber("908");
        _getMethodOBJ.setName("getMethod");
        _getMethodOBJ.setType("String");
        _getMethod.setDefinedIn(this);
        addAttributeDefList(_getMethod);

        AttributeDefinitionDMO _getTypeOBJ = new AttributeDefinitionDMO();
        _getType = new AttributeDefinition(_getTypeOBJ);
        _getTypeOBJ.setDescription("Indicates the type of value that will be returned when an attribute value\n is returned for a type definition; a type definition defines only one get type.\n This must be a Java class reference and not a primitive type e.g. int.");
        _getTypeOBJ.setDmdID("48");
        _getTypeOBJ.setFile("metaSchema.dms");
        _getTypeOBJ.setLineNumber("901");
        _getTypeOBJ.setName("getType");
        _getTypeOBJ.setType("String");
        _getType.setDefinedIn(this);
        addAttributeDefList(_getType);

        AttributeDefinitionDMO _helperClassNameOBJ = new AttributeDefinitionDMO();
        _helperClassName = new AttributeDefinition(_helperClassNameOBJ);
        _helperClassNameOBJ.setDescription("This attribute indicates the full name of the generated helper class for \n object references i.e. if you had a ClassDefinition X, the framework generates a \n types/XREF class which is subsequently used by the DmcTypeXREF class to store references\n to objects of the defined class.");
        _helperClassNameOBJ.setDmdID("47");
        _helperClassNameOBJ.setFile("metaSchema.dms");
        _helperClassNameOBJ.setInternalUse("true");
        _helperClassNameOBJ.setLineNumber("893");
        _helperClassNameOBJ.setName("helperClassName");
        _helperClassNameOBJ.setType("String");
        _helperClassName.setDefinedIn(this);
        addAttributeDefList(_helperClassName);

        AttributeDefinitionDMO _immediateHaltOBJ = new AttributeDefinitionDMO();
        _immediateHalt = new AttributeDefinition(_immediateHaltOBJ);
        _immediateHaltOBJ.setDescription("The immediateHalt flag is used to indicate that no further\n rule processing should occur if a rule fails. It is an optional attribute on rule instance\n objects. In somes cases, there is no point in continuing with the application of a set \n of rules, so this flag gives the option of halting further processing.");
        _immediateHaltOBJ.setDmdID("137");
        _immediateHaltOBJ.setFile("metaSchema.dms");
        _immediateHaltOBJ.setLineNumber("1579");
        _immediateHaltOBJ.setName("immediateHalt");
        _immediateHaltOBJ.setType("Boolean");
        _immediateHalt.setDefinedIn(this);
        addAttributeDefList(_immediateHalt);

        AttributeDefinitionDMO _indexSizeOBJ = new AttributeDefinitionDMO();
        _indexSize = new AttributeDefinition(_indexSizeOBJ);
        _indexSizeOBJ.setDescription("The indexSize is used in conjunction with the MULTI valueType to\n indicate that the attribute may have the specified number of values and is integer indexed.\n Indexed attributes may be thought of as having a predetermined number of slots into which\n values may be stored. When indexed, an attribute has values added to it using the setMVnth()\n interface, not the usual add() interface. If you attempt to use add() with an indexed attribute,\n an exception will be thrown.");
        _indexSizeOBJ.setDmdID("129");
        _indexSizeOBJ.setFile("metaSchema.dms");
        _indexSizeOBJ.setLineNumber("1518");
        _indexSizeOBJ.setName("indexSize");
        _indexSizeOBJ.setType("Integer");
        _indexSize.setDefinedIn(this);
        addAttributeDefList(_indexSize);

        AttributeDefinitionDMO _instantiationOBJ = new AttributeDefinitionDMO();
        _instantiation = new AttributeDefinition(_instantiationOBJ);
        _instantiationOBJ.setDescription("The instantiation attribute specifies how something is to be instantiated.");
        _instantiationOBJ.setDmdID("148");
        _instantiationOBJ.setFile("metaSchema.dms");
        _instantiationOBJ.setLineNumber("1652");
        _instantiationOBJ.setName("instantiation");
        _instantiationOBJ.setType("String");
        _instantiation.setDefinedIn(this);
        addAttributeDefList(_instantiation);

        AttributeDefinitionDMO _integerNameOBJ = new AttributeDefinitionDMO();
        _integerName = new AttributeDefinition(_integerNameOBJ);
        _integerNameOBJ.setDescription("The object name for objects uniquely identified with an integer.");
        _integerNameOBJ.setDesignatedNameAttribute("true");
        _integerNameOBJ.setDmdID("100");
        _integerNameOBJ.setFile("metaSchema.dms");
        _integerNameOBJ.setLineNumber("1308");
        _integerNameOBJ.setName("integerName");
        _integerNameOBJ.setType("IntegerName");
        _integerName.setDefinedIn(this);
        addAttributeDefList(_integerName);

        AttributeDefinitionDMO _intendedToExtendOBJ = new AttributeDefinitionDMO();
        _intendedToExtend = new AttributeDefinition(_intendedToExtendOBJ);
        _intendedToExtendOBJ.setDescription("This attribute can be used on AUXILIARY classes to give a hint about their\n intended usage. For example, if you were extending schema definitions with some or your \n own attributes for some purpose, your auxiliary class could have intendedToExtend ClassDefinition.");
        _intendedToExtendOBJ.setDmdID("22");
        _intendedToExtendOBJ.setFile("metaSchema.dms");
        _intendedToExtendOBJ.setLineNumber("702");
        _intendedToExtendOBJ.setName("intendedToExtend");
        _intendedToExtendOBJ.setType("ClassDefinition");
        _intendedToExtendOBJ.setValueType("MULTI");
        _intendedToExtend.setDefinedIn(this);
        addAttributeDefList(_intendedToExtend);

        AttributeDefinitionDMO _internalTypeDefListOBJ = new AttributeDefinitionDMO();
        _internalTypeDefList = new AttributeDefinition(_internalTypeDefListOBJ);
        _internalTypeDefListOBJ.setDescription("A list of type definitions that were generated internally to represent\n enums and object references.");
        _internalTypeDefListOBJ.setDmdID("57");
        _internalTypeDefListOBJ.setFile("metaSchema.dms");
        _internalTypeDefListOBJ.setInternalUse("true");
        _internalTypeDefListOBJ.setLineNumber("967");
        _internalTypeDefListOBJ.setName("internalTypeDefList");
        _internalTypeDefListOBJ.setType("TypeDefinition");
        _internalTypeDefListOBJ.setValueType("MULTI");
        _internalTypeDefList.setDefinedIn(this);
        addAttributeDefList(_internalTypeDefList);

        AttributeDefinitionDMO _internalTypeRefOBJ = new AttributeDefinitionDMO();
        _internalTypeRef = new AttributeDefinition(_internalTypeRefOBJ);
        _internalTypeRefOBJ.setDescription("Indicates the internal type that's generated for all ClassDefinitions. This\n is set automatically on ClassDefinitions as they are parsed.");
        _internalTypeRefOBJ.setDmdID("20");
        _internalTypeRefOBJ.setFile("metaSchema.dms");
        _internalTypeRefOBJ.setInternalUse("true");
        _internalTypeRefOBJ.setLineNumber("687");
        _internalTypeRefOBJ.setName("internalTypeRef");
        _internalTypeRefOBJ.setType("TypeDefinition");
        _internalTypeRef.setDefinedIn(this);
        addAttributeDefList(_internalTypeRef);

        AttributeDefinitionDMO _internalUseOBJ = new AttributeDefinitionDMO();
        _internalUse = new AttributeDefinition(_internalUseOBJ);
        _internalUseOBJ.setDescription("Indicates if an attribute is used and set within the Dark Matter Data\n code generation mechanisms. In the documentation generation code, attributes marked as\n internalUse WILL NOT be displayed unless you set the -internalUse flag is indicated.");
        _internalUseOBJ.setDmdID("122");
        _internalUseOBJ.setFile("metaSchema.dms");
        _internalUseOBJ.setLineNumber("1455");
        _internalUseOBJ.setName("internalUse");
        _internalUseOBJ.setType("Boolean");
        _internalUse.setDefinedIn(this);
        addAttributeDefList(_internalUse);

        AttributeDefinitionDMO _internallyGeneratedOBJ = new AttributeDefinitionDMO();
        _internallyGenerated = new AttributeDefinition(_internallyGeneratedOBJ);
        _internallyGeneratedOBJ.setDescription("This flag indicates if the associated definition was internally generated.\n This is the case for TypeDefinitions generated for ClassDefinitions and EnumDefinitions\n that allow for references to these objects.");
        _internallyGeneratedOBJ.setDmdID("77");
        _internallyGeneratedOBJ.setFile("metaSchema.dms");
        _internallyGeneratedOBJ.setInternalUse("true");
        _internallyGeneratedOBJ.setLineNumber("1129");
        _internallyGeneratedOBJ.setName("internallyGenerated");
        _internallyGeneratedOBJ.setType("Boolean");
        _internallyGenerated.setDefinedIn(this);
        addAttributeDefList(_internallyGenerated);

        AttributeDefinitionDMO _isDefaultValueOBJ = new AttributeDefinitionDMO();
        _isDefaultValue = new AttributeDefinition(_isDefaultValueOBJ);
        _isDefaultValueOBJ.setDescription("This flag is set to true to indicate the default value for a type (e.g. an enum).");
        _isDefaultValueOBJ.setDmdID("17");
        _isDefaultValueOBJ.setFile("metaSchema.dms");
        _isDefaultValueOBJ.setLineNumber("662");
        _isDefaultValueOBJ.setName("isDefaultValue");
        _isDefaultValueOBJ.setType("Boolean");
        _isDefaultValue.setDefinedIn(this);
        addAttributeDefList(_isDefaultValue);

        AttributeDefinitionDMO _isEnumTypeOBJ = new AttributeDefinitionDMO();
        _isEnumType = new AttributeDefinition(_isEnumTypeOBJ);
        _isEnumTypeOBJ.setDescription("This flag is set to true for type definitions that define enumerations.");
        _isEnumTypeOBJ.setDmdID("16");
        _isEnumTypeOBJ.setFile("metaSchema.dms");
        _isEnumTypeOBJ.setInternalUse("true");
        _isEnumTypeOBJ.setLineNumber("656");
        _isEnumTypeOBJ.setName("isEnumType");
        _isEnumTypeOBJ.setType("Boolean");
        _isEnumType.setDefinedIn(this);
        addAttributeDefList(_isEnumType);

        AttributeDefinitionDMO _isExtendedRefTypeOBJ = new AttributeDefinitionDMO();
        _isExtendedRefType = new AttributeDefinition(_isExtendedRefTypeOBJ);
        _isExtendedRefTypeOBJ.setDescription("This flag is used to indicate taht an internally generated type\n is an extended reference type.");
        _isExtendedRefTypeOBJ.setDmdID("133");
        _isExtendedRefTypeOBJ.setFile("metaSchema.dms");
        _isExtendedRefTypeOBJ.setInternalUse("true");
        _isExtendedRefTypeOBJ.setLineNumber("1551");
        _isExtendedRefTypeOBJ.setName("isExtendedRefType");
        _isExtendedRefTypeOBJ.setType("Boolean");
        _isExtendedRefType.setDefinedIn(this);
        addAttributeDefList(_isExtendedRefType);

        AttributeDefinitionDMO _isExtensibleOBJ = new AttributeDefinitionDMO();
        _isExtensible = new AttributeDefinition(_isExtensibleOBJ);
        _isExtensibleOBJ.setDescription("Indicates whether or not the ClassDefinition associated with a RuleDefinition has classType EXTENSIBLE\n or not. This mechanism is useful in situations where the exact set of attributes associated with a rule must be flexible.\n The best example is the InitRule where any set of attributes can be specified as value for the rule.");
        _isExtensibleOBJ.setDmdID("142");
        _isExtensibleOBJ.setFile("metaSchema.dms");
        _isExtensibleOBJ.setLineNumber("1612");
        _isExtensibleOBJ.setName("isExtensible");
        _isExtensibleOBJ.setType("Boolean");
        _isExtensible.setDefinedIn(this);
        addAttributeDefList(_isExtensible);

        AttributeDefinitionDMO _isFilterTypeOBJ = new AttributeDefinitionDMO();
        _isFilterType = new AttributeDefinition(_isFilterTypeOBJ);
        _isFilterTypeOBJ.setDescription("Indicates that a type is derived from DmcFilter.");
        _isFilterTypeOBJ.setDmdID("125");
        _isFilterTypeOBJ.setFile("metaSchema.dms");
        _isFilterTypeOBJ.setLineNumber("1482");
        _isFilterTypeOBJ.setName("isFilterType");
        _isFilterTypeOBJ.setType("Boolean");
        _isFilterType.setDefinedIn(this);
        addAttributeDefList(_isFilterType);

        AttributeDefinitionDMO _isGetActionOBJ = new AttributeDefinitionDMO();
        _isGetAction = new AttributeDefinition(_isGetActionOBJ);
        _isGetActionOBJ.setDescription("This flag indicates if an Action is merely a data retrieval (get) Action.\n Actions that are flagged with this attribute set to true will be executable\n even when the server is in a read-only mode because they don't actually\n alter data.");
        _isGetActionOBJ.setDmdID("72");
        _isGetActionOBJ.setFile("metaSchema.dms");
        _isGetActionOBJ.setLineNumber("1088");
        _isGetActionOBJ.setName("isGetAction");
        _isGetActionOBJ.setType("Boolean");
        _isGetAction.setDefinedIn(this);
        addAttributeDefList(_isGetAction);

        AttributeDefinitionDMO _isHierarchicNameOBJ = new AttributeDefinitionDMO();
        _isHierarchicName = new AttributeDefinition(_isHierarchicNameOBJ);
        _isHierarchicNameOBJ.setDescription("Indicates if a name type is for hierarchic objects.");
        _isHierarchicNameOBJ.setDmdID("121");
        _isHierarchicNameOBJ.setFile("metaSchema.dms");
        _isHierarchicNameOBJ.setInternalUse("true");
        _isHierarchicNameOBJ.setLineNumber("1447");
        _isHierarchicNameOBJ.setName("isHierarchicName");
        _isHierarchicNameOBJ.setType("Boolean");
        _isHierarchicName.setDefinedIn(this);
        addAttributeDefList(_isHierarchicName);

        AttributeDefinitionDMO _isNameTypeOBJ = new AttributeDefinitionDMO();
        _isNameType = new AttributeDefinition(_isNameTypeOBJ);
        _isNameTypeOBJ.setDescription("This attribute indicates if a defined type is used for naming purposes.\n This allows us to automatically add attributes of this type to the AttributeFactories.");
        _isNameTypeOBJ.setDmdID("95");
        _isNameTypeOBJ.setFile("metaSchema.dms");
        _isNameTypeOBJ.setLineNumber("1274");
        _isNameTypeOBJ.setName("isNameType");
        _isNameTypeOBJ.setType("Boolean");
        _isNameType.setDefinedIn(this);
        addAttributeDefList(_isNameType);

        AttributeDefinitionDMO _isNamedByOBJ = new AttributeDefinitionDMO();
        _isNamedBy = new AttributeDefinition(_isNamedByOBJ);
        _isNamedByOBJ.setDescription("Indicates the attribute by which an object of some class is named.\n When this attribute is supplied in a ClassDefinition, the generated DMO class will\n indicate that it implements the DmcNamedObjectIF and its getObjectName() method\n will return the value of the isNamedBy attribute.");
        _isNamedByOBJ.setDmdID("80");
        _isNamedByOBJ.setFile("metaSchema.dms");
        _isNamedByOBJ.setLineNumber("1157");
        _isNamedByOBJ.setName("isNamedBy");
        _isNamedByOBJ.setType("AttributeDefinition");
        _isNamedBy.setDefinedIn(this);
        addAttributeDefList(_isNamedBy);

        AttributeDefinitionDMO _isRefTypeOBJ = new AttributeDefinitionDMO();
        _isRefType = new AttributeDefinition(_isRefTypeOBJ);
        _isRefTypeOBJ.setDescription("This flag is set to true for type definitions that refer to other\n objects.");
        _isRefTypeOBJ.setDmdID("14");
        _isRefTypeOBJ.setFile("metaSchema.dms");
        _isRefTypeOBJ.setInternalUse("true");
        _isRefTypeOBJ.setLineNumber("641");
        _isRefTypeOBJ.setName("isRefType");
        _isRefTypeOBJ.setType("Boolean");
        _isRefType.setDefinedIn(this);
        addAttributeDefList(_isRefType);

        AttributeDefinitionDMO _isSchemaRtypeOBJ = new AttributeDefinitionDMO();
        _isSchemaRtype = new AttributeDefinition(_isSchemaRtypeOBJ);
        _isSchemaRtypeOBJ.setDescription("This flag is set to true for type definitions that refer to other\n schema-related definitions.");
        _isSchemaRtypeOBJ.setDmdID("15");
        _isSchemaRtypeOBJ.setFile("metaSchema.dms");
        _isSchemaRtypeOBJ.setInternalUse("true");
        _isSchemaRtypeOBJ.setLineNumber("649");
        _isSchemaRtypeOBJ.setName("isSchemaRtype");
        _isSchemaRtypeOBJ.setType("Boolean");
        _isSchemaRtype.setDefinedIn(this);
        addAttributeDefList(_isSchemaRtype);

        AttributeDefinitionDMO _javaClassOBJ = new AttributeDefinitionDMO();
        _javaClass = new AttributeDefinition(_javaClassOBJ);
        _javaClassOBJ.setDescription("This attribute indicates the full name of the class (including package)\n that should be instantiated when an instance of an object is created via the\n DmdClassDef.newInstance() function. The class must be a derived class of\n DmdGenericObject.");
        _javaClassOBJ.setDmdID("34");
        _javaClassOBJ.setFile("metaSchema.dms");
        _javaClassOBJ.setInternalUse("true");
        _javaClassOBJ.setLineNumber("793");
        _javaClassOBJ.setName("javaClass");
        _javaClassOBJ.setType("String");
        _javaClass.setDefinedIn(this);
        addAttributeDefList(_javaClass);

        AttributeDefinitionDMO _keyClassOBJ = new AttributeDefinitionDMO();
        _keyClass = new AttributeDefinition(_keyClassOBJ);
        _keyClassOBJ.setDescription("This attribute indicates the class of the key used for types that support\n storage in a MAP.");
        _keyClassOBJ.setDmdID("96");
        _keyClassOBJ.setFile("metaSchema.dms");
        _keyClassOBJ.setLineNumber("1281");
        _keyClassOBJ.setName("keyClass");
        _keyClassOBJ.setType("String");
        _keyClass.setDefinedIn(this);
        addAttributeDefList(_keyClass);

        AttributeDefinitionDMO _keyImportOBJ = new AttributeDefinitionDMO();
        _keyImport = new AttributeDefinition(_keyImportOBJ);
        _keyImportOBJ.setDescription("Indicates the import for a keyClass. this is required if the keyClass\n is NOT a primitive java type e.g. Integer, String etc.");
        _keyImportOBJ.setDmdID("97");
        _keyImportOBJ.setFile("metaSchema.dms");
        _keyImportOBJ.setLineNumber("1288");
        _keyImportOBJ.setName("keyImport");
        _keyImportOBJ.setType("String");
        _keyImport.setDefinedIn(this);
        addAttributeDefList(_keyImport);

        AttributeDefinitionDMO _lineNumberOBJ = new AttributeDefinitionDMO();
        _lineNumber = new AttributeDefinition(_lineNumberOBJ);
        _lineNumberOBJ.setDescription("Indicates the line number of the file from which a definition was loaded.");
        _lineNumberOBJ.setDmdID("75");
        _lineNumberOBJ.setFile("metaSchema.dms");
        _lineNumberOBJ.setInternalUse("true");
        _lineNumberOBJ.setLineNumber("1111");
        _lineNumberOBJ.setName("lineNumber");
        _lineNumberOBJ.setType("Integer");
        _lineNumber.setDefinedIn(this);
        addAttributeDefList(_lineNumber);

        AttributeDefinitionDMO _longNameOBJ = new AttributeDefinitionDMO();
        _longName = new AttributeDefinition(_longNameOBJ);
        _longNameOBJ.setDescription("The object name for objects uniquely identified with a long.");
        _longNameOBJ.setDesignatedNameAttribute("true");
        _longNameOBJ.setDmdID("134");
        _longNameOBJ.setFile("metaSchema.dms");
        _longNameOBJ.setLineNumber("1558");
        _longNameOBJ.setName("longName");
        _longNameOBJ.setType("LongName");
        _longName.setDefinedIn(this);
        addAttributeDefList(_longName);

        AttributeDefinitionDMO _mayOBJ = new AttributeDefinitionDMO();
        _may = new AttributeDefinition(_mayOBJ);
        _mayOBJ.setDescription("Indicates the set of attributes that an instance of a class MAY\n have. When accessed in Java, this is a set of references to AttributeDefinition\n objects.");
        _mayOBJ.setDmdID("27");
        _mayOBJ.setFile("metaSchema.dms");
        _mayOBJ.setLineNumber("736");
        _mayOBJ.setName("may");
        _mayOBJ.setType("AttributeDefinition");
        _mayOBJ.setValueType("MULTI");
        _may.setDefinedIn(this);
        addAttributeDefList(_may);

        AttributeDefinitionDMO _mayParmOBJ = new AttributeDefinitionDMO();
        _mayParm = new AttributeDefinition(_mayParmOBJ);
        _mayParmOBJ.setDescription("Indicates the set of parameters that an action MAY have. When accessed\n in Java, this is a set of references to AttributeDefinition objects.");
        _mayParmOBJ.setDmdID("29");
        _mayParmOBJ.setFile("metaSchema.dms");
        _mayParmOBJ.setLineNumber("752");
        _mayParmOBJ.setName("mayParm");
        _mayParmOBJ.setType("AttributeDefinition");
        _mayParmOBJ.setValueType("MULTI");
        _mayParm.setDefinedIn(this);
        addAttributeDefList(_mayParm);

        AttributeDefinitionDMO _mayReturnOBJ = new AttributeDefinitionDMO();
        _mayReturn = new AttributeDefinition(_mayReturnOBJ);
        _mayReturnOBJ.setDescription("Indicates the set of return vals that may be returned as part of a\n particular action response message.");
        _mayReturnOBJ.setDmdID("31");
        _mayReturnOBJ.setFile("metaSchema.dms");
        _mayReturnOBJ.setLineNumber("768");
        _mayReturnOBJ.setName("mayReturn");
        _mayReturnOBJ.setType("AttributeDefinition");
        _mayReturnOBJ.setValueType("MULTI");
        _mayReturn.setDefinedIn(this);
        addAttributeDefList(_mayReturn);

        AttributeDefinitionDMO _maySendProgressOBJ = new AttributeDefinitionDMO();
        _maySendProgress = new AttributeDefinition(_maySendProgressOBJ);
        _maySendProgressOBJ.setDescription("This flag is used to indicate if a particular request might\n result in progress indications being sent. Although primarily intended as a\n documentation aspect, this flag is used within the TL1 subsystem to allow for\n the creation of a response handler for node requests that send progress text.");
        _maySendProgressOBJ.setDmdID("76");
        _maySendProgressOBJ.setFile("metaSchema.dms");
        _maySendProgressOBJ.setLineNumber("1120");
        _maySendProgressOBJ.setName("maySendProgress");
        _maySendProgressOBJ.setType("Boolean");
        _maySendProgress.setDefinedIn(this);
        addAttributeDefList(_maySendProgress);

        AttributeDefinitionDMO _modifyOBJ = new AttributeDefinitionDMO();
        _modify = new AttributeDefinition(_modifyOBJ);
        _modifyOBJ.setDescription("A set of modifications to an object.");
        _modifyOBJ.setDmdID("85");
        _modifyOBJ.setFile("metaSchema.dms");
        _modifyOBJ.setLineNumber("1194");
        _modifyOBJ.setName("modify");
        _modifyOBJ.setType("Modifier");
        _modifyOBJ.setValueType("MULTI");
        _modify.setDefinedIn(this);
        addAttributeDefList(_modify);

        AttributeDefinitionDMO _mustOBJ = new AttributeDefinitionDMO();
        _must = new AttributeDefinition(_mustOBJ);
        _mustOBJ.setDescription("Indicates the set of attributes that an instance of a class MUST have.");
        _mustOBJ.setDmdID("26");
        _mustOBJ.setFile("metaSchema.dms");
        _mustOBJ.setLineNumber("727");
        _mustOBJ.setName("must");
        _mustOBJ.setType("AttributeDefinition");
        _mustOBJ.setValueType("MULTI");
        _must.setDefinedIn(this);
        addAttributeDefList(_must);

        AttributeDefinitionDMO _mustParmOBJ = new AttributeDefinitionDMO();
        _mustParm = new AttributeDefinition(_mustParmOBJ);
        _mustParmOBJ.setDescription("Indicates the set of parameters that an action MUST have. When\n accessed in Java, this is a set of references to AttributeDefinition objects.");
        _mustParmOBJ.setDmdID("28");
        _mustParmOBJ.setFile("metaSchema.dms");
        _mustParmOBJ.setLineNumber("744");
        _mustParmOBJ.setName("mustParm");
        _mustParmOBJ.setType("AttributeDefinition");
        _mustParmOBJ.setValueType("MULTI");
        _mustParm.setDefinedIn(this);
        addAttributeDefList(_mustParm);

        AttributeDefinitionDMO _mustReturnOBJ = new AttributeDefinitionDMO();
        _mustReturn = new AttributeDefinition(_mustReturnOBJ);
        _mustReturnOBJ.setDescription("Indicates the set of return vals that must be returned as part of a\n particular action response message.");
        _mustReturnOBJ.setDmdID("30");
        _mustReturnOBJ.setFile("metaSchema.dms");
        _mustReturnOBJ.setLineNumber("760");
        _mustReturnOBJ.setName("mustReturn");
        _mustReturnOBJ.setType("AttributeDefinition");
        _mustReturnOBJ.setValueType("MULTI");
        _mustReturn.setDefinedIn(this);
        addAttributeDefList(_mustReturn);

        AttributeDefinitionDMO _nameOBJ = new AttributeDefinitionDMO();
        _name = new AttributeDefinition(_nameOBJ);
        _nameOBJ.setDescription("The name attribute is used to store a single string token that represents a unique name\n for an object. A name should be composed of characters in the range, [a-z] [A-Z] [0-9]. No whitespace\n characters are allowed. All names must start with a character.");
        _nameOBJ.setDesignatedNameAttribute("true");
        _nameOBJ.setDmdID("2");
        _nameOBJ.setFile("metaSchema.dms");
        _nameOBJ.setLineNumber("556");
        _nameOBJ.setName("name");
        _nameOBJ.setType("StringName");
        _name.setDefinedIn(this);
        addAttributeDefList(_name);

        AttributeDefinitionDMO _nameAttributeDefOBJ = new AttributeDefinitionDMO();
        _nameAttributeDef = new AttributeDefinition(_nameAttributeDefOBJ);
        _nameAttributeDefOBJ.setDescription("The nameAttributeDef is a reference to the attribute that is locked\n to a TypeDefinition. This mechanism is used to create the correct type of DmcType[NAMETYPE]*\n derivative for a value of type DmcObjectName.");
        _nameAttributeDefOBJ.setDmdID("90");
        _nameAttributeDefOBJ.setFile("metaSchema.dms");
        _nameAttributeDefOBJ.setLineNumber("1235");
        _nameAttributeDefOBJ.setName("nameAttributeDef");
        _nameAttributeDefOBJ.setType("AttributeDefinition");
        _nameAttributeDef.setDefinedIn(this);
        addAttributeDefList(_nameAttributeDef);

        AttributeDefinitionDMO _namingAttributeOBJ = new AttributeDefinitionDMO();
        _namingAttribute = new AttributeDefinition(_namingAttributeOBJ);
        _namingAttributeOBJ.setDescription("This attribute indicates the attribute that is used to name an object\n instance. The exact manner in which the naming attribute is used is specific to\n the implementation of the HierarchicObject derived class.\n <p>\n For instance, the DotNamedObject simply uses the value of the naming attribute\n and separates the attribute values with periods e.g. grandparent.parent.child.\n <p>\n For LDAP objects when a hierarchic name is composed for an object, the class name\n plus the value of the naming attribute (type:value) is used to create the\n name of an object. It is best if the naming attribute value is created by\n the application; it shouldn't be based on any user configurable value.");
        _namingAttributeOBJ.setDmdID("64");
        _namingAttributeOBJ.setFile("metaSchema.dms");
        _namingAttributeOBJ.setLineNumber("1024");
        _namingAttributeOBJ.setName("namingAttribute");
        _namingAttributeOBJ.setType("AttributeDefinition");
        _namingAttribute.setDefinedIn(this);
        addAttributeDefList(_namingAttribute);

        AttributeDefinitionDMO _nullReturnValueOBJ = new AttributeDefinitionDMO();
        _nullReturnValue = new AttributeDefinition(_nullReturnValueOBJ);
        _nullReturnValueOBJ.setDescription("This attribute is used in TypeDefinitions to indicate the value that should be returned when\n an attribute of the specified type doesn't exist in the object. For example, Boolean values are defined\n to return false when they aren't actually set on an object. This just gives a convenient mechanism to\n provide a default value for non-existent attribute values.");
        _nullReturnValueOBJ.setDmdID("7");
        _nullReturnValueOBJ.setFile("metaSchema.dms");
        _nullReturnValueOBJ.setLineNumber("599");
        _nullReturnValueOBJ.setName("nullReturnValue");
        _nullReturnValueOBJ.setType("String");
        _nullReturnValue.setDefinedIn(this);
        addAttributeDefList(_nullReturnValue);

        AttributeDefinitionDMO _objectClassOBJ = new AttributeDefinitionDMO();
        _objectClass = new AttributeDefinition(_objectClassOBJ);
        _objectClassOBJ.setDescription("Used to indicate the classes that an object instance supports.");
        _objectClassOBJ.setDmdID("1");
        _objectClassOBJ.setFile("metaSchema.dms");
        _objectClassOBJ.setLineNumber("1725");
        _objectClassOBJ.setName("objectClass");
        _objectClassOBJ.setType("ClassDefinition");
        _objectClassOBJ.setValueType("MULTI");
        _objectClass.setDefinedIn(this);
        addAttributeDefList(_objectClass);

        AttributeDefinitionDMO _obsoleteVersionOBJ = new AttributeDefinitionDMO();
        _obsoleteVersion = new AttributeDefinition(_obsoleteVersionOBJ);
        _obsoleteVersionOBJ.setDescription("This indicates the version at which something became obsolete.\n Generally speaking you shouldn't ever delete definitions for products that have\n been released to the field, this may break backwards compatibility. Instead, you\n should mark them as obsolete.");
        _obsoleteVersionOBJ.setDmdID("73");
        _obsoleteVersionOBJ.setFile("metaSchema.dms");
        _obsoleteVersionOBJ.setLineNumber("1097");
        _obsoleteVersionOBJ.setName("obsoleteVersion");
        _obsoleteVersionOBJ.setType("String");
        _obsoleteVersion.setDefinedIn(this);
        addAttributeDefList(_obsoleteVersion);

        AttributeDefinitionDMO _opContextOBJ = new AttributeDefinitionDMO();
        _opContext = new AttributeDefinition(_opContextOBJ);
        _opContextOBJ.setDescription("Indicates the operational context for some component e.g. object or attribute\n validators.");
        _opContextOBJ.setDmdID("115");
        _opContextOBJ.setFile("metaSchema.dms");
        _opContextOBJ.setLineNumber("1400");
        _opContextOBJ.setName("opContext");
        _opContextOBJ.setType("OperationalContextEnum");
        _opContext.setDefinedIn(this);
        addAttributeDefList(_opContext);

        AttributeDefinitionDMO _originalClassOBJ = new AttributeDefinitionDMO();
        _originalClass = new AttributeDefinition(_originalClassOBJ);
        _originalClassOBJ.setDescription("Refers to the class that an internally generated type represents.");
        _originalClassOBJ.setDmdID("83");
        _originalClassOBJ.setFile("metaSchema.dms");
        _originalClassOBJ.setInternalUse("true");
        _originalClassOBJ.setLineNumber("1179");
        _originalClassOBJ.setName("originalClass");
        _originalClassOBJ.setType("ClassDefinition");
        _originalClass.setDefinedIn(this);
        addAttributeDefList(_originalClass);

        AttributeDefinitionDMO _preserveNewlinesOBJ = new AttributeDefinitionDMO();
        _preserveNewlines = new AttributeDefinition(_preserveNewlinesOBJ);
        _preserveNewlinesOBJ.setDescription("Indicates that newline characters should be preserved when an\n attribute is parsed by the DmcUncheckedOIFParser. This is useful for certain attributes\n when newlines are required to properly format the contents of the attribute at\n a later time. For example, the description attribute is later dumped as part of \n HTML documentation and, if the newlines are stripped, it won't be properly formatted.");
        _preserveNewlinesOBJ.setDmdID("51");
        _preserveNewlinesOBJ.setFile("metaSchema.dms");
        _preserveNewlinesOBJ.setLineNumber("925");
        _preserveNewlinesOBJ.setName("preserveNewlines");
        _preserveNewlinesOBJ.setType("Boolean");
        _preserveNewlines.setDefinedIn(this);
        addAttributeDefList(_preserveNewlines);

        AttributeDefinitionDMO _primitiveTypeOBJ = new AttributeDefinitionDMO();
        _primitiveType = new AttributeDefinition(_primitiveTypeOBJ);
        _primitiveTypeOBJ.setDescription("The primitiveType indicates the underlying type of a DmcType.");
        _primitiveTypeOBJ.setDmdID("8");
        _primitiveTypeOBJ.setFile("metaSchema.dms");
        _primitiveTypeOBJ.setLineNumber("605");
        _primitiveTypeOBJ.setName("primitiveType");
        _primitiveTypeOBJ.setType("String");
        _primitiveType.setDefinedIn(this);
        addAttributeDefList(_primitiveType);

        AttributeDefinitionDMO _ruleCategoryOBJ = new AttributeDefinitionDMO();
        _ruleCategory = new AttributeDefinition(_ruleCategoryOBJ);
        _ruleCategoryOBJ.setDescription("The category of a rule.");
        _ruleCategoryOBJ.setDmdID("139");
        _ruleCategoryOBJ.setFile("metaSchema.dms");
        _ruleCategoryOBJ.setLineNumber("1592");
        _ruleCategoryOBJ.setName("ruleCategory");
        _ruleCategoryOBJ.setType("RuleCategory");
        _ruleCategoryOBJ.setValueType("MULTI");
        _ruleCategory.setDefinedIn(this);
        addAttributeDefList(_ruleCategory);

        AttributeDefinitionDMO _ruleCategoryIDOBJ = new AttributeDefinitionDMO();
        _ruleCategoryID = new AttributeDefinition(_ruleCategoryIDOBJ);
        _ruleCategoryIDOBJ.setDescription("The numeric ID of a rule category.");
        _ruleCategoryIDOBJ.setDmdID("140");
        _ruleCategoryIDOBJ.setFile("metaSchema.dms");
        _ruleCategoryIDOBJ.setLineNumber("1598");
        _ruleCategoryIDOBJ.setName("ruleCategoryID");
        _ruleCategoryIDOBJ.setType("Integer");
        _ruleCategoryID.setDefinedIn(this);
        addAttributeDefList(_ruleCategoryID);

        AttributeDefinitionDMO _ruleCategoryListOBJ = new AttributeDefinitionDMO();
        _ruleCategoryList = new AttributeDefinition(_ruleCategoryListOBJ);
        _ruleCategoryListOBJ.setDescription("The RuleCategories defined in a schema.");
        _ruleCategoryListOBJ.setDmdID("143");
        _ruleCategoryListOBJ.setFile("metaSchema.dms");
        _ruleCategoryListOBJ.setLineNumber("1619");
        _ruleCategoryListOBJ.setName("ruleCategoryList");
        _ruleCategoryListOBJ.setType("RuleCategory");
        _ruleCategoryListOBJ.setValueType("MULTI");
        _ruleCategoryList.setDefinedIn(this);
        addAttributeDefList(_ruleCategoryList);

        AttributeDefinitionDMO _ruleDataListOBJ = new AttributeDefinitionDMO();
        _ruleDataList = new AttributeDefinition(_ruleDataListOBJ);
        _ruleDataListOBJ.setDescription("The RuleData defined in a schema.");
        _ruleDataListOBJ.setDmdID("156");
        _ruleDataListOBJ.setFile("metaSchema.dms");
        _ruleDataListOBJ.setLineNumber("1710");
        _ruleDataListOBJ.setName("ruleDataList");
        _ruleDataListOBJ.setType("RuleData");
        _ruleDataListOBJ.setValueType("MULTI");
        _ruleDataList.setDefinedIn(this);
        addAttributeDefList(_ruleDataList);

        AttributeDefinitionDMO _ruleDefinitionOBJ = new AttributeDefinitionDMO();
        _ruleDefinition = new AttributeDefinition(_ruleDefinitionOBJ);
        _ruleDefinitionOBJ.setDescription("The RuleDefinition that resulted in the creation of an\n internally generated ClassDefinition.");
        _ruleDefinitionOBJ.setDmdID("145");
        _ruleDefinitionOBJ.setFile("metaSchema.dms");
        _ruleDefinitionOBJ.setLineNumber("1633");
        _ruleDefinitionOBJ.setName("ruleDefinition");
        _ruleDefinitionOBJ.setType("RuleDefinition");
        _ruleDefinition.setDefinedIn(this);
        addAttributeDefList(_ruleDefinition);

        AttributeDefinitionDMO _ruleDefinitionListOBJ = new AttributeDefinitionDMO();
        _ruleDefinitionList = new AttributeDefinition(_ruleDefinitionListOBJ);
        _ruleDefinitionListOBJ.setDescription("The RuleDefinitions defined in a schema.");
        _ruleDefinitionListOBJ.setDmdID("144");
        _ruleDefinitionListOBJ.setFile("metaSchema.dms");
        _ruleDefinitionListOBJ.setLineNumber("1626");
        _ruleDefinitionListOBJ.setName("ruleDefinitionList");
        _ruleDefinitionListOBJ.setType("RuleDefinition");
        _ruleDefinitionListOBJ.setValueType("MULTI");
        _ruleDefinitionList.setDefinedIn(this);
        addAttributeDefList(_ruleDefinitionList);

        AttributeDefinitionDMO _ruleImportOBJ = new AttributeDefinitionDMO();
        _ruleImport = new AttributeDefinition(_ruleImportOBJ);
        _ruleImportOBJ.setDescription("An import required for generation of the rule collection associated with\n a RuleCategory.");
        _ruleImportOBJ.setDmdID("152");
        _ruleImportOBJ.setFile("metaSchema.dms");
        _ruleImportOBJ.setLineNumber("1680");
        _ruleImportOBJ.setName("ruleImport");
        _ruleImportOBJ.setType("String");
        _ruleImportOBJ.setValueType("MULTI");
        _ruleImport.setDefinedIn(this);
        addAttributeDefList(_ruleImport);

        AttributeDefinitionDMO _ruleNameOBJ = new AttributeDefinitionDMO();
        _ruleName = new AttributeDefinition(_ruleNameOBJ);
        _ruleNameOBJ.setDescription("The ruleName attribute is used to store a single camelCase format name for a rule.\n The name starts with a single letter and can be followed by a mix of letters and numbers. No spaces or \n other characters are allowed.");
        _ruleNameOBJ.setDesignatedNameAttribute("true");
        _ruleNameOBJ.setDmdID("153");
        _ruleNameOBJ.setFile("metaSchema.dms");
        _ruleNameOBJ.setLineNumber("1689");
        _ruleNameOBJ.setName("ruleName");
        _ruleNameOBJ.setType("RuleName");
        _ruleName.setDefinedIn(this);
        addAttributeDefList(_ruleName);

        AttributeDefinitionDMO _ruleParamOBJ = new AttributeDefinitionDMO();
        _ruleParam = new AttributeDefinition(_ruleParamOBJ);
        _ruleParamOBJ.setDescription("A parameter to be supplied to a rule when it is executed.");
        _ruleParamOBJ.setDmdID("50");
        _ruleParamOBJ.setFile("metaSchema.dms");
        _ruleParamOBJ.setLineNumber("915");
        _ruleParamOBJ.setName("ruleParam");
        _ruleParamOBJ.setType("RuleParam");
        _ruleParamOBJ.setValueType("MULTI");
        _ruleParam.setDefinedIn(this);
        addAttributeDefList(_ruleParam);

        AttributeDefinitionDMO _ruleTitleOBJ = new AttributeDefinitionDMO();
        _ruleTitle = new AttributeDefinition(_ruleTitleOBJ);
        _ruleTitleOBJ.setDescription("The title of a rule.");
        _ruleTitleOBJ.setDmdID("138");
        _ruleTitleOBJ.setFile("metaSchema.dms");
        _ruleTitleOBJ.setLineNumber("1585");
        _ruleTitleOBJ.setName("ruleTitle");
        _ruleTitleOBJ.setType("String");
        _ruleTitle.setDefinedIn(this);
        addAttributeDefList(_ruleTitle);

        AttributeDefinitionDMO _ruleTypeOBJ = new AttributeDefinitionDMO();
        _ruleType = new AttributeDefinition(_ruleTypeOBJ);
        _ruleTypeOBJ.setDescription("The type of a rule.");
        _ruleTypeOBJ.setDmdID("136");
        _ruleTypeOBJ.setFile("metaSchema.dms");
        _ruleTypeOBJ.setLineNumber("1570");
        _ruleTypeOBJ.setName("ruleType");
        _ruleTypeOBJ.setType("RuleTypeEnum");
        _ruleType.setDefinedIn(this);
        addAttributeDefList(_ruleType);

        AttributeDefinitionDMO _runContextOBJ = new AttributeDefinitionDMO();
        _runContext = new AttributeDefinition(_runContextOBJ);
        _runContextOBJ.setDescription("A reference to a RunContext.");
        _runContextOBJ.setDmdID("149");
        _runContextOBJ.setFile("metaSchema.dms");
        _runContextOBJ.setLineNumber("1658");
        _runContextOBJ.setName("runContext");
        _runContextOBJ.setType("RunContext");
        _runContext.setDefinedIn(this);
        addAttributeDefList(_runContext);

        AttributeDefinitionDMO _schemaBaseIDOBJ = new AttributeDefinitionDMO();
        _schemaBaseID = new AttributeDefinition(_schemaBaseIDOBJ);
        _schemaBaseIDOBJ.setDescription("The base identifier value for a schema. This value is added to each dmdID value\n associated with the AttributeDefinitions defined by the schema. This allows for easy rebasing of\n identifier values if required.");
        _schemaBaseIDOBJ.setDmdID("86");
        _schemaBaseIDOBJ.setFile("metaSchema.dms");
        _schemaBaseIDOBJ.setLineNumber("1202");
        _schemaBaseIDOBJ.setName("schemaBaseID");
        _schemaBaseIDOBJ.setType("Integer");
        _schemaBaseID.setDefinedIn(this);
        addAttributeDefList(_schemaBaseID);

        AttributeDefinitionDMO _schemaExtensionOBJ = new AttributeDefinitionDMO();
        _schemaExtension = new AttributeDefinition(_schemaExtensionOBJ);
        _schemaExtensionOBJ.setDescription("The fully qualified name of a class that extends the schema management\n capabilities of the SchemaManager. the class must have a zero arg constructor and implement\n the SchemaExtensionIF.");
        _schemaExtensionOBJ.setDmdID("4");
        _schemaExtensionOBJ.setFile("metaSchema.dms");
        _schemaExtensionOBJ.setLineNumber("572");
        _schemaExtensionOBJ.setName("schemaExtension");
        _schemaExtensionOBJ.setType("String");
        _schemaExtensionOBJ.setValueType("MULTI");
        _schemaExtension.setDefinedIn(this);
        addAttributeDefList(_schemaExtension);

        AttributeDefinitionDMO _schemaIDRangeOBJ = new AttributeDefinitionDMO();
        _schemaIDRange = new AttributeDefinition(_schemaIDRangeOBJ);
        _schemaIDRangeOBJ.setDescription("The maximum number of attribute definitions in a particular schema. This will provide\n immediate feedback if you exceed the given ID range for your schema.");
        _schemaIDRangeOBJ.setDmdID("87");
        _schemaIDRangeOBJ.setFile("metaSchema.dms");
        _schemaIDRangeOBJ.setLineNumber("1209");
        _schemaIDRangeOBJ.setName("schemaIDRange");
        _schemaIDRangeOBJ.setType("Integer");
        _schemaIDRange.setDefinedIn(this);
        addAttributeDefList(_schemaIDRange);

        AttributeDefinitionDMO _schemaPackageOBJ = new AttributeDefinitionDMO();
        _schemaPackage = new AttributeDefinition(_schemaPackageOBJ);
        _schemaPackageOBJ.setDescription("Indicates the package that a schema will be part of when its code\n is generated using DMO generator tool.");
        _schemaPackageOBJ.setDmdID("53");
        _schemaPackageOBJ.setFile("metaSchema.dms");
        _schemaPackageOBJ.setLineNumber("934");
        _schemaPackageOBJ.setName("schemaPackage");
        _schemaPackageOBJ.setType("String");
        _schemaPackage.setDefinedIn(this);
        addAttributeDefList(_schemaPackage);

        AttributeDefinitionDMO _secureOBJ = new AttributeDefinitionDMO();
        _secure = new AttributeDefinition(_secureOBJ);
        _secureOBJ.setDescription("This attribute indicates whether or not the attribute should\n be encrypted before being transported over the wire or stored in a file or\n repository");
        _secureOBJ.setDmdID("78");
        _secureOBJ.setFile("metaSchema.dms");
        _secureOBJ.setLineNumber("1137");
        _secureOBJ.setName("secure");
        _secureOBJ.setType("Boolean");
        _secure.setDefinedIn(this);
        addAttributeDefList(_secure);

        AttributeDefinitionDMO _selectAttributeOBJ = new AttributeDefinitionDMO();
        _selectAttribute = new AttributeDefinition(_selectAttributeOBJ);
        _selectAttributeOBJ.setDescription("The selectAttribute indicates an attribute to be used in the definition\n of a Slice.");
        _selectAttributeOBJ.setDmdID("110");
        _selectAttributeOBJ.setFile("metaSchema.dms");
        _selectAttributeOBJ.setLineNumber("1379");
        _selectAttributeOBJ.setName("selectAttribute");
        _selectAttributeOBJ.setType("AttributeDefinition");
        _selectAttributeOBJ.setValueType("MULTI");
        _selectAttribute.setDefinedIn(this);
        addAttributeDefList(_selectAttribute);

        AttributeDefinitionDMO _sliceDefListOBJ = new AttributeDefinitionDMO();
        _sliceDefList = new AttributeDefinition(_sliceDefListOBJ);
        _sliceDefListOBJ.setDescription("A list of slice definition references.");
        _sliceDefListOBJ.setDmdID("111");
        _sliceDefListOBJ.setFile("metaSchema.dms");
        _sliceDefListOBJ.setInternalUse("true");
        _sliceDefListOBJ.setLineNumber("1387");
        _sliceDefListOBJ.setName("sliceDefList");
        _sliceDefListOBJ.setType("SliceDefinition");
        _sliceDefListOBJ.setValueType("MULTI");
        _sliceDefList.setDefinedIn(this);
        addAttributeDefList(_sliceDefList);

        AttributeDefinitionDMO _subpackageOBJ = new AttributeDefinitionDMO();
        _subpackage = new AttributeDefinition(_subpackageOBJ);
        _subpackageOBJ.setDescription("The subpackage beneath extended where generated code will be written. This\n allows for a hierarchic package structure for the classes generated by the dmg and mvc generator\n utilities. The structure can contain other subpackages etc x.y.z but should not start or end\n with a period.");
        _subpackageOBJ.setDmdID("88");
        _subpackageOBJ.setFile("metaSchema.dms");
        _subpackageOBJ.setLineNumber("1218");
        _subpackageOBJ.setName("subpackage");
        _subpackageOBJ.setType("String");
        _subpackage.setDefinedIn(this);
        addAttributeDefList(_subpackage);

        AttributeDefinitionDMO _supportsBackrefTrackingOBJ = new AttributeDefinitionDMO();
        _supportsBackrefTracking = new AttributeDefinition(_supportsBackrefTrackingOBJ);
        _supportsBackrefTrackingOBJ.setDescription("Indicates if a class of objects supports back reference tracking or not. The\n default is that all objects support it, however, in places like the Dark Matter Protocol, we\n don't want to track references in the messages.");
        _supportsBackrefTrackingOBJ.setDmdID("118");
        _supportsBackrefTrackingOBJ.setFile("metaSchema.dms");
        _supportsBackrefTrackingOBJ.setLineNumber("1426");
        _supportsBackrefTrackingOBJ.setName("supportsBackrefTracking");
        _supportsBackrefTrackingOBJ.setNullReturnValue("true");
        _supportsBackrefTrackingOBJ.setType("Boolean");
        _supportsBackrefTracking.setDefinedIn(this);
        addAttributeDefList(_supportsBackrefTracking);

        AttributeDefinitionDMO _typeOBJ = new AttributeDefinitionDMO();
        _type = new AttributeDefinition(_typeOBJ);
        _typeOBJ.setDescription("Indicates the type of an attribute. The value is the name of any\n previously defined TypeDefinition, ClassDefinition, EnumDefinition or ComplexTypeDefinition.");
        _typeOBJ.setDmdID("19");
        _typeOBJ.setFile("metaSchema.dms");
        _typeOBJ.setLineNumber("679");
        _typeOBJ.setName("type");
        _typeOBJ.setType("TypeDefinition");
        _type.setDefinedIn(this);
        addAttributeDefList(_type);

        AttributeDefinitionDMO _typeClassNameOBJ = new AttributeDefinitionDMO();
        _typeClassName = new AttributeDefinition(_typeClassNameOBJ);
        _typeClassNameOBJ.setDescription("This is the fully qualified name of the class derived from DmcAttribute that provides management\n of a particular type of attribute value. For instance, the type class that handles String attributes \n is org.dmd.dmc.types.DmcTypeString");
        _typeClassNameOBJ.setDmdID("5");
        _typeClassNameOBJ.setFile("metaSchema.dms");
        _typeClassNameOBJ.setLineNumber("580");
        _typeClassNameOBJ.setName("typeClassName");
        _typeClassNameOBJ.setType("String");
        _typeClassName.setDefinedIn(this);
        addAttributeDefList(_typeClassName);

        AttributeDefinitionDMO _typeDefListOBJ = new AttributeDefinitionDMO();
        _typeDefList = new AttributeDefinition(_typeDefListOBJ);
        _typeDefListOBJ.setDescription("A list of type definition references.");
        _typeDefListOBJ.setDmdID("56");
        _typeDefListOBJ.setFile("metaSchema.dms");
        _typeDefListOBJ.setInternalUse("true");
        _typeDefListOBJ.setLineNumber("958");
        _typeDefListOBJ.setName("typeDefList");
        _typeDefListOBJ.setType("TypeDefinition");
        _typeDefListOBJ.setValueType("MULTI");
        _typeDefList.setDefinedIn(this);
        addAttributeDefList(_typeDefList);

        AttributeDefinitionDMO _useInterfaceOBJ = new AttributeDefinitionDMO();
        _useInterface = new AttributeDefinition(_useInterfaceOBJ);
        _useInterfaceOBJ.setDescription("The fully qualified name of a Java interface or base class that specifies a dependency.");
        _useInterfaceOBJ.setDmdID("150");
        _useInterfaceOBJ.setFile("metaSchema.dms");
        _useInterfaceOBJ.setLineNumber("1664");
        _useInterfaceOBJ.setName("useInterface");
        _useInterfaceOBJ.setType("String");
        _useInterface.setDefinedIn(this);
        addAttributeDefList(_useInterface);

        AttributeDefinitionDMO _useWrapperTypeOBJ = new AttributeDefinitionDMO();
        _useWrapperType = new AttributeDefinition(_useWrapperTypeOBJ);
        _useWrapperTypeOBJ.setDescription("Indicates whether you want to use the generated DMW wrapper\n or the extended wrapper you've created yourself.");
        _useWrapperTypeOBJ.setDmdID("82");
        _useWrapperTypeOBJ.setFile("metaSchema.dms");
        _useWrapperTypeOBJ.setLineNumber("1172");
        _useWrapperTypeOBJ.setName("useWrapperType");
        _useWrapperTypeOBJ.setType("WrapperTypeEnum");
        _useWrapperType.setDefinedIn(this);
        addAttributeDefList(_useWrapperType);

        AttributeDefinitionDMO _usesInterfaceOBJ = new AttributeDefinitionDMO();
        _usesInterface = new AttributeDefinition(_usesInterfaceOBJ);
        _usesInterfaceOBJ.setDescription("This is a hack for now to allow for the inclusion of an \n interface on a class; it should be the fully qualified name of the interface.\n The interface shouldn't require any method implementations.");
        _usesInterfaceOBJ.setDmdID("24");
        _usesInterfaceOBJ.setFile("metaSchema.dms");
        _usesInterfaceOBJ.setLineNumber("712");
        _usesInterfaceOBJ.setName("usesInterface");
        _usesInterfaceOBJ.setType("String");
        _usesInterface.setDefinedIn(this);
        addAttributeDefList(_usesInterface);

        AttributeDefinitionDMO _uuidNameOBJ = new AttributeDefinitionDMO();
        _uuidName = new AttributeDefinition(_uuidNameOBJ);
        _uuidNameOBJ.setDescription("The object name for objects uniquely identified with a UUID.");
        _uuidNameOBJ.setDesignatedNameAttribute("true");
        _uuidNameOBJ.setDmdID("101");
        _uuidNameOBJ.setFile("metaSchema.dms");
        _uuidNameOBJ.setLineNumber("1315");
        _uuidNameOBJ.setName("uuidName");
        _uuidNameOBJ.setType("UUIDName");
        _uuidName.setDefinedIn(this);
        addAttributeDefList(_uuidName);

        AttributeDefinitionDMO _valueTypeOBJ = new AttributeDefinitionDMO();
        _valueType = new AttributeDefinition(_valueTypeOBJ);
        _valueTypeOBJ.setDescription("This attribute indicates the cardinality and storage mechanism for an\n attribute.");
        _valueTypeOBJ.setDmdID("12");
        _valueTypeOBJ.setFile("metaSchema.dms");
        _valueTypeOBJ.setLineNumber("633");
        _valueTypeOBJ.setName("valueType");
        _valueTypeOBJ.setType("ValueTypeEnum");
        _valueType.setDefinedIn(this);
        addAttributeDefList(_valueType);

        AttributeDefinitionDMO _wrapperClassNameOBJ = new AttributeDefinitionDMO();
        _wrapperClassName = new AttributeDefinition(_wrapperClassNameOBJ);
        _wrapperClassNameOBJ.setDescription("This is the fully qualified name of the wrapper class derived from DmcWrapperBase that\n wraps a DMO. This is used when generating object reference classes associated with ClassDefinitions\n This actually aligns to the javaClass of the ClassDefinition for which we're generating the reference\n classes.");
        _wrapperClassNameOBJ.setDmdID("6");
        _wrapperClassNameOBJ.setFile("metaSchema.dms");
        _wrapperClassNameOBJ.setInternalUse("true");
        _wrapperClassNameOBJ.setLineNumber("590");
        _wrapperClassNameOBJ.setName("wrapperClassName");
        _wrapperClassNameOBJ.setType("String");
        _wrapperClassName.setDefinedIn(this);
        addAttributeDefList(_wrapperClassName);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitTypes(MetaGenerator.java:411)
    private void initTypes() throws DmcValueException {

        TypeDefinitionDMO _AttributeIDOBJ = new TypeDefinitionDMO();
        _AttributeID = new TypeDefinition(_AttributeIDOBJ);
        _AttributeIDOBJ.setAltType("DmcAttributeInfo");
        _AttributeIDOBJ.setAltTypeImport("org.dmd.dmc.DmcAttributeInfo");
        _AttributeIDOBJ.setDescription("The AttributeID type allows for the storage of unique attribute identifiers.");
        _AttributeIDOBJ.setFile("metaSchema.dms");
        _AttributeIDOBJ.setLineNumber("72");
        _AttributeIDOBJ.setName("AttributeID");
        _AttributeIDOBJ.setPrimitiveType("org.dmd.dmc.types.AttributeID");
        _AttributeIDOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeAttributeID");
        _AttributeID.setDefinedIn(this);
        addTypeDefList(_AttributeID);

        TypeDefinitionDMO _BooleanOBJ = new TypeDefinitionDMO();
        _Boolean = new TypeDefinition(_BooleanOBJ);
        _BooleanOBJ.setDescription("Provides support for Boolean values. This type makes use of the nullReturnValue\n flag so that, even if there is no value for an attribute of this type, a value of false will\n be returned.");
        _BooleanOBJ.setFile("metaSchema.dms");
        _BooleanOBJ.setLineNumber("106");
        _BooleanOBJ.setName("Boolean");
        _BooleanOBJ.setNullReturnValue("false");
        _BooleanOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeBoolean");
        _Boolean.setDefinedIn(this);
        addTypeDefList(_Boolean);

        TypeDefinitionDMO _CamelCaseNameOBJ = new TypeDefinitionDMO();
        _CamelCaseName = new TypeDefinition(_CamelCaseNameOBJ);
        _CamelCaseNameOBJ.setDescription("The CamelCaseName is a string based name that must start with an alpha character\n which is followed by a mix of alphanumerics.");
        _CamelCaseNameOBJ.setFile("metaSchema.dms");
        _CamelCaseNameOBJ.setIsNameType("true");
        _CamelCaseNameOBJ.setLineNumber("158");
        _CamelCaseNameOBJ.setName("CamelCaseName");
        _CamelCaseNameOBJ.setNameAttributeDef("camelCaseName");
        _CamelCaseNameOBJ.setPrimitiveType("org.dmd.dmc.types.CamelCaseName");
        _CamelCaseNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeCamelCaseName");
        _CamelCaseName.setDefinedIn(this);
        addTypeDefList(_CamelCaseName);

        TypeDefinitionDMO _ClassFilterOBJ = new TypeDefinitionDMO();
        _ClassFilter = new TypeDefinition(_ClassFilterOBJ);
        _ClassFilterOBJ.setDescription("The ClassFilter is used to perform matches against objects based on their class\n or auxiliary classes.");
        _ClassFilterOBJ.setFile("metaSchema.dms");
        _ClassFilterOBJ.setFilterAttributeDef("classFilter");
        _ClassFilterOBJ.setIsFilterType("true");
        _ClassFilterOBJ.setLineNumber("198");
        _ClassFilterOBJ.setName("ClassFilter");
        _ClassFilterOBJ.setPrimitiveType("org.dmd.dmc.types.ClassFilter");
        _ClassFilterOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeClassFilter");
        _ClassFilter.setDefinedIn(this);
        addTypeDefList(_ClassFilter);

        TypeDefinitionDMO _ClassInfoRefOBJ = new TypeDefinitionDMO();
        _ClassInfoRef = new TypeDefinition(_ClassInfoRefOBJ);
        _ClassInfoRefOBJ.setDescription("The ClassInfoRef type allows for the representation of class information \n via the Dark Matter ID associated with a ClassDefinition. It provides transient access\n to the static DmcClassInfo from the generated DMSAG, regardless of the environment in\n which it exists.");
        _ClassInfoRefOBJ.setFile("metaSchema.dms");
        _ClassInfoRefOBJ.setLineNumber("25");
        _ClassInfoRefOBJ.setName("ClassInfoRef");
        _ClassInfoRefOBJ.setPrimitiveType("org.dmd.dmc.types.ClassInfoRef");
        _ClassInfoRefOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeClassInfoRef");
        _ClassInfoRef.setDefinedIn(this);
        addTypeDefList(_ClassInfoRef);

        TypeDefinitionDMO _DateOBJ = new TypeDefinitionDMO();
        _Date = new TypeDefinition(_DateOBJ);
        _DateOBJ.setDescription("Provide support for Date values.");
        _DateOBJ.setFile("metaSchema.dms");
        _DateOBJ.setLineNumber("98");
        _DateOBJ.setName("Date");
        _DateOBJ.setPrimitiveType("java.util.Date");
        _DateOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDate");
        _Date.setDefinedIn(this);
        addTypeDefList(_Date);

        TypeDefinitionDMO _DmcAttributeOBJ = new TypeDefinitionDMO();
        _DmcAttribute = new TypeDefinition(_DmcAttributeOBJ);
        _DmcAttributeOBJ.setDescription("The DmcAttribute type allows for the storage of other attributes in an attribute. Yikes!");
        _DmcAttributeOBJ.setFile("metaSchema.dms");
        _DmcAttributeOBJ.setGenericArgs("<?>");
        _DmcAttributeOBJ.setLineNumber("32");
        _DmcAttributeOBJ.setName("DmcAttribute");
        _DmcAttributeOBJ.setPrimitiveType("org.dmd.dmc.DmcAttribute");
        _DmcAttributeOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDmcAttribute");
        _DmcAttribute.setDefinedIn(this);
        addTypeDefList(_DmcAttribute);

        TypeDefinitionDMO _DmcObjectOBJ = new TypeDefinitionDMO();
        _DmcObject = new TypeDefinition(_DmcObjectOBJ);
        _DmcObjectOBJ.setDescription("The DmcObject type allows for the storage of raw DmcObjects.");
        _DmcObjectOBJ.setFile("metaSchema.dms");
        _DmcObjectOBJ.setLineNumber("16");
        _DmcObjectOBJ.setName("DmcObject");
        _DmcObjectOBJ.setPrimitiveType("org.dmd.dmc.DmcObject");
        _DmcObjectOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDmcObject");
        _DmcObject.setDefinedIn(this);
        addTypeDefList(_DmcObject);

        TypeDefinitionDMO _DotNameOBJ = new TypeDefinitionDMO();
        _DotName = new TypeDefinition(_DotNameOBJ);
        _DotNameOBJ.setDescription("The DotName provides standard mechanisms to deal with hierarchic names composed of\n strings interspersed with periods (dots) to separate the name elements. For example\n a dot name might be one.two.three");
        _DotNameOBJ.setFile("metaSchema.dms");
        _DotNameOBJ.setIsHierarchicName("true");
        _DotNameOBJ.setIsNameType("true");
        _DotNameOBJ.setLineNumber("190");
        _DotNameOBJ.setName("DotName");
        _DotNameOBJ.setNameAttributeDef("dotName");
        _DotNameOBJ.setPrimitiveType("org.dmd.dmc.types.DotName");
        _DotNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDotName");
        _DotName.setDefinedIn(this);
        addTypeDefList(_DotName);

        TypeDefinitionDMO _DoubleOBJ = new TypeDefinitionDMO();
        _Double = new TypeDefinition(_DoubleOBJ);
        _DoubleOBJ.setDescription("Provide support for Double values.");
        _DoubleOBJ.setFile("metaSchema.dms");
        _DoubleOBJ.setLineNumber("87");
        _DoubleOBJ.setName("Double");
        _DoubleOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDouble");
        _Double.setDefinedIn(this);
        addTypeDefList(_Double);

        TypeDefinitionDMO _EnumValueOBJ = new TypeDefinitionDMO();
        _EnumValue = new TypeDefinition(_EnumValueOBJ);
        _EnumValueOBJ.setDescription("The EnumValue type is used to store the definition of one enumerated value\n that comprises part of an overall EnumDefinition.\n <p/>\n The value of an EnumValue is comprised of at least three tokens and possibly a label:\n <pre>\n [enum integer value] [enum value name] [enum description] <: label>\n </pre>\n For example:\n <pre>\n 0 ABSTRACT Here is the definition of abstract. : Abstract\n </pre>\n Within an EnumDefinition, each EnumValue must have a unique integer identifier\n and a unique value name.\n <p/>\n The enum value name is automatically set to uppercase, even if it is specified\n in lower or mixed case.");
        _EnumValueOBJ.setFile("metaSchema.dms");
        _EnumValueOBJ.setLineNumber("127");
        _EnumValueOBJ.setName("EnumValue");
        _EnumValueOBJ.setPrimitiveType("org.dmd.dms.types.EnumValue");
        _EnumValueOBJ.setTypeClassName("org.dmd.dms.types.DmcTypeEnumValue");
        _EnumValue.setDefinedIn(this);
        addTypeDefList(_EnumValue);

        TypeDefinitionDMO _FilterContainerOBJ = new TypeDefinitionDMO();
        _FilterContainer = new TypeDefinition(_FilterContainerOBJ);
        _FilterContainerOBJ.setAltType("DmcFilter");
        _FilterContainerOBJ.setAltTypeImport("org.dmd.dmc.DmcFilter");
        _FilterContainerOBJ.setDescription("The FilterContainer type allows for the storage of object filters of different types.");
        _FilterContainerOBJ.setFile("metaSchema.dms");
        _FilterContainerOBJ.setLineNumber("64");
        _FilterContainerOBJ.setName("FilterContainer");
        _FilterContainerOBJ.setPrimitiveType("org.dmd.dmc.types.FilterContainer");
        _FilterContainerOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeFilterContainer");
        _FilterContainer.setDefinedIn(this);
        addTypeDefList(_FilterContainer);

        TypeDefinitionDMO _FloatOBJ = new TypeDefinitionDMO();
        _Float = new TypeDefinition(_FloatOBJ);
        _FloatOBJ.setDescription("Provide support for Float values.");
        _FloatOBJ.setFile("metaSchema.dms");
        _FloatOBJ.setLineNumber("82");
        _FloatOBJ.setName("Float");
        _FloatOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeFloat");
        _Float.setDefinedIn(this);
        addTypeDefList(_Float);

        TypeDefinitionDMO _FullyQualifiedNameOBJ = new TypeDefinitionDMO();
        _FullyQualifiedName = new TypeDefinition(_FullyQualifiedNameOBJ);
        _FullyQualifiedNameOBJ.setFile("metaSchema.dms");
        _FullyQualifiedNameOBJ.setIsNameType("true");
        _FullyQualifiedNameOBJ.setLineNumber("248");
        _FullyQualifiedNameOBJ.setName("FullyQualifiedName");
        _FullyQualifiedNameOBJ.setNameAttributeDef("FQN");
        _FullyQualifiedNameOBJ.setPrimitiveType("org.dmd.dmc.types.FullyQualifiedName");
        _FullyQualifiedNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeFullyQualifiedName");
        _FullyQualifiedName.setDefinedIn(this);
        addTypeDefList(_FullyQualifiedName);

        TypeDefinitionDMO _IntegerOBJ = new TypeDefinitionDMO();
        _Integer = new TypeDefinition(_IntegerOBJ);
        _IntegerOBJ.setDescription("Provides support for Integer values.");
        _IntegerOBJ.setFile("metaSchema.dms");
        _IntegerOBJ.setLineNumber("77");
        _IntegerOBJ.setName("Integer");
        _IntegerOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeInteger");
        _Integer.setDefinedIn(this);
        addTypeDefList(_Integer);

        TypeDefinitionDMO _IntegerNameOBJ = new TypeDefinitionDMO();
        _IntegerName = new TypeDefinition(_IntegerNameOBJ);
        _IntegerNameOBJ.setDescription("An IntegerName provides the means to uniquely identify an object using an integer value.");
        _IntegerNameOBJ.setFile("metaSchema.dms");
        _IntegerNameOBJ.setIsNameType("true");
        _IntegerNameOBJ.setLineNumber("173");
        _IntegerNameOBJ.setName("IntegerName");
        _IntegerNameOBJ.setNameAttributeDef("integerName");
        _IntegerNameOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerName");
        _IntegerNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerName");
        _IntegerName.setDefinedIn(this);
        addTypeDefList(_IntegerName);

        TypeDefinitionDMO _IntegerToBooleanOBJ = new TypeDefinitionDMO();
        _IntegerToBoolean = new TypeDefinition(_IntegerToBooleanOBJ);
        _IntegerToBooleanOBJ.setDescription("Provides support for hashed integer to Boolean values.");
        _IntegerToBooleanOBJ.setFile("metaSchema.dms");
        _IntegerToBooleanOBJ.setKeyClass("Integer");
        _IntegerToBooleanOBJ.setLineNumber("235");
        _IntegerToBooleanOBJ.setName("IntegerToBoolean");
        _IntegerToBooleanOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerToBoolean");
        _IntegerToBooleanOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerToBoolean");
        _IntegerToBoolean.setDefinedIn(this);
        addTypeDefList(_IntegerToBoolean);

        TypeDefinitionDMO _IntegerToStringOBJ = new TypeDefinitionDMO();
        _IntegerToString = new TypeDefinition(_IntegerToStringOBJ);
        _IntegerToStringOBJ.setDescription("Provides support for hashed integer to string values.");
        _IntegerToStringOBJ.setFile("metaSchema.dms");
        _IntegerToStringOBJ.setKeyClass("Integer");
        _IntegerToStringOBJ.setLineNumber("205");
        _IntegerToStringOBJ.setName("IntegerToString");
        _IntegerToStringOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerToString");
        _IntegerToStringOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerToString");
        _IntegerToString.setDefinedIn(this);
        addTypeDefList(_IntegerToString);

        TypeDefinitionDMO _IntegerToUUIDLiteOBJ = new TypeDefinitionDMO();
        _IntegerToUUIDLite = new TypeDefinition(_IntegerToUUIDLiteOBJ);
        _IntegerToUUIDLiteOBJ.setDescription("Provides support for hashed integer to UUIDLite values.");
        _IntegerToUUIDLiteOBJ.setFile("metaSchema.dms");
        _IntegerToUUIDLiteOBJ.setKeyClass("Integer");
        _IntegerToUUIDLiteOBJ.setLineNumber("242");
        _IntegerToUUIDLiteOBJ.setName("IntegerToUUIDLite");
        _IntegerToUUIDLiteOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerToUUIDLite");
        _IntegerToUUIDLiteOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerToUUIDLite");
        _IntegerToUUIDLite.setDefinedIn(this);
        addTypeDefList(_IntegerToUUIDLite);

        TypeDefinitionDMO _LabelledIntegerDataPointOBJ = new TypeDefinitionDMO();
        _LabelledIntegerDataPoint = new TypeDefinition(_LabelledIntegerDataPointOBJ);
        _LabelledIntegerDataPointOBJ.setDescription("Represents a single, labelled Integer data point. Generally used for pie\n chart data.");
        _LabelledIntegerDataPointOBJ.setFile("metaSchema.dms");
        _LabelledIntegerDataPointOBJ.setLineNumber("255");
        _LabelledIntegerDataPointOBJ.setName("LabelledIntegerDataPoint");
        _LabelledIntegerDataPointOBJ.setPrimitiveType("org.dmd.dmc.types.LabelledIntegerDataPoint");
        _LabelledIntegerDataPointOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeLabelledIntegerDataPoint");
        _LabelledIntegerDataPoint.setDefinedIn(this);
        addTypeDefList(_LabelledIntegerDataPoint);

        TypeDefinitionDMO _LongOBJ = new TypeDefinitionDMO();
        _Long = new TypeDefinition(_LongOBJ);
        _LongOBJ.setDescription("Provide support for Long values.");
        _LongOBJ.setFile("metaSchema.dms");
        _LongOBJ.setLineNumber("92");
        _LongOBJ.setName("Long");
        _LongOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeLong");
        _Long.setDefinedIn(this);
        addTypeDefList(_Long);

        TypeDefinitionDMO _LongNameOBJ = new TypeDefinitionDMO();
        _LongName = new TypeDefinition(_LongNameOBJ);
        _LongNameOBJ.setDescription("A LongName provides the means to uniquely identify an object using a long value.");
        _LongNameOBJ.setFile("metaSchema.dms");
        _LongNameOBJ.setIsNameType("true");
        _LongNameOBJ.setLineNumber("180");
        _LongNameOBJ.setName("LongName");
        _LongNameOBJ.setNameAttributeDef("longName");
        _LongNameOBJ.setPrimitiveType("org.dmd.dmc.types.LongName");
        _LongNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeLongName");
        _LongName.setDefinedIn(this);
        addTypeDefList(_LongName);

        TypeDefinitionDMO _ModifierOBJ = new TypeDefinitionDMO();
        _Modifier = new TypeDefinition(_ModifierOBJ);
        _ModifierOBJ.setDescription("The Modifier type is used to represent modification operations on a DmcObject.\n Any modification to an object can be represented by a Modifier. The string representation\n of a modification can take the following forms:\n <ul>\n <li> &ltattribute name&gt ADD &ltvalue&gt</li>\n <li> &ltattribute name&gt DEL &ltvalue&gt</li>\n <li> &ltattribute name&gt SET &ltvalue&gt</li>\n <li> &ltattribute name&gt NTH &ltindex&gt &ltvalue&gt</li>\n <li> &ltattribute name&gt NTH &ltindex&gt</li>\n <li> &ltattribute name&gt REM </li>\n </ul>");
        _ModifierOBJ.setFile("metaSchema.dms");
        _ModifierOBJ.setLineNumber("143");
        _ModifierOBJ.setName("Modifier");
        _ModifierOBJ.setPrimitiveType("org.dmd.dmc.types.Modifier");
        _ModifierOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeModifier");
        _Modifier.setDefinedIn(this);
        addTypeDefList(_Modifier);

        TypeDefinitionDMO _NameContainerOBJ = new TypeDefinitionDMO();
        _NameContainer = new TypeDefinition(_NameContainerOBJ);
        _NameContainerOBJ.setAltType("DmcObjectName");
        _NameContainerOBJ.setAltTypeImport("org.dmd.dmc.DmcObjectName");
        _NameContainerOBJ.setDescription("The NameContainer type allows for the storage of object names of different types.\n This mechanism is required because the naming mechanisms associated with dark-matter allow for\n different ways of naming objects. When the name of something is transported, it has to be \n self describing i.e. the type of the naming attribute must be known so that the appropriate \n name type can be instantiated. An example of this comes from the Dark Matter Protocol. \n The targets attribute is defined as a NameContainer. An instance of targets might appear\n as follows:\n <pre>\n targets uuidName 809408a7-f00b-448c-beb6-00337e83acc4\n </pre>\n As you can see, the attribute name is targets and the value is uuidName 809408a7-f00b-448c-beb6-00337e83acc4.\n The uuidName attribute is the designatedNameAttribute for the UUIDName type. So, when parsing/deserializing a\n name container, we always know the underlying type of the name.\n <p/>\n This approach makes dark-matter name handling completely extensible.\n <p/>\n A similar approach is taken to filter specifications via the FilterContainer.");
        _NameContainerOBJ.setFile("metaSchema.dms");
        _NameContainerOBJ.setLineNumber("56");
        _NameContainerOBJ.setName("NameContainer");
        _NameContainerOBJ.setPrimitiveType("org.dmd.dmc.types.NameContainer");
        _NameContainerOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeNameContainer");
        _NameContainer.setDefinedIn(this);
        addTypeDefList(_NameContainer);

        TypeDefinitionDMO _RuleNameOBJ = new TypeDefinitionDMO();
        _RuleName = new TypeDefinition(_RuleNameOBJ);
        _RuleNameOBJ.setDescription("The RuleName is a string based name that must start with an alpha character\n which is followed by a mix of alphanumerics.");
        _RuleNameOBJ.setFile("metaSchema.dms");
        _RuleNameOBJ.setIsNameType("true");
        _RuleNameOBJ.setLineNumber("166");
        _RuleNameOBJ.setName("RuleName");
        _RuleNameOBJ.setNameAttributeDef("ruleName");
        _RuleNameOBJ.setPrimitiveType("org.dmd.dmc.types.RuleName");
        _RuleNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeRuleName");
        _RuleName.setDefinedIn(this);
        addTypeDefList(_RuleName);

        TypeDefinitionDMO _StringOBJ = new TypeDefinitionDMO();
        _String = new TypeDefinition(_StringOBJ);
        _StringOBJ.setDescription("Provides support for String values.");
        _StringOBJ.setFile("metaSchema.dms");
        _StringOBJ.setLineNumber("10");
        _StringOBJ.setName("String");
        _StringOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeString");
        _String.setDefinedIn(this);
        addTypeDefList(_String);

        TypeDefinitionDMO _StringNameOBJ = new TypeDefinitionDMO();
        _StringName = new TypeDefinition(_StringNameOBJ);
        _StringNameOBJ.setDescription("The StringName is the simplest naming mechanism available; it's just a String.");
        _StringNameOBJ.setFile("metaSchema.dms");
        _StringNameOBJ.setIsNameType("true");
        _StringNameOBJ.setLineNumber("150");
        _StringNameOBJ.setName("StringName");
        _StringNameOBJ.setNameAttributeDef("name");
        _StringNameOBJ.setPrimitiveType("org.dmd.dmc.types.StringName");
        _StringNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeStringName");
        _StringName.setDefinedIn(this);
        addTypeDefList(_StringName);

        TypeDefinitionDMO _StringToStringOBJ = new TypeDefinitionDMO();
        _StringToString = new TypeDefinition(_StringToStringOBJ);
        _StringToStringOBJ.setDescription("Provides support for hashed string to string values.");
        _StringToStringOBJ.setFile("metaSchema.dms");
        _StringToStringOBJ.setKeyClass("String");
        _StringToStringOBJ.setLineNumber("212");
        _StringToStringOBJ.setName("StringToString");
        _StringToStringOBJ.setPrimitiveType("org.dmd.dmc.types.StringToString");
        _StringToStringOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeStringToString");
        _StringToString.setDefinedIn(this);
        addTypeDefList(_StringToString);

        TypeDefinitionDMO _TimeDoubleDataPointOBJ = new TypeDefinitionDMO();
        _TimeDoubleDataPoint = new TypeDefinition(_TimeDoubleDataPointOBJ);
        _TimeDoubleDataPointOBJ.setDescription("Represents a single Double data point at a moment in time. Generally used\n for line or column chart data.");
        _TimeDoubleDataPointOBJ.setFile("metaSchema.dms");
        _TimeDoubleDataPointOBJ.setLineNumber("262");
        _TimeDoubleDataPointOBJ.setName("TimeDoubleDataPoint");
        _TimeDoubleDataPointOBJ.setPrimitiveType("org.dmd.dmc.types.TimeDoubleDataPoint");
        _TimeDoubleDataPointOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeTimeDoubleDataPoint");
        _TimeDoubleDataPoint.setDefinedIn(this);
        addTypeDefList(_TimeDoubleDataPoint);

        TypeDefinitionDMO _UUIDLiteOBJ = new TypeDefinitionDMO();
        _UUIDLite = new TypeDefinition(_UUIDLiteOBJ);
        _UUIDLiteOBJ.setDescription("The UUIDLite provides support for UUIDs in GWT environments; a full UUID implementation\n is not supported by the GWT JRE Emulation mechanisms. It holds two long values that represent a complete\n java.util.UUID as generated within the server environment. The methods to parse a UUID from a String and\n present it as a String are taken from the java.util.UUID class.");
        _UUIDLiteOBJ.setFile("metaSchema.dms");
        _UUIDLiteOBJ.setLineNumber("221");
        _UUIDLiteOBJ.setName("UUIDLite");
        _UUIDLiteOBJ.setPrimitiveType("org.dmd.dmc.types.UUIDLite");
        _UUIDLiteOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeUUIDLite");
        _UUIDLite.setDefinedIn(this);
        addTypeDefList(_UUIDLite);

        TypeDefinitionDMO _UUIDNameOBJ = new TypeDefinitionDMO();
        _UUIDName = new TypeDefinition(_UUIDNameOBJ);
        _UUIDNameOBJ.setDescription("The UUIDName allows for the naming of objects based on the GWT compatible UUIDLite type.");
        _UUIDNameOBJ.setFile("metaSchema.dms");
        _UUIDNameOBJ.setIsNameType("true");
        _UUIDNameOBJ.setLineNumber("228");
        _UUIDNameOBJ.setName("UUIDName");
        _UUIDNameOBJ.setNameAttributeDef("uuidName");
        _UUIDNameOBJ.setPrimitiveType("org.dmd.dmc.types.UUIDName");
        _UUIDNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeUUIDName");
        _UUIDName.setDefinedIn(this);
        addTypeDefList(_UUIDName);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitEnums(MetaGenerator.java:435)
    private void initEnums() throws DmcValueException {

        EnumDefinitionDMO _BaseTypeEnumOBJ = new EnumDefinitionDMO();
        _BaseTypeEnum = new EnumDefinition(_BaseTypeEnumOBJ);
        _BaseTypeEnumOBJ.setDescription("The BaseTypeEnum indicates the broad category of data types for which \n a MethodGenerator component is intended. The matrix defined by combining the ValueType and\n BaseTypeEnums indicates all the combinations of method types required for a particular\n type of data in code generation context.");
        _BaseTypeEnumOBJ.addEnumValue("0 PRIMITIVE 	Indicates a primitive data type such as Integer, String, long or a generated complex type.");
        _BaseTypeEnumOBJ.addEnumValue("1 NAMEDREF		Indicates a named object reference.");
        _BaseTypeEnumOBJ.addEnumValue("2 UNNAMEDREF 	Indicates an unnamed object reference.");
        _BaseTypeEnumOBJ.addEnumValue("3 EXTENDEDREF 	Indicates an extended reference.");
        _BaseTypeEnumOBJ.addEnumValue("4 KEYED			Indicates a type that has a defined key type.");
        _BaseTypeEnumOBJ.setFile("metaSchema.dms");
        _BaseTypeEnumOBJ.setLineNumber("409");
        _BaseTypeEnumOBJ.setName("BaseTypeEnum");
        _BaseTypeEnumOBJ.setNullReturnValue("BaseTypeEnum.PRIMITIVE");
        _BaseTypeEnum.setDefinedIn(this);
        addEnumDefList(_BaseTypeEnum);

        EnumDefinitionDMO _ClassTypeEnumOBJ = new EnumDefinitionDMO();
        _ClassTypeEnum = new EnumDefinition(_ClassTypeEnumOBJ);
        _ClassTypeEnumOBJ.setDescription("The ClassTypeEnum enumeration indicates the types of classes that can\n be defined; some of these definitions are borrowed from LDAP directory parlance. See\n the individual enum value definitions for details.");
        _ClassTypeEnumOBJ.addEnumValue("0 UNKNOWN		Unknown value.");
        _ClassTypeEnumOBJ.addEnumValue("1 ABSTRACT		An abstract class is one that provides a base class for a set of related derived classes, but which can't be instantiated by itself.");
        _ClassTypeEnumOBJ.addEnumValue("2 STRUCTURAL	A structural class is a class that can be instantiated by itself.");
        _ClassTypeEnumOBJ.addEnumValue("3 AUXILIARY 	An auxiliary class is basically a collection of additional attributes that can be added to an instance of a STRUCTURAL class; an AUXILIARY class can't be instantiated on its own.");
        _ClassTypeEnumOBJ.addEnumValue("4 EXTENSIBLE 	An extensible class is basically a free-form class that allows ANY attribute to be set on it.");
        _ClassTypeEnumOBJ.addEnumValue("5 INTERFACE		An interface class provides an interface for a set of implementing classes.");
        _ClassTypeEnumOBJ.setFile("metaSchema.dms");
        _ClassTypeEnumOBJ.setLineNumber("320");
        _ClassTypeEnumOBJ.setName("ClassTypeEnum");
        _ClassTypeEnumOBJ.setNullReturnValue("ClassTypeEnum.UNKNOWN");
        _ClassTypeEnum.setDefinedIn(this);
        addEnumDefList(_ClassTypeEnum);

        EnumDefinitionDMO _DataTypeEnumOBJ = new EnumDefinitionDMO();
        _DataTypeEnum = new EnumDefinition(_DataTypeEnumOBJ);
        _DataTypeEnumOBJ.setDescription("The DataTypeEnum relates to how attributes/classes are dealt with\n by various persistence mechanism. No inherent behaviour is defined at this level.");
        _DataTypeEnumOBJ.addEnumValue("0 UNKNOWN Indicates that we can't determine the data type.");
        _DataTypeEnumOBJ.addEnumValue("1 TRANSIENT Indicates that the data is transient i.e. it exists within the application context in which it is used, but is not persisted across application invocations and is not serialized in communications with other systems.");
        _DataTypeEnumOBJ.addEnumValue("2 PERSISTENT Indicates that the data is meant to be persistent. What persistence mechanism is used is application dependent.");
        _DataTypeEnumOBJ.addEnumValue("3 NONPERSISTENT Indicates that the data is used within your system and  transmitted to remote systems but is not persisted.");
        _DataTypeEnumOBJ.setFile("metaSchema.dms");
        _DataTypeEnumOBJ.setLineNumber("380");
        _DataTypeEnumOBJ.setName("DataTypeEnum");
        _DataTypeEnumOBJ.setNullReturnValue("DataTypeEnum.PERSISTENT");
        _DataTypeEnum.setDefinedIn(this);
        addEnumDefList(_DataTypeEnum);

        EnumDefinitionDMO _DebugEnumOBJ = new EnumDefinitionDMO();
        _DebugEnum = new EnumDefinition(_DebugEnumOBJ);
        _DebugEnumOBJ.setDescription("The DebugEnum indicates the various levels of detailed logging that can be enabled in the DMC framework.");
        _DebugEnumOBJ.addEnumValue("0 NONE Unknown value.");
        _DebugEnumOBJ.addEnumValue("1 FILTER Allows fine control over printing of debug messages associated with filtering operations.");
        _DebugEnumOBJ.addEnumValue("2 SCHEMA Allows fine control over printing of debug messages associated with schema loading operations.");
        _DebugEnumOBJ.setFile("metaSchema.dms");
        _DebugEnumOBJ.setLineNumber("430");
        _DebugEnumOBJ.setName("DebugEnum");
        _DebugEnumOBJ.setNullReturnValue("DebugEnum.NONE");
        _DebugEnum.setDefinedIn(this);
        addEnumDefList(_DebugEnum);

        EnumDefinitionDMO _FilterTypeEnumOBJ = new EnumDefinitionDMO();
        _FilterTypeEnum = new EnumDefinition(_FilterTypeEnumOBJ);
        _FilterTypeEnumOBJ.setDescription("The FilterTypeEnum enumeration indicates the types of filter operations\n that can be carried out on the attributes of an object.");
        _FilterTypeEnumOBJ.addEnumValue("0 NONE Indicates that no filter operation was specified.");
        _FilterTypeEnumOBJ.addEnumValue("1 AND  Indicates that the rest of the filter ops that follow will be ANDed together.");
        _FilterTypeEnumOBJ.addEnumValue("2 OR   Indicates that the rest of the filter ops that follow will be ORed together.");
        _FilterTypeEnumOBJ.addEnumValue("3 EQ   Performs a test for equality.");
        _FilterTypeEnumOBJ.addEnumValue("4 NE   Performs a test for inequality.");
        _FilterTypeEnumOBJ.addEnumValue("5 PR   Performs a test for the presence of an attribute.");
        _FilterTypeEnumOBJ.addEnumValue("6 NP   Performs a test to see if an attribute is not present.");
        _FilterTypeEnumOBJ.setFile("metaSchema.dms");
        _FilterTypeEnumOBJ.setLineNumber("422");
        _FilterTypeEnumOBJ.setName("FilterTypeEnum");
        _FilterTypeEnumOBJ.setNullReturnValue("FilterTypeEnum.NONE");
        _FilterTypeEnum.setDefinedIn(this);
        addEnumDefList(_FilterTypeEnum);

        EnumDefinitionDMO _ModifyTypeEnumOBJ = new EnumDefinitionDMO();
        _ModifyTypeEnum = new EnumDefinition(_ModifyTypeEnumOBJ);
        _ModifyTypeEnumOBJ.setDescription("The ModifyTypeEnum indicates the types of modification operations\n that can be carried out on the attributes of an object.");
        _ModifyTypeEnumOBJ.addEnumValue("0 NONE Indicates that no modify operation was specified.");
        _ModifyTypeEnumOBJ.addEnumValue("1 ADD  The ADD operation adds a new value to a multi-valued attribute.");
        _ModifyTypeEnumOBJ.addEnumValue("2 DEL  The DEL operation removes a value from a multi-valued attribute.");
        _ModifyTypeEnumOBJ.addEnumValue("3 SET  The SET operation sets a new value for a single-valued attribute.");
        _ModifyTypeEnumOBJ.addEnumValue("4 REM  The REM operation removes the entire attribute from the object.");
        _ModifyTypeEnumOBJ.addEnumValue("5 NTH  The NTH operation sets the value at the specified index.");
        _ModifyTypeEnumOBJ.setFile("metaSchema.dms");
        _ModifyTypeEnumOBJ.setLineNumber("332");
        _ModifyTypeEnumOBJ.setName("ModifyTypeEnum");
        _ModifyTypeEnumOBJ.setNullReturnValue("ModifyTypeEnum.NONE");
        _ModifyTypeEnum.setDefinedIn(this);
        addEnumDefList(_ModifyTypeEnum);

        EnumDefinitionDMO _OperationalContextEnumOBJ = new EnumDefinitionDMO();
        _OperationalContextEnum = new EnumDefinition(_OperationalContextEnumOBJ);
        _OperationalContextEnumOBJ.setDescription("The OperationalContextEnum indicates various types of operational contexts\n in which some component can operate.");
        _OperationalContextEnumOBJ.addEnumValue("0 DMO       Indicates that the component follows basic Dark Matter Object rules which likewise conform to GWT JRE Emulation.");
        _OperationalContextEnumOBJ.addEnumValue("1 FULLJAVA  indicates that the component operates in a ful Java environment; no restrictions.");
        _OperationalContextEnumOBJ.setFile("metaSchema.dms");
        _OperationalContextEnumOBJ.setLineNumber("340");
        _OperationalContextEnumOBJ.setName("OperationalContextEnum");
        _OperationalContextEnumOBJ.setNullReturnValue("OperationalContextEnum.DMO");
        _OperationalContextEnum.setDefinedIn(this);
        addEnumDefList(_OperationalContextEnum);

        EnumDefinitionDMO _RuleTypeEnumOBJ = new EnumDefinitionDMO();
        _RuleTypeEnum = new EnumDefinition(_RuleTypeEnumOBJ);
        _RuleTypeEnumOBJ.setDescription("The RuleTypeEnum indicates the level at which a rule is applied. An ATTRIBUTE\n rule is applied at the attribute level and must have the applyToAttribute attribute and may\n have the applyToClass attribute to limit its scope to particular classes. A CLASS\n level rule will be applied to an entire object and will have the applyToClass attribute\n unless it is defined as GLOBAL.");
        _RuleTypeEnumOBJ.addEnumValue("0 ATTRIBUTE Indicates that this is an attribute level rule.");
        _RuleTypeEnumOBJ.addEnumValue("1 CLASS     Indicates that this is a class level rule.");
        _RuleTypeEnumOBJ.setFile("metaSchema.dms");
        _RuleTypeEnumOBJ.setLineNumber("351");
        _RuleTypeEnumOBJ.setName("RuleTypeEnum");
        _RuleTypeEnumOBJ.setNullReturnValue("RuleTypeEnum.ATTRIBUTE");
        _RuleTypeEnum.setDefinedIn(this);
        addEnumDefList(_RuleTypeEnum);

        EnumDefinitionDMO _ValueTypeEnumOBJ = new EnumDefinitionDMO();
        _ValueTypeEnum = new EnumDefinition(_ValueTypeEnumOBJ);
        _ValueTypeEnumOBJ.setDescription("The ValueTypeEnum indicates the cardinality of an attribute as\n well as the type of Map to be used if the attribute is keyed. This is an extension\n to original concept of single-valued versus multi-valued. Hashsets are also supported.");
        _ValueTypeEnumOBJ.addEnumValue("0 SINGLE Indicates that the attribute is single-valued.");
        _ValueTypeEnumOBJ.addEnumValue("1 MULTI Indicates that the attribute is multi-valued.");
        _ValueTypeEnumOBJ.addEnumValue("2 HASHMAPPED Indicates that the attribute values implement the DmcMappedAttributeIF interface and are stored in a HashMap.");
        _ValueTypeEnumOBJ.addEnumValue("3 TREEMAPPED Indicates that the attribute values implement the DmcMappedAttributeIF interface and are stored in a TreeMap.");
        _ValueTypeEnumOBJ.addEnumValue("4 HASHSET Indicates that the attribute values are stored in a HashSet.");
        _ValueTypeEnumOBJ.addEnumValue("5 TREESET Indicates that the attribute values are stored in a TreeSet.");
        _ValueTypeEnumOBJ.addEnumValue("6 INDEXED Indicates that the attribute is multi-valued and indexed i.e. it has predefined slots for a fix number of values.");
        _ValueTypeEnumOBJ.setFile("metaSchema.dms");
        _ValueTypeEnumOBJ.setLineNumber("396");
        _ValueTypeEnumOBJ.setName("ValueTypeEnum");
        _ValueTypeEnumOBJ.setNullReturnValue("ValueTypeEnum.SINGLE");
        _ValueTypeEnum.setDefinedIn(this);
        addEnumDefList(_ValueTypeEnum);

        EnumDefinitionDMO _WrapperTypeEnumOBJ = new EnumDefinitionDMO();
        _WrapperTypeEnum = new EnumDefinition(_WrapperTypeEnumOBJ);
        _WrapperTypeEnumOBJ.setDescription("The WrapperTypeEnum indicates which wrapper class you want instantiated when a class\n of object is recognized during parsing or when an object is pulled from a repository.");
        _WrapperTypeEnumOBJ.addEnumValue("0 NONE Unknown value.");
        _WrapperTypeEnumOBJ.addEnumValue("1 BASE Indicates that you just want to use the generated DMW class.");
        _WrapperTypeEnumOBJ.addEnumValue("2 EXTENDED Indicates that you want to use your own extended class.");
        _WrapperTypeEnumOBJ.setFile("metaSchema.dms");
        _WrapperTypeEnumOBJ.setLineNumber("439");
        _WrapperTypeEnumOBJ.setName("WrapperTypeEnum");
        _WrapperTypeEnumOBJ.setNullReturnValue("WrapperTypeEnum.BASE");
        _WrapperTypeEnum.setDefinedIn(this);
        addEnumDefList(_WrapperTypeEnum);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitRuleCategories(MetaGenerator.java:454)
    private void initRuleCategories() throws DmcValueException {

        RuleCategoryDMO _AttributeValidationOBJ = new RuleCategoryDMO();
        _AttributeValidation = new RuleCategory(_AttributeValidationOBJ);
        _AttributeValidationOBJ.setAttributeInfoFromParam("attribute.getAttributeInfo()");
        _AttributeValidationOBJ.setClassInfoFromParam("obj.getConstructionClassInfo()");
        _AttributeValidationOBJ.setDescription("Rules in this category are used to validate individual attributes.");
        _AttributeValidationOBJ.setFile("metaSchema.dms");
        _AttributeValidationOBJ.setLineNumber("479");
        _AttributeValidationOBJ.setName("AttributeValidation");
        _AttributeValidationOBJ.setOpContext("DMO");
        _AttributeValidationOBJ.setRuleCategoryID("3");
        _AttributeValidationOBJ.addRuleParam("org.dmd.dmc.DmcObject::obj:The object in which the attribute exists");
        _AttributeValidationOBJ.addRuleParam("org.dmd.dmc.DmcAttribute:<?>:attribute:The attribute to be validated");
        _AttributeValidationOBJ.setRuleType("ATTRIBUTE");
        _AttributeValidation.setDefinedIn(this);
        addRuleCategoryList(_AttributeValidation);

        RuleCategoryDMO _InitializationOBJ = new RuleCategoryDMO();
        _Initialization = new RuleCategory(_InitializationOBJ);
        _InitializationOBJ.setClassInfoFromParam("obj.getConstructionClassInfo()");
        _InitializationOBJ.setDescription("Rules in this category are used to initialize objects to a known\n state after creation.\n <p/>\n Execution will be performed from the bottom of the derivation hierarchy to the top i.e.\n we look for rules for the construction class of the object being initialized and then\n move up the derivation hierarchy looking for rules associated with the base classes.");
        _InitializationOBJ.setFile("metaSchema.dms");
        _InitializationOBJ.setLineNumber("457");
        _InitializationOBJ.setName("Initialization");
        _InitializationOBJ.setOpContext("DMO");
        _InitializationOBJ.setRuleCategoryID("1");
        _InitializationOBJ.addRuleParam("org.dmd.dmc.DmcObject: :obj:The object to be initialized");
        _InitializationOBJ.setRuleType("CLASS");
        _Initialization.setDefinedIn(this);
        addRuleCategoryList(_Initialization);

        RuleCategoryDMO _ObjectValidationOBJ = new RuleCategoryDMO();
        _ObjectValidation = new RuleCategory(_ObjectValidationOBJ);
        _ObjectValidationOBJ.setClassInfoFromParam("obj.getConstructionClassInfo()");
        _ObjectValidationOBJ.setDescription("Rules in this category are used to validate a complete object. This\n would include objects read from Object Instance Files, objects in CreateRequests\n (after Initialization rules have been applied).");
        _ObjectValidationOBJ.setFile("metaSchema.dms");
        _ObjectValidationOBJ.setLineNumber("468");
        _ObjectValidationOBJ.setName("ObjectValidation");
        _ObjectValidationOBJ.setOpContext("DMO");
        _ObjectValidationOBJ.setRuleCategoryID("2");
        _ObjectValidationOBJ.addRuleParam("org.dmd.dmc.DmcObject: :obj:The object to be validated");
        _ObjectValidationOBJ.setRuleType("CLASS");
        _ObjectValidation.setDefinedIn(this);
        addRuleCategoryList(_ObjectValidation);

        RuleCategoryDMO _UCOValidationOBJ = new RuleCategoryDMO();
        _UCOValidation = new RuleCategory(_UCOValidationOBJ);
        _UCOValidationOBJ.setClassInfoFromParam("DmcOmni.instance().getClassInfo(obj.getConstructionClass())");
        _UCOValidationOBJ.setDescription("Rules in this category are used to validate DmcUncheckedObjects (UCOs) which\n are basically just collections of attribute/value pairs.");
        _UCOValidationOBJ.setFile("metaSchema.dms");
        _UCOValidationOBJ.setLineNumber("516");
        _UCOValidationOBJ.setName("UCOValidation");
        _UCOValidationOBJ.setOpContext("DMO");
        _UCOValidationOBJ.setRuleCategoryID("6");
        _UCOValidationOBJ.addRuleImport("org.dmd.dmc.DmcOmni");
        _UCOValidationOBJ.addRuleParam("org.dmd.dmc.util.DmcUncheckedObject: :obj:The object to be validated:");
        _UCOValidationOBJ.setRuleType("CLASS");
        _UCOValidation.setDefinedIn(this);
        addRuleCategoryList(_UCOValidation);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitComplexTypes(MetaGenerator.java:473)
    private void initComplexTypes() throws DmcValueException {

        ComplexTypeDefinitionDMO _DmwTypeToWrapperTypeOBJ = new ComplexTypeDefinitionDMO();
        _DmwTypeToWrapperType = new ComplexTypeDefinition(_DmwTypeToWrapperTypeOBJ);
        _DmwTypeToWrapperTypeOBJ.setDescription("The DmwTypeToWrapperType complex type is used as the type of\n the dmwWrapperType attribute which is used to indicate the type of wrappers\n to generate for a class in a particular generation context.");
        _DmwTypeToWrapperTypeOBJ.addField("String          dmwType     The Dark Matter Wrapper type");
        _DmwTypeToWrapperTypeOBJ.addField("WrapperTypeEnum wrapperType The type of wrapper to be used in this context");
        _DmwTypeToWrapperTypeOBJ.setFile("metaSchema.dms");
        _DmwTypeToWrapperTypeOBJ.setLineNumber("290");
        _DmwTypeToWrapperTypeOBJ.setName("DmwTypeToWrapperType");
        _DmwTypeToWrapperType.setDefinedIn(this);
        addComplexTypeDefList(_DmwTypeToWrapperType);

        ComplexTypeDefinitionDMO _FieldOBJ = new ComplexTypeDefinitionDMO();
        _Field = new ComplexTypeDefinition(_FieldOBJ);
        _FieldOBJ.setDescription("The Field complex type is used to describe the fields of a ComplexTypeDefinition.\n A Field attribute is comprised of three chunks of text, the Field type\n which is a reference to any valid schema type, a name for the field and\n a brief description of the field. A Field specification might appear \n as follows:\n <pre>\n field String whatzits The whatzits field indicates the number of whatzits per square kilometer.\n </pre>\n In this case, the type is String, the name of the field is whatzits and that's \n followed by the description.");
        _FieldOBJ.addField("TypeDefinition		type        The type of the field");
        _FieldOBJ.addField("String         name        The name of the field");
        _FieldOBJ.addField("String         description The description of the field");
        _FieldOBJ.setFile("metaSchema.dms");
        _FieldOBJ.setLineNumber("282");
        _FieldOBJ.setName("Field");
        _Field.setDefinedIn(this);
        addComplexTypeDefList(_Field);

        ComplexTypeDefinitionDMO _RuleParamOBJ = new ComplexTypeDefinitionDMO();
        _RuleParam = new ComplexTypeDefinition(_RuleParamOBJ);
        _RuleParamOBJ.setDescription("The RuleParam type is used to succintly describe a parameter\n to be supplied to a rule when it is executed.");
        _RuleParamOBJ.addField("String         importStatement The import for the type of parameter");
        _RuleParamOBJ.addField("String         genericArgs     The generic arguments associated with this parameter");
        _RuleParamOBJ.addField("String         name            The name of the parameter");
        _RuleParamOBJ.addField("String         description     A description of the parameter");
        _RuleParamOBJ.setFieldSeparator(":");
        _RuleParamOBJ.setFile("metaSchema.dms");
        _RuleParamOBJ.setLineNumber("300");
        _RuleParamOBJ.setName("RuleParam");
        _RuleParam.setDefinedIn(this);
        addComplexTypeDefList(_RuleParam);

    }
}
