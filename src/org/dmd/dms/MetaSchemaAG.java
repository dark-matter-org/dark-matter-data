//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2012 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dms;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dms.meta.MetaGenerator.dumpMetaSchemaNew(MetaGenerator.java:267)
import org.dmd.dmc.DmcValueException;         // To handle potential value exceptions. - (MetaGenerator.java:250)
import org.dmd.dms.generated.dmo.*;           // Access to meta schema DMOs - (MetaGenerator.java:251)



/**
  * This class creates the basic definitions that allow for the definition of schemas.
  * Generated from: org.dmd.dms.meta.MetaGenerator.dumpMetaSchemaNew(MetaGenerator.java:271)
  */
abstract public class MetaSchemaAG extends SchemaDefinition {
    public static SchemaDefinition    _metaSchema;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:332)
    public static ClassDefinition     _ActionTriggerInfo;
    public static ClassDefinition     _DSDefinition;
    public static ClassDefinition     _DmsDefinition;
    public static ClassDefinition     _DSDefinitionModule;
    public static ClassDefinition     _ClassDefinition;
    public static ClassDefinition     _EnumDefinition;
    public static ClassDefinition     _TypeDefinition;
    public static ClassDefinition     _ComplexTypeDefinition;
    public static ClassDefinition     _ExtendedReferenceTypeDefinition;
    public static ClassDefinition     _AttributeDefinition;
    public static ClassDefinition     _SliceDefinition;
    public static ClassDefinition     _ActionDefinition;
    public static ClassDefinition     _SchemaDefinition;
    public static ClassDefinition     _RuleCategory;
    public static ClassDefinition     _RuleDefinition;
    public static ClassDefinition     _RuleData;
    public static ClassDefinition     _Dependency;
    public static ClassDefinition     _DependencyImplementation;
    public static ClassDefinition     _RunContext;
    public static ClassDefinition     _Concinnity;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:339)
    public static EnumDefinition      _ClassTypeEnum;
    public static EnumDefinition      _ModifyTypeEnum;
    public static EnumDefinition      _OperationalContextEnum;
    public static EnumDefinition      _RuleTypeEnum;
    public static EnumDefinition      _DataTypeEnum;
    public static EnumDefinition      _ValueTypeEnum;
    public static EnumDefinition      _BaseTypeEnum;
    public static EnumDefinition      _FilterTypeEnum;
    public static EnumDefinition      _DebugEnum;
    public static EnumDefinition      _WrapperTypeEnum;
    public static EnumDefinition      _OriginalTypeEnum;
    public static EnumDefinition      _GPBScalarTypeEnum;
    public static EnumDefinition      _GPBFieldTypeEnum;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:345)
    public static TypeDefinition      _String;
    public static TypeDefinition      _DmcObject;
    public static TypeDefinition      _ClassInfoRef;
    public static TypeDefinition      _NameContainer;
    public static TypeDefinition      _FilterContainer;
    public static TypeDefinition      _AttributeID;
    public static TypeDefinition      _Integer;
    public static TypeDefinition      _Float;
    public static TypeDefinition      _Double;
    public static TypeDefinition      _Long;
    public static TypeDefinition      _Short;
    public static TypeDefinition      _Byte;
    public static TypeDefinition      _Date;
    public static TypeDefinition      _Boolean;
    public static TypeDefinition      _EnumValue;
    public static TypeDefinition      _Modifier;
    public static TypeDefinition      _StringName;
    public static TypeDefinition      _DefinitionName;
    public static TypeDefinition      _CamelCaseName;
    public static TypeDefinition      _RuleName;
    public static TypeDefinition      _IntegerName;
    public static TypeDefinition      _LongName;
    public static TypeDefinition      _DotName;
    public static TypeDefinition      _ClassFilter;
    public static TypeDefinition      _IntegerToString;
    public static TypeDefinition      _StringToString;
    public static TypeDefinition      _UUIDLite;
    public static TypeDefinition      _UUIDName;
    public static TypeDefinition      _IntegerToBoolean;
    public static TypeDefinition      _IntegerToUUIDLite;
    public static TypeDefinition      _FullyQualifiedName;
    public static TypeDefinition      _LabelledIntegerDataPoint;
    public static TypeDefinition      _TimeDoubleDataPoint;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:357)
    public static AttributeDefinition _name;
    public static AttributeDefinition _dmdID;
    public static AttributeDefinition _schemaExtension;
    public static AttributeDefinition _typeClassName;
    public static AttributeDefinition _wrapperClassName;
    public static AttributeDefinition _nullReturnValue;
    public static AttributeDefinition _primitiveType;
    public static AttributeDefinition _abbrev;
    public static AttributeDefinition _classType;
    public static AttributeDefinition _dataType;
    public static AttributeDefinition _valueType;
    public static AttributeDefinition _isRefType;
    public static AttributeDefinition _isSchemaRtype;
    public static AttributeDefinition _isEnumType;
    public static AttributeDefinition _isDefaultValue;
    public static AttributeDefinition _description;
    public static AttributeDefinition _type;
    public static AttributeDefinition _internalTypeRef;
    public static AttributeDefinition _derivedFrom;
    public static AttributeDefinition _intendedToExtend;
    public static AttributeDefinition _msgKey;
    public static AttributeDefinition _usesInterface;
    public static AttributeDefinition _derivedClasses;
    public static AttributeDefinition _must;
    public static AttributeDefinition _may;
    public static AttributeDefinition _mustParm;
    public static AttributeDefinition _mayParm;
    public static AttributeDefinition _mustReturn;
    public static AttributeDefinition _mayReturn;
    public static AttributeDefinition _actions;
    public static AttributeDefinition _enumValue;
    public static AttributeDefinition _javaClass;
    public static AttributeDefinition _dmoImport;
    public static AttributeDefinition _dmoClass;
    public static AttributeDefinition _dmoAuxClass;
    public static AttributeDefinition _dmoAuxClassImport;
    public static AttributeDefinition _dmwAuxClass;
    public static AttributeDefinition _dmwAuxClassImport;
    public static AttributeDefinition _dmwImport;
    public static AttributeDefinition _dmwClass;
    public static AttributeDefinition _dmeImport;
    public static AttributeDefinition _dmeClass;
    public static AttributeDefinition _dmtImport;
    public static AttributeDefinition _dmtClass;
    public static AttributeDefinition _helperClassName;
    public static AttributeDefinition _getType;
    public static AttributeDefinition _getMethod;
    public static AttributeDefinition _ruleParam;
    public static AttributeDefinition _preserveNewlines;
    public static AttributeDefinition _msgParam;
    public static AttributeDefinition _schemaPackage;
    public static AttributeDefinition _dmwPackage;
    public static AttributeDefinition _classDefList;
    public static AttributeDefinition _typeDefList;
    public static AttributeDefinition _internalTypeDefList;
    public static AttributeDefinition _enumDefList;
    public static AttributeDefinition _attributeDefList;
    public static AttributeDefinition _actionDefList;
    public static AttributeDefinition _definedIn;
    public static AttributeDefinition _allowedParents;
    public static AttributeDefinition _example;
    public static AttributeDefinition _namingAttribute;
    public static AttributeDefinition _attachToClass;
    public static AttributeDefinition _dependsOn;
    public static AttributeDefinition _dependsOnRef;
    public static AttributeDefinition _defFiles;
    public static AttributeDefinition _enumInt;
    public static AttributeDefinition _enumString;
    public static AttributeDefinition _isGetAction;
    public static AttributeDefinition _obsoleteVersion;
    public static AttributeDefinition _file;
    public static AttributeDefinition _lineNumber;
    public static AttributeDefinition _maySendProgress;
    public static AttributeDefinition _internallyGenerated;
    public static AttributeDefinition _secure;
    public static AttributeDefinition _isNamedBy;
    public static AttributeDefinition _generatedFileHeader;
    public static AttributeDefinition _useWrapperType;
    public static AttributeDefinition _originalClass;
    public static AttributeDefinition _FQN;
    public static AttributeDefinition _modify;
    public static AttributeDefinition _schemaBaseID;
    public static AttributeDefinition _schemaIDRange;
    public static AttributeDefinition _subpackage;
    public static AttributeDefinition _createAttributeFactory;
    public static AttributeDefinition _nameAttributeDef;
    public static AttributeDefinition _dmwIteratorImport;
    public static AttributeDefinition _dmwIteratorClass;
    public static AttributeDefinition _dmtREFImport;
    public static AttributeDefinition _genericArgs;
    public static AttributeDefinition _isNameType;
    public static AttributeDefinition _keyClass;
    public static AttributeDefinition _keyImport;
    public static AttributeDefinition _genericArgsImport;
    public static AttributeDefinition _enumName;
    public static AttributeDefinition _integerName;
    public static AttributeDefinition _uuidName;
    public static AttributeDefinition _designatedNameAttribute;
    public static AttributeDefinition _fieldSeparator;
    public static AttributeDefinition _field;
    public static AttributeDefinition _extendedClass;
    public static AttributeDefinition _dotName;
    public static AttributeDefinition _altType;
    public static AttributeDefinition _altTypeImport;
    public static AttributeDefinition _selectAttribute;
    public static AttributeDefinition _sliceDefList;
    public static AttributeDefinition _requiredPart;
    public static AttributeDefinition _optionalPart;
    public static AttributeDefinition _opContext;
    public static AttributeDefinition _camelCaseName;
    public static AttributeDefinition _complexTypeDefList;
    public static AttributeDefinition _supportsBackrefTracking;
    public static AttributeDefinition _extendsInterface;
    public static AttributeDefinition _dependsOnSchema;
    public static AttributeDefinition _isHierarchicName;
    public static AttributeDefinition _internalUse;
    public static AttributeDefinition _dmwTypeToPackage;
    public static AttributeDefinition _dmwWrapperType;
    public static AttributeDefinition _isFilterType;
    public static AttributeDefinition _designatedFilterAttribute;
    public static AttributeDefinition _filterAttributeDef;
    public static AttributeDefinition _classFilter;
    public static AttributeDefinition _indexSize;
    public static AttributeDefinition _excludeFromContext;
    public static AttributeDefinition _extendedReferenceClass;
    public static AttributeDefinition _extendedReferenceTypeDefList;
    public static AttributeDefinition _isExtendedRefType;
    public static AttributeDefinition _longName;
    public static AttributeDefinition _baseType;
    public static AttributeDefinition _ruleType;
    public static AttributeDefinition _immediateHalt;
    public static AttributeDefinition _ruleTitle;
    public static AttributeDefinition _ruleCategory;
    public static AttributeDefinition _ruleCategoryID;
    public static AttributeDefinition _isExtensible;
    public static AttributeDefinition _ruleCategoryList;
    public static AttributeDefinition _ruleDefinitionList;
    public static AttributeDefinition _ruleDefinition;
    public static AttributeDefinition _dependency;
    public static AttributeDefinition _dependencies;
    public static AttributeDefinition _instantiation;
    public static AttributeDefinition _runContext;
    public static AttributeDefinition _useInterface;
    public static AttributeDefinition _classInfoFromParam;
    public static AttributeDefinition _ruleImport;
    public static AttributeDefinition _ruleName;
    public static AttributeDefinition _applyToClass;
    public static AttributeDefinition _attributeInfoFromParam;
    public static AttributeDefinition _ruleDataList;
    public static AttributeDefinition _applyToAttribute;
    public static AttributeDefinition _isDSDefinition;
    public static AttributeDefinition _stringName;
    public static AttributeDefinition _fileExtension;
    public static AttributeDefinition _moduleClassName;
    public static AttributeDefinition _baseDefinition;
    public static AttributeDefinition _moduleDependenceAttribute;
    public static AttributeDefinition _refersToDefsFromDSD;
    public static AttributeDefinition _definedInModuleAttribute;
    public static AttributeDefinition _dsdModuleDefinition;
    public static AttributeDefinition _dsdModuleList;
    public static AttributeDefinition _sortName;
    public static AttributeDefinition _supportDynamicSchemaLoading;
    public static AttributeDefinition _loadSchemaClass;
    public static AttributeDefinition _requiredBaseModule;
    public static AttributeDefinition _partOfDefinitionModule;
    public static AttributeDefinition _relatedToConcept;
    public static AttributeDefinition _tags;
    public static AttributeDefinition _nvp;
    public static AttributeDefinition _weakReference;
    public static AttributeDefinition _optimize;
    public static AttributeDefinition _version;
    public static AttributeDefinition _skip;
    public static AttributeDefinition _obsolete;
    public static AttributeDefinition _why;
    public static AttributeDefinition _comment;
    public static AttributeDefinition _hint;
    public static AttributeDefinition _question;
    public static AttributeDefinition _searchable;
    public static AttributeDefinition _relationship;
    public static AttributeDefinition _createIndex;
    public static AttributeDefinition _dmoFromModule;
    public static AttributeDefinition _objectClass;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:363)
    public static ComplexTypeDefinition _Field;
    public static ComplexTypeDefinition _Part;
    public static ComplexTypeDefinition _NameValuePair;
    public static ComplexTypeDefinition _SchemaAndReason;
    public static ComplexTypeDefinition _Example;
    public static ComplexTypeDefinition _Optimize;
    public static ComplexTypeDefinition _DmwTypeToWrapperType;
    public static ComplexTypeDefinition _RuleParam;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:369)
    public static RuleCategory        _Initialization;
    public static RuleCategory        _ObjectValidation;
    public static RuleCategory        _AttributeValidation;
    public static RuleCategory        _AttributeValidationWithResolver;
    public static RuleCategory        _UCOValidation;
    public static RuleCategory        _UCOAttributeNormalization;
    public static RuleCategory        _UCOObjectNormalization;
    public static RuleCategory        _UCOMapping;
    public static RuleCategory        _UCOAttributeAudit;
    public static RuleCategory        _UCOObjectAudit;

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpStaticDefinitions(MetaGenerator.java:375)

    public MetaSchemaAG() throws DmcValueException {

        super("meta");

        // We only ever want to initialize the schema once, so check
        // to see if we've initialized the first class definition
        if (_metaSchema == null){
            _metaSchema = this;
            staticRefName = new String("MetaSchema._");

            this.addDescription("The meta schema defines the elements used to define schemas.");
            this.setDotName("meta.SchemaDefinition");
            this.setSchemaPackage("org.dmd.dms");
            this.setDmwPackage("org.dmd.dms");
            this.setSchemaBaseID(0);
            this.setSchemaIDRange(200);
            initClasses();
            initAttributes();
            initTypes();
            initEnums();
            initRuleCategories();
            initComplexTypes();
        }
    }

    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitClasses(MetaGenerator.java:383)
    private void initClasses() throws DmcValueException {

        ClassDefinitionDMO _ActionTriggerInfoOBJ = new ClassDefinitionDMO();
        _ActionTriggerInfo = new ClassDefinition(_ActionTriggerInfoOBJ,MetaDMSAG.__ActionTriggerInfo);
        _ActionTriggerInfoOBJ.setClassType("ABSTRACT");
        _ActionTriggerInfoOBJ.addDescription("The ActionTriggerInfo class simply provides a common base for the bundle\n of information required to remotely trigger an action on an object. \n Derivatives of this class are generated as part of the DMO generation\n process and have action specific interfaces to handle the parameters \n required by an ActionDefinition.\n <p/>\n This mechanism is a replacement for the concept that ActionRequests were\n EXTENSIBLE objects. This way, the user can ask an object for the \n ActionTriggerInfo (ATI) for a particular action and have a well defined\n interface to specify the parameters for the action.");
        _ActionTriggerInfoOBJ.setDmdID("14");
        _ActionTriggerInfoOBJ.setDmoImport("org.dmd.dms.generated.dmo.ActionTriggerInfoDMO");
        _ActionTriggerInfoOBJ.setDotName("meta.ActionTriggerInfo.ClassDefinition");
        _ActionTriggerInfoOBJ.setFile("metaSchema.dms");
        _ActionTriggerInfoOBJ.setJavaClass("org.dmd.dms.extended.ActionTriggerInfo");
        _ActionTriggerInfoOBJ.setLineNumber("2325");
        _ActionTriggerInfoOBJ.addMust("meta.name");
        _ActionTriggerInfoOBJ.setName("ActionTriggerInfo");
        _ActionTriggerInfo.setDefinedIn(this);
        addClassDefList(_ActionTriggerInfo);

        ClassDefinitionDMO _DSDefinitionOBJ = new ClassDefinitionDMO();
        _DSDefinition = new ClassDefinition(_DSDefinitionOBJ,MetaDMSAG.__DSDefinition);
        _DSDefinitionOBJ.setClassType("ABSTRACT");
        _DSDefinitionOBJ.addDescription("The domain specific definition (DSDefinition) forms the basis for all definitions\n that use dark-matter as their basis. The initial dark-matter mechanisms were focussed only on \n schema for data objects, but, as the project developed, other, domain specific sets of definitions\n were added. Eventually, a pattern emerged in terms of these various sets of definitions and\n some additional higher order concepts were introduced to make the creation of new, domain specific\n definition sets easier and to allow them to build on and use each others' definitions in a \n coherent manner.\n <p/>\n For instance, the Model View Whatever (MVW) framework, builds on the dark-matter schema \n concepts and introduces definitions that align with the Google Web Toolkit (GWT) conceptual model\n of the elements that comprise GWT applications and the various relationships that exist between\n them. The infrastructure needed to parse, manage and use those definitions to generate code\n and documentation are very similar to those used in the base dark-matter schema mechanisms, but\n they had to be hand built for the domain.\n <p/>\n Other kinds of domain specific definitions started to emerge, Google Protocol Buffer (GPB),\n Simple Network Management Protocol (SNMP) etc. Having to build the infrastructure for these \n definitions each time was tedious and, in the spirit of the rest of dark-matter, lent themselves\n to being defined, generated and extended to make the process the easier.\n <p/>\n Likewise, the code generation mechanisms originally employed have evolved and the more generic\n concept of artifact generation, based on definition sets, was introduced to allow for more rapid\n creation of utilities that generate code or documentation or other types of specifications.");
        _DSDefinitionOBJ.setDmdID("1");
        _DSDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.DSDefinitionDMO");
        _DSDefinitionOBJ.setDotName("meta.DSDefinition.ClassDefinition");
        _DSDefinitionOBJ.setFile("metaSchema.dms");
        _DSDefinitionOBJ.setIsNamedBy("meta.name");
        _DSDefinitionOBJ.setJavaClass("org.dmd.dms.DSDefinition");
        _DSDefinitionOBJ.setLineNumber("2379");
        _DSDefinitionOBJ.addMay("meta.description");
        _DSDefinitionOBJ.addMay("meta.comment");
        _DSDefinitionOBJ.addMay("meta.question");
        _DSDefinitionOBJ.addMay("meta.example");
        _DSDefinitionOBJ.addMay("meta.hint");
        _DSDefinitionOBJ.addMay("meta.sortName");
        _DSDefinitionOBJ.addMay("meta.tags");
        _DSDefinitionOBJ.addMay("meta.nvp");
        _DSDefinitionOBJ.addMay("meta.optimize");
        _DSDefinitionOBJ.addMay("meta.version");
        _DSDefinitionOBJ.addMay("meta.skip");
        _DSDefinitionOBJ.addMay("meta.obsolete");
        _DSDefinitionOBJ.addMay("meta.why");
        _DSDefinitionOBJ.addMay("meta.searchable");
        _DSDefinitionOBJ.addMay("meta.relationship");
        _DSDefinitionOBJ.addMay("meta.definedIn");
        _DSDefinitionOBJ.addMay("meta.file");
        _DSDefinitionOBJ.addMay("meta.lineNumber");
        _DSDefinitionOBJ.addMay("meta.dotName");
        _DSDefinitionOBJ.addMay("meta.dmoFromModule");
        _DSDefinitionOBJ.addMust("meta.name");
        _DSDefinitionOBJ.setName("DSDefinition");
        _DSDefinitionOBJ.setUseWrapperType("EXTENDED");
        _DSDefinition.setDefinedIn(this);
        addClassDefList(_DSDefinition);

        ClassDefinitionDMO _DmsDefinitionOBJ = new ClassDefinitionDMO();
        _DmsDefinition = new ClassDefinition(_DmsDefinitionOBJ,MetaDMSAG.__DmsDefinition);
        _DmsDefinitionOBJ.setClassType("ABSTRACT");
        _DmsDefinitionOBJ.setDerivedFrom("meta.DSDefinition");
        _DmsDefinitionOBJ.addDescription("The DmsDefinition class provides a common base for all dark-matter schema (DMS) definition classes.");
        _DmsDefinitionOBJ.setDmdID("2");
        _DmsDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.DmsDefinitionDMO");
        _DmsDefinitionOBJ.setDotName("meta.DmsDefinition.ClassDefinition");
        _DmsDefinitionOBJ.setFile("metaSchema.dms");
        _DmsDefinitionOBJ.setIsNamedBy("meta.name");
        _DmsDefinitionOBJ.setJavaClass("org.dmd.dms.DmsDefinition");
        _DmsDefinitionOBJ.setLineNumber("2392");
        _DmsDefinitionOBJ.addMay("meta.relatedToConcept");
        _DmsDefinitionOBJ.addMust("meta.name");
        _DmsDefinitionOBJ.setName("DmsDefinition");
        _DmsDefinitionOBJ.setUseWrapperType("EXTENDED");
        _DmsDefinition.setDefinedIn(this);
        addClassDefList(_DmsDefinition);

        ClassDefinitionDMO _DSDefinitionModuleOBJ = new ClassDefinitionDMO();
        _DSDefinitionModule = new ClassDefinition(_DSDefinitionModuleOBJ,MetaDMSAG.__DSDefinitionModule);
        _DSDefinitionModuleOBJ.setClassType("STRUCTURAL");
        _DSDefinitionModuleOBJ.setDerivedFrom("meta.DmsDefinition");
        _DSDefinitionModuleOBJ.addDescription("The DSDefinitionModule is a definition that defines a collection of definitions\n and provides a basis for the generation of various artifacts that allow for parsing and\n management of that set of definitions.\n <p/>\n The specific of a definition module will result in the generation of a ClassDefinition for\n the specified module type and thus, the dmdID associated with it must be unique across the\n set of classes that comprise the definitions encompassed by the module.\n <p/>\n The ClassDefinition will be named by name and will have the may and must attributes specified\n as part of the DSDefinitionModule.");
        _DSDefinitionModuleOBJ.setDmdID("3");
        _DSDefinitionModuleOBJ.setDmoImport("org.dmd.dms.generated.dmo.DSDefinitionModuleDMO");
        _DSDefinitionModuleOBJ.setDotName("meta.DSDefinitionModule.ClassDefinition");
        _DSDefinitionModuleOBJ.setFile("metaSchema.dms");
        _DSDefinitionModuleOBJ.setIsNamedBy("meta.name");
        _DSDefinitionModuleOBJ.setJavaClass("org.dmd.dms.DSDefinitionModule");
        _DSDefinitionModuleOBJ.setLineNumber("2427");
        _DSDefinitionModuleOBJ.addMay("meta.refersToDefsFromDSD");
        _DSDefinitionModuleOBJ.addMay("meta.definedInModuleAttribute");
        _DSDefinitionModuleOBJ.addMay("meta.may");
        _DSDefinitionModuleOBJ.addMay("meta.must");
        _DSDefinitionModuleOBJ.addMay("meta.supportDynamicSchemaLoading");
        _DSDefinitionModuleOBJ.addMay("meta.requiredBaseModule");
        _DSDefinitionModuleOBJ.addMay("meta.definedIn");
        _DSDefinitionModuleOBJ.addMust("meta.name");
        _DSDefinitionModuleOBJ.addMust("meta.fileExtension");
        _DSDefinitionModuleOBJ.addMust("meta.dmdID");
        _DSDefinitionModuleOBJ.addMust("meta.moduleClassName");
        _DSDefinitionModuleOBJ.addMust("meta.moduleDependenceAttribute");
        _DSDefinitionModuleOBJ.addMust("meta.baseDefinition");
        _DSDefinitionModuleOBJ.setName("DSDefinitionModule");
        _DSDefinitionModuleOBJ.setUseWrapperType("EXTENDED");
        _DSDefinitionModule.setDefinedIn(this);
        addClassDefList(_DSDefinitionModule);

        ClassDefinitionDMO _ClassDefinitionOBJ = new ClassDefinitionDMO();
        _ClassDefinition = new ClassDefinition(_ClassDefinitionOBJ,MetaDMSAG.__ClassDefinition);
        _ClassDefinitionOBJ.setClassType("STRUCTURAL");
        _ClassDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _ClassDefinitionOBJ.addDescription("This class provides the basic mechanism to define new classes for a schema.");
        _ClassDefinitionOBJ.setDmdID("4");
        _ClassDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ClassDefinitionDMO");
        _ClassDefinitionOBJ.setDotName("meta.ClassDefinition.ClassDefinition");
        _ClassDefinitionOBJ.setFile("metaSchema.dms");
        _ClassDefinitionOBJ.setIsDSDefinition("true");
        _ClassDefinitionOBJ.setIsNamedBy("meta.name");
        _ClassDefinitionOBJ.setJavaClass("org.dmd.dms.ClassDefinition");
        _ClassDefinitionOBJ.setLineNumber("2509");
        _ClassDefinitionOBJ.addMay("meta.description");
        _ClassDefinitionOBJ.addMay("meta.derivedFrom");
        _ClassDefinitionOBJ.addMay("meta.must");
        _ClassDefinitionOBJ.addMay("meta.may");
        _ClassDefinitionOBJ.addMay("meta.isNamedBy");
        _ClassDefinitionOBJ.addMay("meta.javaClass");
        _ClassDefinitionOBJ.addMay("meta.intendedToExtend");
        _ClassDefinitionOBJ.addMay("meta.usesInterface");
        _ClassDefinitionOBJ.addMay("meta.useWrapperType");
        _ClassDefinitionOBJ.addMay("meta.dmwWrapperType");
        _ClassDefinitionOBJ.addMay("meta.allowedParents");
        _ClassDefinitionOBJ.addMay("meta.subpackage");
        _ClassDefinitionOBJ.addMay("meta.dataType");
        _ClassDefinitionOBJ.addMay("meta.supportsBackrefTracking");
        _ClassDefinitionOBJ.addMay("meta.excludeFromContext");
        _ClassDefinitionOBJ.addMay("meta.abbrev");
        _ClassDefinitionOBJ.addMay("meta.obsoleteVersion");
        _ClassDefinitionOBJ.addMay("meta.isDSDefinition");
        _ClassDefinitionOBJ.addMay("meta.partOfDefinitionModule");
        _ClassDefinitionOBJ.addMay("meta.createIndex");
        _ClassDefinitionOBJ.addMay("meta.internallyGenerated");
        _ClassDefinitionOBJ.addMay("meta.ruleDefinition");
        _ClassDefinitionOBJ.addMay("meta.dsdModuleDefinition");
        _ClassDefinitionOBJ.addMay("meta.derivedClasses");
        _ClassDefinitionOBJ.addMay("meta.actions");
        _ClassDefinitionOBJ.addMay("meta.internalTypeRef");
        _ClassDefinitionOBJ.addMay("meta.dmoImport");
        _ClassDefinitionOBJ.addMay("meta.dmoClass");
        _ClassDefinitionOBJ.addMay("meta.dmwImport");
        _ClassDefinitionOBJ.addMay("meta.dmwClass");
        _ClassDefinitionOBJ.addMay("meta.dmeImport");
        _ClassDefinitionOBJ.addMay("meta.dmeClass");
        _ClassDefinitionOBJ.addMay("meta.dmtImport");
        _ClassDefinitionOBJ.addMay("meta.dmtREFImport");
        _ClassDefinitionOBJ.addMay("meta.dmtClass");
        _ClassDefinitionOBJ.addMay("meta.dmoAuxClass");
        _ClassDefinitionOBJ.addMay("meta.dmoAuxClassImport");
        _ClassDefinitionOBJ.addMay("meta.dmwAuxClass");
        _ClassDefinitionOBJ.addMay("meta.dmwAuxClassImport");
        _ClassDefinitionOBJ.addMay("meta.dmwIteratorImport");
        _ClassDefinitionOBJ.addMay("meta.dmwIteratorClass");
        _ClassDefinitionOBJ.addMust("meta.name");
        _ClassDefinitionOBJ.addMust("meta.classType");
        _ClassDefinitionOBJ.addMust("meta.dmdID");
        _ClassDefinitionOBJ.setName("ClassDefinition");
        _ClassDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ClassDefinition.setDefinedIn(this);
        addClassDefList(_ClassDefinition);

        ClassDefinitionDMO _EnumDefinitionOBJ = new ClassDefinitionDMO();
        _EnumDefinition = new ClassDefinition(_EnumDefinitionOBJ,MetaDMSAG.__EnumDefinition);
        _EnumDefinitionOBJ.setClassType("STRUCTURAL");
        _EnumDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _EnumDefinitionOBJ.addDescription("The EnumDefinition allows for the definition of real Java enums that provide\n inherent mapping of the string and integer values of the enum into actual enum values. Once\n defined, EnumDefinitions can be used where ever you would use a TypeDefinition name i.e.\n they can be used in the type attribute of AttributeDefinitions.");
        _EnumDefinitionOBJ.setDmdID("5");
        _EnumDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.EnumDefinitionDMO");
        _EnumDefinitionOBJ.setDotName("meta.EnumDefinition.ClassDefinition");
        _EnumDefinitionOBJ.setFile("metaSchema.dms");
        _EnumDefinitionOBJ.setIsDSDefinition("true");
        _EnumDefinitionOBJ.setIsNamedBy("meta.name");
        _EnumDefinitionOBJ.setJavaClass("org.dmd.dms.EnumDefinition");
        _EnumDefinitionOBJ.setLineNumber("2528");
        _EnumDefinitionOBJ.addMay("meta.description");
        _EnumDefinitionOBJ.addMay("meta.nullReturnValue");
        _EnumDefinitionOBJ.addMust("meta.name");
        _EnumDefinitionOBJ.addMust("meta.enumValue");
        _EnumDefinitionOBJ.setName("EnumDefinition");
        _EnumDefinitionOBJ.setUseWrapperType("EXTENDED");
        _EnumDefinition.setDefinedIn(this);
        addClassDefList(_EnumDefinition);

        ClassDefinitionDMO _TypeDefinitionOBJ = new ClassDefinitionDMO();
        _TypeDefinition = new ClassDefinition(_TypeDefinitionOBJ,MetaDMSAG.__TypeDefinition);
        _TypeDefinitionOBJ.setClassType("STRUCTURAL");
        _TypeDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _TypeDefinitionOBJ.addDescription("The <code> TypeDefinition </code> is used to define the types of attributes that can be used\n as the basis for attribute values. The name of the type definition should be the same as the\n actual Java class that is used to store the value of an attribute e.g. the name of the type\n used to store strings is String. The <code> typeClassName </code> is the fully qualified name of the class\n derived from <code>DmcAttribute</code> that stores this type of value; they are always, by convention,\n named <code>DmcTypeXXX</code>.\n <p/>\n <code> TypeDefinitions </code> are automatically generated internally for <code>ClassDefinitions</code>, \n <code>ComplexTypeDefinitions</code>, <code>ExtendedReferenceTypeDefinitions</code> and\n <code>EnumDefinitions</code> so that these objects can be referred to via the <code>type</code> attribute of <code> AttributeDefinitions</code>.\n These definitions are marked as <code> internallyGenerated </code>.\n <p/>\n The simplest <code> TypeDefinition </code> would look something like:\n <pre>\n TypeDefinition\n name           String\n typeClassName  org.dmd.dmc.types.DmcTypeString\n description    Provides support for String values.\n </pre>\n This form would be used for attribute types whose base type originates in <code> java.lang</code>.\n The dark-matter base types include: Boolean, Byte, Double, Float, Integer, Long, Short and String.\n <p/>\n <code>TypeDefinitions</code> also support the concept of specifying a <code> nullReturnValue </code>\n for the entire type i.e. whenever an attribute of the specified type is accessed, it will return\n that value when the attribute doesn't exist in the object. An example of this is the <code> Boolean </code> type:\n <pre>\n TypeDefinition\n name            Boolean\n typeClassName   org.dmd.dmc.types.DmcTypeBoolean\n nullReturnValue false\n description     Provides support for Boolean values. This type makes use of the\n                 nullReturnValue flag so that, even if there is no\n                 value for an attribute of this type, a value of false will\n                 be returned.\n </pre>\n <p/>\n The next most common form of <code> TypeDefinition </code> adds the <code> primitiveType </code>\n attribute. This is required for code generation so that we can import the appropriate type for\n use in the various getter/setter methods. An example would be the <code> Date </code> type.\n <pre>\n TypeDefinition\n name           Date\n typeClassName  org.dmd.dmc.types.DmcTypeDate\n primitiveType  java.util.Date\n description    Provides support for Date values.\n </pre>\n Another common form of <code>TypeDefinition</code> is the definition of a name type. Object\n naming is a fundamental aspect of DMOs, with all object names being based on the <code>DmcObjectName</code>.\n Flagging a type as being a name type also implies the definition of a designated naming attribute\n associated with the type. This mechanism allows for the transport of names that are self\n describing in terms of their implementation type. This feature supports the <code>NameContainer</code>\n type that allows any name to be transported in things like dark-matter protocol <code>GetRequest</code>.\n An example of a naming type would be:\n <pre>\n TypeDefinition\n name           CamelCaseName\n typeClassName  org.dmd.dmc.types.DmcTypeCamelCaseName\n primitiveType  org.dmd.dmc.types.CamelCaseName\n isNameType     true\n description    The CamelCaseName is a string based name that must start with\n                an alpha character which is followed by a mix of alphanumerics.\n </pre>\n And its associated designated naming attribute would be:\n <pre>\n AttributeDefinition\n name                     camelCaseName\n dmdID                    116\n type                     CamelCaseName\n designatedNameAttribute  true\n description              The camelCaseName attribute is used to store a single camelCase\n                          format name for something. The name starts with a single letter\n                          and can be followed by a mix of letters and numbers. No spaces or \n                          other characters are allowed.\n </pre>\n The last form of type definition is one that includes some additional information to provide\n a convenient, alternate interface for the generation of member functions associated with\n a container type; this concept is pretty much limited to the meta-schema, so it is unlikely\n that non-contributors to dark-matter will make use of this concept. However, here is an example:\n <pre>\n TypeDefinition\n name           NameContainer\n typeClassName  org.dmd.dmc.types.DmcTypeNameContainer\n primitiveType  org.dmd.dmc.types.NameContainer\n altType        DmcObjectName\n altTypeImport  org.dmd.dmc.DmcObjectName\n description    The NameContainer type allows for the storage of object names of different types...\n </pre>");
        _TypeDefinitionOBJ.setDmdID("6");
        _TypeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.TypeDefinitionDMO");
        _TypeDefinitionOBJ.setDotName("meta.TypeDefinition.ClassDefinition");
        _TypeDefinitionOBJ.setFile("metaSchema.dms");
        _TypeDefinitionOBJ.setIsDSDefinition("true");
        _TypeDefinitionOBJ.setIsNamedBy("meta.name");
        _TypeDefinitionOBJ.setJavaClass("org.dmd.dms.TypeDefinition");
        _TypeDefinitionOBJ.setLineNumber("2657");
        _TypeDefinitionOBJ.addMay("meta.description");
        _TypeDefinitionOBJ.addMay("meta.primitiveType");
        _TypeDefinitionOBJ.addMay("meta.nullReturnValue");
        _TypeDefinitionOBJ.addMay("meta.altType");
        _TypeDefinitionOBJ.addMay("meta.altTypeImport");
        _TypeDefinitionOBJ.addMay("meta.keyClass");
        _TypeDefinitionOBJ.addMay("meta.keyImport");
        _TypeDefinitionOBJ.addMay("meta.wrapperClassName");
        _TypeDefinitionOBJ.addMay("meta.internallyGenerated");
        _TypeDefinitionOBJ.addMay("meta.helperClassName");
        _TypeDefinitionOBJ.addMay("meta.dmwIteratorImport");
        _TypeDefinitionOBJ.addMay("meta.dmwIteratorClass");
        _TypeDefinitionOBJ.addMay("meta.isEnumType");
        _TypeDefinitionOBJ.addMay("meta.isNameType");
        _TypeDefinitionOBJ.addMay("meta.isHierarchicName");
        _TypeDefinitionOBJ.addMay("meta.isFilterType");
        _TypeDefinitionOBJ.addMay("meta.isExtendedRefType");
        _TypeDefinitionOBJ.addMay("meta.isRefType");
        _TypeDefinitionOBJ.addMay("meta.enumName");
        _TypeDefinitionOBJ.addMay("meta.originalClass");
        _TypeDefinitionOBJ.addMay("meta.nameAttributeDef");
        _TypeDefinitionOBJ.addMay("meta.filterAttributeDef");
        _TypeDefinitionOBJ.addMay("meta.genericArgs");
        _TypeDefinitionOBJ.addMust("meta.name");
        _TypeDefinitionOBJ.addMust("meta.typeClassName");
        _TypeDefinitionOBJ.setName("TypeDefinition");
        _TypeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _TypeDefinition.setDefinedIn(this);
        addClassDefList(_TypeDefinition);

        ClassDefinitionDMO _ComplexTypeDefinitionOBJ = new ClassDefinitionDMO();
        _ComplexTypeDefinition = new ClassDefinition(_ComplexTypeDefinitionOBJ,MetaDMSAG.__ComplexTypeDefinition);
        _ComplexTypeDefinitionOBJ.setClassType("STRUCTURAL");
        _ComplexTypeDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _ComplexTypeDefinitionOBJ.addDescription("The ComplexTypeDefinition provides a mechanism for defining the structure of\n a complex type composed of other types. From this definition, a new DmcType is generated that\n has all of the required methods automatically defined.\n <p/>\n An example definition is the RuleParam:\n <pre>\n ComplexTypeDefinition\n name			RuleParam\n fieldSeparator :\n field String importStatement The import for the type of parameter\n field String genericArgs     The generic arguments associated with this parameter\n field String name            The name of the parameter\n field String description     A description of the parameter\n description The RuleParam type is used to succintly describe a parameter\n  to be supplied to a rule when it is executed.\n </pre>\n In this case, the type has four fields, all of String type. An example of the String\n format of the field might be: <pre> org.dmc.DmcObject::obj:The object to be validated</pre> In this\n case, the generic args field isn't available and will be the empty string. When a field\n seperator is specified, all fields are, more or less optional, but the underlying type\n must be able to handle the empty string as a valid value. This wouldn't work with Integer.\n <p/>\n If no field separator is specified, the separator is assumed to be whitespace and additional\n whitespace is consumed during the parsing.");
        _ComplexTypeDefinitionOBJ.setDmdID("7");
        _ComplexTypeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ComplexTypeDefinitionDMO");
        _ComplexTypeDefinitionOBJ.setDotName("meta.ComplexTypeDefinition.ClassDefinition");
        _ComplexTypeDefinitionOBJ.setFile("metaSchema.dms");
        _ComplexTypeDefinitionOBJ.setIsDSDefinition("true");
        _ComplexTypeDefinitionOBJ.setIsNamedBy("meta.name");
        _ComplexTypeDefinitionOBJ.setJavaClass("org.dmd.dms.ComplexTypeDefinition");
        _ComplexTypeDefinitionOBJ.setLineNumber("2700");
        _ComplexTypeDefinitionOBJ.addMay("meta.field");
        _ComplexTypeDefinitionOBJ.addMay("meta.requiredPart");
        _ComplexTypeDefinitionOBJ.addMay("meta.optionalPart");
        _ComplexTypeDefinitionOBJ.addMay("meta.fieldSeparator");
        _ComplexTypeDefinitionOBJ.addMay("meta.extendedClass");
        _ComplexTypeDefinitionOBJ.addMay("meta.description");
        _ComplexTypeDefinitionOBJ.addMust("meta.name");
        _ComplexTypeDefinitionOBJ.setName("ComplexTypeDefinition");
        _ComplexTypeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ComplexTypeDefinition.setDefinedIn(this);
        addClassDefList(_ComplexTypeDefinition);

        ClassDefinitionDMO _ExtendedReferenceTypeDefinitionOBJ = new ClassDefinitionDMO();
        _ExtendedReferenceTypeDefinition = new ClassDefinition(_ExtendedReferenceTypeDefinitionOBJ,MetaDMSAG.__ExtendedReferenceTypeDefinition);
        _ExtendedReferenceTypeDefinitionOBJ.setClassType("STRUCTURAL");
        _ExtendedReferenceTypeDefinitionOBJ.setDerivedFrom("meta.ComplexTypeDefinition");
        _ExtendedReferenceTypeDefinitionOBJ.addDescription("The ExtendedReferenceTypeDefinition provides a mechanism for extending \n the automatically generated named object reference attribute types with additional\n information. This can be seen as adding additional information to the relationship\n between two objects.");
        _ExtendedReferenceTypeDefinitionOBJ.setDmdID("8");
        _ExtendedReferenceTypeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ExtendedReferenceTypeDefinitionDMO");
        _ExtendedReferenceTypeDefinitionOBJ.setDotName("meta.ExtendedReferenceTypeDefinition.ClassDefinition");
        _ExtendedReferenceTypeDefinitionOBJ.setFile("metaSchema.dms");
        _ExtendedReferenceTypeDefinitionOBJ.setIsDSDefinition("true");
        _ExtendedReferenceTypeDefinitionOBJ.setIsNamedBy("meta.name");
        _ExtendedReferenceTypeDefinitionOBJ.setJavaClass("org.dmd.dms.ExtendedReferenceTypeDefinition");
        _ExtendedReferenceTypeDefinitionOBJ.setLineNumber("2717");
        _ExtendedReferenceTypeDefinitionOBJ.addMust("meta.name");
        _ExtendedReferenceTypeDefinitionOBJ.addMust("meta.extendedReferenceClass");
        _ExtendedReferenceTypeDefinitionOBJ.setName("ExtendedReferenceTypeDefinition");
        _ExtendedReferenceTypeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ExtendedReferenceTypeDefinition.setDefinedIn(this);
        addClassDefList(_ExtendedReferenceTypeDefinition);

        ClassDefinitionDMO _AttributeDefinitionOBJ = new ClassDefinitionDMO();
        _AttributeDefinition = new ClassDefinition(_AttributeDefinitionOBJ,MetaDMSAG.__AttributeDefinition);
        _AttributeDefinitionOBJ.setClassType("STRUCTURAL");
        _AttributeDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _AttributeDefinitionOBJ.addDescription("This class is used to define attributes to be used\n as part of a class definition.");
        _AttributeDefinitionOBJ.setDmdID("9");
        _AttributeDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.AttributeDefinitionDMO");
        _AttributeDefinitionOBJ.setDotName("meta.AttributeDefinition.ClassDefinition");
        _AttributeDefinitionOBJ.setFile("metaSchema.dms");
        _AttributeDefinitionOBJ.setIsDSDefinition("true");
        _AttributeDefinitionOBJ.setIsNamedBy("meta.name");
        _AttributeDefinitionOBJ.setJavaClass("org.dmd.dms.AttributeDefinition");
        _AttributeDefinitionOBJ.setLineNumber("2748");
        _AttributeDefinitionOBJ.addMay("meta.description");
        _AttributeDefinitionOBJ.addMay("meta.valueType");
        _AttributeDefinitionOBJ.addMay("meta.nullReturnValue");
        _AttributeDefinitionOBJ.addMay("meta.abbrev");
        _AttributeDefinitionOBJ.addMay("meta.obsoleteVersion");
        _AttributeDefinitionOBJ.addMay("meta.secure");
        _AttributeDefinitionOBJ.addMay("meta.dataType");
        _AttributeDefinitionOBJ.addMay("meta.dmdID");
        _AttributeDefinitionOBJ.addMay("meta.genericArgs");
        _AttributeDefinitionOBJ.addMay("meta.genericArgsImport");
        _AttributeDefinitionOBJ.addMay("meta.designatedNameAttribute");
        _AttributeDefinitionOBJ.addMay("meta.designatedFilterAttribute");
        _AttributeDefinitionOBJ.addMay("meta.internalUse");
        _AttributeDefinitionOBJ.addMay("meta.indexSize");
        _AttributeDefinitionOBJ.addMay("meta.preserveNewlines");
        _AttributeDefinitionOBJ.addMay("meta.weakReference");
        _AttributeDefinitionOBJ.addMust("meta.name");
        _AttributeDefinitionOBJ.addMust("meta.type");
        _AttributeDefinitionOBJ.setName("AttributeDefinition");
        _AttributeDefinitionOBJ.setUseWrapperType("EXTENDED");
        _AttributeDefinition.setDefinedIn(this);
        addClassDefList(_AttributeDefinition);

        ClassDefinitionDMO _SliceDefinitionOBJ = new ClassDefinitionDMO();
        _SliceDefinition = new ClassDefinition(_SliceDefinitionOBJ,MetaDMSAG.__SliceDefinition);
        _SliceDefinitionOBJ.setClassType("STRUCTURAL");
        _SliceDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _SliceDefinitionOBJ.addDescription("The SliceDefinition class is used to define a named set of attributes\n that are used to retrieve a slice of an object i.e. an abbreviated set of\n values. These are used in the generation of static, named DmcSliceInfo instances.");
        _SliceDefinitionOBJ.setDmdID("10");
        _SliceDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.SliceDefinitionDMO");
        _SliceDefinitionOBJ.setDotName("meta.SliceDefinition.ClassDefinition");
        _SliceDefinitionOBJ.setFile("metaSchema.dms");
        _SliceDefinitionOBJ.setIsDSDefinition("true");
        _SliceDefinitionOBJ.setIsNamedBy("meta.name");
        _SliceDefinitionOBJ.setJavaClass("org.dmd.dms.SliceDefinition");
        _SliceDefinitionOBJ.setLineNumber("2765");
        _SliceDefinitionOBJ.addMay("meta.description");
        _SliceDefinitionOBJ.addMust("meta.name");
        _SliceDefinitionOBJ.addMust("meta.selectAttribute");
        _SliceDefinitionOBJ.setName("SliceDefinition");
        _SliceDefinitionOBJ.setUseWrapperType("EXTENDED");
        _SliceDefinition.setDefinedIn(this);
        addClassDefList(_SliceDefinition);

        ClassDefinitionDMO _ActionDefinitionOBJ = new ClassDefinitionDMO();
        _ActionDefinition = new ClassDefinition(_ActionDefinitionOBJ,MetaDMSAG.__ActionDefinition);
        _ActionDefinitionOBJ.setClassType("STRUCTURAL");
        _ActionDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _ActionDefinitionOBJ.addDescription("This class is used to define the actions that may be triggered on\n an object.");
        _ActionDefinitionOBJ.setDmdID("11");
        _ActionDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.ActionDefinitionDMO");
        _ActionDefinitionOBJ.setDotName("meta.ActionDefinition.ClassDefinition");
        _ActionDefinitionOBJ.setFile("metaSchema.dms");
        _ActionDefinitionOBJ.setIsDSDefinition("true");
        _ActionDefinitionOBJ.setIsNamedBy("meta.name");
        _ActionDefinitionOBJ.setJavaClass("org.dmd.dms.ActionDefinition");
        _ActionDefinitionOBJ.setLineNumber("2793");
        _ActionDefinitionOBJ.addMay("meta.description");
        _ActionDefinitionOBJ.addMay("meta.mustParm");
        _ActionDefinitionOBJ.addMay("meta.mayParm");
        _ActionDefinitionOBJ.addMay("meta.mustReturn");
        _ActionDefinitionOBJ.addMay("meta.mayReturn");
        _ActionDefinitionOBJ.addMay("meta.attachToClass");
        _ActionDefinitionOBJ.addMay("meta.isGetAction");
        _ActionDefinitionOBJ.addMay("meta.obsoleteVersion");
        _ActionDefinitionOBJ.addMay("meta.maySendProgress");
        _ActionDefinitionOBJ.addMust("meta.name");
        _ActionDefinitionOBJ.setName("ActionDefinition");
        _ActionDefinitionOBJ.setUseWrapperType("EXTENDED");
        _ActionDefinition.setDefinedIn(this);
        addClassDefList(_ActionDefinition);

        ClassDefinitionDMO _SchemaDefinitionOBJ = new ClassDefinitionDMO();
        _SchemaDefinition = new ClassDefinition(_SchemaDefinitionOBJ,MetaDMSAG.__SchemaDefinition);
        _SchemaDefinitionOBJ.setClassType("STRUCTURAL");
        _SchemaDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _SchemaDefinitionOBJ.addDescription("This class is used to define a schema as a discrete, nameable entity.");
        _SchemaDefinitionOBJ.setDmdID("12");
        _SchemaDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.SchemaDefinitionDMO");
        _SchemaDefinitionOBJ.setDotName("meta.SchemaDefinition.ClassDefinition");
        _SchemaDefinitionOBJ.setFile("metaSchema.dms");
        _SchemaDefinitionOBJ.setIsNamedBy("meta.name");
        _SchemaDefinitionOBJ.setJavaClass("org.dmd.dms.SchemaDefinition");
        _SchemaDefinitionOBJ.setLineNumber("2842");
        _SchemaDefinitionOBJ.addMay("meta.dependsOn");
        _SchemaDefinitionOBJ.addMay("meta.defFiles");
        _SchemaDefinitionOBJ.addMay("meta.generatedFileHeader");
        _SchemaDefinitionOBJ.addMay("meta.dmwPackage");
        _SchemaDefinitionOBJ.addMay("meta.schemaExtension");
        _SchemaDefinitionOBJ.addMay("meta.createAttributeFactory");
        _SchemaDefinitionOBJ.addMay("meta.dmwTypeToPackage");
        _SchemaDefinitionOBJ.addMay("meta.classDefList");
        _SchemaDefinitionOBJ.addMay("meta.typeDefList");
        _SchemaDefinitionOBJ.addMay("meta.complexTypeDefList");
        _SchemaDefinitionOBJ.addMay("meta.extendedReferenceTypeDefList");
        _SchemaDefinitionOBJ.addMay("meta.internalTypeDefList");
        _SchemaDefinitionOBJ.addMay("meta.attributeDefList");
        _SchemaDefinitionOBJ.addMay("meta.actionDefList");
        _SchemaDefinitionOBJ.addMay("meta.enumDefList");
        _SchemaDefinitionOBJ.addMay("meta.sliceDefList");
        _SchemaDefinitionOBJ.addMay("meta.dependsOnRef");
        _SchemaDefinitionOBJ.addMay("meta.ruleCategoryList");
        _SchemaDefinitionOBJ.addMay("meta.ruleDefinitionList");
        _SchemaDefinitionOBJ.addMay("meta.ruleDataList");
        _SchemaDefinitionOBJ.addMay("meta.dsdModuleList");
        _SchemaDefinitionOBJ.addMust("meta.name");
        _SchemaDefinitionOBJ.addMust("meta.schemaPackage");
        _SchemaDefinitionOBJ.addMust("meta.schemaBaseID");
        _SchemaDefinitionOBJ.addMust("meta.schemaIDRange");
        _SchemaDefinitionOBJ.setName("SchemaDefinition");
        _SchemaDefinitionOBJ.setUseWrapperType("EXTENDED");
        _SchemaDefinition.setDefinedIn(this);
        addClassDefList(_SchemaDefinition);

        ClassDefinitionDMO _RuleCategoryOBJ = new ClassDefinitionDMO();
        _RuleCategory = new ClassDefinition(_RuleCategoryOBJ,MetaDMSAG.__RuleCategory);
        _RuleCategoryOBJ.setClassType("STRUCTURAL");
        _RuleCategoryOBJ.setDerivedFrom("meta.DmsDefinition");
        _RuleCategoryOBJ.addDescription("The RuleCategory allows for the definition of categories of rules to be applied\n to various objects and indicates the expected interface to be implemented by a rule instance.\n A RuleDefinition may belong to multiple categories. \n <p/>\n RuleCategories fall into two broad types, ATTRIBUTE and CLASS level, as specified via the ruleType\n attribute. When a RuleDefinition belongs to an ATTRIBUTE level category, its instances will have\n a mandatory applyToAttribute attribute. Both ATTRIBUTE and CLASS level RuleDefinitions have an optional\n applyToClass attribute by default.\n <p/>\n Specifying a RuleCategory will cause the generation of several artifacts including:\n <ul>\n <li> a category interface: this interface will be created based on the ruleParam values and will be\n implemented by RuleDefinitions that are part of the category\n </li> a rule collection: this is a category specific collection of rules that organize the rule instances\n in this category.\n </ul>\n Exactly how a RuleCategory applies rule instances is category specific and this behaviour should be\n part of the description of a rule category.\n <p/>\n For CLASS level rules, you must specify the classInfoFromParam attribute to indicate how to \n get the DmcClassInfo from whatever object you are passing to the rule. For ATTRIBUTE level rules,\n you must specify both attributeInfoFromParam and classInfoFromParam.");
        _RuleCategoryOBJ.setDmdID("15");
        _RuleCategoryOBJ.setDmoImport("org.dmd.dms.generated.dmo.RuleCategoryDMO");
        _RuleCategoryOBJ.setDotName("meta.RuleCategory.ClassDefinition");
        _RuleCategoryOBJ.setFile("metaSchema.dms");
        _RuleCategoryOBJ.setIsDSDefinition("true");
        _RuleCategoryOBJ.setIsNamedBy("meta.name");
        _RuleCategoryOBJ.setJavaClass("org.dmd.dms.RuleCategory");
        _RuleCategoryOBJ.setLineNumber("2886");
        _RuleCategoryOBJ.addMay("meta.ruleImport");
        _RuleCategoryOBJ.addMay("meta.attributeInfoFromParam");
        _RuleCategoryOBJ.addMust("meta.name");
        _RuleCategoryOBJ.addMust("meta.opContext");
        _RuleCategoryOBJ.addMust("meta.ruleCategoryID");
        _RuleCategoryOBJ.addMust("meta.ruleType");
        _RuleCategoryOBJ.addMust("meta.ruleParam");
        _RuleCategoryOBJ.addMust("meta.classInfoFromParam");
        _RuleCategoryOBJ.setName("RuleCategory");
        _RuleCategoryOBJ.setUseWrapperType("EXTENDED");
        _RuleCategory.setDefinedIn(this);
        addClassDefList(_RuleCategory);

        ClassDefinitionDMO _RuleDefinitionOBJ = new ClassDefinitionDMO();
        _RuleDefinition = new ClassDefinition(_RuleDefinitionOBJ,MetaDMSAG.__RuleDefinition);
        _RuleDefinitionOBJ.setClassType("STRUCTURAL");
        _RuleDefinitionOBJ.setDerivedFrom("meta.DmsDefinition");
        _RuleDefinitionOBJ.addDescription("The RuleDefinition allows for the definition of rules that can\n be applied to attributes or classes. Rules are not just for validation, they\n can be applied to objects at different times in an object's life cycle e.g. \n the InitRule can initialize a set of attributes to known values.\n <p/>\n RuleDefinitions will result in the generation of ClassDefinitions that define the \n DMOs that will carry the parameters associated with the rule and the expectation\n that you will define an implementation class for the rule that derives from\n an abstract BaseImpl (base implementation) of the rule that provides common\n rule infrastructure and appropriate abstract methods that must be filled in.\n <p/>\n RuleDefinitions and ClassDefinitions share the same dmdID space and the IDs must\n be unique. This is because each RuleDefinition results in the creation of a \n ClassDefinition for the DMO part of the rule that carries the rule parameters.");
        _RuleDefinitionOBJ.setDmdID("16");
        _RuleDefinitionOBJ.setDmoImport("org.dmd.dms.generated.dmo.RuleDefinitionDMO");
        _RuleDefinitionOBJ.setDotName("meta.RuleDefinition.ClassDefinition");
        _RuleDefinitionOBJ.setFile("metaSchema.dms");
        _RuleDefinitionOBJ.setIsDSDefinition("true");
        _RuleDefinitionOBJ.setIsNamedBy("meta.name");
        _RuleDefinitionOBJ.setJavaClass("org.dmd.dms.RuleDefinition");
        _RuleDefinitionOBJ.setLineNumber("2920");
        _RuleDefinitionOBJ.addMay("meta.must");
        _RuleDefinitionOBJ.addMay("meta.may");
        _RuleDefinitionOBJ.addMay("meta.isExtensible");
        _RuleDefinitionOBJ.addMay("meta.dependency");
        _RuleDefinitionOBJ.addMust("meta.name");
        _RuleDefinitionOBJ.addMust("meta.ruleCategory");
        _RuleDefinitionOBJ.addMust("meta.dmdID");
        _RuleDefinitionOBJ.setName("RuleDefinition");
        _RuleDefinitionOBJ.setUseWrapperType("EXTENDED");
        _RuleDefinition.setDefinedIn(this);
        addClassDefList(_RuleDefinition);

        ClassDefinitionDMO _RuleDataOBJ = new ClassDefinitionDMO();
        _RuleData = new ClassDefinition(_RuleDataOBJ,MetaDMSAG.__RuleData);
        _RuleDataOBJ.setClassType("ABSTRACT");
        _RuleDataOBJ.addDescription("The RuleData class serves as a common base for all ClassDefinitions\n that are generated internally to represent the data associated with RuleDefinitions.");
        _RuleDataOBJ.setDmdID("17");
        _RuleDataOBJ.setDmoImport("org.dmd.dms.generated.dmo.RuleDataDMO");
        _RuleDataOBJ.setDotName("meta.RuleData.ClassDefinition");
        _RuleDataOBJ.setFile("metaSchema.dms");
        _RuleDataOBJ.setIsNamedBy("meta.ruleName");
        _RuleDataOBJ.setJavaClass("org.dmd.dms.RuleData");
        _RuleDataOBJ.setLineNumber("2942");
        _RuleDataOBJ.addMay("meta.description");
        _RuleDataOBJ.addMay("meta.definedIn");
        _RuleDataOBJ.addMay("meta.file");
        _RuleDataOBJ.addMay("meta.lineNumber");
        _RuleDataOBJ.addMay("meta.applyToClass");
        _RuleDataOBJ.addMay("meta.immediateHalt");
        _RuleDataOBJ.addMay("meta.msgKey");
        _RuleDataOBJ.addMay("meta.msgParam");
        _RuleDataOBJ.addMust("meta.ruleTitle");
        _RuleDataOBJ.addMust("meta.ruleName");
        _RuleDataOBJ.setName("RuleData");
        _RuleDataOBJ.setUseWrapperType("EXTENDED");
        _RuleData.setDefinedIn(this);
        addClassDefList(_RuleData);

        ClassDefinitionDMO _DependencyOBJ = new ClassDefinitionDMO();
        _Dependency = new ClassDefinition(_DependencyOBJ,MetaDMSAG.__Dependency);
        _DependencyOBJ.setClassType("STRUCTURAL");
        _DependencyOBJ.setDerivedFrom("meta.DmsDefinition");
        _DependencyOBJ.addDescription("The Dependency class allows for the definition of a named dependency\n on something; usually an interface. In the current schema mechanisms, the only place\n that this mechanism is used is in the specification of RuleDefinitions. Rule instances are\n created by injecting RuleData into a rule implementation. If the rule implementation\n has dependencies on other objects, those dependencies are specified via references to\n Dependencies.\n <p/>\n A Dependency can be referred to via a RunContext definition which directs the generation\n of code that can instantiate the required object instances. Satisfying a Dependency relies\n on there being a DependencyImplementation that indicates how to instantiate the object\n that implements the interface defined by the dependency.\n <p/>\n If a Dependency specifies an instantiation, this is considered the default mechanism to\n fulfill the dependency. Other DependencyImplementations may be specified that override\n the specified instantiation in particular contexts.");
        _DependencyOBJ.setDmdID("18");
        _DependencyOBJ.setDmoImport("org.dmd.dms.generated.dmo.DependencyDMO");
        _DependencyOBJ.setDotName("meta.Dependency.ClassDefinition");
        _DependencyOBJ.setFile("metaSchema.dms");
        _DependencyOBJ.setIsDSDefinition("true");
        _DependencyOBJ.setIsNamedBy("meta.name");
        _DependencyOBJ.setJavaClass("org.dmd.dms.Dependency");
        _DependencyOBJ.setLineNumber("2974");
        _DependencyOBJ.addMay("meta.dependencies");
        _DependencyOBJ.addMay("meta.instantiation");
        _DependencyOBJ.addMust("meta.name");
        _DependencyOBJ.addMust("meta.useInterface");
        _DependencyOBJ.setName("Dependency");
        _DependencyOBJ.setUseWrapperType("EXTENDED");
        _Dependency.setDefinedIn(this);
        addClassDefList(_Dependency);

        ClassDefinitionDMO _DependencyImplementationOBJ = new ClassDefinitionDMO();
        _DependencyImplementation = new ClassDefinition(_DependencyImplementationOBJ,MetaDMSAG.__DependencyImplementation);
        _DependencyImplementationOBJ.setClassType("STRUCTURAL");
        _DependencyImplementationOBJ.setDerivedFrom("meta.DmsDefinition");
        _DependencyImplementationOBJ.addDescription("The DependencyImplementation allows you to fulfill a defined Dependency.\n When a RunContext is specified, it will indicate a set of dependencies. For each of the\n specified dependencies, there must be at least one related DependencyImplementation,\n otherwise, we have no way to fulfill the dependency.");
        _DependencyImplementationOBJ.setDmdID("19");
        _DependencyImplementationOBJ.setDmoImport("org.dmd.dms.generated.dmo.DependencyImplementationDMO");
        _DependencyImplementationOBJ.setDotName("meta.DependencyImplementation.ClassDefinition");
        _DependencyImplementationOBJ.setFile("metaSchema.dms");
        _DependencyImplementationOBJ.setIsDSDefinition("true");
        _DependencyImplementationOBJ.setIsNamedBy("meta.name");
        _DependencyImplementationOBJ.setJavaClass("org.dmd.dms.DependencyImplementation");
        _DependencyImplementationOBJ.setLineNumber("2994");
        _DependencyImplementationOBJ.addMay("meta.description");
        _DependencyImplementationOBJ.addMust("meta.name");
        _DependencyImplementationOBJ.addMust("meta.dependency");
        _DependencyImplementationOBJ.addMust("meta.runContext");
        _DependencyImplementationOBJ.addMust("meta.instantiation");
        _DependencyImplementationOBJ.setName("DependencyImplementation");
        _DependencyImplementationOBJ.setUseWrapperType("EXTENDED");
        _DependencyImplementation.setDefinedIn(this);
        addClassDefList(_DependencyImplementation);

        ClassDefinitionDMO _RunContextOBJ = new ClassDefinitionDMO();
        _RunContext = new ClassDefinition(_RunContextOBJ,MetaDMSAG.__RunContext);
        _RunContextOBJ.setClassType("STRUCTURAL");
        _RunContextOBJ.setDerivedFrom("meta.DmsDefinition");
        _RunContextOBJ.setDmdID("20");
        _RunContextOBJ.setDmoImport("org.dmd.dms.generated.dmo.DependencyDMO");
        _RunContextOBJ.setDotName("meta.RunContext.ClassDefinition");
        _RunContextOBJ.setFile("metaSchema.dms");
        _RunContextOBJ.setIsDSDefinition("true");
        _RunContextOBJ.setIsNamedBy("meta.name");
        _RunContextOBJ.setJavaClass("org.dmd.dms.Dependency");
        _RunContextOBJ.setLineNumber("3009");
        _RunContextOBJ.addMay("meta.description");
        _RunContextOBJ.addMust("meta.name");
        _RunContextOBJ.addMust("meta.dependencies");
        _RunContextOBJ.setName("RunContext");
        _RunContextOBJ.setUseWrapperType("EXTENDED");
        _RunContext.setDefinedIn(this);
        addClassDefList(_RunContext);

        ClassDefinitionDMO _ConcinnityOBJ = new ClassDefinitionDMO();
        _Concinnity = new ClassDefinition(_ConcinnityOBJ,MetaDMSAG.__Concinnity);
        _ConcinnityOBJ.setClassType("ABSTRACT");
        _ConcinnityOBJ.setDerivedFrom("meta.DSDefinition");
        _ConcinnityOBJ.addDescription("When concinnity was conceived, it was conceived as a way of binding knowledge across\n different domains. As the newer approach to generating Domain Specific Definitions arose, it became\n easier to create DSLs for different domains and I wanted concinnity to make use of those mechanisms.\n However, to do that would have required significant changes to the meta schema generator and a great\n deal of hacking. I wanted to be able to refer to concinnity aspects from schema as well, so the\n compromise is to place the base class for Concinnity in the meta schema (so that reference attributes\n may refer to it). \n <p/>\n Mechanisms exist to prevent any class other than ConcinnityDefinition from deriving directly from\n Concinnity, so you can be guaranteed that down casting a Concinnity reference will yield a ConcinnityDefinition.");
        _ConcinnityOBJ.setDmdID("42");
        _ConcinnityOBJ.setDmoImport("org.dmd.dms.generated.dmo.ConcinnityDMO");
        _ConcinnityOBJ.setDotName("meta.Concinnity.ClassDefinition");
        _ConcinnityOBJ.setFile("metaSchema.dms");
        _ConcinnityOBJ.setIsNamedBy("meta.name");
        _ConcinnityOBJ.setJavaClass("org.dmd.dms.Concinnity");
        _ConcinnityOBJ.setLineNumber("3030");
        _ConcinnityOBJ.addMust("meta.name");
        _ConcinnityOBJ.setName("Concinnity");
        _ConcinnityOBJ.setUseWrapperType("EXTENDED");
        _Concinnity.setDefinedIn(this);
        addClassDefList(_Concinnity);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitAttributes(MetaGenerator.java:404)
    private void initAttributes() throws DmcValueException {

        AttributeDefinitionDMO _FQNOBJ = new AttributeDefinitionDMO();
        _FQN = new AttributeDefinition(_FQNOBJ);
        _FQNOBJ.addDescription("The fully qualified name of a hierarchic object. The exact form of\n the fqn is application specific.");
        _FQNOBJ.setDesignatedNameAttribute("true");
        _FQNOBJ.setDmdID("84");
        _FQNOBJ.setDotName("meta.FQN.AttributeDefinition");
        _FQNOBJ.setFile("metaSchema.dms");
        _FQNOBJ.setLineNumber("1432");
        _FQNOBJ.setName("FQN");
        _FQNOBJ.setType("meta.FullyQualifiedName");
        _FQN.setDefinedIn(this);
        addAttributeDefList(_FQN);

        AttributeDefinitionDMO _abbrevOBJ = new AttributeDefinitionDMO();
        _abbrev = new AttributeDefinition(_abbrevOBJ);
        _abbrevOBJ.addDescription("This attribute stores an abbreviated form of the name of an attribute or class. This\n concept is borrowed from directory technology where shortened name forms are often\n used as part of distinguished names (DNs).");
        _abbrevOBJ.setDmdID("9");
        _abbrevOBJ.setDotName("meta.abbrev.AttributeDefinition");
        _abbrevOBJ.setFile("metaSchema.dms");
        _abbrevOBJ.setLineNumber("844");
        _abbrevOBJ.setName("abbrev");
        _abbrevOBJ.setType("meta.String");
        _abbrev.setDefinedIn(this);
        addAttributeDefList(_abbrev);

        AttributeDefinitionDMO _actionDefListOBJ = new AttributeDefinitionDMO();
        _actionDefList = new AttributeDefinition(_actionDefListOBJ);
        _actionDefListOBJ.addDescription("A list of action definition references.");
        _actionDefListOBJ.setDmdID("60");
        _actionDefListOBJ.setDotName("meta.actionDefList.AttributeDefinition");
        _actionDefListOBJ.setFile("metaSchema.dms");
        _actionDefListOBJ.setInternalUse("true");
        _actionDefListOBJ.setLineNumber("1236");
        _actionDefListOBJ.setName("actionDefList");
        _actionDefListOBJ.setType("meta.ActionDefinition");
        _actionDefListOBJ.setValueType("MULTI");
        _actionDefList.setDefinedIn(this);
        addAttributeDefList(_actionDefList);

        AttributeDefinitionDMO _actionsOBJ = new AttributeDefinitionDMO();
        _actions = new AttributeDefinition(_actionsOBJ);
        _actionsOBJ.addDescription("Indicates the set of actions that are supported by a class of objects.");
        _actionsOBJ.setDmdID("32");
        _actionsOBJ.setDotName("meta.actions.AttributeDefinition");
        _actionsOBJ.setFile("metaSchema.dms");
        _actionsOBJ.setLineNumber("1013");
        _actionsOBJ.setName("actions");
        _actionsOBJ.setType("meta.ActionDefinition");
        _actionsOBJ.setValueType("MULTI");
        _actions.setDefinedIn(this);
        addAttributeDefList(_actions);

        AttributeDefinitionDMO _allowedParentsOBJ = new AttributeDefinitionDMO();
        _allowedParents = new AttributeDefinition(_allowedParentsOBJ);
        _allowedParentsOBJ.addDescription("Indicates the classes of object that may be parents of the\n current class when objects are created in an instance hierarchy.");
        _allowedParentsOBJ.setDmdID("62");
        _allowedParentsOBJ.setDotName("meta.allowedParents.AttributeDefinition");
        _allowedParentsOBJ.setFile("metaSchema.dms");
        _allowedParentsOBJ.setLineNumber("1251");
        _allowedParentsOBJ.setName("allowedParents");
        _allowedParentsOBJ.setType("meta.ClassDefinition");
        _allowedParentsOBJ.setValueType("MULTI");
        _allowedParents.setDefinedIn(this);
        addAttributeDefList(_allowedParents);

        AttributeDefinitionDMO _altTypeOBJ = new AttributeDefinitionDMO();
        _altType = new AttributeDefinition(_altTypeOBJ);
        _altTypeOBJ.addDescription("The altType indicates an alternate type for a value. For instance\n when dealing with NameContainers, the value interface is obviously NameContainer, but\n the secret sauce of NameContainers is that they also take any DmcObjectName derivative.\n Specifying the altType on the NameContainer TypeDefinition allows for generation of \n the DmcObjectName interface as well.");
        _altTypeOBJ.setDmdID("108");
        _altTypeOBJ.setDotName("meta.altType.AttributeDefinition");
        _altTypeOBJ.setFile("metaSchema.dms");
        _altTypeOBJ.setLineNumber("1612");
        _altTypeOBJ.setName("altType");
        _altTypeOBJ.setType("meta.String");
        _altType.setDefinedIn(this);
        addAttributeDefList(_altType);

        AttributeDefinitionDMO _altTypeImportOBJ = new AttributeDefinitionDMO();
        _altTypeImport = new AttributeDefinition(_altTypeImportOBJ);
        _altTypeImportOBJ.addDescription("An additional import (if required) by the altType attribute value.");
        _altTypeImportOBJ.setDmdID("109");
        _altTypeImportOBJ.setDotName("meta.altTypeImport.AttributeDefinition");
        _altTypeImportOBJ.setFile("metaSchema.dms");
        _altTypeImportOBJ.setLineNumber("1618");
        _altTypeImportOBJ.setName("altTypeImport");
        _altTypeImportOBJ.setType("meta.String");
        _altTypeImport.setDefinedIn(this);
        addAttributeDefList(_altTypeImport);

        AttributeDefinitionDMO _applyToAttributeOBJ = new AttributeDefinitionDMO();
        _applyToAttribute = new AttributeDefinition(_applyToAttributeOBJ);
        _applyToAttributeOBJ.addDescription("Indicates the attribute to which an ATTRIBUTE type rule is applied.");
        _applyToAttributeOBJ.setDmdID("157");
        _applyToAttributeOBJ.setDotName("meta.applyToAttribute.AttributeDefinition");
        _applyToAttributeOBJ.setFile("metaSchema.dms");
        _applyToAttributeOBJ.setLineNumber("1976");
        _applyToAttributeOBJ.setName("applyToAttribute");
        _applyToAttributeOBJ.setType("meta.AttributeDefinition");
        _applyToAttribute.setDefinedIn(this);
        addAttributeDefList(_applyToAttribute);

        AttributeDefinitionDMO _applyToClassOBJ = new AttributeDefinitionDMO();
        _applyToClass = new AttributeDefinition(_applyToClassOBJ);
        _applyToClassOBJ.addDescription("The class to which a rule should be applied.");
        _applyToClassOBJ.setDmdID("154");
        _applyToClassOBJ.setDotName("meta.applyToClass.AttributeDefinition");
        _applyToClassOBJ.setFile("metaSchema.dms");
        _applyToClassOBJ.setLineNumber("1955");
        _applyToClassOBJ.setName("applyToClass");
        _applyToClassOBJ.setType("meta.ClassDefinition");
        _applyToClass.setDefinedIn(this);
        addAttributeDefList(_applyToClass);

        AttributeDefinitionDMO _attachToClassOBJ = new AttributeDefinitionDMO();
        _attachToClass = new AttributeDefinition(_attachToClassOBJ);
        _attachToClassOBJ.addDescription("Indicates the classes of object to which an action is to be attached.\n This mechanism allows for the extension of a class's behaviour without having\n to alter the schema of the class involved. This can be viewed as the auxiliary\n class equivalent for behaviour.");
        _attachToClassOBJ.setDmdID("65");
        _attachToClassOBJ.setDotName("meta.attachToClass.AttributeDefinition");
        _attachToClassOBJ.setFile("metaSchema.dms");
        _attachToClassOBJ.setLineNumber("1286");
        _attachToClassOBJ.setName("attachToClass");
        _attachToClassOBJ.setType("meta.ClassDefinition");
        _attachToClassOBJ.setValueType("MULTI");
        _attachToClass.setDefinedIn(this);
        addAttributeDefList(_attachToClass);

        AttributeDefinitionDMO _attributeDefListOBJ = new AttributeDefinitionDMO();
        _attributeDefList = new AttributeDefinition(_attributeDefListOBJ);
        _attributeDefListOBJ.addDescription("A list of attribute definition references.");
        _attributeDefListOBJ.setDmdID("59");
        _attributeDefListOBJ.setDotName("meta.attributeDefList.AttributeDefinition");
        _attributeDefListOBJ.setFile("metaSchema.dms");
        _attributeDefListOBJ.setInternalUse("true");
        _attributeDefListOBJ.setLineNumber("1228");
        _attributeDefListOBJ.setName("attributeDefList");
        _attributeDefListOBJ.setType("meta.AttributeDefinition");
        _attributeDefListOBJ.setValueType("MULTI");
        _attributeDefList.setDefinedIn(this);
        addAttributeDefList(_attributeDefList);

        AttributeDefinitionDMO _attributeInfoFromParamOBJ = new AttributeDefinitionDMO();
        _attributeInfoFromParam = new AttributeDefinition(_attributeInfoFromParamOBJ);
        _attributeInfoFromParamOBJ.addDescription("Indicates how the DmcAttributeInfo should be extracted from one of the ruleParam values\n associated with a RuleCategory. If additional classes are required to support this access, you can specify ruleImport\n values as appropriate.");
        _attributeInfoFromParamOBJ.setDmdID("155");
        _attributeInfoFromParamOBJ.setDotName("meta.attributeInfoFromParam.AttributeDefinition");
        _attributeInfoFromParamOBJ.setFile("metaSchema.dms");
        _attributeInfoFromParamOBJ.setLineNumber("1963");
        _attributeInfoFromParamOBJ.setName("attributeInfoFromParam");
        _attributeInfoFromParamOBJ.setType("meta.String");
        _attributeInfoFromParam.setDefinedIn(this);
        addAttributeDefList(_attributeInfoFromParam);

        AttributeDefinitionDMO _baseDefinitionOBJ = new AttributeDefinitionDMO();
        _baseDefinition = new AttributeDefinition(_baseDefinitionOBJ);
        _baseDefinitionOBJ.addDescription("A reference to the DSDefinition derived class that is the base class for a \n set of definition classes.");
        _baseDefinitionOBJ.setDmdID("164");
        _baseDefinitionOBJ.setDotName("meta.baseDefinition.AttributeDefinition");
        _baseDefinitionOBJ.setFile("metaSchema.dms");
        _baseDefinitionOBJ.setLineNumber("2033");
        _baseDefinitionOBJ.setName("baseDefinition");
        _baseDefinitionOBJ.setType("meta.DSDefinition");
        _baseDefinition.setDefinedIn(this);
        addAttributeDefList(_baseDefinition);

        AttributeDefinitionDMO _baseTypeOBJ = new AttributeDefinitionDMO();
        _baseType = new AttributeDefinition(_baseTypeOBJ);
        _baseTypeOBJ.addDescription("The broad base type of the data.");
        _baseTypeOBJ.setDmdID("135");
        _baseTypeOBJ.setDotName("meta.baseType.AttributeDefinition");
        _baseTypeOBJ.setFile("metaSchema.dms");
        _baseTypeOBJ.setLineNumber("1822");
        _baseTypeOBJ.setName("baseType");
        _baseTypeOBJ.setType("meta.BaseTypeEnum");
        _baseType.setDefinedIn(this);
        addAttributeDefList(_baseType);

        AttributeDefinitionDMO _camelCaseNameOBJ = new AttributeDefinitionDMO();
        _camelCaseName = new AttributeDefinition(_camelCaseNameOBJ);
        _camelCaseNameOBJ.addDescription("The camelCaseName attribute is used to store a single camelCase format name for something.\n The name starts with a single letter and can be followed by a mix of letters and numbers. No spaces or \n other characters are allowed.");
        _camelCaseNameOBJ.setDesignatedNameAttribute("true");
        _camelCaseNameOBJ.setDmdID("116");
        _camelCaseNameOBJ.setDotName("meta.camelCaseName.AttributeDefinition");
        _camelCaseNameOBJ.setFile("metaSchema.dms");
        _camelCaseNameOBJ.setLineNumber("1666");
        _camelCaseNameOBJ.setName("camelCaseName");
        _camelCaseNameOBJ.setType("meta.CamelCaseName");
        _camelCaseName.setDefinedIn(this);
        addAttributeDefList(_camelCaseName);

        AttributeDefinitionDMO _classDefListOBJ = new AttributeDefinitionDMO();
        _classDefList = new AttributeDefinition(_classDefListOBJ);
        _classDefListOBJ.addDescription("A list of class definition references.");
        _classDefListOBJ.setDmdID("55");
        _classDefListOBJ.setDotName("meta.classDefList.AttributeDefinition");
        _classDefListOBJ.setFile("metaSchema.dms");
        _classDefListOBJ.setInternalUse("true");
        _classDefListOBJ.setLineNumber("1195");
        _classDefListOBJ.setName("classDefList");
        _classDefListOBJ.setType("meta.ClassDefinition");
        _classDefListOBJ.setValueType("MULTI");
        _classDefList.setDefinedIn(this);
        addAttributeDefList(_classDefList);

        AttributeDefinitionDMO _classFilterOBJ = new AttributeDefinitionDMO();
        _classFilter = new AttributeDefinition(_classFilterOBJ);
        _classFilterOBJ.addDescription("The classFilter is used to performing matching of objects based on\n their class or auxiliary classes.");
        _classFilterOBJ.setDesignatedFilterAttribute("true");
        _classFilterOBJ.setDmdID("128");
        _classFilterOBJ.setDotName("meta.classFilter.AttributeDefinition");
        _classFilterOBJ.setFile("metaSchema.dms");
        _classFilterOBJ.setLineNumber("1765");
        _classFilterOBJ.setName("classFilter");
        _classFilterOBJ.setType("meta.ClassFilter");
        _classFilter.setDefinedIn(this);
        addAttributeDefList(_classFilter);

        AttributeDefinitionDMO _classInfoFromParamOBJ = new AttributeDefinitionDMO();
        _classInfoFromParam = new AttributeDefinition(_classInfoFromParamOBJ);
        _classInfoFromParamOBJ.addDescription("Indicates how the DmcClassInfo should be extracted from one of the ruleParam values\n associated with a RuleCategory. If additional classes are required to support this access, you can specify ruleImport\n values as appropriate.");
        _classInfoFromParamOBJ.setDmdID("151");
        _classInfoFromParamOBJ.setDotName("meta.classInfoFromParam.AttributeDefinition");
        _classInfoFromParamOBJ.setFile("metaSchema.dms");
        _classInfoFromParamOBJ.setLineNumber("1932");
        _classInfoFromParamOBJ.setName("classInfoFromParam");
        _classInfoFromParamOBJ.setType("meta.String");
        _classInfoFromParam.setDefinedIn(this);
        addAttributeDefList(_classInfoFromParam);

        AttributeDefinitionDMO _classTypeOBJ = new AttributeDefinitionDMO();
        _classType = new AttributeDefinition(_classTypeOBJ);
        _classTypeOBJ.addDescription("This attribute indicates the type of a class definition.");
        _classTypeOBJ.setDmdID("10");
        _classTypeOBJ.setDotName("meta.classType.AttributeDefinition");
        _classTypeOBJ.setFile("metaSchema.dms");
        _classTypeOBJ.setLineNumber("850");
        _classTypeOBJ.setName("classType");
        _classTypeOBJ.setType("meta.ClassTypeEnum");
        _classType.setDefinedIn(this);
        addAttributeDefList(_classType);

        AttributeDefinitionDMO _commentOBJ = new AttributeDefinitionDMO();
        _comment = new AttributeDefinition(_commentOBJ);
        _commentOBJ.addDescription("A comment or note associated with the definition of something. For\n code that's generated from a definition, comments may be added to the code, as opposed to \n descriptions which are meant to assist in generating documentation. In the end, it's up to\n the designer of a DSL to determine how comments are used.");
        _commentOBJ.setDmdID("185");
        _commentOBJ.setDotName("meta.comment.AttributeDefinition");
        _commentOBJ.setFile("metaSchema.dms");
        _commentOBJ.setLineNumber("2226");
        _commentOBJ.setName("comment");
        _commentOBJ.setType("meta.String");
        _commentOBJ.setValueType("MULTI");
        _comment.setDefinedIn(this);
        addAttributeDefList(_comment);

        AttributeDefinitionDMO _complexTypeDefListOBJ = new AttributeDefinitionDMO();
        _complexTypeDefList = new AttributeDefinition(_complexTypeDefListOBJ);
        _complexTypeDefListOBJ.addDescription("A list of complex type definition references.");
        _complexTypeDefListOBJ.setDmdID("117");
        _complexTypeDefListOBJ.setDotName("meta.complexTypeDefList.AttributeDefinition");
        _complexTypeDefListOBJ.setFile("metaSchema.dms");
        _complexTypeDefListOBJ.setInternalUse("true");
        _complexTypeDefListOBJ.setLineNumber("1674");
        _complexTypeDefListOBJ.setName("complexTypeDefList");
        _complexTypeDefListOBJ.setType("meta.ComplexTypeDefinition");
        _complexTypeDefListOBJ.setValueType("MULTI");
        _complexTypeDefList.setDefinedIn(this);
        addAttributeDefList(_complexTypeDefList);

        AttributeDefinitionDMO _createAttributeFactoryOBJ = new AttributeDefinitionDMO();
        _createAttributeFactory = new AttributeDefinition(_createAttributeFactoryOBJ);
        _createAttributeFactoryOBJ.addDescription("When specified as true on a SchemaDefinition, the DMO generation\n utility will create a free standing AttributeFactory for the schema. This allows for\n the creation of attributes taht can then be embedded in complex objects and properly\n serialized/deserialized.");
        _createAttributeFactoryOBJ.setDmdID("89");
        _createAttributeFactoryOBJ.setDotName("meta.createAttributeFactory.AttributeDefinition");
        _createAttributeFactoryOBJ.setFile("metaSchema.dms");
        _createAttributeFactoryOBJ.setLineNumber("1472");
        _createAttributeFactoryOBJ.setName("createAttributeFactory");
        _createAttributeFactoryOBJ.setType("meta.Boolean");
        _createAttributeFactory.setDefinedIn(this);
        addAttributeDefList(_createAttributeFactory);

        AttributeDefinitionDMO _createIndexOBJ = new AttributeDefinitionDMO();
        _createIndex = new AttributeDefinition(_createIndexOBJ);
        _createIndexOBJ.addDescription("A flag to indicate if you want your data repository to create an index for a named object.");
        _createIndexOBJ.setDmdID("190");
        _createIndexOBJ.setDotName("meta.createIndex.AttributeDefinition");
        _createIndexOBJ.setFile("metaSchema.dms");
        _createIndexOBJ.setLineNumber("2264");
        _createIndexOBJ.setName("createIndex");
        _createIndexOBJ.setType("meta.Boolean");
        _createIndexOBJ.setVersion("3.0.5");
        _createIndex.setDefinedIn(this);
        addAttributeDefList(_createIndex);

        AttributeDefinitionDMO _dataTypeOBJ = new AttributeDefinitionDMO();
        _dataType = new AttributeDefinition(_dataTypeOBJ);
        _dataTypeOBJ.addDescription("This attribute indicates the persistence characteristics of an attribute or\n class of object. How this information is used is application dependent.");
        _dataTypeOBJ.setDmdID("11");
        _dataTypeOBJ.setDotName("meta.dataType.AttributeDefinition");
        _dataTypeOBJ.setFile("metaSchema.dms");
        _dataTypeOBJ.setLineNumber("857");
        _dataTypeOBJ.setName("dataType");
        _dataTypeOBJ.setType("meta.DataTypeEnum");
        _dataType.setDefinedIn(this);
        addAttributeDefList(_dataType);

        AttributeDefinitionDMO _defFilesOBJ = new AttributeDefinitionDMO();
        _defFiles = new AttributeDefinition(_defFilesOBJ);
        _defFilesOBJ.addDescription("A list of files that contain the class, attribute and type definitions\n that comprise a schema.");
        _defFilesOBJ.setDmdID("68");
        _defFilesOBJ.setDotName("meta.defFiles.AttributeDefinition");
        _defFilesOBJ.setFile("metaSchema.dms");
        _defFilesOBJ.setLineNumber("1310");
        _defFilesOBJ.setName("defFiles");
        _defFilesOBJ.setType("meta.String");
        _defFilesOBJ.setValueType("MULTI");
        _defFiles.setDefinedIn(this);
        addAttributeDefList(_defFiles);

        AttributeDefinitionDMO _definedInOBJ = new AttributeDefinitionDMO();
        _definedIn = new AttributeDefinition(_definedInOBJ);
        _definedInOBJ.addDescription("Indicates the schema in which a type, attribute or class is defined.");
        _definedInOBJ.setDmdID("61");
        _definedInOBJ.setDotName("meta.definedIn.AttributeDefinition");
        _definedInOBJ.setFile("metaSchema.dms");
        _definedInOBJ.setInternalUse("true");
        _definedInOBJ.setLineNumber("1243");
        _definedInOBJ.setName("definedIn");
        _definedInOBJ.setType("meta.SchemaDefinition");
        _definedIn.setDefinedIn(this);
        addAttributeDefList(_definedIn);

        AttributeDefinitionDMO _definedInModuleAttributeOBJ = new AttributeDefinitionDMO();
        _definedInModuleAttribute = new AttributeDefinition(_definedInModuleAttributeOBJ);
        _definedInModuleAttributeOBJ.addDescription("The name of the attribute that will be set on all definitions associated with a DSD\n to indicate the module from which a definition was loaded.");
        _definedInModuleAttributeOBJ.setDmdID("167");
        _definedInModuleAttributeOBJ.setDotName("meta.definedInModuleAttribute.AttributeDefinition");
        _definedInModuleAttributeOBJ.setFile("metaSchema.dms");
        _definedInModuleAttributeOBJ.setLineNumber("2061");
        _definedInModuleAttributeOBJ.setName("definedInModuleAttribute");
        _definedInModuleAttributeOBJ.setType("meta.AttributeDefinition");
        _definedInModuleAttribute.setDefinedIn(this);
        addAttributeDefList(_definedInModuleAttribute);

        AttributeDefinitionDMO _dependenciesOBJ = new AttributeDefinitionDMO();
        _dependencies = new AttributeDefinition(_dependenciesOBJ);
        _dependenciesOBJ.addDescription("A set of references to Dependencies.");
        _dependenciesOBJ.setDmdID("147");
        _dependenciesOBJ.setDotName("meta.dependencies.AttributeDefinition");
        _dependenciesOBJ.setFile("metaSchema.dms");
        _dependenciesOBJ.setLineNumber("1906");
        _dependenciesOBJ.setName("dependencies");
        _dependenciesOBJ.setType("meta.Dependency");
        _dependenciesOBJ.setValueType("MULTI");
        _dependencies.setDefinedIn(this);
        addAttributeDefList(_dependencies);

        AttributeDefinitionDMO _dependencyOBJ = new AttributeDefinitionDMO();
        _dependency = new AttributeDefinition(_dependencyOBJ);
        _dependencyOBJ.addDescription("A reference to a single Dependency.");
        _dependencyOBJ.setDmdID("146");
        _dependencyOBJ.setDotName("meta.dependency.AttributeDefinition");
        _dependencyOBJ.setFile("metaSchema.dms");
        _dependencyOBJ.setLineNumber("1899");
        _dependencyOBJ.setName("dependency");
        _dependencyOBJ.setType("meta.Dependency");
        _dependency.setDefinedIn(this);
        addAttributeDefList(_dependency);

        AttributeDefinitionDMO _dependsOnOBJ = new AttributeDefinitionDMO();
        _dependsOn = new AttributeDefinition(_dependsOnOBJ);
        _dependsOnOBJ.addDescription("A list of schema names.");
        _dependsOnOBJ.setDmdID("66");
        _dependsOnOBJ.setDotName("meta.dependsOn.AttributeDefinition");
        _dependsOnOBJ.setFile("metaSchema.dms");
        _dependsOnOBJ.setLineNumber("1293");
        _dependsOnOBJ.setName("dependsOn");
        _dependsOnOBJ.setType("meta.String");
        _dependsOnOBJ.setValueType("MULTI");
        _dependsOn.setDefinedIn(this);
        addAttributeDefList(_dependsOn);

        AttributeDefinitionDMO _dependsOnRefOBJ = new AttributeDefinitionDMO();
        _dependsOnRef = new AttributeDefinition(_dependsOnRefOBJ);
        _dependsOnRefOBJ.addDescription("A list of schema references that are based on the contents of the dependsOn\n attribute.");
        _dependsOnRefOBJ.setDmdID("67");
        _dependsOnRefOBJ.setDotName("meta.dependsOnRef.AttributeDefinition");
        _dependsOnRefOBJ.setFile("metaSchema.dms");
        _dependsOnRefOBJ.setInternalUse("true");
        _dependsOnRefOBJ.setLineNumber("1302");
        _dependsOnRefOBJ.setName("dependsOnRef");
        _dependsOnRefOBJ.setType("meta.SchemaDefinition");
        _dependsOnRefOBJ.setValueType("MULTI");
        _dependsOnRef.setDefinedIn(this);
        addAttributeDefList(_dependsOnRef);

        AttributeDefinitionDMO _dependsOnSchemaOBJ = new AttributeDefinitionDMO();
        _dependsOnSchema = new AttributeDefinition(_dependsOnSchemaOBJ);
        _dependsOnSchemaOBJ.addDescription("Indicates the schema(s) on which something depends.");
        _dependsOnSchemaOBJ.setDmdID("120");
        _dependsOnSchemaOBJ.setDotName("meta.dependsOnSchema.AttributeDefinition");
        _dependsOnSchemaOBJ.setFile("metaSchema.dms");
        _dependsOnSchemaOBJ.setLineNumber("1697");
        _dependsOnSchemaOBJ.setName("dependsOnSchema");
        _dependsOnSchemaOBJ.setType("meta.String");
        _dependsOnSchemaOBJ.setValueType("MULTI");
        _dependsOnSchema.setDefinedIn(this);
        addAttributeDefList(_dependsOnSchema);

        AttributeDefinitionDMO _derivedClassesOBJ = new AttributeDefinitionDMO();
        _derivedClasses = new AttributeDefinition(_derivedClassesOBJ);
        _derivedClassesOBJ.addDescription("Indicates the classes that are known to be derived from a class.");
        _derivedClassesOBJ.setDmdID("25");
        _derivedClassesOBJ.setDotName("meta.derivedClasses.AttributeDefinition");
        _derivedClassesOBJ.setFile("metaSchema.dms");
        _derivedClassesOBJ.setInternalUse("true");
        _derivedClassesOBJ.setLineNumber("958");
        _derivedClassesOBJ.setName("derivedClasses");
        _derivedClassesOBJ.setType("meta.ClassDefinition");
        _derivedClassesOBJ.setValueType("MULTI");
        _derivedClasses.setDefinedIn(this);
        addAttributeDefList(_derivedClasses);

        AttributeDefinitionDMO _derivedFromOBJ = new AttributeDefinitionDMO();
        _derivedFrom = new AttributeDefinition(_derivedFromOBJ);
        _derivedFromOBJ.addDescription("Indicates the abstract or structural class from which this class is derived.");
        _derivedFromOBJ.setDmdID("21");
        _derivedFromOBJ.setDotName("meta.derivedFrom.AttributeDefinition");
        _derivedFromOBJ.setFile("metaSchema.dms");
        _derivedFromOBJ.setLineNumber("925");
        _derivedFromOBJ.setName("derivedFrom");
        _derivedFromOBJ.setType("meta.ClassDefinition");
        _derivedFrom.setDefinedIn(this);
        addAttributeDefList(_derivedFrom);

        AttributeDefinitionDMO _descriptionOBJ = new AttributeDefinitionDMO();
        _description = new AttributeDefinition(_descriptionOBJ);
        _descriptionOBJ.addDescription("The description attribute is used to provide descriptive\n documentation for schema related definitions. The text provided should conform\n to XHTML concepts since it will be dumped in the context of the generated HTML\n documentation.");
        _descriptionOBJ.setDmdID("18");
        _descriptionOBJ.setDotName("meta.description.AttributeDefinition");
        _descriptionOBJ.setFile("metaSchema.dms");
        _descriptionOBJ.setLineNumber("904");
        _descriptionOBJ.setName("description");
        _descriptionOBJ.setPreserveNewlines("true");
        _descriptionOBJ.setType("meta.String");
        _descriptionOBJ.setValueType("MULTI");
        _description.setDefinedIn(this);
        addAttributeDefList(_description);

        AttributeDefinitionDMO _designatedFilterAttributeOBJ = new AttributeDefinitionDMO();
        _designatedFilterAttribute = new AttributeDefinition(_designatedFilterAttributeOBJ);
        _designatedFilterAttributeOBJ.addDescription("The designatedFilterAttribute flag is used to identify the attribute\n designated as the standard wrapper for filters of a particular type. \n One, and only one, attribute definition can be the designatedFilterAttribute for a \n TypeDefinition that is identified as isFilterType.");
        _designatedFilterAttributeOBJ.setDmdID("126");
        _designatedFilterAttributeOBJ.setDotName("meta.designatedFilterAttribute.AttributeDefinition");
        _designatedFilterAttributeOBJ.setFile("metaSchema.dms");
        _designatedFilterAttributeOBJ.setLineNumber("1748");
        _designatedFilterAttributeOBJ.setName("designatedFilterAttribute");
        _designatedFilterAttributeOBJ.setType("meta.Boolean");
        _designatedFilterAttribute.setDefinedIn(this);
        addAttributeDefList(_designatedFilterAttribute);

        AttributeDefinitionDMO _designatedNameAttributeOBJ = new AttributeDefinitionDMO();
        _designatedNameAttribute = new AttributeDefinition(_designatedNameAttributeOBJ);
        _designatedNameAttributeOBJ.addDescription("The designatedNameAttribute flag is used to identify the attribute\n designated as the standard wrapper for names of a particular type. One, and only one,\n attribute definition can be the designatedNameAttribute for a TypeDefinition that has\n isNameType true.");
        _designatedNameAttributeOBJ.setDmdID("102");
        _designatedNameAttributeOBJ.setDotName("meta.designatedNameAttribute.AttributeDefinition");
        _designatedNameAttributeOBJ.setFile("metaSchema.dms");
        _designatedNameAttributeOBJ.setLineNumber("1571");
        _designatedNameAttributeOBJ.setName("designatedNameAttribute");
        _designatedNameAttributeOBJ.setType("meta.Boolean");
        _designatedNameAttribute.setDefinedIn(this);
        addAttributeDefList(_designatedNameAttribute);

        AttributeDefinitionDMO _dmdIDOBJ = new AttributeDefinitionDMO();
        _dmdID = new AttributeDefinition(_dmdIDOBJ);
        _dmdIDOBJ.addDescription("The dmdID attribute is used to store a unique Dark Matter Definition ID for attributes.\n This is used as part of the serialization mechanisms built into Dark Matter Objects.");
        _dmdIDOBJ.setDmdID("3");
        _dmdIDOBJ.setDotName("meta.dmdID.AttributeDefinition");
        _dmdIDOBJ.setFile("metaSchema.dms");
        _dmdIDOBJ.setLineNumber("794");
        _dmdIDOBJ.setName("dmdID");
        _dmdIDOBJ.setType("meta.Integer");
        _dmdID.setDefinedIn(this);
        addAttributeDefList(_dmdID);

        AttributeDefinitionDMO _dmeClassOBJ = new AttributeDefinitionDMO();
        _dmeClass = new AttributeDefinition(_dmeClassOBJ);
        _dmeClassOBJ.addDescription("This attribute indicates just the Dark Matter Extended (DME) class name.");
        _dmeClassOBJ.setDmdID("44");
        _dmeClassOBJ.setDotName("meta.dmeClass.AttributeDefinition");
        _dmeClassOBJ.setFile("metaSchema.dms");
        _dmeClassOBJ.setInternalUse("true");
        _dmeClassOBJ.setLineNumber("1106");
        _dmeClassOBJ.setName("dmeClass");
        _dmeClassOBJ.setType("meta.String");
        _dmeClass.setDefinedIn(this);
        addAttributeDefList(_dmeClass);

        AttributeDefinitionDMO _dmeImportOBJ = new AttributeDefinitionDMO();
        _dmeImport = new AttributeDefinition(_dmeImportOBJ);
        _dmeImportOBJ.addDescription("This attribute indicates the full name of the class that extends a DMW class.\n Dark Matter Extended (DME).");
        _dmeImportOBJ.setDmdID("43");
        _dmeImportOBJ.setDotName("meta.dmeImport.AttributeDefinition");
        _dmeImportOBJ.setFile("metaSchema.dms");
        _dmeImportOBJ.setInternalUse("true");
        _dmeImportOBJ.setLineNumber("1099");
        _dmeImportOBJ.setName("dmeImport");
        _dmeImportOBJ.setType("meta.String");
        _dmeImport.setDefinedIn(this);
        addAttributeDefList(_dmeImport);

        AttributeDefinitionDMO _dmoAuxClassOBJ = new AttributeDefinitionDMO();
        _dmoAuxClass = new AttributeDefinition(_dmoAuxClassOBJ);
        _dmoAuxClassOBJ.addDescription("This attribute indicates just the DMO class name e.g. MyClassAUXDMO");
        _dmoAuxClassOBJ.setDmdID("37");
        _dmoAuxClassOBJ.setDotName("meta.dmoAuxClass.AttributeDefinition");
        _dmoAuxClassOBJ.setFile("metaSchema.dms");
        _dmoAuxClassOBJ.setInternalUse("true");
        _dmoAuxClassOBJ.setLineNumber("1054");
        _dmoAuxClassOBJ.setName("dmoAuxClass");
        _dmoAuxClassOBJ.setType("meta.String");
        _dmoAuxClass.setDefinedIn(this);
        addAttributeDefList(_dmoAuxClass);

        AttributeDefinitionDMO _dmoAuxClassImportOBJ = new AttributeDefinitionDMO();
        _dmoAuxClassImport = new AttributeDefinition(_dmoAuxClassImportOBJ);
        _dmoAuxClassImportOBJ.addDescription("This attribute indicates the full name of the MyClassAUXDMO class");
        _dmoAuxClassImportOBJ.setDmdID("38");
        _dmoAuxClassImportOBJ.setDotName("meta.dmoAuxClassImport.AttributeDefinition");
        _dmoAuxClassImportOBJ.setFile("metaSchema.dms");
        _dmoAuxClassImportOBJ.setInternalUse("true");
        _dmoAuxClassImportOBJ.setLineNumber("1061");
        _dmoAuxClassImportOBJ.setName("dmoAuxClassImport");
        _dmoAuxClassImportOBJ.setType("meta.String");
        _dmoAuxClassImport.setDefinedIn(this);
        addAttributeDefList(_dmoAuxClassImport);

        AttributeDefinitionDMO _dmoClassOBJ = new AttributeDefinitionDMO();
        _dmoClass = new AttributeDefinition(_dmoClassOBJ);
        _dmoClassOBJ.addDescription("This attribute indicates just the DMO class name e.g. MyClassDMO");
        _dmoClassOBJ.setDmdID("36");
        _dmoClassOBJ.setDotName("meta.dmoClass.AttributeDefinition");
        _dmoClassOBJ.setFile("metaSchema.dms");
        _dmoClassOBJ.setInternalUse("true");
        _dmoClassOBJ.setLineNumber("1047");
        _dmoClassOBJ.setName("dmoClass");
        _dmoClassOBJ.setType("meta.String");
        _dmoClass.setDefinedIn(this);
        addAttributeDefList(_dmoClass);

        AttributeDefinitionDMO _dmoFromModuleOBJ = new AttributeDefinitionDMO();
        _dmoFromModule = new AttributeDefinition(_dmoFromModuleOBJ);
        _dmoFromModuleOBJ.addDescription("A bit of a hack to allow for creation of fully qualified dot names\n in the DMODefinitionSet that's used for caching definitions in GWT. On the DMW side, this\n is taken care of by overloading the getNameOfModuleWhereThisCameFrom() to access the \n getDefinedInModule attribute and getting the name of the module.");
        _dmoFromModuleOBJ.setDmdID("191");
        _dmoFromModuleOBJ.setDotName("meta.dmoFromModule.AttributeDefinition");
        _dmoFromModuleOBJ.setFile("metaSchema.dms");
        _dmoFromModuleOBJ.setInternalUse("true");
        _dmoFromModuleOBJ.setLineNumber("2275");
        _dmoFromModuleOBJ.setName("dmoFromModule");
        _dmoFromModuleOBJ.setType("meta.String");
        _dmoFromModuleOBJ.setVersion("3.0.6");
        _dmoFromModule.setDefinedIn(this);
        addAttributeDefList(_dmoFromModule);

        AttributeDefinitionDMO _dmoImportOBJ = new AttributeDefinitionDMO();
        _dmoImport = new AttributeDefinition(_dmoImportOBJ);
        _dmoImportOBJ.addDescription("This attribute indicates the full name of the generated Dark Matter Object (DMO)\n class (including package) that is generated for this class. The class will always have DmcObject\n at the top of its derivation hierarchy.");
        _dmoImportOBJ.setDmdID("35");
        _dmoImportOBJ.setDotName("meta.dmoImport.AttributeDefinition");
        _dmoImportOBJ.setFile("metaSchema.dms");
        _dmoImportOBJ.setInternalUse("true");
        _dmoImportOBJ.setLineNumber("1040");
        _dmoImportOBJ.setName("dmoImport");
        _dmoImportOBJ.setType("meta.String");
        _dmoImport.setDefinedIn(this);
        addAttributeDefList(_dmoImport);

        AttributeDefinitionDMO _dmtClassOBJ = new AttributeDefinitionDMO();
        _dmtClass = new AttributeDefinition(_dmtClassOBJ);
        _dmtClassOBJ.addDescription("This attribute indicates just the DmcType class name.");
        _dmtClassOBJ.setDmdID("46");
        _dmtClassOBJ.setDotName("meta.dmtClass.AttributeDefinition");
        _dmtClassOBJ.setFile("metaSchema.dms");
        _dmtClassOBJ.setInternalUse("true");
        _dmtClassOBJ.setLineNumber("1121");
        _dmtClassOBJ.setName("dmtClass");
        _dmtClassOBJ.setType("meta.String");
        _dmtClass.setDefinedIn(this);
        addAttributeDefList(_dmtClass);

        AttributeDefinitionDMO _dmtImportOBJ = new AttributeDefinitionDMO();
        _dmtImport = new AttributeDefinition(_dmtImportOBJ);
        _dmtImportOBJ.addDescription("This attribute indicates the full name of the DmcType class used to reference\n a class. These types are auto generated and named DmcType<classname>REF.");
        _dmtImportOBJ.setDmdID("45");
        _dmtImportOBJ.setDotName("meta.dmtImport.AttributeDefinition");
        _dmtImportOBJ.setFile("metaSchema.dms");
        _dmtImportOBJ.setInternalUse("true");
        _dmtImportOBJ.setLineNumber("1114");
        _dmtImportOBJ.setName("dmtImport");
        _dmtImportOBJ.setType("meta.String");
        _dmtImport.setDefinedIn(this);
        addAttributeDefList(_dmtImport);

        AttributeDefinitionDMO _dmtREFImportOBJ = new AttributeDefinitionDMO();
        _dmtREFImport = new AttributeDefinition(_dmtREFImportOBJ);
        _dmtREFImportOBJ.addDescription("This attribute indicates the full name of the class used to reference\n a class. These types are auto generated and named <classname>REF.");
        _dmtREFImportOBJ.setDmdID("93");
        _dmtREFImportOBJ.setDotName("meta.dmtREFImport.AttributeDefinition");
        _dmtREFImportOBJ.setFile("metaSchema.dms");
        _dmtREFImportOBJ.setInternalUse("true");
        _dmtREFImportOBJ.setLineNumber("1506");
        _dmtREFImportOBJ.setName("dmtREFImport");
        _dmtREFImportOBJ.setType("meta.String");
        _dmtREFImport.setDefinedIn(this);
        addAttributeDefList(_dmtREFImport);

        AttributeDefinitionDMO _dmwAuxClassOBJ = new AttributeDefinitionDMO();
        _dmwAuxClass = new AttributeDefinition(_dmwAuxClassOBJ);
        _dmwAuxClassOBJ.addDescription("This attribute indicates just the DMO class name e.g. MyClassAUX");
        _dmwAuxClassOBJ.setDmdID("39");
        _dmwAuxClassOBJ.setDotName("meta.dmwAuxClass.AttributeDefinition");
        _dmwAuxClassOBJ.setFile("metaSchema.dms");
        _dmwAuxClassOBJ.setInternalUse("true");
        _dmwAuxClassOBJ.setLineNumber("1068");
        _dmwAuxClassOBJ.setName("dmwAuxClass");
        _dmwAuxClassOBJ.setType("meta.String");
        _dmwAuxClass.setDefinedIn(this);
        addAttributeDefList(_dmwAuxClass);

        AttributeDefinitionDMO _dmwAuxClassImportOBJ = new AttributeDefinitionDMO();
        _dmwAuxClassImport = new AttributeDefinition(_dmwAuxClassImportOBJ);
        _dmwAuxClassImportOBJ.addDescription("This attribute indicates the full name of the MyClassAUX class");
        _dmwAuxClassImportOBJ.setDmdID("40");
        _dmwAuxClassImportOBJ.setDotName("meta.dmwAuxClassImport.AttributeDefinition");
        _dmwAuxClassImportOBJ.setFile("metaSchema.dms");
        _dmwAuxClassImportOBJ.setInternalUse("true");
        _dmwAuxClassImportOBJ.setLineNumber("1075");
        _dmwAuxClassImportOBJ.setName("dmwAuxClassImport");
        _dmwAuxClassImportOBJ.setType("meta.String");
        _dmwAuxClassImport.setDefinedIn(this);
        addAttributeDefList(_dmwAuxClassImport);

        AttributeDefinitionDMO _dmwClassOBJ = new AttributeDefinitionDMO();
        _dmwClass = new AttributeDefinition(_dmwClassOBJ);
        _dmwClassOBJ.addDescription("This attribute indicates just the DMW class name, eg MyClassDMW");
        _dmwClassOBJ.setDmdID("42");
        _dmwClassOBJ.setDotName("meta.dmwClass.AttributeDefinition");
        _dmwClassOBJ.setFile("metaSchema.dms");
        _dmwClassOBJ.setInternalUse("true");
        _dmwClassOBJ.setLineNumber("1091");
        _dmwClassOBJ.setName("dmwClass");
        _dmwClassOBJ.setType("meta.String");
        _dmwClass.setDefinedIn(this);
        addAttributeDefList(_dmwClass);

        AttributeDefinitionDMO _dmwImportOBJ = new AttributeDefinitionDMO();
        _dmwImport = new AttributeDefinition(_dmwImportOBJ);
        _dmwImportOBJ.addDescription("This attribute indicates the full name of the generated Dark Matter Wrapper (DMW)\n class (including package) that is wrapped by this class. The class will always be a derived class of\n DmwWrapperBase.");
        _dmwImportOBJ.setDmdID("41");
        _dmwImportOBJ.setDotName("meta.dmwImport.AttributeDefinition");
        _dmwImportOBJ.setFile("metaSchema.dms");
        _dmwImportOBJ.setInternalUse("true");
        _dmwImportOBJ.setLineNumber("1084");
        _dmwImportOBJ.setName("dmwImport");
        _dmwImportOBJ.setType("meta.String");
        _dmwImport.setDefinedIn(this);
        addAttributeDefList(_dmwImport);

        AttributeDefinitionDMO _dmwIteratorClassOBJ = new AttributeDefinitionDMO();
        _dmwIteratorClass = new AttributeDefinition(_dmwIteratorClassOBJ);
        _dmwIteratorClassOBJ.addDescription("This attribute indicates just the DmcContainerIterator name for a\n class of object.");
        _dmwIteratorClassOBJ.setDmdID("92");
        _dmwIteratorClassOBJ.setDotName("meta.dmwIteratorClass.AttributeDefinition");
        _dmwIteratorClassOBJ.setFile("metaSchema.dms");
        _dmwIteratorClassOBJ.setInternalUse("true");
        _dmwIteratorClassOBJ.setLineNumber("1498");
        _dmwIteratorClassOBJ.setName("dmwIteratorClass");
        _dmwIteratorClassOBJ.setType("meta.String");
        _dmwIteratorClass.setDefinedIn(this);
        addAttributeDefList(_dmwIteratorClass);

        AttributeDefinitionDMO _dmwIteratorImportOBJ = new AttributeDefinitionDMO();
        _dmwIteratorImport = new AttributeDefinition(_dmwIteratorImportOBJ);
        _dmwIteratorImportOBJ.addDescription("This attribute indicates the full name of the DmcContainerIterator \n derived class that allows us to iterate over a set of object references and get back\n the DMW wrapper object instead of the DMO.");
        _dmwIteratorImportOBJ.setDmdID("91");
        _dmwIteratorImportOBJ.setDotName("meta.dmwIteratorImport.AttributeDefinition");
        _dmwIteratorImportOBJ.setFile("metaSchema.dms");
        _dmwIteratorImportOBJ.setInternalUse("true");
        _dmwIteratorImportOBJ.setLineNumber("1490");
        _dmwIteratorImportOBJ.setName("dmwIteratorImport");
        _dmwIteratorImportOBJ.setType("meta.String");
        _dmwIteratorImport.setDefinedIn(this);
        addAttributeDefList(_dmwIteratorImport);

        AttributeDefinitionDMO _dmwPackageOBJ = new AttributeDefinitionDMO();
        _dmwPackage = new AttributeDefinition(_dmwPackageOBJ);
        _dmwPackageOBJ.addDescription("Indicates the package where server related Dark Matter Wrapper classes \n were generated for this schema. This is used when we're generating derived wrapper\n classes.");
        _dmwPackageOBJ.setDmdID("54");
        _dmwPackageOBJ.setDotName("meta.dmwPackage.AttributeDefinition");
        _dmwPackageOBJ.setFile("metaSchema.dms");
        _dmwPackageOBJ.setLineNumber("1187");
        _dmwPackageOBJ.setName("dmwPackage");
        _dmwPackageOBJ.setType("meta.String");
        _dmwPackage.setDefinedIn(this);
        addAttributeDefList(_dmwPackage);

        AttributeDefinitionDMO _dmwTypeToPackageOBJ = new AttributeDefinitionDMO();
        _dmwTypeToPackage = new AttributeDefinition(_dmwTypeToPackageOBJ);
        _dmwTypeToPackageOBJ.addDescription("The dmwTypeToPackage attribute is used to indicate alternative generation\n packages for the Dark Matter Wrapper (DMW) code generation mechanisms. For instance, if we \n want to generate GXT wrappers for use with Sencha's GXT model classes, we could specify\n dmwTypeToPackage gxt com.example.client. Each of schemas that's loaded for generation would\n have to have this same attribute specified so that, if there were derived classes across\n schemas, the appropriate wrapper derivations could be determined. See the ClassDefintion.adjustClass()\n method to see how this is used.");
        _dmwTypeToPackageOBJ.setDmdID("123");
        _dmwTypeToPackageOBJ.setDotName("meta.dmwTypeToPackage.AttributeDefinition");
        _dmwTypeToPackageOBJ.setFile("metaSchema.dms");
        _dmwTypeToPackageOBJ.setLineNumber("1725");
        _dmwTypeToPackageOBJ.setName("dmwTypeToPackage");
        _dmwTypeToPackageOBJ.setType("meta.StringToString");
        _dmwTypeToPackageOBJ.setValueType("MULTI");
        _dmwTypeToPackage.setDefinedIn(this);
        addAttributeDefList(_dmwTypeToPackage);

        AttributeDefinitionDMO _dmwWrapperTypeOBJ = new AttributeDefinitionDMO();
        _dmwWrapperType = new AttributeDefinition(_dmwWrapperTypeOBJ);
        _dmwWrapperTypeOBJ.addDescription("The dmwWrapperType is used to indicate whether or not you want extended wrappers\n when the wrappers are generated for an object in a particular generation context.");
        _dmwWrapperTypeOBJ.setDmdID("124");
        _dmwWrapperTypeOBJ.setDotName("meta.dmwWrapperType.AttributeDefinition");
        _dmwWrapperTypeOBJ.setFile("metaSchema.dms");
        _dmwWrapperTypeOBJ.setLineNumber("1733");
        _dmwWrapperTypeOBJ.setName("dmwWrapperType");
        _dmwWrapperTypeOBJ.setType("meta.DmwTypeToWrapperType");
        _dmwWrapperTypeOBJ.setValueType("MULTI");
        _dmwWrapperType.setDefinedIn(this);
        addAttributeDefList(_dmwWrapperType);

        AttributeDefinitionDMO _dotNameOBJ = new AttributeDefinitionDMO();
        _dotName = new AttributeDefinition(_dotNameOBJ);
        _dotNameOBJ.addDescription("The dotName attribute is used to store dot separated names.");
        _dotNameOBJ.setDesignatedNameAttribute("true");
        _dotNameOBJ.setDmdID("107");
        _dotNameOBJ.setDotName("meta.dotName.AttributeDefinition");
        _dotNameOBJ.setFile("metaSchema.dms");
        _dotNameOBJ.setLineNumber("1602");
        _dotNameOBJ.setName("dotName");
        _dotNameOBJ.setType("meta.DotName");
        _dotName.setDefinedIn(this);
        addAttributeDefList(_dotName);

        AttributeDefinitionDMO _dsdModuleDefinitionOBJ = new AttributeDefinitionDMO();
        _dsdModuleDefinition = new AttributeDefinition(_dsdModuleDefinitionOBJ);
        _dsdModuleDefinitionOBJ.addDescription("The DSDefinitionModule that resulted in the creation of an\n internally generated ClassDefinition.");
        _dsdModuleDefinitionOBJ.setDmdID("168");
        _dsdModuleDefinitionOBJ.setDotName("meta.dsdModuleDefinition.AttributeDefinition");
        _dsdModuleDefinitionOBJ.setFile("metaSchema.dms");
        _dsdModuleDefinitionOBJ.setInternalUse("true");
        _dsdModuleDefinitionOBJ.setLineNumber("2069");
        _dsdModuleDefinitionOBJ.setName("dsdModuleDefinition");
        _dsdModuleDefinitionOBJ.setType("meta.DSDefinitionModule");
        _dsdModuleDefinition.setDefinedIn(this);
        addAttributeDefList(_dsdModuleDefinition);

        AttributeDefinitionDMO _dsdModuleListOBJ = new AttributeDefinitionDMO();
        _dsdModuleList = new AttributeDefinition(_dsdModuleListOBJ);
        _dsdModuleListOBJ.addDescription("The set of DSDefinitionModules defined in a schema.");
        _dsdModuleListOBJ.setDmdID("169");
        _dsdModuleListOBJ.setDotName("meta.dsdModuleList.AttributeDefinition");
        _dsdModuleListOBJ.setFile("metaSchema.dms");
        _dsdModuleListOBJ.setLineNumber("2076");
        _dsdModuleListOBJ.setName("dsdModuleList");
        _dsdModuleListOBJ.setType("meta.DSDefinitionModule");
        _dsdModuleListOBJ.setValueType("MULTI");
        _dsdModuleList.setDefinedIn(this);
        addAttributeDefList(_dsdModuleList);

        AttributeDefinitionDMO _enumDefListOBJ = new AttributeDefinitionDMO();
        _enumDefList = new AttributeDefinition(_enumDefListOBJ);
        _enumDefListOBJ.addDescription("A list of EnumDefinitions.");
        _enumDefListOBJ.setDmdID("58");
        _enumDefListOBJ.setDotName("meta.enumDefList.AttributeDefinition");
        _enumDefListOBJ.setFile("metaSchema.dms");
        _enumDefListOBJ.setInternalUse("true");
        _enumDefListOBJ.setLineNumber("1220");
        _enumDefListOBJ.setName("enumDefList");
        _enumDefListOBJ.setType("meta.EnumDefinition");
        _enumDefListOBJ.setValueType("MULTI");
        _enumDefList.setDefinedIn(this);
        addAttributeDefList(_enumDefList);

        AttributeDefinitionDMO _enumIntOBJ = new AttributeDefinitionDMO();
        _enumInt = new AttributeDefinition(_enumIntOBJ);
        _enumIntOBJ.addDescription("The integer value associated with an enumeration value.");
        _enumIntOBJ.setDmdID("69");
        _enumIntOBJ.setDotName("meta.enumInt.AttributeDefinition");
        _enumIntOBJ.setFile("metaSchema.dms");
        _enumIntOBJ.setLineNumber("1316");
        _enumIntOBJ.setName("enumInt");
        _enumIntOBJ.setType("meta.Integer");
        _enumInt.setDefinedIn(this);
        addAttributeDefList(_enumInt);

        AttributeDefinitionDMO _enumNameOBJ = new AttributeDefinitionDMO();
        _enumName = new AttributeDefinition(_enumNameOBJ);
        _enumNameOBJ.addDescription("The original name of an enum as referred to in the internally generated type for enums.");
        _enumNameOBJ.setDmdID("99");
        _enumNameOBJ.setDotName("meta.enumName.AttributeDefinition");
        _enumNameOBJ.setFile("metaSchema.dms");
        _enumNameOBJ.setInternalUse("true");
        _enumNameOBJ.setLineNumber("1548");
        _enumNameOBJ.setName("enumName");
        _enumNameOBJ.setType("meta.String");
        _enumName.setDefinedIn(this);
        addAttributeDefList(_enumName);

        AttributeDefinitionDMO _enumStringOBJ = new AttributeDefinitionDMO();
        _enumString = new AttributeDefinition(_enumStringOBJ);
        _enumStringOBJ.addDescription("The string value associated with an enumeration value.");
        _enumStringOBJ.setDmdID("70");
        _enumStringOBJ.setDotName("meta.enumString.AttributeDefinition");
        _enumStringOBJ.setFile("metaSchema.dms");
        _enumStringOBJ.setLineNumber("1322");
        _enumStringOBJ.setName("enumString");
        _enumStringOBJ.setType("meta.String");
        _enumString.setDefinedIn(this);
        addAttributeDefList(_enumString);

        AttributeDefinitionDMO _enumValueOBJ = new AttributeDefinitionDMO();
        _enumValue = new AttributeDefinition(_enumValueOBJ);
        _enumValueOBJ.addDescription("Indicates the set of enum values associated with an enumeration type\n definition.");
        _enumValueOBJ.setDmdID("33");
        _enumValueOBJ.setDotName("meta.enumValue.AttributeDefinition");
        _enumValueOBJ.setFile("metaSchema.dms");
        _enumValueOBJ.setLineNumber("1021");
        _enumValueOBJ.setName("enumValue");
        _enumValueOBJ.setType("meta.EnumValue");
        _enumValueOBJ.setValueType("MULTI");
        _enumValue.setDefinedIn(this);
        addAttributeDefList(_enumValue);

        AttributeDefinitionDMO _exampleOBJ = new AttributeDefinitionDMO();
        _example = new AttributeDefinition(_exampleOBJ);
        _exampleOBJ.addDescription("The example attribute is used to provide additional\n examples of how some defined thing is to be used.");
        _exampleOBJ.setDmdID("63");
        _exampleOBJ.setDotName("meta.example.AttributeDefinition");
        _exampleOBJ.setFile("metaSchema.dms");
        _exampleOBJ.setLineNumber("1260");
        _exampleOBJ.setName("example");
        _exampleOBJ.setPreserveNewlines("true");
        _exampleOBJ.setType("meta.Example");
        _exampleOBJ.setValueType("MULTI");
        _example.setDefinedIn(this);
        addAttributeDefList(_example);

        AttributeDefinitionDMO _excludeFromContextOBJ = new AttributeDefinitionDMO();
        _excludeFromContext = new AttributeDefinition(_excludeFromContextOBJ);
        _excludeFromContextOBJ.addDescription("The excludeFromContext attribute is used to indicate that\n a class of object (and all of its derivatives) should be excluded from the wrapper\n generation for the specified context. An example usage is in the Dark Matter Protocol\n where we don't want to generate wrappers for the message objects in a GXT context.");
        _excludeFromContextOBJ.setDmdID("130");
        _excludeFromContextOBJ.setDotName("meta.excludeFromContext.AttributeDefinition");
        _excludeFromContextOBJ.setFile("metaSchema.dms");
        _excludeFromContextOBJ.setLineNumber("1786");
        _excludeFromContextOBJ.setName("excludeFromContext");
        _excludeFromContextOBJ.setType("meta.String");
        _excludeFromContextOBJ.setValueType("MULTI");
        _excludeFromContext.setDefinedIn(this);
        addAttributeDefList(_excludeFromContext);

        AttributeDefinitionDMO _extendedClassOBJ = new AttributeDefinitionDMO();
        _extendedClass = new AttributeDefinition(_extendedClassOBJ);
        _extendedClassOBJ.addDescription("The extendedClass indicates the fully qualified name of the class\n that is derived from the generated ComplexType to provide additional behaviour.");
        _extendedClassOBJ.setDmdID("106");
        _extendedClassOBJ.setDotName("meta.extendedClass.AttributeDefinition");
        _extendedClassOBJ.setFile("metaSchema.dms");
        _extendedClassOBJ.setLineNumber("1595");
        _extendedClassOBJ.setName("extendedClass");
        _extendedClassOBJ.setType("meta.String");
        _extendedClass.setDefinedIn(this);
        addAttributeDefList(_extendedClass);

        AttributeDefinitionDMO _extendedReferenceClassOBJ = new AttributeDefinitionDMO();
        _extendedReferenceClass = new AttributeDefinition(_extendedReferenceClassOBJ);
        _extendedReferenceClassOBJ.addDescription("Indicates the class of object to which an \n ExtendedReferenceTypeDefinition refers.");
        _extendedReferenceClassOBJ.setDmdID("131");
        _extendedReferenceClassOBJ.setDotName("meta.extendedReferenceClass.AttributeDefinition");
        _extendedReferenceClassOBJ.setFile("metaSchema.dms");
        _extendedReferenceClassOBJ.setLineNumber("1793");
        _extendedReferenceClassOBJ.setName("extendedReferenceClass");
        _extendedReferenceClassOBJ.setType("meta.ClassDefinition");
        _extendedReferenceClass.setDefinedIn(this);
        addAttributeDefList(_extendedReferenceClass);

        AttributeDefinitionDMO _extendedReferenceTypeDefListOBJ = new AttributeDefinitionDMO();
        _extendedReferenceTypeDefList = new AttributeDefinition(_extendedReferenceTypeDefListOBJ);
        _extendedReferenceTypeDefListOBJ.addDescription("A list of extended reference type definition references.");
        _extendedReferenceTypeDefListOBJ.setDmdID("132");
        _extendedReferenceTypeDefListOBJ.setDotName("meta.extendedReferenceTypeDefList.AttributeDefinition");
        _extendedReferenceTypeDefListOBJ.setFile("metaSchema.dms");
        _extendedReferenceTypeDefListOBJ.setInternalUse("true");
        _extendedReferenceTypeDefListOBJ.setLineNumber("1801");
        _extendedReferenceTypeDefListOBJ.setName("extendedReferenceTypeDefList");
        _extendedReferenceTypeDefListOBJ.setType("meta.ExtendedReferenceTypeDefinition");
        _extendedReferenceTypeDefListOBJ.setValueType("MULTI");
        _extendedReferenceTypeDefList.setDefinedIn(this);
        addAttributeDefList(_extendedReferenceTypeDefList);

        AttributeDefinitionDMO _extendsInterfaceOBJ = new AttributeDefinitionDMO();
        _extendsInterface = new AttributeDefinition(_extendsInterfaceOBJ);
        _extendsInterfaceOBJ.addDescription("Indicates the fully qualifed name of an interface that an interface extends.");
        _extendsInterfaceOBJ.setDmdID("119");
        _extendsInterfaceOBJ.setDotName("meta.extendsInterface.AttributeDefinition");
        _extendsInterfaceOBJ.setFile("metaSchema.dms");
        _extendsInterfaceOBJ.setLineNumber("1690");
        _extendsInterfaceOBJ.setName("extendsInterface");
        _extendsInterfaceOBJ.setType("meta.String");
        _extendsInterfaceOBJ.setValueType("MULTI");
        _extendsInterface.setDefinedIn(this);
        addAttributeDefList(_extendsInterface);

        AttributeDefinitionDMO _fieldOBJ = new AttributeDefinitionDMO();
        _field = new AttributeDefinition(_fieldOBJ);
        _fieldOBJ.addDescription("The field indicates a type and name for a field in a ComplexType.");
        _fieldOBJ.setDmdID("105");
        _fieldOBJ.setDotName("meta.field.AttributeDefinition");
        _fieldOBJ.setFile("metaSchema.dms");
        _fieldOBJ.setLineNumber("1588");
        _fieldOBJ.setName("field");
        _fieldOBJ.setType("meta.Field");
        _fieldOBJ.setValueType("MULTI");
        _field.setDefinedIn(this);
        addAttributeDefList(_field);

        AttributeDefinitionDMO _fieldSeparatorOBJ = new AttributeDefinitionDMO();
        _fieldSeparator = new AttributeDefinition(_fieldSeparatorOBJ);
        _fieldSeparatorOBJ.addDescription("The fieldSeparator is used to indicate the separation character used\n when a ComplexType is represented as a String. If a fieldSeparator isn't specified, it is\n assumed to be a space.");
        _fieldSeparatorOBJ.setDmdID("104");
        _fieldSeparatorOBJ.setDotName("meta.fieldSeparator.AttributeDefinition");
        _fieldSeparatorOBJ.setFile("metaSchema.dms");
        _fieldSeparatorOBJ.setLineNumber("1581");
        _fieldSeparatorOBJ.setName("fieldSeparator");
        _fieldSeparatorOBJ.setType("meta.String");
        _fieldSeparator.setDefinedIn(this);
        addAttributeDefList(_fieldSeparator);

        AttributeDefinitionDMO _fileOBJ = new AttributeDefinitionDMO();
        _file = new AttributeDefinition(_fileOBJ);
        _fileOBJ.addDescription("Indicates the file from which a definition was loaded.");
        _fileOBJ.setDmdID("74");
        _fileOBJ.setDotName("meta.file.AttributeDefinition");
        _fileOBJ.setFile("metaSchema.dms");
        _fileOBJ.setInternalUse("true");
        _fileOBJ.setLineNumber("1349");
        _fileOBJ.setName("file");
        _fileOBJ.setType("meta.String");
        _file.setDefinedIn(this);
        addAttributeDefList(_file);

        AttributeDefinitionDMO _fileExtensionOBJ = new AttributeDefinitionDMO();
        _fileExtension = new AttributeDefinition(_fileExtensionOBJ);
        _fileExtensionOBJ.addDescription("Indicates the extension of files of a particular type.");
        _fileExtensionOBJ.setDmdID("161");
        _fileExtensionOBJ.setDotName("meta.fileExtension.AttributeDefinition");
        _fileExtensionOBJ.setFile("metaSchema.dms");
        _fileExtensionOBJ.setLineNumber("2012");
        _fileExtensionOBJ.setName("fileExtension");
        _fileExtensionOBJ.setType("meta.String");
        _fileExtension.setDefinedIn(this);
        addAttributeDefList(_fileExtension);

        AttributeDefinitionDMO _filterAttributeDefOBJ = new AttributeDefinitionDMO();
        _filterAttributeDef = new AttributeDefinition(_filterAttributeDefOBJ);
        _filterAttributeDefOBJ.addDescription("The filterAttributeDef is a reference to the attribute that is locked\n to a TypeDefinition that is flagged as filterType. This mechanism is used to create the\n correct type of DmcType[FILTERTYPE]SV derivative for a value of type DmcFilter.");
        _filterAttributeDefOBJ.setDmdID("127");
        _filterAttributeDefOBJ.setDotName("meta.filterAttributeDef.AttributeDefinition");
        _filterAttributeDefOBJ.setFile("metaSchema.dms");
        _filterAttributeDefOBJ.setInternalUse("true");
        _filterAttributeDefOBJ.setLineNumber("1757");
        _filterAttributeDefOBJ.setName("filterAttributeDef");
        _filterAttributeDefOBJ.setType("meta.AttributeDefinition");
        _filterAttributeDef.setDefinedIn(this);
        addAttributeDefList(_filterAttributeDef);

        AttributeDefinitionDMO _generatedFileHeaderOBJ = new AttributeDefinitionDMO();
        _generatedFileHeader = new AttributeDefinition(_generatedFileHeaderOBJ);
        _generatedFileHeaderOBJ.addDescription("The name of file that coresides with the schema.dms file that\n contains a common header to be applied to all generated code. For instance, you\n might want a common licensing comment at the top of your generated files.");
        _generatedFileHeaderOBJ.setDmdID("81");
        _generatedFileHeaderOBJ.setDotName("meta.generatedFileHeader.AttributeDefinition");
        _generatedFileHeaderOBJ.setFile("metaSchema.dms");
        _generatedFileHeaderOBJ.setLineNumber("1410");
        _generatedFileHeaderOBJ.setName("generatedFileHeader");
        _generatedFileHeaderOBJ.setType("meta.String");
        _generatedFileHeader.setDefinedIn(this);
        addAttributeDefList(_generatedFileHeader);

        AttributeDefinitionDMO _genericArgsOBJ = new AttributeDefinitionDMO();
        _genericArgs = new AttributeDefinition(_genericArgsOBJ);
        _genericArgsOBJ.addDescription("This attribute indicates the generic arguments to be supplied in the\n use of a class in an autogenerated Iterable.");
        _genericArgsOBJ.setDmdID("94");
        _genericArgsOBJ.setDotName("meta.genericArgs.AttributeDefinition");
        _genericArgsOBJ.setFile("metaSchema.dms");
        _genericArgsOBJ.setLineNumber("1513");
        _genericArgsOBJ.setName("genericArgs");
        _genericArgsOBJ.setType("meta.String");
        _genericArgs.setDefinedIn(this);
        addAttributeDefList(_genericArgs);

        AttributeDefinitionDMO _genericArgsImportOBJ = new AttributeDefinitionDMO();
        _genericArgsImport = new AttributeDefinition(_genericArgsImportOBJ);
        _genericArgsImportOBJ.addDescription("Indicates the import required to support a genericArgs specification i.e. if you're\n not specifying something like <?>, an additional import may be required.");
        _genericArgsImportOBJ.setDmdID("98");
        _genericArgsImportOBJ.setDotName("meta.genericArgsImport.AttributeDefinition");
        _genericArgsImportOBJ.setFile("metaSchema.dms");
        _genericArgsImportOBJ.setLineNumber("1541");
        _genericArgsImportOBJ.setName("genericArgsImport");
        _genericArgsImportOBJ.setType("meta.String");
        _genericArgsImport.setDefinedIn(this);
        addAttributeDefList(_genericArgsImport);

        AttributeDefinitionDMO _getMethodOBJ = new AttributeDefinitionDMO();
        _getMethod = new AttributeDefinition(_getMethodOBJ);
        _getMethodOBJ.addDescription("If you want to return a value other than the native value class, use the appropriate\n getType and specify the method you need to call on the DmdValue derived class to return it.");
        _getMethodOBJ.setDmdID("49");
        _getMethodOBJ.setDotName("meta.getMethod.AttributeDefinition");
        _getMethodOBJ.setFile("metaSchema.dms");
        _getMethodOBJ.setLineNumber("1146");
        _getMethodOBJ.setName("getMethod");
        _getMethodOBJ.setType("meta.String");
        _getMethod.setDefinedIn(this);
        addAttributeDefList(_getMethod);

        AttributeDefinitionDMO _getTypeOBJ = new AttributeDefinitionDMO();
        _getType = new AttributeDefinition(_getTypeOBJ);
        _getTypeOBJ.addDescription("Indicates the type of value that will be returned when an attribute value\n is returned for a type definition; a type definition defines only one get type.\n This must be a Java class reference and not a primitive type e.g. int.");
        _getTypeOBJ.setDmdID("48");
        _getTypeOBJ.setDotName("meta.getType.AttributeDefinition");
        _getTypeOBJ.setFile("metaSchema.dms");
        _getTypeOBJ.setLineNumber("1139");
        _getTypeOBJ.setName("getType");
        _getTypeOBJ.setType("meta.String");
        _getType.setDefinedIn(this);
        addAttributeDefList(_getType);

        AttributeDefinitionDMO _helperClassNameOBJ = new AttributeDefinitionDMO();
        _helperClassName = new AttributeDefinition(_helperClassNameOBJ);
        _helperClassNameOBJ.addDescription("This attribute indicates the full name of the generated helper class for \n object references i.e. if you had a ClassDefinition X, the framework generates a \n types/XREF class which is subsequently used by the DmcTypeXREF class to store references\n to objects of the defined class.");
        _helperClassNameOBJ.setDmdID("47");
        _helperClassNameOBJ.setDotName("meta.helperClassName.AttributeDefinition");
        _helperClassNameOBJ.setFile("metaSchema.dms");
        _helperClassNameOBJ.setInternalUse("true");
        _helperClassNameOBJ.setLineNumber("1131");
        _helperClassNameOBJ.setName("helperClassName");
        _helperClassNameOBJ.setType("meta.String");
        _helperClassName.setDefinedIn(this);
        addAttributeDefList(_helperClassName);

        AttributeDefinitionDMO _hintOBJ = new AttributeDefinitionDMO();
        _hint = new AttributeDefinition(_hintOBJ);
        _hintOBJ.addDescription("A short description of something that can be dumped as one line summary of something.\n For longer explanations, use the description attribute.");
        _hintOBJ.setDmdID("186");
        _hintOBJ.setDotName("meta.hint.AttributeDefinition");
        _hintOBJ.setFile("metaSchema.dms");
        _hintOBJ.setLineNumber("2233");
        _hintOBJ.setName("hint");
        _hintOBJ.setType("meta.String");
        _hint.setDefinedIn(this);
        addAttributeDefList(_hint);

        AttributeDefinitionDMO _immediateHaltOBJ = new AttributeDefinitionDMO();
        _immediateHalt = new AttributeDefinition(_immediateHaltOBJ);
        _immediateHaltOBJ.addDescription("The immediateHalt flag is used to indicate that no further\n rule processing should occur if a rule fails. It is an optional attribute on rule instance\n objects. In somes cases, there is no point in continuing with the application of a set \n of rules, so this flag gives the option of halting further processing.");
        _immediateHaltOBJ.setDmdID("137");
        _immediateHaltOBJ.setDotName("meta.immediateHalt.AttributeDefinition");
        _immediateHaltOBJ.setFile("metaSchema.dms");
        _immediateHaltOBJ.setLineNumber("1837");
        _immediateHaltOBJ.setName("immediateHalt");
        _immediateHaltOBJ.setType("meta.Boolean");
        _immediateHalt.setDefinedIn(this);
        addAttributeDefList(_immediateHalt);

        AttributeDefinitionDMO _indexSizeOBJ = new AttributeDefinitionDMO();
        _indexSize = new AttributeDefinition(_indexSizeOBJ);
        _indexSizeOBJ.addDescription("The indexSize is used in conjunction with the MULTI valueType to\n indicate that the attribute may have the specified number of values and is integer indexed.\n Indexed attributes may be thought of as having a predetermined number of slots into which\n values may be stored. When indexed, an attribute has values added to it using the setMVnth()\n interface, not the usual add() interface. If you attempt to use add() with an indexed attribute,\n an exception will be thrown.");
        _indexSizeOBJ.setDmdID("129");
        _indexSizeOBJ.setDotName("meta.indexSize.AttributeDefinition");
        _indexSizeOBJ.setFile("metaSchema.dms");
        _indexSizeOBJ.setLineNumber("1776");
        _indexSizeOBJ.setName("indexSize");
        _indexSizeOBJ.setType("meta.Integer");
        _indexSize.setDefinedIn(this);
        addAttributeDefList(_indexSize);

        AttributeDefinitionDMO _instantiationOBJ = new AttributeDefinitionDMO();
        _instantiation = new AttributeDefinition(_instantiationOBJ);
        _instantiationOBJ.addDescription("The instantiation attribute specifies how something is to be instantiated.");
        _instantiationOBJ.setDmdID("148");
        _instantiationOBJ.setDotName("meta.instantiation.AttributeDefinition");
        _instantiationOBJ.setFile("metaSchema.dms");
        _instantiationOBJ.setLineNumber("1912");
        _instantiationOBJ.setName("instantiation");
        _instantiationOBJ.setType("meta.String");
        _instantiation.setDefinedIn(this);
        addAttributeDefList(_instantiation);

        AttributeDefinitionDMO _integerNameOBJ = new AttributeDefinitionDMO();
        _integerName = new AttributeDefinition(_integerNameOBJ);
        _integerNameOBJ.addDescription("The object name for objects uniquely identified with an integer.");
        _integerNameOBJ.setDesignatedNameAttribute("true");
        _integerNameOBJ.setDmdID("100");
        _integerNameOBJ.setDotName("meta.integerName.AttributeDefinition");
        _integerNameOBJ.setFile("metaSchema.dms");
        _integerNameOBJ.setLineNumber("1555");
        _integerNameOBJ.setName("integerName");
        _integerNameOBJ.setType("meta.IntegerName");
        _integerName.setDefinedIn(this);
        addAttributeDefList(_integerName);

        AttributeDefinitionDMO _intendedToExtendOBJ = new AttributeDefinitionDMO();
        _intendedToExtend = new AttributeDefinition(_intendedToExtendOBJ);
        _intendedToExtendOBJ.addDescription("This attribute can be used on AUXILIARY classes to give a hint about their\n intended usage. For example, if you were extending schema definitions with some or your \n own attributes for some purpose, your auxiliary class could have intendedToExtend ClassDefinition.");
        _intendedToExtendOBJ.setDmdID("22");
        _intendedToExtendOBJ.setDotName("meta.intendedToExtend.AttributeDefinition");
        _intendedToExtendOBJ.setFile("metaSchema.dms");
        _intendedToExtendOBJ.setLineNumber("934");
        _intendedToExtendOBJ.setName("intendedToExtend");
        _intendedToExtendOBJ.setType("meta.ClassDefinition");
        _intendedToExtendOBJ.setValueType("MULTI");
        _intendedToExtend.setDefinedIn(this);
        addAttributeDefList(_intendedToExtend);

        AttributeDefinitionDMO _internalTypeDefListOBJ = new AttributeDefinitionDMO();
        _internalTypeDefList = new AttributeDefinition(_internalTypeDefListOBJ);
        _internalTypeDefListOBJ.addDescription("A list of type definitions that were generated internally to represent\n enums and object references.");
        _internalTypeDefListOBJ.setDmdID("57");
        _internalTypeDefListOBJ.setDotName("meta.internalTypeDefList.AttributeDefinition");
        _internalTypeDefListOBJ.setFile("metaSchema.dms");
        _internalTypeDefListOBJ.setInternalUse("true");
        _internalTypeDefListOBJ.setLineNumber("1212");
        _internalTypeDefListOBJ.setName("internalTypeDefList");
        _internalTypeDefListOBJ.setType("meta.TypeDefinition");
        _internalTypeDefListOBJ.setValueType("MULTI");
        _internalTypeDefList.setDefinedIn(this);
        addAttributeDefList(_internalTypeDefList);

        AttributeDefinitionDMO _internalTypeRefOBJ = new AttributeDefinitionDMO();
        _internalTypeRef = new AttributeDefinition(_internalTypeRefOBJ);
        _internalTypeRefOBJ.addDescription("Indicates the internal type that's generated for all ClassDefinitions. This\n is set automatically on ClassDefinitions as they are parsed.");
        _internalTypeRefOBJ.setDmdID("20");
        _internalTypeRefOBJ.setDotName("meta.internalTypeRef.AttributeDefinition");
        _internalTypeRefOBJ.setFile("metaSchema.dms");
        _internalTypeRefOBJ.setInternalUse("true");
        _internalTypeRefOBJ.setLineNumber("919");
        _internalTypeRefOBJ.setName("internalTypeRef");
        _internalTypeRefOBJ.setType("meta.TypeDefinition");
        _internalTypeRef.setDefinedIn(this);
        addAttributeDefList(_internalTypeRef);

        AttributeDefinitionDMO _internalUseOBJ = new AttributeDefinitionDMO();
        _internalUse = new AttributeDefinition(_internalUseOBJ);
        _internalUseOBJ.addDescription("Indicates if an attribute is used and set within the Dark Matter Data\n code generation mechanisms. In the documentation generation code, attributes marked as\n internalUse WILL NOT be displayed unless you set the -internalUse flag is indicated.");
        _internalUseOBJ.setDmdID("122");
        _internalUseOBJ.setDotName("meta.internalUse.AttributeDefinition");
        _internalUseOBJ.setFile("metaSchema.dms");
        _internalUseOBJ.setLineNumber("1712");
        _internalUseOBJ.setName("internalUse");
        _internalUseOBJ.setType("meta.Boolean");
        _internalUse.setDefinedIn(this);
        addAttributeDefList(_internalUse);

        AttributeDefinitionDMO _internallyGeneratedOBJ = new AttributeDefinitionDMO();
        _internallyGenerated = new AttributeDefinition(_internallyGeneratedOBJ);
        _internallyGeneratedOBJ.addDescription("This flag indicates if the associated definition was internally generated.\n This is the case for TypeDefinitions generated for ClassDefinitions and EnumDefinitions\n that allow for references to these objects.");
        _internallyGeneratedOBJ.setDmdID("77");
        _internallyGeneratedOBJ.setDotName("meta.internallyGenerated.AttributeDefinition");
        _internallyGeneratedOBJ.setFile("metaSchema.dms");
        _internallyGeneratedOBJ.setInternalUse("true");
        _internallyGeneratedOBJ.setLineNumber("1374");
        _internallyGeneratedOBJ.setName("internallyGenerated");
        _internallyGeneratedOBJ.setType("meta.Boolean");
        _internallyGenerated.setDefinedIn(this);
        addAttributeDefList(_internallyGenerated);

        AttributeDefinitionDMO _isDSDefinitionOBJ = new AttributeDefinitionDMO();
        _isDSDefinition = new AttributeDefinition(_isDSDefinitionOBJ);
        _isDSDefinitionOBJ.addDescription("Indicates if the class defined by a ClassDefinition and its derivatives are part\n of a domain specific set of definitions. For instance, the definitions associated with the meta schema are\n considered a set of domain specific definitions for defining data objects; the dark-matter Model View\n Whatever (MVW) definitions describe a set of domain specific concepts for defining aspects of a GWT\n application.\n <p/>\n A domain specific definition must be named by name and must have dotName as an attribute because the \n generated class will implement the DmcDefinitionIF which assumes that these attributes exist. This\n interface allows these definitions to be managed as part of a set of definitions.");
        _isDSDefinitionOBJ.setDmdID("158");
        _isDSDefinitionOBJ.setDotName("meta.isDSDefinition.AttributeDefinition");
        _isDSDefinitionOBJ.setFile("metaSchema.dms");
        _isDSDefinitionOBJ.setLineNumber("1990");
        _isDSDefinitionOBJ.setName("isDSDefinition");
        _isDSDefinitionOBJ.setType("meta.Boolean");
        _isDSDefinition.setDefinedIn(this);
        addAttributeDefList(_isDSDefinition);

        AttributeDefinitionDMO _isDefaultValueOBJ = new AttributeDefinitionDMO();
        _isDefaultValue = new AttributeDefinition(_isDefaultValueOBJ);
        _isDefaultValueOBJ.addDescription("This flag is set to true to indicate the default value for a type (e.g. an enum).");
        _isDefaultValueOBJ.setDmdID("17");
        _isDefaultValueOBJ.setDotName("meta.isDefaultValue.AttributeDefinition");
        _isDefaultValueOBJ.setFile("metaSchema.dms");
        _isDefaultValueOBJ.setLineNumber("893");
        _isDefaultValueOBJ.setName("isDefaultValue");
        _isDefaultValueOBJ.setType("meta.Boolean");
        _isDefaultValue.setDefinedIn(this);
        addAttributeDefList(_isDefaultValue);

        AttributeDefinitionDMO _isEnumTypeOBJ = new AttributeDefinitionDMO();
        _isEnumType = new AttributeDefinition(_isEnumTypeOBJ);
        _isEnumTypeOBJ.addDescription("This flag is set to true for type definitions that define enumerations.");
        _isEnumTypeOBJ.setDmdID("16");
        _isEnumTypeOBJ.setDotName("meta.isEnumType.AttributeDefinition");
        _isEnumTypeOBJ.setFile("metaSchema.dms");
        _isEnumTypeOBJ.setInternalUse("true");
        _isEnumTypeOBJ.setLineNumber("887");
        _isEnumTypeOBJ.setName("isEnumType");
        _isEnumTypeOBJ.setType("meta.Boolean");
        _isEnumType.setDefinedIn(this);
        addAttributeDefList(_isEnumType);

        AttributeDefinitionDMO _isExtendedRefTypeOBJ = new AttributeDefinitionDMO();
        _isExtendedRefType = new AttributeDefinition(_isExtendedRefTypeOBJ);
        _isExtendedRefTypeOBJ.addDescription("This flag is used to indicate taht an internally generated type\n is an extended reference type.");
        _isExtendedRefTypeOBJ.setDmdID("133");
        _isExtendedRefTypeOBJ.setDotName("meta.isExtendedRefType.AttributeDefinition");
        _isExtendedRefTypeOBJ.setFile("metaSchema.dms");
        _isExtendedRefTypeOBJ.setInternalUse("true");
        _isExtendedRefTypeOBJ.setLineNumber("1809");
        _isExtendedRefTypeOBJ.setName("isExtendedRefType");
        _isExtendedRefTypeOBJ.setType("meta.Boolean");
        _isExtendedRefType.setDefinedIn(this);
        addAttributeDefList(_isExtendedRefType);

        AttributeDefinitionDMO _isExtensibleOBJ = new AttributeDefinitionDMO();
        _isExtensible = new AttributeDefinition(_isExtensibleOBJ);
        _isExtensibleOBJ.addDescription("Indicates whether or not the ClassDefinition associated with a RuleDefinition has classType EXTENSIBLE\n or not. This mechanism is useful in situations where the exact set of attributes associated with a rule must be flexible.\n The best example is the InitRule where any set of attributes can be specified as value for the rule.");
        _isExtensibleOBJ.setDmdID("142");
        _isExtensibleOBJ.setDotName("meta.isExtensible.AttributeDefinition");
        _isExtensibleOBJ.setFile("metaSchema.dms");
        _isExtensibleOBJ.setLineNumber("1871");
        _isExtensibleOBJ.setName("isExtensible");
        _isExtensibleOBJ.setType("meta.Boolean");
        _isExtensible.setDefinedIn(this);
        addAttributeDefList(_isExtensible);

        AttributeDefinitionDMO _isFilterTypeOBJ = new AttributeDefinitionDMO();
        _isFilterType = new AttributeDefinition(_isFilterTypeOBJ);
        _isFilterTypeOBJ.addDescription("Indicates that a type is derived from DmcFilter.");
        _isFilterTypeOBJ.setDmdID("125");
        _isFilterTypeOBJ.setDotName("meta.isFilterType.AttributeDefinition");
        _isFilterTypeOBJ.setFile("metaSchema.dms");
        _isFilterTypeOBJ.setLineNumber("1739");
        _isFilterTypeOBJ.setName("isFilterType");
        _isFilterTypeOBJ.setType("meta.Boolean");
        _isFilterType.setDefinedIn(this);
        addAttributeDefList(_isFilterType);

        AttributeDefinitionDMO _isGetActionOBJ = new AttributeDefinitionDMO();
        _isGetAction = new AttributeDefinition(_isGetActionOBJ);
        _isGetActionOBJ.addDescription("This flag indicates if an Action is merely a data retrieval (get) Action.\n Actions that are flagged with this attribute set to true will be executable\n even when the server is in a read-only mode because they don't actually\n alter data.");
        _isGetActionOBJ.setDmdID("72");
        _isGetActionOBJ.setDotName("meta.isGetAction.AttributeDefinition");
        _isGetActionOBJ.setFile("metaSchema.dms");
        _isGetActionOBJ.setLineNumber("1333");
        _isGetActionOBJ.setName("isGetAction");
        _isGetActionOBJ.setType("meta.Boolean");
        _isGetAction.setDefinedIn(this);
        addAttributeDefList(_isGetAction);

        AttributeDefinitionDMO _isHierarchicNameOBJ = new AttributeDefinitionDMO();
        _isHierarchicName = new AttributeDefinition(_isHierarchicNameOBJ);
        _isHierarchicNameOBJ.addDescription("Indicates if a name type is for hierarchic objects.");
        _isHierarchicNameOBJ.setDmdID("121");
        _isHierarchicNameOBJ.setDotName("meta.isHierarchicName.AttributeDefinition");
        _isHierarchicNameOBJ.setFile("metaSchema.dms");
        _isHierarchicNameOBJ.setInternalUse("true");
        _isHierarchicNameOBJ.setLineNumber("1704");
        _isHierarchicNameOBJ.setName("isHierarchicName");
        _isHierarchicNameOBJ.setType("meta.Boolean");
        _isHierarchicName.setDefinedIn(this);
        addAttributeDefList(_isHierarchicName);

        AttributeDefinitionDMO _isNameTypeOBJ = new AttributeDefinitionDMO();
        _isNameType = new AttributeDefinition(_isNameTypeOBJ);
        _isNameTypeOBJ.addDescription("This attribute indicates if a defined type is used for naming purposes.\n This allows us to automatically add attributes of this type to the AttributeFactories.");
        _isNameTypeOBJ.setDmdID("95");
        _isNameTypeOBJ.setDotName("meta.isNameType.AttributeDefinition");
        _isNameTypeOBJ.setFile("metaSchema.dms");
        _isNameTypeOBJ.setLineNumber("1520");
        _isNameTypeOBJ.setName("isNameType");
        _isNameTypeOBJ.setType("meta.Boolean");
        _isNameType.setDefinedIn(this);
        addAttributeDefList(_isNameType);

        AttributeDefinitionDMO _isNamedByOBJ = new AttributeDefinitionDMO();
        _isNamedBy = new AttributeDefinition(_isNamedByOBJ);
        _isNamedByOBJ.addDescription("Indicates the attribute by which an object of some class is named.\n When this attribute is supplied in a ClassDefinition, the generated DMO class will\n indicate that it implements the DmcNamedObjectIF and its getObjectName() method\n will return the value of the isNamedBy attribute.");
        _isNamedByOBJ.setDmdID("80");
        _isNamedByOBJ.setDotName("meta.isNamedBy.AttributeDefinition");
        _isNamedByOBJ.setFile("metaSchema.dms");
        _isNamedByOBJ.setLineNumber("1402");
        _isNamedByOBJ.setName("isNamedBy");
        _isNamedByOBJ.setType("meta.AttributeDefinition");
        _isNamedBy.setDefinedIn(this);
        addAttributeDefList(_isNamedBy);

        AttributeDefinitionDMO _isRefTypeOBJ = new AttributeDefinitionDMO();
        _isRefType = new AttributeDefinition(_isRefTypeOBJ);
        _isRefTypeOBJ.addDescription("This flag is set to true for type definitions that refer to other\n objects.");
        _isRefTypeOBJ.setDmdID("14");
        _isRefTypeOBJ.setDotName("meta.isRefType.AttributeDefinition");
        _isRefTypeOBJ.setFile("metaSchema.dms");
        _isRefTypeOBJ.setInternalUse("true");
        _isRefTypeOBJ.setLineNumber("872");
        _isRefTypeOBJ.setName("isRefType");
        _isRefTypeOBJ.setType("meta.Boolean");
        _isRefType.setDefinedIn(this);
        addAttributeDefList(_isRefType);

        AttributeDefinitionDMO _isSchemaRtypeOBJ = new AttributeDefinitionDMO();
        _isSchemaRtype = new AttributeDefinition(_isSchemaRtypeOBJ);
        _isSchemaRtypeOBJ.addDescription("This flag is set to true for type definitions that refer to other\n schema-related definitions.");
        _isSchemaRtypeOBJ.setDmdID("15");
        _isSchemaRtypeOBJ.setDotName("meta.isSchemaRtype.AttributeDefinition");
        _isSchemaRtypeOBJ.setFile("metaSchema.dms");
        _isSchemaRtypeOBJ.setInternalUse("true");
        _isSchemaRtypeOBJ.setLineNumber("880");
        _isSchemaRtypeOBJ.setName("isSchemaRtype");
        _isSchemaRtypeOBJ.setType("meta.Boolean");
        _isSchemaRtype.setDefinedIn(this);
        addAttributeDefList(_isSchemaRtype);

        AttributeDefinitionDMO _javaClassOBJ = new AttributeDefinitionDMO();
        _javaClass = new AttributeDefinition(_javaClassOBJ);
        _javaClassOBJ.addDescription("This attribute indicates the full name of the class (including package)\n that should be instantiated when an instance of an object is created via the\n DmdClassDef.newInstance() function. The class must be a derived class of\n DmdGenericObject.");
        _javaClassOBJ.setDmdID("34");
        _javaClassOBJ.setDotName("meta.javaClass.AttributeDefinition");
        _javaClassOBJ.setFile("metaSchema.dms");
        _javaClassOBJ.setInternalUse("true");
        _javaClassOBJ.setLineNumber("1031");
        _javaClassOBJ.setName("javaClass");
        _javaClassOBJ.setType("meta.String");
        _javaClass.setDefinedIn(this);
        addAttributeDefList(_javaClass);

        AttributeDefinitionDMO _keyClassOBJ = new AttributeDefinitionDMO();
        _keyClass = new AttributeDefinition(_keyClassOBJ);
        _keyClassOBJ.addDescription("This attribute indicates the class of the key used for types that support\n storage in a MAP.");
        _keyClassOBJ.setDmdID("96");
        _keyClassOBJ.setDotName("meta.keyClass.AttributeDefinition");
        _keyClassOBJ.setFile("metaSchema.dms");
        _keyClassOBJ.setLineNumber("1527");
        _keyClassOBJ.setName("keyClass");
        _keyClassOBJ.setType("meta.String");
        _keyClass.setDefinedIn(this);
        addAttributeDefList(_keyClass);

        AttributeDefinitionDMO _keyImportOBJ = new AttributeDefinitionDMO();
        _keyImport = new AttributeDefinition(_keyImportOBJ);
        _keyImportOBJ.addDescription("Indicates the import for a keyClass. this is required if the keyClass\n is NOT a primitive java type e.g. Integer, String etc.");
        _keyImportOBJ.setDmdID("97");
        _keyImportOBJ.setDotName("meta.keyImport.AttributeDefinition");
        _keyImportOBJ.setFile("metaSchema.dms");
        _keyImportOBJ.setLineNumber("1534");
        _keyImportOBJ.setName("keyImport");
        _keyImportOBJ.setType("meta.String");
        _keyImport.setDefinedIn(this);
        addAttributeDefList(_keyImport);

        AttributeDefinitionDMO _lineNumberOBJ = new AttributeDefinitionDMO();
        _lineNumber = new AttributeDefinition(_lineNumberOBJ);
        _lineNumberOBJ.addDescription("Indicates the line number of the file from which a definition was loaded.");
        _lineNumberOBJ.setDmdID("75");
        _lineNumberOBJ.setDotName("meta.lineNumber.AttributeDefinition");
        _lineNumberOBJ.setFile("metaSchema.dms");
        _lineNumberOBJ.setInternalUse("true");
        _lineNumberOBJ.setLineNumber("1356");
        _lineNumberOBJ.setName("lineNumber");
        _lineNumberOBJ.setType("meta.Integer");
        _lineNumber.setDefinedIn(this);
        addAttributeDefList(_lineNumber);

        AttributeDefinitionDMO _loadSchemaClassOBJ = new AttributeDefinitionDMO();
        _loadSchemaClass = new AttributeDefinition(_loadSchemaClassOBJ);
        _loadSchemaClassOBJ.addDescription("The fully qualified name of a schema that is to \n be loaded dynamically as part of module definition, along a description\n of why the schema is being loaded. This is generally used\n when auxiliary class information is used in conjunction with a set of\n domain specific definitions.\n <p/>\n An example would be org.dmd.gpb.tools.generation.generated.GpbauxtestSchemaAG \"Because we need the aux classes\"");
        _loadSchemaClassOBJ.setDmdID("173");
        _loadSchemaClassOBJ.setDotName("meta.loadSchemaClass.AttributeDefinition");
        _loadSchemaClassOBJ.setFile("metaSchema.dms");
        _loadSchemaClassOBJ.setLineNumber("2116");
        _loadSchemaClassOBJ.setName("loadSchemaClass");
        _loadSchemaClassOBJ.setType("meta.SchemaAndReason");
        _loadSchemaClassOBJ.setValueType("MULTI");
        _loadSchemaClass.setDefinedIn(this);
        addAttributeDefList(_loadSchemaClass);

        AttributeDefinitionDMO _longNameOBJ = new AttributeDefinitionDMO();
        _longName = new AttributeDefinition(_longNameOBJ);
        _longNameOBJ.addDescription("The object name for objects uniquely identified with a long.");
        _longNameOBJ.setDesignatedNameAttribute("true");
        _longNameOBJ.setDmdID("134");
        _longNameOBJ.setDotName("meta.longName.AttributeDefinition");
        _longNameOBJ.setFile("metaSchema.dms");
        _longNameOBJ.setLineNumber("1816");
        _longNameOBJ.setName("longName");
        _longNameOBJ.setType("meta.LongName");
        _longName.setDefinedIn(this);
        addAttributeDefList(_longName);

        AttributeDefinitionDMO _mayOBJ = new AttributeDefinitionDMO();
        _may = new AttributeDefinition(_mayOBJ);
        _mayOBJ.addDescription("Indicates the set of attributes that an instance of a class MAY\n have. When accessed in Java, this is a set of references to AttributeDefinition\n objects.");
        _mayOBJ.setDmdID("27");
        _mayOBJ.setDotName("meta.may.AttributeDefinition");
        _mayOBJ.setFile("metaSchema.dms");
        _mayOBJ.setLineNumber("974");
        _mayOBJ.setName("may");
        _mayOBJ.setType("meta.AttributeDefinition");
        _mayOBJ.setValueType("MULTI");
        _may.setDefinedIn(this);
        addAttributeDefList(_may);

        AttributeDefinitionDMO _mayParmOBJ = new AttributeDefinitionDMO();
        _mayParm = new AttributeDefinition(_mayParmOBJ);
        _mayParmOBJ.addDescription("Indicates the set of parameters that an action MAY have. When accessed\n in Java, this is a set of references to AttributeDefinition objects.");
        _mayParmOBJ.setDmdID("29");
        _mayParmOBJ.setDotName("meta.mayParm.AttributeDefinition");
        _mayParmOBJ.setFile("metaSchema.dms");
        _mayParmOBJ.setLineNumber("990");
        _mayParmOBJ.setName("mayParm");
        _mayParmOBJ.setType("meta.AttributeDefinition");
        _mayParmOBJ.setValueType("MULTI");
        _mayParm.setDefinedIn(this);
        addAttributeDefList(_mayParm);

        AttributeDefinitionDMO _mayReturnOBJ = new AttributeDefinitionDMO();
        _mayReturn = new AttributeDefinition(_mayReturnOBJ);
        _mayReturnOBJ.addDescription("Indicates the set of return vals that may be returned as part of a\n particular action response message.");
        _mayReturnOBJ.setDmdID("31");
        _mayReturnOBJ.setDotName("meta.mayReturn.AttributeDefinition");
        _mayReturnOBJ.setFile("metaSchema.dms");
        _mayReturnOBJ.setLineNumber("1006");
        _mayReturnOBJ.setName("mayReturn");
        _mayReturnOBJ.setType("meta.AttributeDefinition");
        _mayReturnOBJ.setValueType("MULTI");
        _mayReturn.setDefinedIn(this);
        addAttributeDefList(_mayReturn);

        AttributeDefinitionDMO _maySendProgressOBJ = new AttributeDefinitionDMO();
        _maySendProgress = new AttributeDefinition(_maySendProgressOBJ);
        _maySendProgressOBJ.addDescription("This flag is used to indicate if a particular request might\n result in progress indications being sent. Although primarily intended as a\n documentation aspect, this flag is used within the TL1 subsystem to allow for\n the creation of a response handler for node requests that send progress text.");
        _maySendProgressOBJ.setDmdID("76");
        _maySendProgressOBJ.setDotName("meta.maySendProgress.AttributeDefinition");
        _maySendProgressOBJ.setFile("metaSchema.dms");
        _maySendProgressOBJ.setLineNumber("1365");
        _maySendProgressOBJ.setName("maySendProgress");
        _maySendProgressOBJ.setType("meta.Boolean");
        _maySendProgress.setDefinedIn(this);
        addAttributeDefList(_maySendProgress);

        AttributeDefinitionDMO _modifyOBJ = new AttributeDefinitionDMO();
        _modify = new AttributeDefinition(_modifyOBJ);
        _modifyOBJ.addDescription("A set of modifications to an object.");
        _modifyOBJ.setDmdID("85");
        _modifyOBJ.setDotName("meta.modify.AttributeDefinition");
        _modifyOBJ.setFile("metaSchema.dms");
        _modifyOBJ.setLineNumber("1439");
        _modifyOBJ.setName("modify");
        _modifyOBJ.setType("meta.Modifier");
        _modifyOBJ.setValueType("MULTI");
        _modify.setDefinedIn(this);
        addAttributeDefList(_modify);

        AttributeDefinitionDMO _moduleClassNameOBJ = new AttributeDefinitionDMO();
        _moduleClassName = new AttributeDefinition(_moduleClassNameOBJ);
        _moduleClassNameOBJ.addDescription("The name of the class that will be generated as a result of a DSDefinitionModule definition.");
        _moduleClassNameOBJ.setDmdID("163");
        _moduleClassNameOBJ.setDotName("meta.moduleClassName.AttributeDefinition");
        _moduleClassNameOBJ.setFile("metaSchema.dms");
        _moduleClassNameOBJ.setLineNumber("2026");
        _moduleClassNameOBJ.setName("moduleClassName");
        _moduleClassNameOBJ.setType("meta.String");
        _moduleClassName.setDefinedIn(this);
        addAttributeDefList(_moduleClassName);

        AttributeDefinitionDMO _moduleDependenceAttributeOBJ = new AttributeDefinitionDMO();
        _moduleDependenceAttribute = new AttributeDefinition(_moduleDependenceAttributeOBJ);
        _moduleDependenceAttributeOBJ.addDescription("The name of the attribute in a DSDefinitionModule that\n indicates a dependence on another module of the same type. For example, in\n dark-matter schemas, the SchemaDefinition uses the dependsOn attribute to\n refer to oher schemas.");
        _moduleDependenceAttributeOBJ.setDmdID("165");
        _moduleDependenceAttributeOBJ.setDotName("meta.moduleDependenceAttribute.AttributeDefinition");
        _moduleDependenceAttributeOBJ.setFile("metaSchema.dms");
        _moduleDependenceAttributeOBJ.setLineNumber("2042");
        _moduleDependenceAttributeOBJ.setName("moduleDependenceAttribute");
        _moduleDependenceAttributeOBJ.setType("meta.AttributeDefinition");
        _moduleDependenceAttribute.setDefinedIn(this);
        addAttributeDefList(_moduleDependenceAttribute);

        AttributeDefinitionDMO _msgKeyOBJ = new AttributeDefinitionDMO();
        _msgKey = new AttributeDefinition(_msgKeyOBJ);
        _msgKeyOBJ.addDescription("The msgKey may be specified on rule instances to indicate the key to be used\n to look up translated messages. This is primarily a GWT mechanism, but should be applicable in\n other contexts.");
        _msgKeyOBJ.setDmdID("23");
        _msgKeyOBJ.setDotName("meta.msgKey.AttributeDefinition");
        _msgKeyOBJ.setFile("metaSchema.dms");
        _msgKeyOBJ.setLineNumber("942");
        _msgKeyOBJ.setName("msgKey");
        _msgKeyOBJ.setType("meta.String");
        _msgKey.setDefinedIn(this);
        addAttributeDefList(_msgKey);

        AttributeDefinitionDMO _msgParamOBJ = new AttributeDefinitionDMO();
        _msgParam = new AttributeDefinition(_msgParamOBJ);
        _msgParamOBJ.addDescription("The msgParam allows for the specification of parameters to be substituted\n into translated messages.");
        _msgParamOBJ.setDmdID("52");
        _msgParamOBJ.setDotName("meta.msgParam.AttributeDefinition");
        _msgParamOBJ.setFile("metaSchema.dms");
        _msgParamOBJ.setLineNumber("1171");
        _msgParamOBJ.setName("msgParam");
        _msgParamOBJ.setType("meta.String");
        _msgParamOBJ.setValueType("MULTI");
        _msgParam.setDefinedIn(this);
        addAttributeDefList(_msgParam);

        AttributeDefinitionDMO _mustOBJ = new AttributeDefinitionDMO();
        _must = new AttributeDefinition(_mustOBJ);
        _mustOBJ.addDescription("Indicates the set of attributes that an instance of a class MUST have.");
        _mustOBJ.setDmdID("26");
        _mustOBJ.setDotName("meta.must.AttributeDefinition");
        _mustOBJ.setFile("metaSchema.dms");
        _mustOBJ.setLineNumber("965");
        _mustOBJ.setName("must");
        _mustOBJ.setType("meta.AttributeDefinition");
        _mustOBJ.setValueType("MULTI");
        _must.setDefinedIn(this);
        addAttributeDefList(_must);

        AttributeDefinitionDMO _mustParmOBJ = new AttributeDefinitionDMO();
        _mustParm = new AttributeDefinition(_mustParmOBJ);
        _mustParmOBJ.addDescription("Indicates the set of parameters that an action MUST have. When\n accessed in Java, this is a set of references to AttributeDefinition objects.");
        _mustParmOBJ.setDmdID("28");
        _mustParmOBJ.setDotName("meta.mustParm.AttributeDefinition");
        _mustParmOBJ.setFile("metaSchema.dms");
        _mustParmOBJ.setLineNumber("982");
        _mustParmOBJ.setName("mustParm");
        _mustParmOBJ.setType("meta.AttributeDefinition");
        _mustParmOBJ.setValueType("MULTI");
        _mustParm.setDefinedIn(this);
        addAttributeDefList(_mustParm);

        AttributeDefinitionDMO _mustReturnOBJ = new AttributeDefinitionDMO();
        _mustReturn = new AttributeDefinition(_mustReturnOBJ);
        _mustReturnOBJ.addDescription("Indicates the set of return vals that must be returned as part of a\n particular action response message.");
        _mustReturnOBJ.setDmdID("30");
        _mustReturnOBJ.setDotName("meta.mustReturn.AttributeDefinition");
        _mustReturnOBJ.setFile("metaSchema.dms");
        _mustReturnOBJ.setLineNumber("998");
        _mustReturnOBJ.setName("mustReturn");
        _mustReturnOBJ.setType("meta.AttributeDefinition");
        _mustReturnOBJ.setValueType("MULTI");
        _mustReturn.setDefinedIn(this);
        addAttributeDefList(_mustReturn);

        AttributeDefinitionDMO _nameOBJ = new AttributeDefinitionDMO();
        _name = new AttributeDefinition(_nameOBJ);
        _nameOBJ.addDescription("The name attribute is used to store a single string token that represents a unique name\n for an object with the set of definitions of which it is a part. A name starts with a letter followed\n by letters and numbers.");
        _nameOBJ.setDesignatedNameAttribute("true");
        _nameOBJ.setDmdID("2");
        _nameOBJ.setDotName("meta.name.AttributeDefinition");
        _nameOBJ.setFile("metaSchema.dms");
        _nameOBJ.setLineNumber("787");
        _nameOBJ.setName("name");
        _nameOBJ.setType("meta.DefinitionName");
        _name.setDefinedIn(this);
        addAttributeDefList(_name);

        AttributeDefinitionDMO _nameAttributeDefOBJ = new AttributeDefinitionDMO();
        _nameAttributeDef = new AttributeDefinition(_nameAttributeDefOBJ);
        _nameAttributeDefOBJ.addDescription("The nameAttributeDef is a reference to the attribute that is locked\n to a TypeDefinition. This mechanism is used to create the correct type of DmcType[NAMETYPE]*\n derivative for a value of type DmcObjectName.");
        _nameAttributeDefOBJ.setDmdID("90");
        _nameAttributeDefOBJ.setDotName("meta.nameAttributeDef.AttributeDefinition");
        _nameAttributeDefOBJ.setFile("metaSchema.dms");
        _nameAttributeDefOBJ.setInternalUse("true");
        _nameAttributeDefOBJ.setLineNumber("1481");
        _nameAttributeDefOBJ.setName("nameAttributeDef");
        _nameAttributeDefOBJ.setType("meta.AttributeDefinition");
        _nameAttributeDef.setDefinedIn(this);
        addAttributeDefList(_nameAttributeDef);

        AttributeDefinitionDMO _namingAttributeOBJ = new AttributeDefinitionDMO();
        _namingAttribute = new AttributeDefinition(_namingAttributeOBJ);
        _namingAttributeOBJ.addDescription("This attribute indicates the attribute that is used to name an object\n instance. The exact manner in which the naming attribute is used is specific to\n the implementation of the HierarchicObject derived class.\n <p>\n For instance, the DotNamedObject simply uses the value of the naming attribute\n and separates the attribute values with periods e.g. grandparent.parent.child.\n <p>\n For LDAP objects when a hierarchic name is composed for an object, the class name\n plus the value of the naming attribute (type:value) is used to create the\n name of an object. It is best if the naming attribute value is created by\n the application; it shouldn't be based on any user configurable value.");
        _namingAttributeOBJ.setDmdID("64");
        _namingAttributeOBJ.setDotName("meta.namingAttribute.AttributeDefinition");
        _namingAttributeOBJ.setFile("metaSchema.dms");
        _namingAttributeOBJ.setLineNumber("1276");
        _namingAttributeOBJ.setName("namingAttribute");
        _namingAttributeOBJ.setType("meta.AttributeDefinition");
        _namingAttribute.setDefinedIn(this);
        addAttributeDefList(_namingAttribute);

        AttributeDefinitionDMO _nullReturnValueOBJ = new AttributeDefinitionDMO();
        _nullReturnValue = new AttributeDefinition(_nullReturnValueOBJ);
        _nullReturnValueOBJ.addDescription("This attribute is used in TypeDefinitions to indicate the value that should be returned when\n an attribute of the specified type doesn't exist in the object. For example, Boolean values are defined\n to return false when they aren't actually set on an object. This just gives a convenient mechanism to\n provide a default value for non-existent attribute values.");
        _nullReturnValueOBJ.setDmdID("7");
        _nullReturnValueOBJ.setDotName("meta.nullReturnValue.AttributeDefinition");
        _nullReturnValueOBJ.setFile("metaSchema.dms");
        _nullReturnValueOBJ.setLineNumber("830");
        _nullReturnValueOBJ.setName("nullReturnValue");
        _nullReturnValueOBJ.setType("meta.String");
        _nullReturnValue.setDefinedIn(this);
        addAttributeDefList(_nullReturnValue);

        AttributeDefinitionDMO _nvpOBJ = new AttributeDefinitionDMO();
        _nvp = new AttributeDefinition(_nvpOBJ);
        _nvpOBJ.addDescription("A set of additional name value pairs that can be associated with an object.");
        _nvpOBJ.setDmdID("178");
        _nvpOBJ.setDotName("meta.nvp.AttributeDefinition");
        _nvpOBJ.setFile("metaSchema.dms");
        _nvpOBJ.setLineNumber("2164");
        _nvpOBJ.setName("nvp");
        _nvpOBJ.setType("meta.NameValuePair");
        _nvpOBJ.setValueType("MULTI");
        _nvp.setDefinedIn(this);
        addAttributeDefList(_nvp);

        AttributeDefinitionDMO _objectClassOBJ = new AttributeDefinitionDMO();
        _objectClass = new AttributeDefinition(_objectClassOBJ);
        _objectClassOBJ.addDescription("Used to indicate the classes that an object instance supports.");
        _objectClassOBJ.setDmdID("1");
        _objectClassOBJ.setDotName("meta.objectClass.AttributeDefinition");
        _objectClassOBJ.setFile("metaSchema.dms");
        _objectClassOBJ.setLineNumber("2298");
        _objectClassOBJ.setName("objectClass");
        _objectClassOBJ.setType("meta.ClassDefinition");
        _objectClassOBJ.setValueType("MULTI");
        _objectClass.setDefinedIn(this);
        addAttributeDefList(_objectClass);

        AttributeDefinitionDMO _obsoleteOBJ = new AttributeDefinitionDMO();
        _obsolete = new AttributeDefinition(_obsoleteOBJ);
        _obsoleteOBJ.addDescription("The version at which something became obsolete.");
        _obsoleteOBJ.setDmdID("183");
        _obsoleteOBJ.setDotName("meta.obsolete.AttributeDefinition");
        _obsoleteOBJ.setFile("metaSchema.dms");
        _obsoleteOBJ.setLineNumber("2206");
        _obsoleteOBJ.setName("obsolete");
        _obsoleteOBJ.setType("meta.String");
        _obsolete.setDefinedIn(this);
        addAttributeDefList(_obsolete);

        AttributeDefinitionDMO _obsoleteVersionOBJ = new AttributeDefinitionDMO();
        _obsoleteVersion = new AttributeDefinition(_obsoleteVersionOBJ);
        _obsoleteVersionOBJ.addDescription("This indicates the version at which something became obsolete.\n Generally speaking you shouldn't ever delete definitions for products that have\n been released to the field, this may break backwards compatibility. Instead, you\n should mark them as obsolete.");
        _obsoleteVersionOBJ.setDmdID("73");
        _obsoleteVersionOBJ.setDotName("meta.obsoleteVersion.AttributeDefinition");
        _obsoleteVersionOBJ.setFile("metaSchema.dms");
        _obsoleteVersionOBJ.setLineNumber("1342");
        _obsoleteVersionOBJ.setName("obsoleteVersion");
        _obsoleteVersionOBJ.setType("meta.String");
        _obsoleteVersion.setDefinedIn(this);
        addAttributeDefList(_obsoleteVersion);

        AttributeDefinitionDMO _opContextOBJ = new AttributeDefinitionDMO();
        _opContext = new AttributeDefinition(_opContextOBJ);
        _opContextOBJ.addDescription("Indicates the operational context for some component e.g. object or attribute\n validators.");
        _opContextOBJ.setDmdID("115");
        _opContextOBJ.setDotName("meta.opContext.AttributeDefinition");
        _opContextOBJ.setFile("metaSchema.dms");
        _opContextOBJ.setLineNumber("1657");
        _opContextOBJ.setName("opContext");
        _opContextOBJ.setType("meta.OperationalContextEnum");
        _opContext.setDefinedIn(this);
        addAttributeDefList(_opContext);

        AttributeDefinitionDMO _optimizeOBJ = new AttributeDefinitionDMO();
        _optimize = new AttributeDefinition(_optimizeOBJ);
        _optimizeOBJ.addDescription("Depending on what you're modelling, you often come across\n places where you can see an opportunity to optimize, streamline or improve something e.g. merging\n concepts together, representing something differently, adding a relationship - whatever.\n However, these ideas often get lost in the shuffle or, if you add them into an overall\n description of something, they don't stand out.\n <p/>\n Any dark-matter definition can be decorated with optimize notes. These notes provide");
        _optimizeOBJ.setDmdID("180");
        _optimizeOBJ.setDotName("meta.optimize.AttributeDefinition");
        _optimizeOBJ.setFile("metaSchema.dms");
        _optimizeOBJ.setLineNumber("2184");
        _optimizeOBJ.setName("optimize");
        _optimizeOBJ.setType("meta.String");
        _optimizeOBJ.setValueType("MULTI");
        _optimize.setDefinedIn(this);
        addAttributeDefList(_optimize);

        AttributeDefinitionDMO _optionalPartOBJ = new AttributeDefinitionDMO();
        _optionalPart = new AttributeDefinition(_optionalPartOBJ);
        _optionalPartOBJ.addDescription("Indicates an optional part of a complex type definition.");
        _optionalPartOBJ.setDmdID("114");
        _optionalPartOBJ.setDotName("meta.optionalPart.AttributeDefinition");
        _optionalPartOBJ.setFile("metaSchema.dms");
        _optionalPartOBJ.setLineNumber("1650");
        _optionalPartOBJ.setName("optionalPart");
        _optionalPartOBJ.setType("meta.Part");
        _optionalPartOBJ.setValueType("MULTI");
        _optionalPart.setDefinedIn(this);
        addAttributeDefList(_optionalPart);

        AttributeDefinitionDMO _originalClassOBJ = new AttributeDefinitionDMO();
        _originalClass = new AttributeDefinition(_originalClassOBJ);
        _originalClassOBJ.addDescription("Refers to the class that an internally generated type represents.");
        _originalClassOBJ.setDmdID("83");
        _originalClassOBJ.setDotName("meta.originalClass.AttributeDefinition");
        _originalClassOBJ.setFile("metaSchema.dms");
        _originalClassOBJ.setInternalUse("true");
        _originalClassOBJ.setLineNumber("1424");
        _originalClassOBJ.setName("originalClass");
        _originalClassOBJ.setType("meta.ClassDefinition");
        _originalClass.setDefinedIn(this);
        addAttributeDefList(_originalClass);

        AttributeDefinitionDMO _partOfDefinitionModuleOBJ = new AttributeDefinitionDMO();
        _partOfDefinitionModule = new AttributeDefinition(_partOfDefinitionModuleOBJ);
        _partOfDefinitionModuleOBJ.addDescription("For classes that defined as part of a definition module,\n this indicates the module they belong to. This allows for generation of a standard\n method to get the name of the module from which they were loaded.");
        _partOfDefinitionModuleOBJ.setDmdID("175");
        _partOfDefinitionModuleOBJ.setDotName("meta.partOfDefinitionModule.AttributeDefinition");
        _partOfDefinitionModuleOBJ.setFile("metaSchema.dms");
        _partOfDefinitionModuleOBJ.setLineNumber("2139");
        _partOfDefinitionModuleOBJ.setName("partOfDefinitionModule");
        _partOfDefinitionModuleOBJ.setType("meta.DSDefinitionModule");
        _partOfDefinitionModule.setDefinedIn(this);
        addAttributeDefList(_partOfDefinitionModule);

        AttributeDefinitionDMO _preserveNewlinesOBJ = new AttributeDefinitionDMO();
        _preserveNewlines = new AttributeDefinition(_preserveNewlinesOBJ);
        _preserveNewlinesOBJ.addDescription("Indicates that newline characters should be preserved when an\n attribute is parsed by the DmcUncheckedOIFParser. This is useful for certain attributes\n when newlines are required to properly format the contents of the attribute at\n a later time. For example, the description attribute is later dumped as part of \n HTML documentation and, if the newlines are stripped, it won't be properly formatted.");
        _preserveNewlinesOBJ.setDmdID("51");
        _preserveNewlinesOBJ.setDotName("meta.preserveNewlines.AttributeDefinition");
        _preserveNewlinesOBJ.setFile("metaSchema.dms");
        _preserveNewlinesOBJ.setLineNumber("1163");
        _preserveNewlinesOBJ.setName("preserveNewlines");
        _preserveNewlinesOBJ.setType("meta.Boolean");
        _preserveNewlines.setDefinedIn(this);
        addAttributeDefList(_preserveNewlines);

        AttributeDefinitionDMO _primitiveTypeOBJ = new AttributeDefinitionDMO();
        _primitiveType = new AttributeDefinition(_primitiveTypeOBJ);
        _primitiveTypeOBJ.addDescription("The primitiveType indicates the underlying type of a DmcType.");
        _primitiveTypeOBJ.setDmdID("8");
        _primitiveTypeOBJ.setDotName("meta.primitiveType.AttributeDefinition");
        _primitiveTypeOBJ.setFile("metaSchema.dms");
        _primitiveTypeOBJ.setLineNumber("836");
        _primitiveTypeOBJ.setName("primitiveType");
        _primitiveTypeOBJ.setType("meta.String");
        _primitiveType.setDefinedIn(this);
        addAttributeDefList(_primitiveType);

        AttributeDefinitionDMO _questionOBJ = new AttributeDefinitionDMO();
        _question = new AttributeDefinition(_questionOBJ);
        _questionOBJ.addDescription("A question associated with the definition of something.");
        _questionOBJ.setDmdID("187");
        _questionOBJ.setDotName("meta.question.AttributeDefinition");
        _questionOBJ.setFile("metaSchema.dms");
        _questionOBJ.setLineNumber("2240");
        _questionOBJ.setName("question");
        _questionOBJ.setType("meta.String");
        _questionOBJ.setValueType("MULTI");
        _question.setDefinedIn(this);
        addAttributeDefList(_question);

        AttributeDefinitionDMO _refersToDefsFromDSDOBJ = new AttributeDefinitionDMO();
        _refersToDefsFromDSD = new AttributeDefinition(_refersToDefsFromDSDOBJ);
        _refersToDefsFromDSDOBJ.addDescription("A reference to another DSDefinitionModule from which the current\n module makes use of definitions. For instance, the Model View Whatever DSD includes references\n to schema related definitions. As a result of specifying this, the module\n class that's generated for the DSDefinitionModule will include the moduleDependenceAttribute\n of the module from which definitions are used. Likewise, the generated parser\n will be primed with the schema of the required definition module.");
        _refersToDefsFromDSDOBJ.setDmdID("166");
        _refersToDefsFromDSDOBJ.setDotName("meta.refersToDefsFromDSD.AttributeDefinition");
        _refersToDefsFromDSDOBJ.setFile("metaSchema.dms");
        _refersToDefsFromDSDOBJ.setLineNumber("2054");
        _refersToDefsFromDSDOBJ.setName("refersToDefsFromDSD");
        _refersToDefsFromDSDOBJ.setType("meta.DSDefinitionModule");
        _refersToDefsFromDSDOBJ.setValueType("MULTI");
        _refersToDefsFromDSD.setDefinedIn(this);
        addAttributeDefList(_refersToDefsFromDSD);

        AttributeDefinitionDMO _relatedToConceptOBJ = new AttributeDefinitionDMO();
        _relatedToConcept = new AttributeDefinition(_relatedToConceptOBJ);
        _relatedToConceptOBJ.addDescription("Allows for references to base concepts that relate this\n definition to another definition in the Concinnity domain. This mechanism is only used\n in the domain of dark-matter schema definitions; other DSLs will allow for direct\n reference to Concinnity concepts.");
        _relatedToConceptOBJ.setDmdID("176");
        _relatedToConceptOBJ.setDotName("meta.relatedToConcept.AttributeDefinition");
        _relatedToConceptOBJ.setFile("metaSchema.dms");
        _relatedToConceptOBJ.setLineNumber("2149");
        _relatedToConceptOBJ.setName("relatedToConcept");
        _relatedToConceptOBJ.setType("meta.Concinnity");
        _relatedToConceptOBJ.setValueType("MULTI");
        _relatedToConcept.setDefinedIn(this);
        addAttributeDefList(_relatedToConcept);

        AttributeDefinitionDMO _relationshipOBJ = new AttributeDefinitionDMO();
        _relationship = new AttributeDefinition(_relationshipOBJ);
        _relationshipOBJ.addDescription("The name of the relationship established via a reference to some other named object.\n <p/>\n This is a minor hack to allow creation of named relationships in graph databases. Eventually, relationships\n will become first class objects to which you can refer.");
        _relationshipOBJ.setDmdID("189");
        _relationshipOBJ.setDotName("meta.relationship.AttributeDefinition");
        _relationshipOBJ.setFile("metaSchema.dms");
        _relationshipOBJ.setLineNumber("2257");
        _relationshipOBJ.setName("relationship");
        _relationshipOBJ.setType("meta.String");
        _relationshipOBJ.setVersion("3.0.5");
        _relationship.setDefinedIn(this);
        addAttributeDefList(_relationship);

        AttributeDefinitionDMO _requiredBaseModuleOBJ = new AttributeDefinitionDMO();
        _requiredBaseModule = new AttributeDefinition(_requiredBaseModuleOBJ);
        _requiredBaseModuleOBJ.addDescription("A set of base module files that should be loaded before\n parsing of any other modules associated with the DSD being defined. For example,\n the dmdgpb (augmented Googoe Protocol Buffer specifications) DSD always requires\n that the gpbbase.gpb file is loaded because it defines the base types of the fields\n that comprise messages. By specifying gpbbase.gpb as a requiredBaseModule, the\n generated parsing coordinator will ensure that this module is loaded on start-up.\n <p/>\n You should specify just the name of the module file to be loaded, not the file extension.\n The file extension is assumed to be fileExtension associated with the DSD.");
        _requiredBaseModuleOBJ.setDmdID("174");
        _requiredBaseModuleOBJ.setDotName("meta.requiredBaseModule.AttributeDefinition");
        _requiredBaseModuleOBJ.setFile("metaSchema.dms");
        _requiredBaseModuleOBJ.setLineNumber("2131");
        _requiredBaseModuleOBJ.setName("requiredBaseModule");
        _requiredBaseModuleOBJ.setType("meta.String");
        _requiredBaseModuleOBJ.setValueType("MULTI");
        _requiredBaseModule.setDefinedIn(this);
        addAttributeDefList(_requiredBaseModule);

        AttributeDefinitionDMO _requiredPartOBJ = new AttributeDefinitionDMO();
        _requiredPart = new AttributeDefinition(_requiredPartOBJ);
        _requiredPartOBJ.addDescription("Indicates a required part of a complex type definition.");
        _requiredPartOBJ.setDmdID("112");
        _requiredPartOBJ.setDotName("meta.requiredPart.AttributeDefinition");
        _requiredPartOBJ.setFile("metaSchema.dms");
        _requiredPartOBJ.setLineNumber("1641");
        _requiredPartOBJ.setName("requiredPart");
        _requiredPartOBJ.setType("meta.Part");
        _requiredPartOBJ.setValueType("MULTI");
        _requiredPart.setDefinedIn(this);
        addAttributeDefList(_requiredPart);

        AttributeDefinitionDMO _ruleCategoryOBJ = new AttributeDefinitionDMO();
        _ruleCategory = new AttributeDefinition(_ruleCategoryOBJ);
        _ruleCategoryOBJ.addDescription("The category of a rule.");
        _ruleCategoryOBJ.setDmdID("139");
        _ruleCategoryOBJ.setDotName("meta.ruleCategory.AttributeDefinition");
        _ruleCategoryOBJ.setFile("metaSchema.dms");
        _ruleCategoryOBJ.setLineNumber("1850");
        _ruleCategoryOBJ.setName("ruleCategory");
        _ruleCategoryOBJ.setType("meta.RuleCategory");
        _ruleCategoryOBJ.setValueType("MULTI");
        _ruleCategory.setDefinedIn(this);
        addAttributeDefList(_ruleCategory);

        AttributeDefinitionDMO _ruleCategoryIDOBJ = new AttributeDefinitionDMO();
        _ruleCategoryID = new AttributeDefinition(_ruleCategoryIDOBJ);
        _ruleCategoryIDOBJ.addDescription("The numeric ID of a rule category. Category IDs must be unique for all RuleDefinitions defined\n within a schema.");
        _ruleCategoryIDOBJ.setDmdID("140");
        _ruleCategoryIDOBJ.setDotName("meta.ruleCategoryID.AttributeDefinition");
        _ruleCategoryIDOBJ.setFile("metaSchema.dms");
        _ruleCategoryIDOBJ.setLineNumber("1857");
        _ruleCategoryIDOBJ.setName("ruleCategoryID");
        _ruleCategoryIDOBJ.setType("meta.Integer");
        _ruleCategoryID.setDefinedIn(this);
        addAttributeDefList(_ruleCategoryID);

        AttributeDefinitionDMO _ruleCategoryListOBJ = new AttributeDefinitionDMO();
        _ruleCategoryList = new AttributeDefinition(_ruleCategoryListOBJ);
        _ruleCategoryListOBJ.addDescription("The RuleCategories defined in a schema.");
        _ruleCategoryListOBJ.setDmdID("143");
        _ruleCategoryListOBJ.setDotName("meta.ruleCategoryList.AttributeDefinition");
        _ruleCategoryListOBJ.setFile("metaSchema.dms");
        _ruleCategoryListOBJ.setLineNumber("1878");
        _ruleCategoryListOBJ.setName("ruleCategoryList");
        _ruleCategoryListOBJ.setType("meta.RuleCategory");
        _ruleCategoryListOBJ.setValueType("MULTI");
        _ruleCategoryList.setDefinedIn(this);
        addAttributeDefList(_ruleCategoryList);

        AttributeDefinitionDMO _ruleDataListOBJ = new AttributeDefinitionDMO();
        _ruleDataList = new AttributeDefinition(_ruleDataListOBJ);
        _ruleDataListOBJ.addDescription("The RuleData defined in a schema.");
        _ruleDataListOBJ.setDmdID("156");
        _ruleDataListOBJ.setDotName("meta.ruleDataList.AttributeDefinition");
        _ruleDataListOBJ.setFile("metaSchema.dms");
        _ruleDataListOBJ.setLineNumber("1970");
        _ruleDataListOBJ.setName("ruleDataList");
        _ruleDataListOBJ.setType("meta.RuleData");
        _ruleDataListOBJ.setValueType("MULTI");
        _ruleDataList.setDefinedIn(this);
        addAttributeDefList(_ruleDataList);

        AttributeDefinitionDMO _ruleDefinitionOBJ = new AttributeDefinitionDMO();
        _ruleDefinition = new AttributeDefinition(_ruleDefinitionOBJ);
        _ruleDefinitionOBJ.addDescription("The RuleDefinition that resulted in the creation of an\n internally generated ClassDefinition.");
        _ruleDefinitionOBJ.setDmdID("145");
        _ruleDefinitionOBJ.setDotName("meta.ruleDefinition.AttributeDefinition");
        _ruleDefinitionOBJ.setFile("metaSchema.dms");
        _ruleDefinitionOBJ.setInternalUse("true");
        _ruleDefinitionOBJ.setLineNumber("1893");
        _ruleDefinitionOBJ.setName("ruleDefinition");
        _ruleDefinitionOBJ.setType("meta.RuleDefinition");
        _ruleDefinition.setDefinedIn(this);
        addAttributeDefList(_ruleDefinition);

        AttributeDefinitionDMO _ruleDefinitionListOBJ = new AttributeDefinitionDMO();
        _ruleDefinitionList = new AttributeDefinition(_ruleDefinitionListOBJ);
        _ruleDefinitionListOBJ.addDescription("The RuleDefinitions defined in a schema.");
        _ruleDefinitionListOBJ.setDmdID("144");
        _ruleDefinitionListOBJ.setDotName("meta.ruleDefinitionList.AttributeDefinition");
        _ruleDefinitionListOBJ.setFile("metaSchema.dms");
        _ruleDefinitionListOBJ.setLineNumber("1885");
        _ruleDefinitionListOBJ.setName("ruleDefinitionList");
        _ruleDefinitionListOBJ.setType("meta.RuleDefinition");
        _ruleDefinitionListOBJ.setValueType("MULTI");
        _ruleDefinitionList.setDefinedIn(this);
        addAttributeDefList(_ruleDefinitionList);

        AttributeDefinitionDMO _ruleImportOBJ = new AttributeDefinitionDMO();
        _ruleImport = new AttributeDefinition(_ruleImportOBJ);
        _ruleImportOBJ.addDescription("An import required for generation of the rule collection associated with\n a RuleCategory.");
        _ruleImportOBJ.setDmdID("152");
        _ruleImportOBJ.setDotName("meta.ruleImport.AttributeDefinition");
        _ruleImportOBJ.setFile("metaSchema.dms");
        _ruleImportOBJ.setLineNumber("1940");
        _ruleImportOBJ.setName("ruleImport");
        _ruleImportOBJ.setType("meta.String");
        _ruleImportOBJ.setValueType("MULTI");
        _ruleImport.setDefinedIn(this);
        addAttributeDefList(_ruleImport);

        AttributeDefinitionDMO _ruleNameOBJ = new AttributeDefinitionDMO();
        _ruleName = new AttributeDefinition(_ruleNameOBJ);
        _ruleNameOBJ.addDescription("The ruleName attribute is used to store a single camelCase format name for a rule.\n The name starts with a single letter and can be followed by a mix of letters and numbers. No spaces or \n other characters are allowed.");
        _ruleNameOBJ.setDesignatedNameAttribute("true");
        _ruleNameOBJ.setDmdID("153");
        _ruleNameOBJ.setDotName("meta.ruleName.AttributeDefinition");
        _ruleNameOBJ.setFile("metaSchema.dms");
        _ruleNameOBJ.setLineNumber("1949");
        _ruleNameOBJ.setName("ruleName");
        _ruleNameOBJ.setType("meta.RuleName");
        _ruleName.setDefinedIn(this);
        addAttributeDefList(_ruleName);

        AttributeDefinitionDMO _ruleParamOBJ = new AttributeDefinitionDMO();
        _ruleParam = new AttributeDefinition(_ruleParamOBJ);
        _ruleParamOBJ.addDescription("A parameter to be supplied to a rule when it is executed.");
        _ruleParamOBJ.setDmdID("50");
        _ruleParamOBJ.setDotName("meta.ruleParam.AttributeDefinition");
        _ruleParamOBJ.setFile("metaSchema.dms");
        _ruleParamOBJ.setLineNumber("1153");
        _ruleParamOBJ.setName("ruleParam");
        _ruleParamOBJ.setType("meta.RuleParam");
        _ruleParamOBJ.setValueType("MULTI");
        _ruleParam.setDefinedIn(this);
        addAttributeDefList(_ruleParam);

        AttributeDefinitionDMO _ruleTitleOBJ = new AttributeDefinitionDMO();
        _ruleTitle = new AttributeDefinition(_ruleTitleOBJ);
        _ruleTitleOBJ.addDescription("The title of a rule.");
        _ruleTitleOBJ.setDmdID("138");
        _ruleTitleOBJ.setDotName("meta.ruleTitle.AttributeDefinition");
        _ruleTitleOBJ.setFile("metaSchema.dms");
        _ruleTitleOBJ.setLineNumber("1843");
        _ruleTitleOBJ.setName("ruleTitle");
        _ruleTitleOBJ.setType("meta.String");
        _ruleTitle.setDefinedIn(this);
        addAttributeDefList(_ruleTitle);

        AttributeDefinitionDMO _ruleTypeOBJ = new AttributeDefinitionDMO();
        _ruleType = new AttributeDefinition(_ruleTypeOBJ);
        _ruleTypeOBJ.addDescription("The type of a rule.");
        _ruleTypeOBJ.setDmdID("136");
        _ruleTypeOBJ.setDotName("meta.ruleType.AttributeDefinition");
        _ruleTypeOBJ.setFile("metaSchema.dms");
        _ruleTypeOBJ.setLineNumber("1828");
        _ruleTypeOBJ.setName("ruleType");
        _ruleTypeOBJ.setType("meta.RuleTypeEnum");
        _ruleType.setDefinedIn(this);
        addAttributeDefList(_ruleType);

        AttributeDefinitionDMO _runContextOBJ = new AttributeDefinitionDMO();
        _runContext = new AttributeDefinition(_runContextOBJ);
        _runContextOBJ.addDescription("A reference to a RunContext.");
        _runContextOBJ.setDmdID("149");
        _runContextOBJ.setDotName("meta.runContext.AttributeDefinition");
        _runContextOBJ.setFile("metaSchema.dms");
        _runContextOBJ.setLineNumber("1918");
        _runContextOBJ.setName("runContext");
        _runContextOBJ.setType("meta.RunContext");
        _runContext.setDefinedIn(this);
        addAttributeDefList(_runContext);

        AttributeDefinitionDMO _schemaBaseIDOBJ = new AttributeDefinitionDMO();
        _schemaBaseID = new AttributeDefinition(_schemaBaseIDOBJ);
        _schemaBaseIDOBJ.addDescription("The base identifier value for a schema. This value is added to each dmdID value\n associated with the AttributeDefinitions defined by the schema. This allows for easy rebasing of\n identifier values if required.");
        _schemaBaseIDOBJ.setDmdID("86");
        _schemaBaseIDOBJ.setDotName("meta.schemaBaseID.AttributeDefinition");
        _schemaBaseIDOBJ.setFile("metaSchema.dms");
        _schemaBaseIDOBJ.setLineNumber("1447");
        _schemaBaseIDOBJ.setName("schemaBaseID");
        _schemaBaseIDOBJ.setType("meta.Integer");
        _schemaBaseID.setDefinedIn(this);
        addAttributeDefList(_schemaBaseID);

        AttributeDefinitionDMO _schemaExtensionOBJ = new AttributeDefinitionDMO();
        _schemaExtension = new AttributeDefinition(_schemaExtensionOBJ);
        _schemaExtensionOBJ.addDescription("The fully qualified name of a class that extends the schema management\n capabilities of the SchemaManager. the class must have a zero arg constructor and implement\n the SchemaExtensionIF.");
        _schemaExtensionOBJ.setDmdID("4");
        _schemaExtensionOBJ.setDotName("meta.schemaExtension.AttributeDefinition");
        _schemaExtensionOBJ.setFile("metaSchema.dms");
        _schemaExtensionOBJ.setLineNumber("803");
        _schemaExtensionOBJ.setName("schemaExtension");
        _schemaExtensionOBJ.setType("meta.String");
        _schemaExtensionOBJ.setValueType("MULTI");
        _schemaExtension.setDefinedIn(this);
        addAttributeDefList(_schemaExtension);

        AttributeDefinitionDMO _schemaIDRangeOBJ = new AttributeDefinitionDMO();
        _schemaIDRange = new AttributeDefinition(_schemaIDRangeOBJ);
        _schemaIDRangeOBJ.addDescription("The maximum number of attribute definitions in a particular schema. This will provide\n immediate feedback if you exceed the given ID range for your schema.");
        _schemaIDRangeOBJ.setDmdID("87");
        _schemaIDRangeOBJ.setDotName("meta.schemaIDRange.AttributeDefinition");
        _schemaIDRangeOBJ.setFile("metaSchema.dms");
        _schemaIDRangeOBJ.setLineNumber("1454");
        _schemaIDRangeOBJ.setName("schemaIDRange");
        _schemaIDRangeOBJ.setType("meta.Integer");
        _schemaIDRange.setDefinedIn(this);
        addAttributeDefList(_schemaIDRange);

        AttributeDefinitionDMO _schemaPackageOBJ = new AttributeDefinitionDMO();
        _schemaPackage = new AttributeDefinition(_schemaPackageOBJ);
        _schemaPackageOBJ.addDescription("Indicates the package that a schema will be part of when its code\n is generated using DMO generator tool.");
        _schemaPackageOBJ.setDmdID("53");
        _schemaPackageOBJ.setDotName("meta.schemaPackage.AttributeDefinition");
        _schemaPackageOBJ.setFile("metaSchema.dms");
        _schemaPackageOBJ.setLineNumber("1179");
        _schemaPackageOBJ.setName("schemaPackage");
        _schemaPackageOBJ.setType("meta.String");
        _schemaPackage.setDefinedIn(this);
        addAttributeDefList(_schemaPackage);

        AttributeDefinitionDMO _searchableOBJ = new AttributeDefinitionDMO();
        _searchable = new AttributeDefinition(_searchableOBJ);
        _searchableOBJ.addDescription("Indicates if something is searchable.");
        _searchableOBJ.setDmdID("188");
        _searchableOBJ.setDotName("meta.searchable.AttributeDefinition");
        _searchableOBJ.setFile("metaSchema.dms");
        _searchableOBJ.setLineNumber("2247");
        _searchableOBJ.setName("searchable");
        _searchableOBJ.setType("meta.Boolean");
        _searchableOBJ.setVersion("3.0.5");
        _searchable.setDefinedIn(this);
        addAttributeDefList(_searchable);

        AttributeDefinitionDMO _secureOBJ = new AttributeDefinitionDMO();
        _secure = new AttributeDefinition(_secureOBJ);
        _secureOBJ.addDescription("This attribute indicates whether or not the attribute should\n be encrypted before being transported over the wire or stored in a file or\n repository");
        _secureOBJ.setDmdID("78");
        _secureOBJ.setDotName("meta.secure.AttributeDefinition");
        _secureOBJ.setFile("metaSchema.dms");
        _secureOBJ.setLineNumber("1382");
        _secureOBJ.setName("secure");
        _secureOBJ.setType("meta.Boolean");
        _secure.setDefinedIn(this);
        addAttributeDefList(_secure);

        AttributeDefinitionDMO _selectAttributeOBJ = new AttributeDefinitionDMO();
        _selectAttribute = new AttributeDefinition(_selectAttributeOBJ);
        _selectAttributeOBJ.addDescription("The selectAttribute indicates an attribute to be used in the definition\n of a Slice.");
        _selectAttributeOBJ.setDmdID("110");
        _selectAttributeOBJ.setDotName("meta.selectAttribute.AttributeDefinition");
        _selectAttributeOBJ.setFile("metaSchema.dms");
        _selectAttributeOBJ.setLineNumber("1626");
        _selectAttributeOBJ.setName("selectAttribute");
        _selectAttributeOBJ.setType("meta.AttributeDefinition");
        _selectAttributeOBJ.setValueType("MULTI");
        _selectAttribute.setDefinedIn(this);
        addAttributeDefList(_selectAttribute);

        AttributeDefinitionDMO _skipOBJ = new AttributeDefinitionDMO();
        _skip = new AttributeDefinition(_skipOBJ);
        _skipOBJ.addDescription("A version from which something should be excluded (even though it is included\n in later versions). This is an unusual situation, and should be approached with extreme caution!");
        _skipOBJ.setDmdID("182");
        _skipOBJ.setDotName("meta.skip.AttributeDefinition");
        _skipOBJ.setFile("metaSchema.dms");
        _skipOBJ.setLineNumber("2200");
        _skipOBJ.setName("skip");
        _skipOBJ.setType("meta.String");
        _skipOBJ.setValueType("MULTI");
        _skip.setDefinedIn(this);
        addAttributeDefList(_skip);

        AttributeDefinitionDMO _sliceDefListOBJ = new AttributeDefinitionDMO();
        _sliceDefList = new AttributeDefinition(_sliceDefListOBJ);
        _sliceDefListOBJ.addDescription("A list of slice definition references.");
        _sliceDefListOBJ.setDmdID("111");
        _sliceDefListOBJ.setDotName("meta.sliceDefList.AttributeDefinition");
        _sliceDefListOBJ.setFile("metaSchema.dms");
        _sliceDefListOBJ.setInternalUse("true");
        _sliceDefListOBJ.setLineNumber("1634");
        _sliceDefListOBJ.setName("sliceDefList");
        _sliceDefListOBJ.setType("meta.SliceDefinition");
        _sliceDefListOBJ.setValueType("MULTI");
        _sliceDefList.setDefinedIn(this);
        addAttributeDefList(_sliceDefList);

        AttributeDefinitionDMO _sortNameOBJ = new AttributeDefinitionDMO();
        _sortName = new AttributeDefinition(_sortNameOBJ);
        _sortNameOBJ.addDescription("The sortName is used in siutations where we need a name\n for storage of a definition that is globally unique but can be sorted on the basis\n of the definition name, not the module name. The dotName for a definition is\n module.definition...type, whereas the sortName would be definition...module.type.\n So, for things like documentation generation, the sortName provides a more \n natural ordering.");
        _sortNameOBJ.setDmdID("170");
        _sortNameOBJ.setDotName("meta.sortName.AttributeDefinition");
        _sortNameOBJ.setFile("metaSchema.dms");
        _sortNameOBJ.setLineNumber("2087");
        _sortNameOBJ.setName("sortName");
        _sortNameOBJ.setType("meta.DotName");
        _sortName.setDefinedIn(this);
        addAttributeDefList(_sortName);

        AttributeDefinitionDMO _stringNameOBJ = new AttributeDefinitionDMO();
        _stringName = new AttributeDefinition(_stringNameOBJ);
        _stringNameOBJ.addDescription("The stringName attribute is used to store a simple name for something. It starts\n with a letter followed letters or numbers.");
        _stringNameOBJ.setDesignatedNameAttribute("true");
        _stringNameOBJ.setDmdID("160");
        _stringNameOBJ.setDotName("meta.stringName.AttributeDefinition");
        _stringNameOBJ.setFile("metaSchema.dms");
        _stringNameOBJ.setLineNumber("2006");
        _stringNameOBJ.setName("stringName");
        _stringNameOBJ.setType("meta.StringName");
        _stringName.setDefinedIn(this);
        addAttributeDefList(_stringName);

        AttributeDefinitionDMO _subpackageOBJ = new AttributeDefinitionDMO();
        _subpackage = new AttributeDefinition(_subpackageOBJ);
        _subpackageOBJ.addDescription("The subpackage beneath extended where generated code will be written. This\n allows for a hierarchic package structure for the classes generated by the dmg and mvc generator\n utilities. The structure can contain other subpackages etc x.y.z but should not start or end\n with a period.");
        _subpackageOBJ.setDmdID("88");
        _subpackageOBJ.setDotName("meta.subpackage.AttributeDefinition");
        _subpackageOBJ.setFile("metaSchema.dms");
        _subpackageOBJ.setLineNumber("1463");
        _subpackageOBJ.setName("subpackage");
        _subpackageOBJ.setType("meta.String");
        _subpackage.setDefinedIn(this);
        addAttributeDefList(_subpackage);

        AttributeDefinitionDMO _supportDynamicSchemaLoadingOBJ = new AttributeDefinitionDMO();
        _supportDynamicSchemaLoading = new AttributeDefinition(_supportDynamicSchemaLoadingOBJ);
        _supportDynamicSchemaLoadingOBJ.addDescription("If this flag is set to true, the loadSchemaClass attribute\n will be added to the generated domain specific module definition class so that additional schemas\n (usually containg auxiliary classes) can be loaded dynamically. This allows the generated\n module parser to handle auxiliary information on the domain specific definitions.");
        _supportDynamicSchemaLoadingOBJ.setDmdID("172");
        _supportDynamicSchemaLoadingOBJ.setDotName("meta.supportDynamicSchemaLoading.AttributeDefinition");
        _supportDynamicSchemaLoadingOBJ.setFile("metaSchema.dms");
        _supportDynamicSchemaLoadingOBJ.setLineNumber("2103");
        _supportDynamicSchemaLoadingOBJ.setName("supportDynamicSchemaLoading");
        _supportDynamicSchemaLoadingOBJ.setType("meta.Boolean");
        _supportDynamicSchemaLoading.setDefinedIn(this);
        addAttributeDefList(_supportDynamicSchemaLoading);

        AttributeDefinitionDMO _supportsBackrefTrackingOBJ = new AttributeDefinitionDMO();
        _supportsBackrefTracking = new AttributeDefinition(_supportsBackrefTrackingOBJ);
        _supportsBackrefTrackingOBJ.addDescription("Indicates if a class of objects supports back reference tracking or not. The\n default is that all objects support it, however, in places like the Dark Matter Protocol, we\n don't want to track references in the messages.");
        _supportsBackrefTrackingOBJ.setDmdID("118");
        _supportsBackrefTrackingOBJ.setDotName("meta.supportsBackrefTracking.AttributeDefinition");
        _supportsBackrefTrackingOBJ.setFile("metaSchema.dms");
        _supportsBackrefTrackingOBJ.setLineNumber("1683");
        _supportsBackrefTrackingOBJ.setName("supportsBackrefTracking");
        _supportsBackrefTrackingOBJ.setNullReturnValue("true");
        _supportsBackrefTrackingOBJ.setType("meta.Boolean");
        _supportsBackrefTracking.setDefinedIn(this);
        addAttributeDefList(_supportsBackrefTracking);

        AttributeDefinitionDMO _tagsOBJ = new AttributeDefinitionDMO();
        _tags = new AttributeDefinition(_tagsOBJ);
        _tagsOBJ.addDescription("A collection of tags that can facilitate searching for\n definitions. The values are limited to a-zA-Z0-9 and the space character.");
        _tagsOBJ.setDmdID("177");
        _tagsOBJ.setDotName("meta.tags.AttributeDefinition");
        _tagsOBJ.setFile("metaSchema.dms");
        _tagsOBJ.setLineNumber("2157");
        _tagsOBJ.setName("tags");
        _tagsOBJ.setType("meta.String");
        _tagsOBJ.setValueType("TREESET");
        _tags.setDefinedIn(this);
        addAttributeDefList(_tags);

        AttributeDefinitionDMO _typeOBJ = new AttributeDefinitionDMO();
        _type = new AttributeDefinition(_typeOBJ);
        _typeOBJ.addDescription("Indicates the type of an attribute. The value is the name of any\n previously defined TypeDefinition, ClassDefinition, EnumDefinition or ComplexTypeDefinition.");
        _typeOBJ.setDmdID("19");
        _typeOBJ.setDotName("meta.type.AttributeDefinition");
        _typeOBJ.setFile("metaSchema.dms");
        _typeOBJ.setLineNumber("911");
        _typeOBJ.setName("type");
        _typeOBJ.setType("meta.TypeDefinition");
        _type.setDefinedIn(this);
        addAttributeDefList(_type);

        AttributeDefinitionDMO _typeClassNameOBJ = new AttributeDefinitionDMO();
        _typeClassName = new AttributeDefinition(_typeClassNameOBJ);
        _typeClassNameOBJ.addDescription("This is the fully qualified name of the class derived from DmcAttribute that provides management\n of a particular type of attribute value. For instance, the type class that handles String attributes \n is org.dmd.dmc.types.DmcTypeString");
        _typeClassNameOBJ.setDmdID("5");
        _typeClassNameOBJ.setDotName("meta.typeClassName.AttributeDefinition");
        _typeClassNameOBJ.setFile("metaSchema.dms");
        _typeClassNameOBJ.setLineNumber("811");
        _typeClassNameOBJ.setName("typeClassName");
        _typeClassNameOBJ.setType("meta.String");
        _typeClassName.setDefinedIn(this);
        addAttributeDefList(_typeClassName);

        AttributeDefinitionDMO _typeDefListOBJ = new AttributeDefinitionDMO();
        _typeDefList = new AttributeDefinition(_typeDefListOBJ);
        _typeDefListOBJ.addDescription("A list of type definition references.");
        _typeDefListOBJ.setDmdID("56");
        _typeDefListOBJ.setDotName("meta.typeDefList.AttributeDefinition");
        _typeDefListOBJ.setFile("metaSchema.dms");
        _typeDefListOBJ.setInternalUse("true");
        _typeDefListOBJ.setLineNumber("1203");
        _typeDefListOBJ.setName("typeDefList");
        _typeDefListOBJ.setType("meta.TypeDefinition");
        _typeDefListOBJ.setValueType("MULTI");
        _typeDefList.setDefinedIn(this);
        addAttributeDefList(_typeDefList);

        AttributeDefinitionDMO _useInterfaceOBJ = new AttributeDefinitionDMO();
        _useInterface = new AttributeDefinition(_useInterfaceOBJ);
        _useInterfaceOBJ.addDescription("The fully qualified name of a Java interface or base class that specifies a dependency.");
        _useInterfaceOBJ.setDmdID("150");
        _useInterfaceOBJ.setDotName("meta.useInterface.AttributeDefinition");
        _useInterfaceOBJ.setFile("metaSchema.dms");
        _useInterfaceOBJ.setLineNumber("1924");
        _useInterfaceOBJ.setName("useInterface");
        _useInterfaceOBJ.setType("meta.String");
        _useInterface.setDefinedIn(this);
        addAttributeDefList(_useInterface);

        AttributeDefinitionDMO _useWrapperTypeOBJ = new AttributeDefinitionDMO();
        _useWrapperType = new AttributeDefinition(_useWrapperTypeOBJ);
        _useWrapperTypeOBJ.addDescription("Indicates whether you want to use the generated DMW wrapper\n or the extended wrapper you've created yourself.");
        _useWrapperTypeOBJ.setDmdID("82");
        _useWrapperTypeOBJ.setDotName("meta.useWrapperType.AttributeDefinition");
        _useWrapperTypeOBJ.setFile("metaSchema.dms");
        _useWrapperTypeOBJ.setLineNumber("1417");
        _useWrapperTypeOBJ.setName("useWrapperType");
        _useWrapperTypeOBJ.setType("meta.WrapperTypeEnum");
        _useWrapperType.setDefinedIn(this);
        addAttributeDefList(_useWrapperType);

        AttributeDefinitionDMO _usesInterfaceOBJ = new AttributeDefinitionDMO();
        _usesInterface = new AttributeDefinition(_usesInterfaceOBJ);
        _usesInterfaceOBJ.addDescription("This is a hack for now to allow for the inclusion of an \n interface on a class; it should be the fully qualified name of the interface.\n The interface shouldn't require any method implementations.");
        _usesInterfaceOBJ.setDmdID("24");
        _usesInterfaceOBJ.setDotName("meta.usesInterface.AttributeDefinition");
        _usesInterfaceOBJ.setFile("metaSchema.dms");
        _usesInterfaceOBJ.setLineNumber("950");
        _usesInterfaceOBJ.setName("usesInterface");
        _usesInterfaceOBJ.setType("meta.String");
        _usesInterface.setDefinedIn(this);
        addAttributeDefList(_usesInterface);

        AttributeDefinitionDMO _uuidNameOBJ = new AttributeDefinitionDMO();
        _uuidName = new AttributeDefinition(_uuidNameOBJ);
        _uuidNameOBJ.addDescription("The object name for objects uniquely identified with a UUID.");
        _uuidNameOBJ.setDesignatedNameAttribute("true");
        _uuidNameOBJ.setDmdID("101");
        _uuidNameOBJ.setDotName("meta.uuidName.AttributeDefinition");
        _uuidNameOBJ.setFile("metaSchema.dms");
        _uuidNameOBJ.setLineNumber("1562");
        _uuidNameOBJ.setName("uuidName");
        _uuidNameOBJ.setType("meta.UUIDName");
        _uuidName.setDefinedIn(this);
        addAttributeDefList(_uuidName);

        AttributeDefinitionDMO _valueTypeOBJ = new AttributeDefinitionDMO();
        _valueType = new AttributeDefinition(_valueTypeOBJ);
        _valueTypeOBJ.addDescription("This attribute indicates the cardinality and storage mechanism for an\n attribute.");
        _valueTypeOBJ.setDmdID("12");
        _valueTypeOBJ.setDotName("meta.valueType.AttributeDefinition");
        _valueTypeOBJ.setFile("metaSchema.dms");
        _valueTypeOBJ.setLineNumber("864");
        _valueTypeOBJ.setName("valueType");
        _valueTypeOBJ.setType("meta.ValueTypeEnum");
        _valueType.setDefinedIn(this);
        addAttributeDefList(_valueType);

        AttributeDefinitionDMO _versionOBJ = new AttributeDefinitionDMO();
        _version = new AttributeDefinition(_versionOBJ);
        _versionOBJ.addDescription("The version at which something was introduced. Version names\n are assumed to be lexicographically sortable i.e. the name of a version must have a nautral\n sort order that increases.");
        _versionOBJ.setDmdID("181");
        _versionOBJ.setDotName("meta.version.AttributeDefinition");
        _versionOBJ.setFile("metaSchema.dms");
        _versionOBJ.setLineNumber("2192");
        _versionOBJ.setName("version");
        _versionOBJ.setType("meta.String");
        _version.setDefinedIn(this);
        addAttributeDefList(_version);

        AttributeDefinitionDMO _weakReferenceOBJ = new AttributeDefinitionDMO();
        _weakReference = new AttributeDefinition(_weakReferenceOBJ);
        _weakReferenceOBJ.addDescription("A flag to indicate that a reference attribute is weak i.e. \n if the object can't be resolved, no exception is thrown.");
        _weakReferenceOBJ.setDmdID("179");
        _weakReferenceOBJ.setDotName("meta.weakReference.AttributeDefinition");
        _weakReferenceOBJ.setFile("metaSchema.dms");
        _weakReferenceOBJ.setLineNumber("2171");
        _weakReferenceOBJ.setName("weakReference");
        _weakReferenceOBJ.setType("meta.Boolean");
        _weakReference.setDefinedIn(this);
        addAttributeDefList(_weakReference);

        AttributeDefinitionDMO _whyOBJ = new AttributeDefinitionDMO();
        _why = new AttributeDefinition(_whyOBJ);
        _whyOBJ.addDescription("An indication of why something was added to a specification or a system.\n This might be a reference to a requirement or feature concept. How this is used will depend on context.\n Due to the fact that it is a weak reference, you may also just put in free form text, since it\n will simply be treated as an unresolved reference.");
        _whyOBJ.setDmdID("184");
        _whyOBJ.setDotName("meta.why.AttributeDefinition");
        _whyOBJ.setFile("metaSchema.dms");
        _whyOBJ.setLineNumber("2216");
        _whyOBJ.setName("why");
        _whyOBJ.setType("meta.Concinnity");
        _whyOBJ.setWeakReference("true");
        _why.setDefinedIn(this);
        addAttributeDefList(_why);

        AttributeDefinitionDMO _wrapperClassNameOBJ = new AttributeDefinitionDMO();
        _wrapperClassName = new AttributeDefinition(_wrapperClassNameOBJ);
        _wrapperClassNameOBJ.addDescription("This is the fully qualified name of the wrapper class derived from DmcWrapperBase that\n wraps a DMO. This is used when generating object reference classes associated with ClassDefinitions\n This actually aligns to the javaClass of the ClassDefinition for which we're generating the reference\n classes.");
        _wrapperClassNameOBJ.setDmdID("6");
        _wrapperClassNameOBJ.setDotName("meta.wrapperClassName.AttributeDefinition");
        _wrapperClassNameOBJ.setFile("metaSchema.dms");
        _wrapperClassNameOBJ.setInternalUse("true");
        _wrapperClassNameOBJ.setLineNumber("821");
        _wrapperClassNameOBJ.setName("wrapperClassName");
        _wrapperClassNameOBJ.setType("meta.String");
        _wrapperClassName.setDefinedIn(this);
        addAttributeDefList(_wrapperClassName);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitTypes(MetaGenerator.java:423)
    private void initTypes() throws DmcValueException {

        TypeDefinitionDMO _AttributeIDOBJ = new TypeDefinitionDMO();
        _AttributeID = new TypeDefinition(_AttributeIDOBJ);
        _AttributeIDOBJ.setAltType("DmcAttributeInfo");
        _AttributeIDOBJ.setAltTypeImport("org.dmd.dmc.DmcAttributeInfo");
        _AttributeIDOBJ.addDescription("The AttributeID type allows for the storage of unique attribute identifiers.\n Currently this is only used in the dark-matter protocol attributeSelector attribute.");
        _AttributeIDOBJ.setDotName("meta.AttributeID.TypeDefinition");
        _AttributeIDOBJ.setFile("metaSchema.dms");
        _AttributeIDOBJ.setLineNumber("73");
        _AttributeIDOBJ.setName("AttributeID");
        _AttributeIDOBJ.setPrimitiveType("org.dmd.dmc.types.AttributeID");
        _AttributeIDOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeAttributeID");
        _AttributeID.setDefinedIn(this);
        addTypeDefList(_AttributeID);

        TypeDefinitionDMO _BooleanOBJ = new TypeDefinitionDMO();
        _Boolean = new TypeDefinition(_BooleanOBJ);
        _BooleanOBJ.addDescription("Provides support for Boolean values. This type makes use of the <code> nullReturnValue </code>\n flag so that, even if there is no value for an attribute of this type, a value of false will\n be returned.");
        _BooleanOBJ.setDotName("meta.Boolean.TypeDefinition");
        _BooleanOBJ.setFile("metaSchema.dms");
        _BooleanOBJ.setLineNumber("117");
        _BooleanOBJ.setName("Boolean");
        _BooleanOBJ.setNullReturnValue("false");
        _BooleanOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeBoolean");
        _Boolean.setDefinedIn(this);
        addTypeDefList(_Boolean);

        TypeDefinitionDMO _ByteOBJ = new TypeDefinitionDMO();
        _Byte = new TypeDefinition(_ByteOBJ);
        _ByteOBJ.addDescription("Provides support for Byte values.");
        _ByteOBJ.setDotName("meta.Byte.TypeDefinition");
        _ByteOBJ.setFile("metaSchema.dms");
        _ByteOBJ.setLineNumber("103");
        _ByteOBJ.setName("Byte");
        _ByteOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeByte");
        _Byte.setDefinedIn(this);
        addTypeDefList(_Byte);

        TypeDefinitionDMO _CamelCaseNameOBJ = new TypeDefinitionDMO();
        _CamelCaseName = new TypeDefinition(_CamelCaseNameOBJ);
        _CamelCaseNameOBJ.addDescription("The CamelCaseName is a string based name that must start with an alpha character\n which is followed by a mix of alphanumerics.");
        _CamelCaseNameOBJ.setDotName("meta.CamelCaseName.TypeDefinition");
        _CamelCaseNameOBJ.setFile("metaSchema.dms");
        _CamelCaseNameOBJ.setIsNameType("true");
        _CamelCaseNameOBJ.setLineNumber("176");
        _CamelCaseNameOBJ.setName("CamelCaseName");
        _CamelCaseNameOBJ.setNameAttributeDef("meta.camelCaseName");
        _CamelCaseNameOBJ.setPrimitiveType("org.dmd.dmc.types.CamelCaseName");
        _CamelCaseNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeCamelCaseName");
        _CamelCaseName.setDefinedIn(this);
        addTypeDefList(_CamelCaseName);

        TypeDefinitionDMO _ClassFilterOBJ = new TypeDefinitionDMO();
        _ClassFilter = new TypeDefinition(_ClassFilterOBJ);
        _ClassFilterOBJ.addDescription("The ClassFilter is used to perform matches against objects based on their class\n or auxiliary classes.");
        _ClassFilterOBJ.setDotName("meta.ClassFilter.TypeDefinition");
        _ClassFilterOBJ.setFile("metaSchema.dms");
        _ClassFilterOBJ.setFilterAttributeDef("meta.classFilter");
        _ClassFilterOBJ.setIsFilterType("true");
        _ClassFilterOBJ.setLineNumber("216");
        _ClassFilterOBJ.setName("ClassFilter");
        _ClassFilterOBJ.setPrimitiveType("org.dmd.dmc.types.ClassFilter");
        _ClassFilterOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeClassFilter");
        _ClassFilter.setDefinedIn(this);
        addTypeDefList(_ClassFilter);

        TypeDefinitionDMO _ClassInfoRefOBJ = new TypeDefinitionDMO();
        _ClassInfoRef = new TypeDefinition(_ClassInfoRefOBJ);
        _ClassInfoRefOBJ.addDescription("The ClassInfoRef type allows for the representation of class information \n via the Dark Matter ID associated with a ClassDefinition. It provides transient access\n to the static DmcClassInfo from the generated DMSAG, regardless of the environment in\n which it exists.");
        _ClassInfoRefOBJ.setDotName("meta.ClassInfoRef.TypeDefinition");
        _ClassInfoRefOBJ.setFile("metaSchema.dms");
        _ClassInfoRefOBJ.setLineNumber("25");
        _ClassInfoRefOBJ.setName("ClassInfoRef");
        _ClassInfoRefOBJ.setPrimitiveType("org.dmd.dmc.types.ClassInfoRef");
        _ClassInfoRefOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeClassInfoRef");
        _ClassInfoRef.setDefinedIn(this);
        addTypeDefList(_ClassInfoRef);

        TypeDefinitionDMO _DateOBJ = new TypeDefinitionDMO();
        _Date = new TypeDefinition(_DateOBJ);
        _DateOBJ.addDescription("Provides support for Date values.");
        _DateOBJ.setDotName("meta.Date.TypeDefinition");
        _DateOBJ.setFile("metaSchema.dms");
        _DateOBJ.setLineNumber("109");
        _DateOBJ.setName("Date");
        _DateOBJ.setPrimitiveType("java.util.Date");
        _DateOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDate");
        _Date.setDefinedIn(this);
        addTypeDefList(_Date);

        TypeDefinitionDMO _DefinitionNameOBJ = new TypeDefinitionDMO();
        _DefinitionName = new TypeDefinition(_DefinitionNameOBJ);
        _DefinitionNameOBJ.addDescription("The DefinitionName provides naming of dark-matter definitions.");
        _DefinitionNameOBJ.setDotName("meta.DefinitionName.TypeDefinition");
        _DefinitionNameOBJ.setFile("metaSchema.dms");
        _DefinitionNameOBJ.setIsNameType("true");
        _DefinitionNameOBJ.setLineNumber("168");
        _DefinitionNameOBJ.setName("DefinitionName");
        _DefinitionNameOBJ.setNameAttributeDef("meta.name");
        _DefinitionNameOBJ.setPrimitiveType("org.dmd.dmc.types.DefinitionName");
        _DefinitionNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDefinitionName");
        _DefinitionName.setDefinedIn(this);
        addTypeDefList(_DefinitionName);

        TypeDefinitionDMO _DmcObjectOBJ = new TypeDefinitionDMO();
        _DmcObject = new TypeDefinition(_DmcObjectOBJ);
        _DmcObjectOBJ.addDescription("The DmcObject type allows for the storage of raw DmcObjects.");
        _DmcObjectOBJ.setDotName("meta.DmcObject.TypeDefinition");
        _DmcObjectOBJ.setFile("metaSchema.dms");
        _DmcObjectOBJ.setLineNumber("16");
        _DmcObjectOBJ.setName("DmcObject");
        _DmcObjectOBJ.setPrimitiveType("org.dmd.dmc.DmcObject");
        _DmcObjectOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDmcObject");
        _DmcObject.setDefinedIn(this);
        addTypeDefList(_DmcObject);

        TypeDefinitionDMO _DotNameOBJ = new TypeDefinitionDMO();
        _DotName = new TypeDefinition(_DotNameOBJ);
        _DotNameOBJ.addDescription("The DotName provides standard mechanisms to deal with hierarchic names composed of\n strings interspersed with periods (dots) to separate the name elements. For example\n a dot name might be one.two.three");
        _DotNameOBJ.setDotName("meta.DotName.TypeDefinition");
        _DotNameOBJ.setFile("metaSchema.dms");
        _DotNameOBJ.setIsHierarchicName("true");
        _DotNameOBJ.setIsNameType("true");
        _DotNameOBJ.setLineNumber("208");
        _DotNameOBJ.setName("DotName");
        _DotNameOBJ.setNameAttributeDef("meta.dotName");
        _DotNameOBJ.setPrimitiveType("org.dmd.dmc.types.DotName");
        _DotNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDotName");
        _DotName.setDefinedIn(this);
        addTypeDefList(_DotName);

        TypeDefinitionDMO _DoubleOBJ = new TypeDefinitionDMO();
        _Double = new TypeDefinition(_DoubleOBJ);
        _DoubleOBJ.addDescription("Provides support for Double values.");
        _DoubleOBJ.setDotName("meta.Double.TypeDefinition");
        _DoubleOBJ.setFile("metaSchema.dms");
        _DoubleOBJ.setLineNumber("88");
        _DoubleOBJ.setName("Double");
        _DoubleOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeDouble");
        _Double.setDefinedIn(this);
        addTypeDefList(_Double);

        TypeDefinitionDMO _EnumValueOBJ = new TypeDefinitionDMO();
        _EnumValue = new TypeDefinition(_EnumValueOBJ);
        _EnumValueOBJ.addDescription("The EnumValue type is used to store the definition of one enumerated value\n that comprises part of an overall EnumDefinition.\n <p/>\n The value of an EnumValue is comprised of at least three tokens and possibly a label:\n <pre>\n [enum integer value] [enum value name] [enum description] <: label>\n </pre>\n For example:\n <pre>\n 0 ABSTRACT Here is the definition of abstract. : Abstract\n </pre>\n Within an EnumDefinition, each EnumValue must have a unique integer identifier\n and a unique value name.\n <p/>\n The enum value name is automatically set to uppercase, even if it is specified\n in lower or mixed case.");
        _EnumValueOBJ.setDotName("meta.EnumValue.TypeDefinition");
        _EnumValueOBJ.setFile("metaSchema.dms");
        _EnumValueOBJ.setLineNumber("138");
        _EnumValueOBJ.setName("EnumValue");
        _EnumValueOBJ.setPrimitiveType("org.dmd.dms.types.EnumValue");
        _EnumValueOBJ.setTypeClassName("org.dmd.dms.types.DmcTypeEnumValue");
        _EnumValue.setDefinedIn(this);
        addTypeDefList(_EnumValue);

        TypeDefinitionDMO _FilterContainerOBJ = new TypeDefinitionDMO();
        _FilterContainer = new TypeDefinition(_FilterContainerOBJ);
        _FilterContainerOBJ.setAltType("DmcFilter");
        _FilterContainerOBJ.setAltTypeImport("org.dmd.dmc.DmcFilter");
        _FilterContainerOBJ.addDescription("The FilterContainer type allows for the storage of object filters of different types.");
        _FilterContainerOBJ.setDotName("meta.FilterContainer.TypeDefinition");
        _FilterContainerOBJ.setFile("metaSchema.dms");
        _FilterContainerOBJ.setLineNumber("64");
        _FilterContainerOBJ.setName("FilterContainer");
        _FilterContainerOBJ.setPrimitiveType("org.dmd.dmc.types.FilterContainer");
        _FilterContainerOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeFilterContainer");
        _FilterContainer.setDefinedIn(this);
        addTypeDefList(_FilterContainer);

        TypeDefinitionDMO _FloatOBJ = new TypeDefinitionDMO();
        _Float = new TypeDefinition(_FloatOBJ);
        _FloatOBJ.addDescription("Provides support for Float values.");
        _FloatOBJ.setDotName("meta.Float.TypeDefinition");
        _FloatOBJ.setFile("metaSchema.dms");
        _FloatOBJ.setLineNumber("83");
        _FloatOBJ.setName("Float");
        _FloatOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeFloat");
        _Float.setDefinedIn(this);
        addTypeDefList(_Float);

        TypeDefinitionDMO _FullyQualifiedNameOBJ = new TypeDefinitionDMO();
        _FullyQualifiedName = new TypeDefinition(_FullyQualifiedNameOBJ);
        _FullyQualifiedNameOBJ.setDotName("meta.FullyQualifiedName.TypeDefinition");
        _FullyQualifiedNameOBJ.setFile("metaSchema.dms");
        _FullyQualifiedNameOBJ.setIsNameType("true");
        _FullyQualifiedNameOBJ.setLineNumber("266");
        _FullyQualifiedNameOBJ.setName("FullyQualifiedName");
        _FullyQualifiedNameOBJ.setNameAttributeDef("meta.FQN");
        _FullyQualifiedNameOBJ.setPrimitiveType("org.dmd.dmc.types.FullyQualifiedName");
        _FullyQualifiedNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeFullyQualifiedName");
        _FullyQualifiedName.setDefinedIn(this);
        addTypeDefList(_FullyQualifiedName);

        TypeDefinitionDMO _IntegerOBJ = new TypeDefinitionDMO();
        _Integer = new TypeDefinition(_IntegerOBJ);
        _IntegerOBJ.addDescription("Provides support for Integer values.");
        _IntegerOBJ.setDotName("meta.Integer.TypeDefinition");
        _IntegerOBJ.setFile("metaSchema.dms");
        _IntegerOBJ.setLineNumber("78");
        _IntegerOBJ.setName("Integer");
        _IntegerOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeInteger");
        _Integer.setDefinedIn(this);
        addTypeDefList(_Integer);

        TypeDefinitionDMO _IntegerNameOBJ = new TypeDefinitionDMO();
        _IntegerName = new TypeDefinition(_IntegerNameOBJ);
        _IntegerNameOBJ.addDescription("An IntegerName provides the means to uniquely identify an object using an integer value.");
        _IntegerNameOBJ.setDotName("meta.IntegerName.TypeDefinition");
        _IntegerNameOBJ.setFile("metaSchema.dms");
        _IntegerNameOBJ.setIsNameType("true");
        _IntegerNameOBJ.setLineNumber("191");
        _IntegerNameOBJ.setName("IntegerName");
        _IntegerNameOBJ.setNameAttributeDef("meta.integerName");
        _IntegerNameOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerName");
        _IntegerNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerName");
        _IntegerName.setDefinedIn(this);
        addTypeDefList(_IntegerName);

        TypeDefinitionDMO _IntegerToBooleanOBJ = new TypeDefinitionDMO();
        _IntegerToBoolean = new TypeDefinition(_IntegerToBooleanOBJ);
        _IntegerToBooleanOBJ.addDescription("Provides support for hashed integer to Boolean values.");
        _IntegerToBooleanOBJ.setDotName("meta.IntegerToBoolean.TypeDefinition");
        _IntegerToBooleanOBJ.setFile("metaSchema.dms");
        _IntegerToBooleanOBJ.setKeyClass("Integer");
        _IntegerToBooleanOBJ.setLineNumber("253");
        _IntegerToBooleanOBJ.setName("IntegerToBoolean");
        _IntegerToBooleanOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerToBoolean");
        _IntegerToBooleanOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerToBoolean");
        _IntegerToBoolean.setDefinedIn(this);
        addTypeDefList(_IntegerToBoolean);

        TypeDefinitionDMO _IntegerToStringOBJ = new TypeDefinitionDMO();
        _IntegerToString = new TypeDefinition(_IntegerToStringOBJ);
        _IntegerToStringOBJ.addDescription("Provides support for hashed integer to string values.");
        _IntegerToStringOBJ.setDotName("meta.IntegerToString.TypeDefinition");
        _IntegerToStringOBJ.setFile("metaSchema.dms");
        _IntegerToStringOBJ.setKeyClass("Integer");
        _IntegerToStringOBJ.setLineNumber("223");
        _IntegerToStringOBJ.setName("IntegerToString");
        _IntegerToStringOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerToString");
        _IntegerToStringOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerToString");
        _IntegerToString.setDefinedIn(this);
        addTypeDefList(_IntegerToString);

        TypeDefinitionDMO _IntegerToUUIDLiteOBJ = new TypeDefinitionDMO();
        _IntegerToUUIDLite = new TypeDefinition(_IntegerToUUIDLiteOBJ);
        _IntegerToUUIDLiteOBJ.addDescription("Provides support for hashed integer to UUIDLite values.");
        _IntegerToUUIDLiteOBJ.setDotName("meta.IntegerToUUIDLite.TypeDefinition");
        _IntegerToUUIDLiteOBJ.setFile("metaSchema.dms");
        _IntegerToUUIDLiteOBJ.setKeyClass("Integer");
        _IntegerToUUIDLiteOBJ.setLineNumber("260");
        _IntegerToUUIDLiteOBJ.setName("IntegerToUUIDLite");
        _IntegerToUUIDLiteOBJ.setPrimitiveType("org.dmd.dmc.types.IntegerToUUIDLite");
        _IntegerToUUIDLiteOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeIntegerToUUIDLite");
        _IntegerToUUIDLite.setDefinedIn(this);
        addTypeDefList(_IntegerToUUIDLite);

        TypeDefinitionDMO _LabelledIntegerDataPointOBJ = new TypeDefinitionDMO();
        _LabelledIntegerDataPoint = new TypeDefinition(_LabelledIntegerDataPointOBJ);
        _LabelledIntegerDataPointOBJ.addDescription("Represents a single, labelled Integer data point. Generally used for pie\n chart data.");
        _LabelledIntegerDataPointOBJ.setDotName("meta.LabelledIntegerDataPoint.TypeDefinition");
        _LabelledIntegerDataPointOBJ.setFile("metaSchema.dms");
        _LabelledIntegerDataPointOBJ.setLineNumber("273");
        _LabelledIntegerDataPointOBJ.setName("LabelledIntegerDataPoint");
        _LabelledIntegerDataPointOBJ.setPrimitiveType("org.dmd.dmc.types.LabelledIntegerDataPoint");
        _LabelledIntegerDataPointOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeLabelledIntegerDataPoint");
        _LabelledIntegerDataPoint.setDefinedIn(this);
        addTypeDefList(_LabelledIntegerDataPoint);

        TypeDefinitionDMO _LongOBJ = new TypeDefinitionDMO();
        _Long = new TypeDefinition(_LongOBJ);
        _LongOBJ.addDescription("Provides support for Long values.");
        _LongOBJ.setDotName("meta.Long.TypeDefinition");
        _LongOBJ.setFile("metaSchema.dms");
        _LongOBJ.setLineNumber("93");
        _LongOBJ.setName("Long");
        _LongOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeLong");
        _Long.setDefinedIn(this);
        addTypeDefList(_Long);

        TypeDefinitionDMO _LongNameOBJ = new TypeDefinitionDMO();
        _LongName = new TypeDefinition(_LongNameOBJ);
        _LongNameOBJ.addDescription("A LongName provides the means to uniquely identify an object using a long value.");
        _LongNameOBJ.setDotName("meta.LongName.TypeDefinition");
        _LongNameOBJ.setFile("metaSchema.dms");
        _LongNameOBJ.setIsNameType("true");
        _LongNameOBJ.setLineNumber("198");
        _LongNameOBJ.setName("LongName");
        _LongNameOBJ.setNameAttributeDef("meta.longName");
        _LongNameOBJ.setPrimitiveType("org.dmd.dmc.types.LongName");
        _LongNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeLongName");
        _LongName.setDefinedIn(this);
        addTypeDefList(_LongName);

        TypeDefinitionDMO _ModifierOBJ = new TypeDefinitionDMO();
        _Modifier = new TypeDefinition(_ModifierOBJ);
        _ModifierOBJ.addDescription("The Modifier type is used to represent modification operations on a DmcObject.\n Any modification to an object can be represented by a Modifier. The string representation\n of a modification can take the following forms:\n <ul>\n <li> &ltattribute name&gt ADD &ltvalue&gt</li>\n <li> &ltattribute name&gt DEL &ltvalue&gt</li>\n <li> &ltattribute name&gt SET &ltvalue&gt</li>\n <li> &ltattribute name&gt NTH &ltindex&gt &ltvalue&gt</li>\n <li> &ltattribute name&gt NTH &ltindex&gt</li>\n <li> &ltattribute name&gt REM </li>\n </ul>");
        _ModifierOBJ.setDotName("meta.Modifier.TypeDefinition");
        _ModifierOBJ.setFile("metaSchema.dms");
        _ModifierOBJ.setLineNumber("154");
        _ModifierOBJ.setName("Modifier");
        _ModifierOBJ.setPrimitiveType("org.dmd.dmc.types.Modifier");
        _ModifierOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeModifier");
        _Modifier.setDefinedIn(this);
        addTypeDefList(_Modifier);

        TypeDefinitionDMO _NameContainerOBJ = new TypeDefinitionDMO();
        _NameContainer = new TypeDefinition(_NameContainerOBJ);
        _NameContainerOBJ.setAltType("DmcObjectName");
        _NameContainerOBJ.setAltTypeImport("org.dmd.dmc.DmcObjectName");
        _NameContainerOBJ.addDescription("The NameContainer type allows for the storage of object names of different types.\n This mechanism is required because the naming mechanisms associated with dark-matter allow for\n different ways of naming objects. When the name of something is transported, it has to be \n self describing i.e. the type of the naming attribute must be known so that the appropriate \n name type can be instantiated. An example of this comes from the Dark Matter Protocol. \n The targets attribute is defined as a NameContainer. An instance of targets might appear\n as follows:\n <pre>\n targets uuidName 809408a7-f00b-448c-beb6-00337e83acc4\n </pre>\n As you can see, the attribute name is <code>targets</code> and the value is <code> uuidName 809408a7-f00b-448c-beb6-00337e83acc4</code>.\n The <code>uuidName</code> attribute is the <code> designatedNameAttribute </code> for the <code> UUIDName </code> type. So, when parsing/deserializing a\n name container, we always know the underlying type of the name.\n <p/>\n This approach makes dark-matter name handling completely extensible.\n <p/>\n A similar approach is taken to filter specifications via the FilterContainer.");
        _NameContainerOBJ.setDotName("meta.NameContainer.TypeDefinition");
        _NameContainerOBJ.setFile("metaSchema.dms");
        _NameContainerOBJ.setLineNumber("56");
        _NameContainerOBJ.setName("NameContainer");
        _NameContainerOBJ.setPrimitiveType("org.dmd.dmc.types.NameContainer");
        _NameContainerOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeNameContainer");
        _NameContainer.setDefinedIn(this);
        addTypeDefList(_NameContainer);

        TypeDefinitionDMO _RuleNameOBJ = new TypeDefinitionDMO();
        _RuleName = new TypeDefinition(_RuleNameOBJ);
        _RuleNameOBJ.addDescription("The RuleName is a string based name that must start with an alpha character\n which is followed by a mix of alphanumerics.");
        _RuleNameOBJ.setDotName("meta.RuleName.TypeDefinition");
        _RuleNameOBJ.setFile("metaSchema.dms");
        _RuleNameOBJ.setIsNameType("true");
        _RuleNameOBJ.setLineNumber("184");
        _RuleNameOBJ.setName("RuleName");
        _RuleNameOBJ.setNameAttributeDef("meta.ruleName");
        _RuleNameOBJ.setPrimitiveType("org.dmd.dmc.types.RuleName");
        _RuleNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeRuleName");
        _RuleName.setDefinedIn(this);
        addTypeDefList(_RuleName);

        TypeDefinitionDMO _ShortOBJ = new TypeDefinitionDMO();
        _Short = new TypeDefinition(_ShortOBJ);
        _ShortOBJ.addDescription("Provides support for Short values.");
        _ShortOBJ.setDotName("meta.Short.TypeDefinition");
        _ShortOBJ.setFile("metaSchema.dms");
        _ShortOBJ.setLineNumber("98");
        _ShortOBJ.setName("Short");
        _ShortOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeShort");
        _Short.setDefinedIn(this);
        addTypeDefList(_Short);

        TypeDefinitionDMO _StringOBJ = new TypeDefinitionDMO();
        _String = new TypeDefinition(_StringOBJ);
        _StringOBJ.addDescription("Provides support for String values.");
        _StringOBJ.setDotName("meta.String.TypeDefinition");
        _StringOBJ.setFile("metaSchema.dms");
        _StringOBJ.setLineNumber("10");
        _StringOBJ.setName("String");
        _StringOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeString");
        _String.setDefinedIn(this);
        addTypeDefList(_String);

        TypeDefinitionDMO _StringNameOBJ = new TypeDefinitionDMO();
        _StringName = new TypeDefinition(_StringNameOBJ);
        _StringNameOBJ.addDescription("The StringName is the simplest naming mechanism available; it's just a String.");
        _StringNameOBJ.setDotName("meta.StringName.TypeDefinition");
        _StringNameOBJ.setFile("metaSchema.dms");
        _StringNameOBJ.setIsNameType("true");
        _StringNameOBJ.setLineNumber("161");
        _StringNameOBJ.setName("StringName");
        _StringNameOBJ.setNameAttributeDef("meta.stringName");
        _StringNameOBJ.setPrimitiveType("org.dmd.dmc.types.StringName");
        _StringNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeStringName");
        _StringName.setDefinedIn(this);
        addTypeDefList(_StringName);

        TypeDefinitionDMO _StringToStringOBJ = new TypeDefinitionDMO();
        _StringToString = new TypeDefinition(_StringToStringOBJ);
        _StringToStringOBJ.addDescription("Provides support for hashed string to string values.");
        _StringToStringOBJ.setDotName("meta.StringToString.TypeDefinition");
        _StringToStringOBJ.setFile("metaSchema.dms");
        _StringToStringOBJ.setKeyClass("String");
        _StringToStringOBJ.setLineNumber("230");
        _StringToStringOBJ.setName("StringToString");
        _StringToStringOBJ.setPrimitiveType("org.dmd.dmc.types.StringToString");
        _StringToStringOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeStringToString");
        _StringToString.setDefinedIn(this);
        addTypeDefList(_StringToString);

        TypeDefinitionDMO _TimeDoubleDataPointOBJ = new TypeDefinitionDMO();
        _TimeDoubleDataPoint = new TypeDefinition(_TimeDoubleDataPointOBJ);
        _TimeDoubleDataPointOBJ.addDescription("Represents a single Double data point at a moment in time. Generally used\n for line or column chart data.");
        _TimeDoubleDataPointOBJ.setDotName("meta.TimeDoubleDataPoint.TypeDefinition");
        _TimeDoubleDataPointOBJ.setFile("metaSchema.dms");
        _TimeDoubleDataPointOBJ.setLineNumber("280");
        _TimeDoubleDataPointOBJ.setName("TimeDoubleDataPoint");
        _TimeDoubleDataPointOBJ.setPrimitiveType("org.dmd.dmc.types.TimeDoubleDataPoint");
        _TimeDoubleDataPointOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeTimeDoubleDataPoint");
        _TimeDoubleDataPoint.setDefinedIn(this);
        addTypeDefList(_TimeDoubleDataPoint);

        TypeDefinitionDMO _UUIDLiteOBJ = new TypeDefinitionDMO();
        _UUIDLite = new TypeDefinition(_UUIDLiteOBJ);
        _UUIDLiteOBJ.addDescription("The UUIDLite provides support for UUIDs in GWT environments; a full UUID implementation\n is not supported by the GWT JRE Emulation mechanisms. It holds two long values that represent a complete\n java.util.UUID as generated within the server environment. The methods to parse a UUID from a String and\n present it as a String are taken from the java.util.UUID class.");
        _UUIDLiteOBJ.setDotName("meta.UUIDLite.TypeDefinition");
        _UUIDLiteOBJ.setFile("metaSchema.dms");
        _UUIDLiteOBJ.setLineNumber("239");
        _UUIDLiteOBJ.setName("UUIDLite");
        _UUIDLiteOBJ.setPrimitiveType("org.dmd.dmc.types.UUIDLite");
        _UUIDLiteOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeUUIDLite");
        _UUIDLite.setDefinedIn(this);
        addTypeDefList(_UUIDLite);

        TypeDefinitionDMO _UUIDNameOBJ = new TypeDefinitionDMO();
        _UUIDName = new TypeDefinition(_UUIDNameOBJ);
        _UUIDNameOBJ.addDescription("The UUIDName allows for the naming of objects based on the GWT compatible UUIDLite type.");
        _UUIDNameOBJ.setDotName("meta.UUIDName.TypeDefinition");
        _UUIDNameOBJ.setFile("metaSchema.dms");
        _UUIDNameOBJ.setIsNameType("true");
        _UUIDNameOBJ.setLineNumber("246");
        _UUIDNameOBJ.setName("UUIDName");
        _UUIDNameOBJ.setNameAttributeDef("meta.uuidName");
        _UUIDNameOBJ.setPrimitiveType("org.dmd.dmc.types.UUIDName");
        _UUIDNameOBJ.setTypeClassName("org.dmd.dmc.types.DmcTypeUUIDName");
        _UUIDName.setDefinedIn(this);
        addTypeDefList(_UUIDName);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitEnums(MetaGenerator.java:447)
    private void initEnums() throws DmcValueException {

        EnumDefinitionDMO _BaseTypeEnumOBJ = new EnumDefinitionDMO();
        _BaseTypeEnum = new EnumDefinition(_BaseTypeEnumOBJ);
        _BaseTypeEnumOBJ.addDescription("The BaseTypeEnum indicates the broad category of data types for which \n a MethodGenerator component is intended. The matrix defined by combining the ValueType and\n BaseTypeEnums indicates all the combinations of method types required for a particular\n type of data in code generation context.");
        _BaseTypeEnumOBJ.setDotName("meta.BaseTypeEnum.EnumDefinition");
        _BaseTypeEnumOBJ.addEnumValue("0 PRIMITIVE 	Indicates a primitive data type such as Integer, String, long or a generated complex type.");
        _BaseTypeEnumOBJ.addEnumValue("1 NAMEDREF		Indicates a named object reference.");
        _BaseTypeEnumOBJ.addEnumValue("2 UNNAMEDREF 	Indicates an unnamed object reference.");
        _BaseTypeEnumOBJ.addEnumValue("3 EXTENDEDREF 	Indicates an extended reference.");
        _BaseTypeEnumOBJ.addEnumValue("4 KEYED			Indicates a type that has a defined key type.");
        _BaseTypeEnumOBJ.setFile("metaSchema.dms");
        _BaseTypeEnumOBJ.setLineNumber("494");
        _BaseTypeEnumOBJ.setName("BaseTypeEnum");
        _BaseTypeEnumOBJ.setNullReturnValue("BaseTypeEnum.PRIMITIVE");
        _BaseTypeEnum.setDefinedIn(this);
        addEnumDefList(_BaseTypeEnum);

        EnumDefinitionDMO _ClassTypeEnumOBJ = new EnumDefinitionDMO();
        _ClassTypeEnum = new EnumDefinition(_ClassTypeEnumOBJ);
        _ClassTypeEnumOBJ.addDescription("The ClassTypeEnum enumeration indicates the types of classes that can\n be defined; some of these definitions are borrowed from LDAP directory parlance. See\n the individual enum value definitions for details.");
        _ClassTypeEnumOBJ.setDotName("meta.ClassTypeEnum.EnumDefinition");
        _ClassTypeEnumOBJ.addEnumValue("0 UNKNOWN		Unknown value.");
        _ClassTypeEnumOBJ.addEnumValue("1 ABSTRACT		An abstract class is one that provides a base class for a set of related derived classes, but which can't be instantiated by itself.");
        _ClassTypeEnumOBJ.addEnumValue("2 STRUCTURAL	A structural class is a class that can be instantiated by itself.");
        _ClassTypeEnumOBJ.addEnumValue("3 AUXILIARY 	An auxiliary class is basically a collection of additional attributes that can be added to an instance of a STRUCTURAL class; an AUXILIARY class can't be instantiated on its own.");
        _ClassTypeEnumOBJ.addEnumValue("4 EXTENSIBLE 	An extensible class is basically a free-form class that allows ANY attribute to be set on it.");
        _ClassTypeEnumOBJ.addEnumValue("5 INTERFACE		An interface class provides an interface for a set of implementing classes.");
        _ClassTypeEnumOBJ.setFile("metaSchema.dms");
        _ClassTypeEnumOBJ.setLineNumber("405");
        _ClassTypeEnumOBJ.setName("ClassTypeEnum");
        _ClassTypeEnumOBJ.setNullReturnValue("ClassTypeEnum.UNKNOWN");
        _ClassTypeEnum.setDefinedIn(this);
        addEnumDefList(_ClassTypeEnum);

        EnumDefinitionDMO _DataTypeEnumOBJ = new EnumDefinitionDMO();
        _DataTypeEnum = new EnumDefinition(_DataTypeEnumOBJ);
        _DataTypeEnumOBJ.addDescription("The DataTypeEnum relates to how attributes/classes are dealt with\n by various persistence mechanism. No inherent behaviour is defined at this level.");
        _DataTypeEnumOBJ.setDotName("meta.DataTypeEnum.EnumDefinition");
        _DataTypeEnumOBJ.addEnumValue("0 UNKNOWN Indicates that we can't determine the data type.");
        _DataTypeEnumOBJ.addEnumValue("1 TRANSIENT Indicates that the data is transient i.e. it exists within the application context in which it is used, but is not persisted across application invocations and is not serialized in communications with other systems.");
        _DataTypeEnumOBJ.addEnumValue("2 PERSISTENT Indicates that the data is meant to be persistent. What persistence mechanism is used is application dependent.");
        _DataTypeEnumOBJ.addEnumValue("3 NONPERSISTENT Indicates that the data is used within your system and  transmitted to remote systems but is not persisted.");
        _DataTypeEnumOBJ.setFile("metaSchema.dms");
        _DataTypeEnumOBJ.setLineNumber("465");
        _DataTypeEnumOBJ.setName("DataTypeEnum");
        _DataTypeEnumOBJ.setNullReturnValue("DataTypeEnum.PERSISTENT");
        _DataTypeEnum.setDefinedIn(this);
        addEnumDefList(_DataTypeEnum);

        EnumDefinitionDMO _DebugEnumOBJ = new EnumDefinitionDMO();
        _DebugEnum = new EnumDefinition(_DebugEnumOBJ);
        _DebugEnumOBJ.addDescription("The DebugEnum indicates the various levels of detailed logging that can be enabled in the DMC framework.");
        _DebugEnumOBJ.setDotName("meta.DebugEnum.EnumDefinition");
        _DebugEnumOBJ.addEnumValue("0 NONE Unknown value.");
        _DebugEnumOBJ.addEnumValue("1 FILTER Allows fine control over printing of debug messages associated with filtering operations.");
        _DebugEnumOBJ.addEnumValue("2 SCHEMA Allows fine control over printing of debug messages associated with schema loading operations.");
        _DebugEnumOBJ.setFile("metaSchema.dms");
        _DebugEnumOBJ.setLineNumber("515");
        _DebugEnumOBJ.setName("DebugEnum");
        _DebugEnumOBJ.setNullReturnValue("DebugEnum.NONE");
        _DebugEnum.setDefinedIn(this);
        addEnumDefList(_DebugEnum);

        EnumDefinitionDMO _FilterTypeEnumOBJ = new EnumDefinitionDMO();
        _FilterTypeEnum = new EnumDefinition(_FilterTypeEnumOBJ);
        _FilterTypeEnumOBJ.addDescription("The FilterTypeEnum enumeration indicates the types of filter operations\n that can be carried out on the attributes of an object.");
        _FilterTypeEnumOBJ.setDotName("meta.FilterTypeEnum.EnumDefinition");
        _FilterTypeEnumOBJ.addEnumValue("0 NONE Indicates that no filter operation was specified.");
        _FilterTypeEnumOBJ.addEnumValue("1 AND  Indicates that the rest of the filter ops that follow will be ANDed together.");
        _FilterTypeEnumOBJ.addEnumValue("2 OR   Indicates that the rest of the filter ops that follow will be ORed together.");
        _FilterTypeEnumOBJ.addEnumValue("3 EQ   Performs a test for equality.");
        _FilterTypeEnumOBJ.addEnumValue("4 NE   Performs a test for inequality.");
        _FilterTypeEnumOBJ.addEnumValue("5 PR   Performs a test for the presence of an attribute.");
        _FilterTypeEnumOBJ.addEnumValue("6 NP   Performs a test to see if an attribute is not present.");
        _FilterTypeEnumOBJ.setFile("metaSchema.dms");
        _FilterTypeEnumOBJ.setLineNumber("507");
        _FilterTypeEnumOBJ.setName("FilterTypeEnum");
        _FilterTypeEnumOBJ.setNullReturnValue("FilterTypeEnum.NONE");
        _FilterTypeEnum.setDefinedIn(this);
        addEnumDefList(_FilterTypeEnum);

        EnumDefinitionDMO _GPBFieldTypeEnumOBJ = new EnumDefinitionDMO();
        _GPBFieldTypeEnum = new EnumDefinition(_GPBFieldTypeEnumOBJ);
        _GPBFieldTypeEnumOBJ.setDotName("meta.GPBFieldTypeEnum.EnumDefinition");
        _GPBFieldTypeEnumOBJ.addEnumValue("0 REQUIRED A required field.");
        _GPBFieldTypeEnumOBJ.addEnumValue("1 OPTIONAL An optional field.");
        _GPBFieldTypeEnumOBJ.addEnumValue("2 REPEATED A repeated field.");
        _GPBFieldTypeEnumOBJ.setFile("metaSchema.dms");
        _GPBFieldTypeEnumOBJ.setLineNumber("563");
        _GPBFieldTypeEnumOBJ.setName("GPBFieldTypeEnum");
        _GPBFieldTypeEnum.setDefinedIn(this);
        addEnumDefList(_GPBFieldTypeEnum);

        EnumDefinitionDMO _GPBScalarTypeEnumOBJ = new EnumDefinitionDMO();
        _GPBScalarTypeEnum = new EnumDefinition(_GPBScalarTypeEnumOBJ);
        _GPBScalarTypeEnumOBJ.addDescription("The GPBScalarTypeEnum indicates the various mechanisms for encoding attribute values\n using Google Protocol Buffers.");
        _GPBScalarTypeEnumOBJ.setDotName("meta.GPBScalarTypeEnum.EnumDefinition");
        _GPBScalarTypeEnumOBJ.addEnumValue("0 DOUBLE 	Java double - C++ double.");
        _GPBScalarTypeEnumOBJ.addEnumValue("1 FLOAT 	Java float - C++ float.");
        _GPBScalarTypeEnumOBJ.addEnumValue("2 INT32 	Java int - C++ int32. Uses variable-length encoding. Inefficient for encoding negative numbers - if your field is likely to have negative values, use sint32 instead.");
        _GPBScalarTypeEnumOBJ.addEnumValue("3 INT64 	Java long - C++ int64. Uses variable-length encoding. Inefficient for encoding negative numbers - if your field is likely to have negative values, use sint64 instead.");
        _GPBScalarTypeEnumOBJ.addEnumValue("4 UINT32 	Java int - C++ uint32. Uses variable-length encoding. In Java, unsigned 32-bit integers are represented using their signed counterparts, with the top bit simply being stored in the sign bit.");
        _GPBScalarTypeEnumOBJ.addEnumValue("5 UINT64 	Java long - C++ uint64. Uses variable-length encoding. In Java, unsigned 64-bit integers are represented using their signed counterparts, with the top bit simply being stored in the sign bit.");
        _GPBScalarTypeEnumOBJ.addEnumValue("6 SINT32 	Java int - C++ int32. Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.");
        _GPBScalarTypeEnumOBJ.addEnumValue("7 SINT64 	Java long - C++ int64. Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.");
        _GPBScalarTypeEnumOBJ.addEnumValue("8 FIXED32 	Java int - C++ uint32. Always four bytes. More efficient than uint32 if values are often greater than 2^28.");
        _GPBScalarTypeEnumOBJ.addEnumValue("9 FIXED64 	Java long - C++ uint64. Always eight bytes. More efficient than uint64 if values are often greater than 2^56.");
        _GPBScalarTypeEnumOBJ.addEnumValue("10 SFIXED32 Java int - C++ int32. Always four bytes.");
        _GPBScalarTypeEnumOBJ.addEnumValue("11 SFIXED64 Java long - C++ int64. Always eight bytes.");
        _GPBScalarTypeEnumOBJ.addEnumValue("12 BOOL 	Java boolean - C++ bool.");
        _GPBScalarTypeEnumOBJ.addEnumValue("13 STRING 	Java String - C++ string. A string must always contain UTF-8 encoded or 7-bit ASCII text.");
        _GPBScalarTypeEnumOBJ.addEnumValue("14 BYTES 	Java ByteString - C++ string. May contain any arbitrary sequence of bytes.");
        _GPBScalarTypeEnumOBJ.setFile("metaSchema.dms");
        _GPBScalarTypeEnumOBJ.setLineNumber("557");
        _GPBScalarTypeEnumOBJ.setName("GPBScalarTypeEnum");
        _GPBScalarTypeEnum.setDefinedIn(this);
        addEnumDefList(_GPBScalarTypeEnum);

        EnumDefinitionDMO _ModifyTypeEnumOBJ = new EnumDefinitionDMO();
        _ModifyTypeEnum = new EnumDefinition(_ModifyTypeEnumOBJ);
        _ModifyTypeEnumOBJ.addDescription("The ModifyTypeEnum indicates the types of modification operations\n that can be carried out on the attributes of an object.");
        _ModifyTypeEnumOBJ.setDotName("meta.ModifyTypeEnum.EnumDefinition");
        _ModifyTypeEnumOBJ.addEnumValue("0 NONE Indicates that no modify operation was specified.");
        _ModifyTypeEnumOBJ.addEnumValue("1 ADD  The ADD operation adds a new value to a multi-valued attribute.");
        _ModifyTypeEnumOBJ.addEnumValue("2 DEL  The DEL operation removes a value from a multi-valued attribute.");
        _ModifyTypeEnumOBJ.addEnumValue("3 SET  The SET operation sets a new value for a single-valued attribute.");
        _ModifyTypeEnumOBJ.addEnumValue("4 REM  The REM operation removes the entire attribute from the object.");
        _ModifyTypeEnumOBJ.addEnumValue("5 NTH  The NTH operation sets the value at the specified index.");
        _ModifyTypeEnumOBJ.setFile("metaSchema.dms");
        _ModifyTypeEnumOBJ.setLineNumber("417");
        _ModifyTypeEnumOBJ.setName("ModifyTypeEnum");
        _ModifyTypeEnumOBJ.setNullReturnValue("ModifyTypeEnum.NONE");
        _ModifyTypeEnum.setDefinedIn(this);
        addEnumDefList(_ModifyTypeEnum);

        EnumDefinitionDMO _OperationalContextEnumOBJ = new EnumDefinitionDMO();
        _OperationalContextEnum = new EnumDefinition(_OperationalContextEnumOBJ);
        _OperationalContextEnumOBJ.addDescription("The OperationalContextEnum indicates various types of operational contexts\n in which some component can operate.");
        _OperationalContextEnumOBJ.setDotName("meta.OperationalContextEnum.EnumDefinition");
        _OperationalContextEnumOBJ.addEnumValue("0 DMO       Indicates that the component follows basic Dark Matter Object rules which likewise conform to GWT JRE Emulation.");
        _OperationalContextEnumOBJ.addEnumValue("1 FULLJAVA  indicates that the component operates in a ful Java environment; no restrictions.");
        _OperationalContextEnumOBJ.setFile("metaSchema.dms");
        _OperationalContextEnumOBJ.setLineNumber("425");
        _OperationalContextEnumOBJ.setName("OperationalContextEnum");
        _OperationalContextEnumOBJ.setNullReturnValue("OperationalContextEnum.DMO");
        _OperationalContextEnum.setDefinedIn(this);
        addEnumDefList(_OperationalContextEnum);

        EnumDefinitionDMO _OriginalTypeEnumOBJ = new EnumDefinitionDMO();
        _OriginalTypeEnum = new EnumDefinition(_OriginalTypeEnumOBJ);
        _OriginalTypeEnumOBJ.addDescription("The OriginalTypeEnum indicates the source of type, whether explicitly defined\n or implicitly defined and generated as an internal type.");
        _OriginalTypeEnumOBJ.setDotName("meta.OriginalTypeEnum.EnumDefinition");
        _OriginalTypeEnumOBJ.addEnumValue("0 TYPE The type is actually a type!.");
        _OriginalTypeEnumOBJ.addEnumValue("1 ENUM The type is an enum.");
        _OriginalTypeEnumOBJ.addEnumValue("2 OBJECT The type is the internally generated one to represent an unnamed object.");
        _OriginalTypeEnumOBJ.addEnumValue("3 REFERENCE The type is the internally generated one to represent a reference to a named object.");
        _OriginalTypeEnumOBJ.addEnumValue("4 EXTREF The type is an extended reference type.");
        _OriginalTypeEnumOBJ.addEnumValue("5 COMPLEXTYPE The is a complex type.");
        _OriginalTypeEnumOBJ.addEnumValue("6 NAMETYPE The type is a name type.");
        _OriginalTypeEnumOBJ.setFile("metaSchema.dms");
        _OriginalTypeEnumOBJ.setLineNumber("537");
        _OriginalTypeEnumOBJ.setName("OriginalTypeEnum");
        _OriginalTypeEnumOBJ.setNullReturnValue("OriginalTypeEnum.TYPE");
        _OriginalTypeEnum.setDefinedIn(this);
        addEnumDefList(_OriginalTypeEnum);

        EnumDefinitionDMO _RuleTypeEnumOBJ = new EnumDefinitionDMO();
        _RuleTypeEnum = new EnumDefinition(_RuleTypeEnumOBJ);
        _RuleTypeEnumOBJ.addDescription("The RuleTypeEnum indicates the level at which a rule is applied. An ATTRIBUTE\n rule is applied at the attribute level and must have the applyToAttribute attribute and may\n have the applyToClass attribute to limit its scope to particular classes. A CLASS\n level rule will be applied to an entire object and will have the applyToClass attribute\n unless it is defined as GLOBAL.");
        _RuleTypeEnumOBJ.setDotName("meta.RuleTypeEnum.EnumDefinition");
        _RuleTypeEnumOBJ.addEnumValue("0 ATTRIBUTE Indicates that this is an attribute level rule.");
        _RuleTypeEnumOBJ.addEnumValue("1 CLASS     Indicates that this is a class level rule.");
        _RuleTypeEnumOBJ.setFile("metaSchema.dms");
        _RuleTypeEnumOBJ.setLineNumber("436");
        _RuleTypeEnumOBJ.setName("RuleTypeEnum");
        _RuleTypeEnumOBJ.setNullReturnValue("RuleTypeEnum.ATTRIBUTE");
        _RuleTypeEnum.setDefinedIn(this);
        addEnumDefList(_RuleTypeEnum);

        EnumDefinitionDMO _ValueTypeEnumOBJ = new EnumDefinitionDMO();
        _ValueTypeEnum = new EnumDefinition(_ValueTypeEnumOBJ);
        _ValueTypeEnumOBJ.addDescription("The ValueTypeEnum indicates the cardinality of an attribute as\n well as the type of Map to be used if the attribute is keyed. This is an extension\n to original concept of single-valued versus multi-valued. Hashsets are also supported.");
        _ValueTypeEnumOBJ.setDotName("meta.ValueTypeEnum.EnumDefinition");
        _ValueTypeEnumOBJ.addEnumValue("0 SINGLE Indicates that the attribute is single-valued.");
        _ValueTypeEnumOBJ.addEnumValue("1 MULTI Indicates that the attribute is multi-valued.");
        _ValueTypeEnumOBJ.addEnumValue("2 HASHMAPPED Indicates that the attribute values implement the DmcMappedAttributeIF interface and are stored in a HashMap.");
        _ValueTypeEnumOBJ.addEnumValue("3 TREEMAPPED Indicates that the attribute values implement the DmcMappedAttributeIF interface and are stored in a TreeMap.");
        _ValueTypeEnumOBJ.addEnumValue("4 HASHSET Indicates that the attribute values are stored in a HashSet.");
        _ValueTypeEnumOBJ.addEnumValue("5 TREESET Indicates that the attribute values are stored in a TreeSet.");
        _ValueTypeEnumOBJ.setFile("metaSchema.dms");
        _ValueTypeEnumOBJ.setLineNumber("481");
        _ValueTypeEnumOBJ.setName("ValueTypeEnum");
        _ValueTypeEnumOBJ.setNullReturnValue("ValueTypeEnum.SINGLE");
        _ValueTypeEnum.setDefinedIn(this);
        addEnumDefList(_ValueTypeEnum);

        EnumDefinitionDMO _WrapperTypeEnumOBJ = new EnumDefinitionDMO();
        _WrapperTypeEnum = new EnumDefinition(_WrapperTypeEnumOBJ);
        _WrapperTypeEnumOBJ.addDescription("The WrapperTypeEnum indicates which wrapper class you want instantiated when a class\n of object is recognized during parsing or when an object is pulled from a repository.");
        _WrapperTypeEnumOBJ.setDotName("meta.WrapperTypeEnum.EnumDefinition");
        _WrapperTypeEnumOBJ.addEnumValue("0 NONE Unknown value.");
        _WrapperTypeEnumOBJ.addEnumValue("1 BASE Indicates that you just want to use the generated DMW class.");
        _WrapperTypeEnumOBJ.addEnumValue("2 EXTENDED Indicates that you want to use your own extended class.");
        _WrapperTypeEnumOBJ.setFile("metaSchema.dms");
        _WrapperTypeEnumOBJ.setLineNumber("524");
        _WrapperTypeEnumOBJ.setName("WrapperTypeEnum");
        _WrapperTypeEnumOBJ.setNullReturnValue("WrapperTypeEnum.BASE");
        _WrapperTypeEnum.setDefinedIn(this);
        addEnumDefList(_WrapperTypeEnum);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitRuleCategories(MetaGenerator.java:466)
    private void initRuleCategories() throws DmcValueException {

        RuleCategoryDMO _AttributeValidationOBJ = new RuleCategoryDMO();
        _AttributeValidation = new RuleCategory(_AttributeValidationOBJ);
        _AttributeValidationOBJ.setAttributeInfoFromParam("attribute.getAttributeInfo()");
        _AttributeValidationOBJ.setClassInfoFromParam("obj.getConstructionClassInfo()");
        _AttributeValidationOBJ.addDescription("Rules in this category are used to validate individual attributes.");
        _AttributeValidationOBJ.setDotName("meta.AttributeValidation.RuleCategory");
        _AttributeValidationOBJ.setFile("metaSchema.dms");
        _AttributeValidationOBJ.setLineNumber("603");
        _AttributeValidationOBJ.setName("AttributeValidation");
        _AttributeValidationOBJ.setOpContext("DMO");
        _AttributeValidationOBJ.setRuleCategoryID("3");
        _AttributeValidationOBJ.addRuleParam("org.dmd.dmc.DmcObject::obj:The object in which the attribute exists");
        _AttributeValidationOBJ.addRuleParam("org.dmd.dmc.DmcAttribute:<?>:attribute:The attribute to be validated");
        _AttributeValidationOBJ.setRuleType("ATTRIBUTE");
        _AttributeValidation.setDefinedIn(this);
        addRuleCategoryList(_AttributeValidation);

        RuleCategoryDMO _AttributeValidationWithResolverOBJ = new RuleCategoryDMO();
        _AttributeValidationWithResolver = new RuleCategory(_AttributeValidationWithResolverOBJ);
        _AttributeValidationWithResolverOBJ.setAttributeInfoFromParam("attribute.getAttributeInfo()");
        _AttributeValidationWithResolverOBJ.setClassInfoFromParam("obj.getConstructionClassInfo()");
        _AttributeValidationWithResolverOBJ.addDescription("Rules in this category are used to validate individual attributes, but\n may require information that can be accessed from a given namespace provided by the name resolver.\n <p>\n For now, we've a way around having this category - see ReferencedAttributeTypeRule, but we may have\n to return to this mechanism.");
        _AttributeValidationWithResolverOBJ.setDotName("meta.AttributeValidationWithResolver.RuleCategory");
        _AttributeValidationWithResolverOBJ.setFile("metaSchema.dms");
        _AttributeValidationWithResolverOBJ.setLineNumber("619");
        _AttributeValidationWithResolverOBJ.setName("AttributeValidationWithResolver");
        _AttributeValidationWithResolverOBJ.setOpContext("DMO");
        _AttributeValidationWithResolverOBJ.setRuleCategoryID("4");
        _AttributeValidationWithResolverOBJ.addRuleParam("org.dmd.dmc.DmcObject::obj:The object in which the attribute exists");
        _AttributeValidationWithResolverOBJ.addRuleParam("org.dmd.dmc.DmcAttribute:<?>:attribute:The attribute to be validated");
        _AttributeValidationWithResolverOBJ.addRuleParam("org.dmd.dmc.DmcUniqueNameResolverIF::resolver:The name resolver");
        _AttributeValidationWithResolverOBJ.setRuleType("ATTRIBUTE");
        _AttributeValidationWithResolver.setDefinedIn(this);
        addRuleCategoryList(_AttributeValidationWithResolver);

        RuleCategoryDMO _InitializationOBJ = new RuleCategoryDMO();
        _Initialization = new RuleCategory(_InitializationOBJ);
        _InitializationOBJ.setClassInfoFromParam("obj.getConstructionClassInfo()");
        _InitializationOBJ.addDescription("Rules in this category are used to initialize objects to a known\n state after creation.\n <p/>\n Execution will be performed from the bottom of the derivation hierarchy to the top i.e.\n we look for rules for the construction class of the object being initialized and then\n move up the derivation hierarchy looking for rules associated with the base classes.");
        _InitializationOBJ.setDotName("meta.Initialization.RuleCategory");
        _InitializationOBJ.setFile("metaSchema.dms");
        _InitializationOBJ.setLineNumber("581");
        _InitializationOBJ.setName("Initialization");
        _InitializationOBJ.setOpContext("DMO");
        _InitializationOBJ.setRuleCategoryID("1");
        _InitializationOBJ.addRuleParam("org.dmd.dmc.DmcObject: :obj:The object to be initialized");
        _InitializationOBJ.setRuleType("CLASS");
        _Initialization.setDefinedIn(this);
        addRuleCategoryList(_Initialization);

        RuleCategoryDMO _ObjectValidationOBJ = new RuleCategoryDMO();
        _ObjectValidation = new RuleCategory(_ObjectValidationOBJ);
        _ObjectValidationOBJ.setClassInfoFromParam("obj.getConstructionClassInfo()");
        _ObjectValidationOBJ.addDescription("Rules in this category are used to validate a complete object. This\n would include objects read from Object Instance Files, objects in CreateRequests\n (after Initialization rules have been applied).");
        _ObjectValidationOBJ.setDotName("meta.ObjectValidation.RuleCategory");
        _ObjectValidationOBJ.setFile("metaSchema.dms");
        _ObjectValidationOBJ.setLineNumber("592");
        _ObjectValidationOBJ.setName("ObjectValidation");
        _ObjectValidationOBJ.setOpContext("DMO");
        _ObjectValidationOBJ.setRuleCategoryID("2");
        _ObjectValidationOBJ.addRuleParam("org.dmd.dmc.DmcObject: :obj:The object to be validated");
        _ObjectValidationOBJ.setRuleType("CLASS");
        _ObjectValidation.setDefinedIn(this);
        addRuleCategoryList(_ObjectValidation);

        RuleCategoryDMO _UCOAttributeAuditOBJ = new RuleCategoryDMO();
        _UCOAttributeAudit = new RuleCategory(_UCOAttributeAuditOBJ);
        _UCOAttributeAuditOBJ.setAttributeInfoFromParam("DmcOmni.instance().getAttributeInfo(attributeName)");
        _UCOAttributeAuditOBJ.setClassInfoFromParam("DmcOmni.instance().getClassInfo(uco.getConstructionClass())");
        _UCOAttributeAuditOBJ.addDescription("Rules in this category are used to perform auditting of individual attributes.\n In cases where the audit rule fails, there is a choice as to how to report the failure:\n <ul>\n <li>Send feedback to the listener</li>\n <li>Throw a RuleExceptionSet</li>\n <li>Write some sort of failure notification to the out data store</li>\n </ul>\n Follow whatever conventions are right for your application.");
        _UCOAttributeAuditOBJ.setDotName("meta.UCOAttributeAudit.RuleCategory");
        _UCOAttributeAuditOBJ.setFile("metaSchema.dms");
        _UCOAttributeAuditOBJ.setLineNumber("725");
        _UCOAttributeAuditOBJ.setName("UCOAttributeAudit");
        _UCOAttributeAuditOBJ.setOpContext("DMO");
        _UCOAttributeAuditOBJ.setRuleCategoryID("10");
        _UCOAttributeAuditOBJ.addRuleImport("org.dmd.dmc.DmcOmni");
        _UCOAttributeAuditOBJ.addRuleParam("org.dmd.dmc.util.DmcUncheckedObject: :uco:The object at which the audit begins:");
        _UCOAttributeAuditOBJ.addRuleParam("java.lang.String: :attributeName:The attribute to be audited:");
        _UCOAttributeAuditOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :in:The data store from which objects can be retrieved:");
        _UCOAttributeAuditOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :out:The data store to which objects may be written:");
        _UCOAttributeAuditOBJ.addRuleParam("org.dmd.dmc.util.UcoFeedbackIF: :listener:The feedback listener:");
        _UCOAttributeAuditOBJ.setRuleType("ATTRIBUTE");
        _UCOAttributeAudit.setDefinedIn(this);
        addRuleCategoryList(_UCOAttributeAudit);

        RuleCategoryDMO _UCOAttributeNormalizationOBJ = new RuleCategoryDMO();
        _UCOAttributeNormalization = new RuleCategory(_UCOAttributeNormalizationOBJ);
        _UCOAttributeNormalizationOBJ.setAttributeInfoFromParam("DmcOmni.instance().getAttributeInfo(attributeName)");
        _UCOAttributeNormalizationOBJ.setClassInfoFromParam("DmcOmni.instance().getClassInfo(uco.getConstructionClass())");
        _UCOAttributeNormalizationOBJ.addDescription("Rules in this category are used to normalize attribute values in DmcUncheckedObjects (UCOs)\n and may use information from an external data store to facilitate that.");
        _UCOAttributeNormalizationOBJ.setDotName("meta.UCOAttributeNormalization.RuleCategory");
        _UCOAttributeNormalizationOBJ.setFile("metaSchema.dms");
        _UCOAttributeNormalizationOBJ.setLineNumber("671");
        _UCOAttributeNormalizationOBJ.setName("UCOAttributeNormalization");
        _UCOAttributeNormalizationOBJ.setOpContext("DMO");
        _UCOAttributeNormalizationOBJ.setRuleCategoryID("7");
        _UCOAttributeNormalizationOBJ.addRuleImport("org.dmd.dmc.DmcOmni");
        _UCOAttributeNormalizationOBJ.addRuleParam("org.dmd.dmc.util.DmcUncheckedObject: :uco:The object in which attribute resides:");
        _UCOAttributeNormalizationOBJ.addRuleParam("java.lang.String: :attributeName:The attribute to be normalized:");
        _UCOAttributeNormalizationOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :in:The data store from which objects can be retrieved:");
        _UCOAttributeNormalizationOBJ.addRuleParam("org.dmd.dmc.util.UcoFeedbackIF: :listener:The feedback listener:");
        _UCOAttributeNormalizationOBJ.setRuleType("ATTRIBUTE");
        _UCOAttributeNormalization.setDefinedIn(this);
        addRuleCategoryList(_UCOAttributeNormalization);

        RuleCategoryDMO _UCOMappingOBJ = new RuleCategoryDMO();
        _UCOMapping = new RuleCategory(_UCOMappingOBJ);
        _UCOMappingOBJ.setClassInfoFromParam("DmcOmni.instance().getClassInfo(uco.getConstructionClass())");
        _UCOMappingOBJ.addDescription("Rules in this category are used to perform mappings from a given base object into\n one or more other objects. By convention, we provide handles to an input data store and an output datastore,\n although they can actually refer to the same data store; that's up to the implementer of the rule.");
        _UCOMappingOBJ.setDotName("meta.UCOMapping.RuleCategory");
        _UCOMappingOBJ.setFile("metaSchema.dms");
        _UCOMappingOBJ.setLineNumber("703");
        _UCOMappingOBJ.setName("UCOMapping");
        _UCOMappingOBJ.setOpContext("DMO");
        _UCOMappingOBJ.setRuleCategoryID("9");
        _UCOMappingOBJ.addRuleImport("org.dmd.dmc.DmcOmni");
        _UCOMappingOBJ.addRuleParam("org.dmd.dmc.util.DmcUncheckedObject: :uco:The object to be mapped:");
        _UCOMappingOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :in:The data store from which objects can be retrieved:");
        _UCOMappingOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :out:The data store to which mapped objects should be written:");
        _UCOMappingOBJ.addRuleParam("org.dmd.dmc.util.UcoFeedbackIF: :listener:The feedback listener:");
        _UCOMappingOBJ.setRuleType("CLASS");
        _UCOMapping.setDefinedIn(this);
        addRuleCategoryList(_UCOMapping);

        RuleCategoryDMO _UCOObjectAuditOBJ = new RuleCategoryDMO();
        _UCOObjectAudit = new RuleCategory(_UCOObjectAuditOBJ);
        _UCOObjectAuditOBJ.setClassInfoFromParam("DmcOmni.instance().getClassInfo(uco.getConstructionClass())");
        _UCOObjectAuditOBJ.addDescription("Rules in this category are used to perform auditting of objects i.e. analysis of an\n object and, potentially, its relationship with other objects. In cases where the audit rule fails, there is\n a choice as to how to report the failure:\n <ul>\n <li>Send feedback to the listener</li>\n <li>Throw a RuleExceptionSet</li>\n <li>Write some sort of failure notification to the out data store</li>\n </ul>\n Follow whatever conventions are right for your application.");
        _UCOObjectAuditOBJ.setDotName("meta.UCOObjectAudit.RuleCategory");
        _UCOObjectAuditOBJ.setFile("metaSchema.dms");
        _UCOObjectAuditOBJ.setLineNumber("746");
        _UCOObjectAuditOBJ.setName("UCOObjectAudit");
        _UCOObjectAuditOBJ.setOpContext("DMO");
        _UCOObjectAuditOBJ.setRuleCategoryID("11");
        _UCOObjectAuditOBJ.addRuleImport("org.dmd.dmc.DmcOmni");
        _UCOObjectAuditOBJ.addRuleParam("org.dmd.dmc.util.DmcUncheckedObject: :uco:The object at which the audit begins:");
        _UCOObjectAuditOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :in:The data store from which objects can be retrieved:");
        _UCOObjectAuditOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :out:The data store to which objects may be written:");
        _UCOObjectAuditOBJ.addRuleParam("org.dmd.dmc.util.UcoFeedbackIF: :listener:The feedback listener:");
        _UCOObjectAuditOBJ.setRuleType("CLASS");
        _UCOObjectAudit.setDefinedIn(this);
        addRuleCategoryList(_UCOObjectAudit);

        RuleCategoryDMO _UCOObjectNormalizationOBJ = new RuleCategoryDMO();
        _UCOObjectNormalization = new RuleCategory(_UCOObjectNormalizationOBJ);
        _UCOObjectNormalizationOBJ.setClassInfoFromParam("DmcOmni.instance().getClassInfo(uco.getConstructionClass())");
        _UCOObjectNormalizationOBJ.addDescription("Rules in this category are used to normalize DmcUncheckedObjects (UCOs)\n and may use information from an external data store to facilitate that.\n <p/>\n While the UCOAttributeNormalization category focuses on a single attribute, object normalization\n may manipulate many aspects of an object: adding/removing attributes and/or alterring existing\n attributes.");
        _UCOObjectNormalizationOBJ.setDotName("meta.UCOObjectNormalization.RuleCategory");
        _UCOObjectNormalizationOBJ.setFile("metaSchema.dms");
        _UCOObjectNormalizationOBJ.setLineNumber("688");
        _UCOObjectNormalizationOBJ.setName("UCOObjectNormalization");
        _UCOObjectNormalizationOBJ.setOpContext("DMO");
        _UCOObjectNormalizationOBJ.setRuleCategoryID("8");
        _UCOObjectNormalizationOBJ.addRuleImport("org.dmd.dmc.DmcOmni");
        _UCOObjectNormalizationOBJ.addRuleParam("org.dmd.dmc.util.DmcUncheckedObject: :uco:The object in which attribute resides:");
        _UCOObjectNormalizationOBJ.addRuleParam("org.dmd.dmc.util.UcoDataStoreIF: :in:The data store from which objects can be retrieved:");
        _UCOObjectNormalizationOBJ.addRuleParam("org.dmd.dmc.util.UcoFeedbackIF: :listener:The feedback listener:");
        _UCOObjectNormalizationOBJ.setRuleType("CLASS");
        _UCOObjectNormalization.setDefinedIn(this);
        addRuleCategoryList(_UCOObjectNormalization);

        RuleCategoryDMO _UCOValidationOBJ = new RuleCategoryDMO();
        _UCOValidation = new RuleCategory(_UCOValidationOBJ);
        _UCOValidationOBJ.setClassInfoFromParam("DmcOmni.instance().getClassInfo(uco.getConstructionClass())");
        _UCOValidationOBJ.addDescription("Rules in this category are used to validate DmcUncheckedObjects (UCOs) which\n are basically just collections of attribute/value pairs.");
        _UCOValidationOBJ.setDotName("meta.UCOValidation.RuleCategory");
        _UCOValidationOBJ.setFile("metaSchema.dms");
        _UCOValidationOBJ.setLineNumber("656");
        _UCOValidationOBJ.setName("UCOValidation");
        _UCOValidationOBJ.setOpContext("DMO");
        _UCOValidationOBJ.setRuleCategoryID("6");
        _UCOValidationOBJ.addRuleImport("org.dmd.dmc.DmcOmni");
        _UCOValidationOBJ.addRuleParam("org.dmd.dmc.util.DmcUncheckedObject: :uco:The object to be validated:");
        _UCOValidationOBJ.setRuleType("CLASS");
        _UCOValidation.setDefinedIn(this);
        addRuleCategoryList(_UCOValidation);

    }
    // Generated from: org.dmd.dms.meta.MetaGenerator.dumpInitComplexTypes(MetaGenerator.java:485)
    private void initComplexTypes() throws DmcValueException {

        ComplexTypeDefinitionDMO _DmwTypeToWrapperTypeOBJ = new ComplexTypeDefinitionDMO();
        _DmwTypeToWrapperType = new ComplexTypeDefinition(_DmwTypeToWrapperTypeOBJ);
        _DmwTypeToWrapperTypeOBJ.addDescription("The DmwTypeToWrapperType complex type is used as the type of\n the dmwWrapperType attribute which is used to indicate the type of wrappers\n to generate for a class in a particular generation context.");
        _DmwTypeToWrapperTypeOBJ.setDotName("meta.DmwTypeToWrapperType.ComplexTypeDefinition");
        _DmwTypeToWrapperTypeOBJ.addField("String          dmwType     The Dark Matter Wrapper type");
        _DmwTypeToWrapperTypeOBJ.addField("WrapperTypeEnum wrapperType The type of wrapper to be used in this context");
        _DmwTypeToWrapperTypeOBJ.setFile("metaSchema.dms");
        _DmwTypeToWrapperTypeOBJ.setLineNumber("363");
        _DmwTypeToWrapperTypeOBJ.setName("DmwTypeToWrapperType");
        _DmwTypeToWrapperType.setDefinedIn(this);
        addComplexTypeDefList(_DmwTypeToWrapperType);

        ComplexTypeDefinitionDMO _ExampleOBJ = new ComplexTypeDefinitionDMO();
        _Example = new ComplexTypeDefinition(_ExampleOBJ);
        _ExampleOBJ.addDescription("If you want to get rid of the &#92;n use: .replaceAll(\"&#92;&#92;&#92;&#92;n\",\"&#92;&#92;&#92;n\")");
        _ExampleOBJ.setDotName("meta.Example.ComplexTypeDefinition");
        _ExampleOBJ.setFieldSeparator(":");
        _ExampleOBJ.setFile("metaSchema.dms");
        _ExampleOBJ.setLineNumber("342");
        _ExampleOBJ.setName("Example");
        _ExampleOBJ.addRequiredPart("String			type		\"The type of the example - this is just a single token string that gives a hint to your example formatter of what to do with the content\"");
        _ExampleOBJ.addRequiredPart("String			title		\"A title for the example - this doesn't have to be used by your example formatter\"");
        _ExampleOBJ.addRequiredPart("String			content		\"The textual content of the example - this can be anything you want\" greedy=true");
        _Example.setDefinedIn(this);
        addComplexTypeDefList(_Example);

        ComplexTypeDefinitionDMO _FieldOBJ = new ComplexTypeDefinitionDMO();
        _Field = new ComplexTypeDefinition(_FieldOBJ);
        _FieldOBJ.addDescription("The Field complex type is used to describe the fields of a ComplexTypeDefinition.\n A Field attribute is comprised of three chunks of text, the Field type\n which is a reference to any valid schema type, a name for the field and\n a brief description of the field. A Field specification might appear \n as follows:\n <pre>\n field String whatzits The whatzits field indicates the number of whatzits per square kilometer.\n </pre>\n In this case, the type is String, the name of the field is whatzits and that's \n followed by the description.");
        _FieldOBJ.setDotName("meta.Field.ComplexTypeDefinition");
        _FieldOBJ.addField("TypeDefinition		type        The type of the field");
        _FieldOBJ.addField("String         name        The name of the field");
        _FieldOBJ.addField("String         description The description of the field");
        _FieldOBJ.setFile("metaSchema.dms");
        _FieldOBJ.setLineNumber("300");
        _FieldOBJ.setName("Field");
        _Field.setDefinedIn(this);
        addComplexTypeDefList(_Field);

        ComplexTypeDefinitionDMO _NameValuePairOBJ = new ComplexTypeDefinitionDMO();
        _NameValuePair = new ComplexTypeDefinition(_NameValuePairOBJ);
        _NameValuePairOBJ.addDescription("The NameValuePair type provides a general extensibility mechanism for DMOs\n by allowing for the addition of name value pairs to an object. This is a quick and dirty\n alternative to using auxiliary classes to extend an object especially the DSDefinition object\n that provides a common base class for all domain specific definitions.");
        _NameValuePairOBJ.setDotName("meta.NameValuePair.ComplexTypeDefinition");
        _NameValuePairOBJ.setFile("metaSchema.dms");
        _NameValuePairOBJ.setLineNumber("325");
        _NameValuePairOBJ.setName("NameValuePair");
        _NameValuePairOBJ.addRequiredPart("String			name		\"The name of the value\"");
        _NameValuePairOBJ.addRequiredPart("String			value		\"The value\" quoted=true");
        _NameValuePair.setDefinedIn(this);
        addComplexTypeDefList(_NameValuePair);

        ComplexTypeDefinitionDMO _OptimizeOBJ = new ComplexTypeDefinitionDMO();
        _Optimize = new ComplexTypeDefinition(_OptimizeOBJ);
        _OptimizeOBJ.addDescription("Allows for capture of optimization notes.");
        _OptimizeOBJ.setDotName("meta.Optimize.ComplexTypeDefinition");
        _OptimizeOBJ.addExample("code : Specifying an Optimization/Improvement :  <pre> optimize We could improve compression if we indicated the blah, blah, blah who=\"Me\" when=\"release 5\" why=\"reduce bandwidth charges\" </pre>");
        _OptimizeOBJ.setFieldSeparator(":");
        _OptimizeOBJ.setFile("metaSchema.dms");
        _OptimizeOBJ.setLineNumber("355");
        _OptimizeOBJ.setName("Optimize");
        _OptimizeOBJ.addOptionalPart("String			who		\"Who made the suggestion\" quoted=true");
        _OptimizeOBJ.addOptionalPart("String			when	\"A suggested timeframe for the change\" quoted=true");
        _OptimizeOBJ.addOptionalPart("Concinnity		why		\"A suggested timeframe for the change\" weakref=true multivalued=true");
        _OptimizeOBJ.addRequiredPart("String			what	\"A description of the change to be made\"");
        _Optimize.setDefinedIn(this);
        addComplexTypeDefList(_Optimize);

        ComplexTypeDefinitionDMO _PartOBJ = new ComplexTypeDefinitionDMO();
        _Part = new ComplexTypeDefinition(_PartOBJ);
        _PartOBJ.addDescription("The Part complex type is used to describe the Parts of a ComplexTypeDefinition.");
        _PartOBJ.setDotName("meta.Part.ComplexTypeDefinition");
        _PartOBJ.setFile("metaSchema.dms");
        _PartOBJ.setLineNumber("316");
        _PartOBJ.setName("Part");
        _PartOBJ.addOptionalPart("Boolean			quoted 		\"Indicates if the Part allows for a quoted value or if it's intended to be a single token\"");
        _PartOBJ.addOptionalPart("Boolean			multivalued	\"Indicates if the Part is multivalued. This can be specified on any optionalPart but can only be used on a requiredPart if it's the only part in the ComplexTypeDefinition\"");
        _PartOBJ.addOptionalPart("Boolean			weakref		\"Indicates that a reference type is weak i.e. that no exception will be thrown if the reference can't be resolved - this is only applicable to optional Parts.\"");
        _PartOBJ.addOptionalPart("Boolean			greedy		\"This flag can only be used on a Part composed of requiredParts and only on the last requiredPart. It is not compatible with other flags such as quoted, multivalued or weakref. It allows for a set of required parts followed by chunk of text that extends to the end of the attribute value.\"");
        _PartOBJ.addRequiredPart("TypeDefinition	type        \"The type of the Part\"");
        _PartOBJ.addRequiredPart("String			name        \"The name of the Part\"");
        _PartOBJ.addRequiredPart("String			description \"The description of the Part\"  quoted=true");
        _Part.setDefinedIn(this);
        addComplexTypeDefList(_Part);

        ComplexTypeDefinitionDMO _RuleParamOBJ = new ComplexTypeDefinitionDMO();
        _RuleParam = new ComplexTypeDefinition(_RuleParamOBJ);
        _RuleParamOBJ.addDescription("The RuleParam type is used to succintly describe a parameter\n to be supplied to a rule when it is executed.");
        _RuleParamOBJ.setDotName("meta.RuleParam.ComplexTypeDefinition");
        _RuleParamOBJ.addField("String         importStatement The import for the type of parameter");
        _RuleParamOBJ.addField("String         genericArgs     The generic arguments associated with this parameter");
        _RuleParamOBJ.addField("String         name            The name of the parameter");
        _RuleParamOBJ.addField("String         description     A description of the parameter");
        _RuleParamOBJ.setFieldSeparator(":");
        _RuleParamOBJ.setFile("metaSchema.dms");
        _RuleParamOBJ.setLineNumber("373");
        _RuleParamOBJ.setName("RuleParam");
        _RuleParam.setDefinedIn(this);
        addComplexTypeDefList(_RuleParam);

        ComplexTypeDefinitionDMO _SchemaAndReasonOBJ = new ComplexTypeDefinitionDMO();
        _SchemaAndReason = new ComplexTypeDefinition(_SchemaAndReasonOBJ);
        _SchemaAndReasonOBJ.addDescription("The SchemaAndReason type is used when schemas are loaded dynamically by\n some piece of software. For documentation purposes, it's useful to know why the schema\n is being loaded, since the class name may not informative enough.");
        _SchemaAndReasonOBJ.setDotName("meta.SchemaAndReason.ComplexTypeDefinition");
        _SchemaAndReasonOBJ.setFile("metaSchema.dms");
        _SchemaAndReasonOBJ.setLineNumber("333");
        _SchemaAndReasonOBJ.setName("SchemaAndReason");
        _SchemaAndReasonOBJ.addRequiredPart("String			schema		\"The fully qualified name of the schema to load\"");
        _SchemaAndReasonOBJ.addRequiredPart("String			hint		\"A hint as to why the schema is required\" quoted=true");
        _SchemaAndReason.setDefinedIn(this);
        addComplexTypeDefList(_SchemaAndReason);

    }
}
