package org.dmd.dmu.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import java.util.ArrayList;                                               // To support getMVCopy() - (BaseDMWGenerator.java:1071)
import java.util.Iterator;                                                // Support copy of MV objects - (BaseDMWGenerator.java:2133)
import org.dmd.dmc.*;                                                     // If any attributes - (BaseDMWGenerator.java:977)
import org.dmd.dmc.definitions.DmcDefinitionIF;                           // The object is a domain specific definition - (BaseDMWGenerator.java:411)
import org.dmd.dmc.definitions.DmcDefinitionSet;                          // Our base to provide definition set storage - (DMWGenerator.java:174)
import org.dmd.dmc.types.DefinitionName;                                  // Is named by - (BaseDMWGenerator.java:939)
import org.dmd.dmc.types.DotName;                                         // To support the find method for definitions - (DSDefinitionModule.java:189)
import org.dmd.dms.ClassDefinition;                                       // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:944)
import org.dmd.dms.generated.dmo.MetaDMSAG;                               // Attribute defFiles from the meta schema - (BaseDMWGenerator.java:910)
import org.dmd.dms.generated.dmw.SchemaAndReasonIterableDMW;              // For multi-valued SchemaAndReason - (BaseDMWGenerator.java:1995)
import org.dmd.dms.generated.dmw.StringIterableDMW;                       // For multi-valued String - (BaseDMWGenerator.java:1995)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                     // Required for MODREC constructor - (BaseDMWGenerator.java:948)
import org.dmd.dms.generated.types.SchemaAndReason;                       // Primitive type - (BaseDMWGenerator.java:1040)
import org.dmd.dmu.server.extended.DmuDefinition;                         // Derived class - (BaseDMWGenerator.java:1138)
import org.dmd.dmu.server.extended.DmuModule;                             // Required for getModificationRecorder() - (BaseDMWGenerator.java:953)
import org.dmd.dmu.server.extended.json.PayloadExample;                   // A definition from the DmuModule Module - (DSDefinitionModule.java:201)
import org.dmd.dmu.server.extended.json.PayloadSortInfo;                  // A definition from the DmuModule Module - (DSDefinitionModule.java:201)
import org.dmd.dmu.server.generated.dmw.DmuModuleIterableDMW;             // For multi-valued DmuModule - (BaseDMWGenerator.java:1600)
import org.dmd.dmu.server.generated.dsd.DmuModuleScopedInterface;         // Required to manage module definition - (DMWGenerator.java:173)
import org.dmd.dmu.shared.generated.dmo.DmuDMSAG;                         // Attribute dependsOnDmuModule from the dmu schema - (BaseDMWGenerator.java:910)
import org.dmd.dmu.shared.generated.dmo.DmuModuleDMO;                     // Class not auxiliary or abstract - (BaseDMWGenerator.java:1142)
import org.dmd.dmu.shared.generated.types.DmuModuleREF;                   // Required to access defined in module name - (DMWGenerator.java:184)
import org.dmd.util.exceptions.ResultException;                           // To support definition deletions - (DSDefinitionModule.java:190)



/**
 * This is the module definition for the dmu domain-specific language.
 * <P>
 * Generated from the dmu schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:488)
 */
abstract public class DmuModuleDMW extends DmuDefinition implements DmcDefinitionIF, DmcNamedObjectIF, DmuModuleScopedInterface {

    // Generated from: org.dmd.util.codegen.MemberManager.getFormattedMembers(MemberManager.java:64)
    // Called from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperDefinitions(DMWGenerator.java:207)
    DmcDefinitionSet<DmuDefinition>       DmuDefinitionDefs      = new DmcDefinitionSet<DmuDefinition>("DmuModule-allDefinitions","DmuDefinition");             // All definitions associated with this module
    DmcDefinitionSet<DmuModule>           DmuModuleDefs          = new DmcDefinitionSet<DmuModule>("DmuModule-DmuModuleDefs", "DmuModule");                     // All DmuModule definitions
    DmcDefinitionSet<PayloadExample>      PayloadExampleDefs     = new DmcDefinitionSet<PayloadExample>("DmuModule-PayloadExampleDefs", "PayloadExample");      // All PayloadExample definitions
    DmcDefinitionSet<PayloadSortInfo>     PayloadSortInfoDefs    = new DmcDefinitionSet<PayloadSortInfo>("DmuModule-PayloadSortInfoDefs", "PayloadSortInfo");   // All PayloadSortInfo definitions

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:577)
    public DmuModuleDMW() {
        super(new DmuModuleDMO(), org.dmd.dmu.server.generated.DmuSchemaAG._DmuModule);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:583)
    public DmuModuleDMW(DmcTypeModifierMV mods) {
        super(new DmuModuleDMO(mods), org.dmd.dmu.server.generated.DmuSchemaAG._DmuModule);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:625)
    public DmuModule getModificationRecorder(){
        DmuModule rc = new DmuModule();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:646)
    public DmuModuleDMW(DmuModuleDMO obj) {
        super(obj, org.dmd.dmu.server.generated.DmuSchemaAG._DmuModule);
    }

    public DmuModule cloneIt() {
        DmuModule rc = new DmuModule();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public DmuModuleDMO getDMO() {
        return((DmuModuleDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:661)
    protected DmuModuleDMW(DmuModuleDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1187)
    public DefinitionName getObjectName(){
        return(((DmuModuleDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((DmuModuleDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof DmuModuleDMW){
            return( getObjectName().equals( ((DmuModuleDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1562)
    public int getDefFilesSize(){
        return(((DmuModuleDMO) core).getDefFilesSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1570)
    public boolean getDefFilesIsEmpty(){
        if (((DmuModuleDMO) core).getDefFilesSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1580)
    public boolean getDefFilesHasValue(){
        if (((DmuModuleDMO) core).getDefFilesSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1999)
    public StringIterableDMW getDefFilesIterable(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__defFiles);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((DmuModuleDMO) core).getDefFiles()));
    }

    /**
     * Adds another defFiles value.
     * @param value A value compatible with String
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2026)
    public void addDefFiles(Object value) throws DmcValueException {
        ((DmuModuleDMO) core).addDefFiles(value);
    }

    /**
     * Adds another defFiles value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2036)
    public void addDefFiles(String value){
        ((DmuModuleDMO) core).addDefFiles(value);
    }

    /**
     * @param value A value compatible with String
     * @return true if the collection contains the defFiles value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2093)
    public boolean defFilesContains(String value){
        return(((DmuModuleDMO) core).defFilesContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2137)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getDefFilesCopy(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__defFiles);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a defFiles value.
     * @param value The String to be deleted from set of attribute values.
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2165)
    public void delDefFiles(Object value) throws DmcValueException {
        ((DmuModuleDMO) core).delDefFiles(value);
    }

    /**
     * Deletes a defFiles value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2174)
    public void delDefFiles(String value){
        ((DmuModuleDMO) core).delDefFiles(value);
    }

    /**
     * Removes the defFiles attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2186)
    public void remDefFiles(){
        ((DmuModuleDMO) core).remDefFiles();
    }

    /**
     * @return The number of DmuModule items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1562)
    public int getDependsOnDmuModuleSize(){
        return(((DmuModuleDMO) core).getDependsOnDmuModuleSize());
    }

    /**
     * @return true if there are no DmuModuleDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1570)
    public boolean getDependsOnDmuModuleIsEmpty(){
        if (((DmuModuleDMO) core).getDependsOnDmuModuleSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any DmuModuleDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1580)
    public boolean getDependsOnDmuModuleHasValue(){
        if (((DmuModuleDMO) core).getDependsOnDmuModuleSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of DmuModuleDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1607)
    public DmuModuleIterableDMW getDependsOnDmuModuleIterable(){
        DmcAttribute<?> attr = core.get(DmuDMSAG.__dependsOnDmuModule);
        if (attr == null)
            return(DmuModuleIterableDMW.emptyList);
        
        return(new DmuModuleIterableDMW(((DmuModuleDMO) core).getDependsOnDmuModule()));
    }

    /**
     * Adds another dependsOnDmuModule value.
     * @param value A value compatible with DmuModule
     * @return the attribute instance
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1665)
    public DmcAttribute<?> addDependsOnDmuModule(DmuModule value){
        DmcAttribute<?> attr = ((DmuModuleDMO) core).addDependsOnDmuModule(((DmuModuleDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a dependsOnDmuModule value.
     * @param value The DmuModule to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1715)
    public void delDependsOnDmuModule(DmuModule value){
        ((DmuModuleDMO) core).delDependsOnDmuModule(value.getDMO());
    }

    /**
     * @return A COPY of the collection of DmuModule objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1779)
    public ArrayList<DmuModule> getDependsOnDmuModuleCopy(){
        DmcAttribute<?> attr = ((DmuModuleDMO) core).get(DmuDMSAG.__dependsOnDmuModule);
        if (attr == null)
            return(new ArrayList<DmuModule>());
        
        ArrayList<DmuModule> rc = new ArrayList<DmuModule>(attr.getMVSize());
        
        DmuModuleIterableDMW it = getDependsOnDmuModuleIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the dependsOnDmuModule attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2186)
    public void remDependsOnDmuModule(){
        ((DmuModuleDMO) core).remDependsOnDmuModule();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1562)
    public int getDescriptionSize(){
        return(((DmuModuleDMO) core).getDescriptionSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1570)
    public boolean getDescriptionIsEmpty(){
        if (((DmuModuleDMO) core).getDescriptionSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1580)
    public boolean getDescriptionHasValue(){
        if (((DmuModuleDMO) core).getDescriptionSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1999)
    public StringIterableDMW getDescriptionIterable(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__description);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((DmuModuleDMO) core).getDescription()));
    }

    /**
     * Adds another description value.
     * @param value A value compatible with String
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2026)
    public void addDescription(Object value) throws DmcValueException {
        ((DmuModuleDMO) core).addDescription(value);
    }

    /**
     * Adds another description value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2036)
    public void addDescription(String value){
        ((DmuModuleDMO) core).addDescription(value);
    }

    /**
     * @param value A value compatible with String
     * @return true if the collection contains the description value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2093)
    public boolean descriptionContains(String value){
        return(((DmuModuleDMO) core).descriptionContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2137)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getDescriptionCopy(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__description);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a description value.
     * @param value The String to be deleted from set of attribute values.
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2165)
    public void delDescription(Object value) throws DmcValueException {
        ((DmuModuleDMO) core).delDescription(value);
    }

    /**
     * Deletes a description value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2174)
    public void delDescription(String value){
        ((DmuModuleDMO) core).delDescription(value);
    }

    /**
     * Removes the description attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2186)
    public void remDescription(){
        ((DmuModuleDMO) core).remDescription();
    }

    /**
     * @return The number of SchemaAndReason items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1562)
    public int getLoadSchemaClassSize(){
        return(((DmuModuleDMO) core).getLoadSchemaClassSize());
    }

    /**
     * @return true if there are no SchemaAndReasonDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1570)
    public boolean getLoadSchemaClassIsEmpty(){
        if (((DmuModuleDMO) core).getLoadSchemaClassSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any SchemaAndReasonDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1580)
    public boolean getLoadSchemaClassHasValue(){
        if (((DmuModuleDMO) core).getLoadSchemaClassSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of SchemaAndReason objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1999)
    public SchemaAndReasonIterableDMW getLoadSchemaClassIterable(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__loadSchemaClass);
        if (attr == null)
            return(SchemaAndReasonIterableDMW.emptyList);
        
        return(new SchemaAndReasonIterableDMW(((DmuModuleDMO) core).getLoadSchemaClass()));
    }

    /**
     * Adds another loadSchemaClass value.
     * @param value A value compatible with SchemaAndReason
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2026)
    public void addLoadSchemaClass(Object value) throws DmcValueException {
        ((DmuModuleDMO) core).addLoadSchemaClass(value);
    }

    /**
     * Adds another loadSchemaClass value.
     * @param value A value compatible with SchemaAndReason
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2036)
    public void addLoadSchemaClass(SchemaAndReason value){
        ((DmuModuleDMO) core).addLoadSchemaClass(value);
    }

    /**
     * @param value A value compatible with SchemaAndReason
     * @return true if the collection contains the loadSchemaClass value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2093)
    public boolean loadSchemaClassContains(SchemaAndReason value){
        return(((DmuModuleDMO) core).loadSchemaClassContains(value));
    }

    /**
     * @return A COPY of the collection of SchemaAndReason objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2137)
    @SuppressWarnings("unchecked")
    public ArrayList<SchemaAndReason> getLoadSchemaClassCopy(){
        DmcAttribute<?> attr = core.get(MetaDMSAG.__loadSchemaClass);
        if (attr == null)
            return(new ArrayList<SchemaAndReason>());
        
        ArrayList<SchemaAndReason> rc = new ArrayList<SchemaAndReason>(attr.getMVSize());
        
        Iterator<SchemaAndReason> it = (Iterator<SchemaAndReason>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a loadSchemaClass value.
     * @param value The SchemaAndReason to be deleted from set of attribute values.
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2165)
    public void delLoadSchemaClass(Object value) throws DmcValueException {
        ((DmuModuleDMO) core).delLoadSchemaClass(value);
    }

    /**
     * Deletes a loadSchemaClass value.
     * @param value The SchemaAndReason to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2174)
    public void delLoadSchemaClass(SchemaAndReason value){
        ((DmuModuleDMO) core).delLoadSchemaClass(value);
    }

    /**
     * Removes the loadSchemaClass attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2186)
    public void remLoadSchemaClass(){
        ((DmuModuleDMO) core).remLoadSchemaClass();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public DefinitionName getName(){
        return(((DmuModuleDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1475)
    public void setName(Object value) throws DmcValueException {
        ((DmuModuleDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1484)
    public void setName(DefinitionName value){
        ((DmuModuleDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1510)
    public void remName(){
        ((DmuModuleDMO) core).remName();
    }

    // Generated from: org.dmd.dms.DSDefinitionModule.getInterfaceMethodsImplementations(DSDefinitionModule.java:313)
    // Called from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperFunctions(DMWGenerator.java:215)
    /**
     * All definitions are added to the base definition collection.
     */
    void addDmuDefinition(DmuDefinition def){
        DmuDefinitionDefs.add(def);
    }

    void deleteDmuDefinition(DmuDefinition def){
        try {
            DmuDefinitionDefs.delete(def);
        } catch (ResultException e) {
            throw(new IllegalStateException(e));
        }
    }

    public int getDmuDefinitionCount(){
        return(DmuDefinitionDefs.size());
    }

    public DmuDefinition getDmuDefinition(DotName name){
        return(DmuDefinitionDefs.getDefinition(name));
    }

    public Iterator<DmuDefinition> getAllDmuDefinition(){
        return(DmuDefinitionDefs.values().iterator());
    }

    // Generated from: org.dmd.dms.DSDefinitionModule.getInterfaceMethodsImplementations(DSDefinitionModule.java:351)
    public void addPayloadExample(PayloadExample def){
        PayloadExampleDefs.add(def);
        addDmuDefinition(def);
    }

    public void deletePayloadExample(PayloadExample def){
        try{
            PayloadExampleDefs.delete(def);
        } catch (ResultException e) {
            throw(new IllegalStateException(e));
        }
        deleteDmuDefinition(def);
    }

    public int getPayloadExampleCount(){
        return(PayloadExampleDefs.size());
    }

    public PayloadExample getPayloadExample(DotName name){
        return(PayloadExampleDefs.getDefinition(name));
    }

    public Iterator<PayloadExample> getAllPayloadExample(){
        return(PayloadExampleDefs.values().iterator());
    }

    public PayloadExample getPayloadExampleDefinition(String name) throws DmcNameClashException, DmcValueException{
        return(PayloadExampleDefs.getDefinition(name));
    }

    public Iterator<PayloadExample> getPayloadExampleDefinitionsByName(String name) throws DmcValueException{
        return(PayloadExampleDefs.getDefinitionsByName(name));
    }

    public int getPayloadExampleDefinitionCountByName(String name) throws DmcValueException{
        return(PayloadExampleDefs.getDefinitionCountByName(name));
    }

    // Generated from: org.dmd.dms.DSDefinitionModule.getInterfaceMethodsImplementations(DSDefinitionModule.java:351)
    public void addPayloadSortInfo(PayloadSortInfo def){
        PayloadSortInfoDefs.add(def);
        addDmuDefinition(def);
    }

    public void deletePayloadSortInfo(PayloadSortInfo def){
        try{
            PayloadSortInfoDefs.delete(def);
        } catch (ResultException e) {
            throw(new IllegalStateException(e));
        }
        deleteDmuDefinition(def);
    }

    public int getPayloadSortInfoCount(){
        return(PayloadSortInfoDefs.size());
    }

    public PayloadSortInfo getPayloadSortInfo(DotName name){
        return(PayloadSortInfoDefs.getDefinition(name));
    }

    public Iterator<PayloadSortInfo> getAllPayloadSortInfo(){
        return(PayloadSortInfoDefs.values().iterator());
    }

    public PayloadSortInfo getPayloadSortInfoDefinition(String name) throws DmcNameClashException, DmcValueException{
        return(PayloadSortInfoDefs.getDefinition(name));
    }

    public Iterator<PayloadSortInfo> getPayloadSortInfoDefinitionsByName(String name) throws DmcValueException{
        return(PayloadSortInfoDefs.getDefinitionsByName(name));
    }

    public int getPayloadSortInfoDefinitionCountByName(String name) throws DmcValueException{
        return(PayloadSortInfoDefs.getDefinitionCountByName(name));
    }

    // Generated from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperFunctions(DMWGenerator.java:224)
    /**
     * This method indicates the name of the module from which this definition was loaded.
     * And, since this is a module, it's just the name of the module.
     */
    @Override
    public String getNameOfModuleWhereThisCameFrom(){
        return(getName().getNameString());
    }


}
