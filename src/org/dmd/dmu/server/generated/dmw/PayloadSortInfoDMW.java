package org.dmd.dmu.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import java.util.ArrayList;                                            // Support for MULTI attribute - (BaseDMWGenerator.java:2119)
import java.util.Iterator;                                             // Support copy of MV objects - (BaseDMWGenerator.java:2133)
import org.dmd.dmc.*;                                                  // If any attributes - (BaseDMWGenerator.java:977)
import org.dmd.dmc.definitions.DmcDefinitionIF;                        // The object is a domain specific definition - (BaseDMWGenerator.java:411)
import org.dmd.dmc.types.DefinitionName;                               // Is named by - (BaseDMWGenerator.java:939)
import org.dmd.dms.ClassDefinition;                                    // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:944)
import org.dmd.dms.generated.dmo.MetaDMSAG;                            // Required for MODREC constructor - (BaseDMWGenerator.java:949)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                  // Required for MODREC constructor - (BaseDMWGenerator.java:948)
import org.dmd.dmu.server.extended.DmuDefinition;                      // Derived class - (BaseDMWGenerator.java:1138)
import org.dmd.dmu.server.extended.json.PayloadSortInfo;               // Required for getModificationRecorder() - (BaseDMWGenerator.java:953)
import org.dmd.dmu.server.generated.dmw.PathAndKeyIterableDMW;         // For multi-valued PathAndKey - (BaseDMWGenerator.java:1995)
import org.dmd.dmu.shared.generated.dmo.DmuDMSAG;                      // Attribute pathAndKeys from the dmu schema - (BaseDMWGenerator.java:910)
import org.dmd.dmu.shared.generated.dmo.PayloadSortInfoDMO;            // Class not auxiliary or abstract - (BaseDMWGenerator.java:1142)
import org.dmd.dmu.shared.generated.types.DmuModuleREF;                // Required to access defined in module name - (DMWGenerator.java:184)
import org.dmd.dmu.shared.types.PathAndKey;                            // Primitive type - (BaseDMWGenerator.java:1040)



/**
 * <font color="red">json:</font> In order to perform the diff between an
 * existing configuration on\n the device and an incoming payload, the JSON
 * objects must have arrays of objects\n sorted based on specified key
 * values. Otherwise, the com.github.fge.jsonpatch.diff.JsonDiff\n diff
 * mechanisms can't provide a decent comparison.
 * <P>
 * Generated from the dmu schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:488)
 */
abstract public class PayloadSortInfoDMW extends DmuDefinition implements DmcDefinitionIF, DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:577)
    public PayloadSortInfoDMW() {
        super(new PayloadSortInfoDMO(), org.dmd.dmu.server.generated.DmuSchemaAG._PayloadSortInfo);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:583)
    public PayloadSortInfoDMW(DmcTypeModifierMV mods) {
        super(new PayloadSortInfoDMO(mods), org.dmd.dmu.server.generated.DmuSchemaAG._PayloadSortInfo);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:625)
    public PayloadSortInfo getModificationRecorder(){
        PayloadSortInfo rc = new PayloadSortInfo();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:646)
    public PayloadSortInfoDMW(PayloadSortInfoDMO obj) {
        super(obj, org.dmd.dmu.server.generated.DmuSchemaAG._PayloadSortInfo);
    }

    public PayloadSortInfo cloneIt() {
        PayloadSortInfo rc = new PayloadSortInfo();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public PayloadSortInfoDMO getDMO() {
        return((PayloadSortInfoDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:661)
    protected PayloadSortInfoDMW(PayloadSortInfoDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1187)
    public DefinitionName getObjectName(){
        return(((PayloadSortInfoDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((PayloadSortInfoDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof PayloadSortInfoDMW){
            return( getObjectName().equals( ((PayloadSortInfoDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public DefinitionName getName(){
        return(((PayloadSortInfoDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1475)
    public void setName(Object value) throws DmcValueException {
        ((PayloadSortInfoDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1484)
    public void setName(DefinitionName value){
        ((PayloadSortInfoDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1510)
    public void remName(){
        ((PayloadSortInfoDMO) core).remName();
    }

    /**
     * @return The number of PathAndKey items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1562)
    public int getPathAndKeysSize(){
        return(((PayloadSortInfoDMO) core).getPathAndKeysSize());
    }

    /**
     * @return true if there are no PathAndKeyDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1570)
    public boolean getPathAndKeysIsEmpty(){
        if (((PayloadSortInfoDMO) core).getPathAndKeysSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any PathAndKeyDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1580)
    public boolean getPathAndKeysHasValue(){
        if (((PayloadSortInfoDMO) core).getPathAndKeysSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of PathAndKey objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1999)
    public PathAndKeyIterableDMW getPathAndKeysIterable(){
        DmcAttribute<?> attr = core.get(DmuDMSAG.__pathAndKeys);
        if (attr == null)
            return(PathAndKeyIterableDMW.emptyList);
        
        return(new PathAndKeyIterableDMW(((PayloadSortInfoDMO) core).getPathAndKeys()));
    }

    /**
     * Adds another pathAndKeys value.
     * @param value A value compatible with PathAndKey
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2026)
    public void addPathAndKeys(Object value) throws DmcValueException {
        ((PayloadSortInfoDMO) core).addPathAndKeys(value);
    }

    /**
     * Adds another pathAndKeys value.
     * @param value A value compatible with PathAndKey
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2036)
    public void addPathAndKeys(PathAndKey value){
        ((PayloadSortInfoDMO) core).addPathAndKeys(value);
    }

    /**
     * @param value A value compatible with PathAndKey
     * @return true if the collection contains the pathAndKeys value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2093)
    public boolean pathAndKeysContains(PathAndKey value){
        return(((PayloadSortInfoDMO) core).pathAndKeysContains(value));
    }

    /**
     * @return A COPY of the collection of PathAndKey objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2137)
    @SuppressWarnings("unchecked")
    public ArrayList<PathAndKey> getPathAndKeysCopy(){
        DmcAttribute<?> attr = core.get(DmuDMSAG.__pathAndKeys);
        if (attr == null)
            return(new ArrayList<PathAndKey>());
        
        ArrayList<PathAndKey> rc = new ArrayList<PathAndKey>(attr.getMVSize());
        
        Iterator<PathAndKey> it = (Iterator<PathAndKey>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a pathAndKeys value.
     * @param value The PathAndKey to be deleted from set of attribute values.
     * @throws DmcValueException if value is incorrect
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2165)
    public void delPathAndKeys(Object value) throws DmcValueException {
        ((PayloadSortInfoDMO) core).delPathAndKeys(value);
    }

    /**
     * Deletes a pathAndKeys value.
     * @param value The PathAndKey to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2174)
    public void delPathAndKeys(PathAndKey value){
        ((PayloadSortInfoDMO) core).delPathAndKeys(value);
    }

    /**
     * Removes the pathAndKeys attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2186)
    public void remPathAndKeys(){
        ((PayloadSortInfoDMO) core).remPathAndKeys();
    }

    // Generated from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperFunctions(DMWGenerator.java:237)
    /**
     * This method indicates the name of the module from which this definition was loaded.
     */
    @Override
    public String getNameOfModuleWhereThisCameFrom(){
        DmuModuleREF ref = ((PayloadSortInfoDMO) core).getDefinedInDmuModule();
        return(ref.getName().getNameString());
    }


}
