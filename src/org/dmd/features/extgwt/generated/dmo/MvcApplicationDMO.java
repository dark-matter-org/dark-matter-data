//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:357)
import java.io.Serializable;                                                      // Always required
import java.util.*;                                                               // Always required
import org.dmd.dmc.DmcAttribute;                                                  // Any attributes
import org.dmd.dmc.DmcNamedObjectIF;                                              // Named object
import org.dmd.dmc.DmcOmni;                                                       // Lazy resolution
import org.dmd.dmc.DmcSliceInfo;                                                  // Required for object slicing
import org.dmd.dmc.DmcValueException;                                             // Any attributes
import org.dmd.dmc.types.StringName;                                              // Naming attribute type
import org.dmd.dms.generated.dmo.MetaDMSAG;                                       // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeModifierMV;                             // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeStringNameSV;                           // Required type
import org.dmd.features.extgwt.generated.dmo.MvcControllerDMO;                    // Type specific set/add
import org.dmd.features.extgwt.generated.dmo.MvcDefinitionDMO;                    // Base class
import org.dmd.features.extgwt.generated.dmo.MvcEventDMO;                         // Type specific set/add
import org.dmd.features.extgwt.generated.types.DmcTypeMvcControllerREFMV;         // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcEventREFMV;              // Reference type
import org.dmd.features.extgwt.generated.types.MvcControllerREF;                  // Helper class
import org.dmd.features.extgwt.generated.types.MvcEventREF;                       // Helper class

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The MvcApplication class allows for the definition of an application that
 * makes uses of the ExtGWT MVC framework.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class MvcApplicationDMO  extends MvcDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "MvcApplication";

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public MvcApplicationDMO() {
        super("MvcApplication");
    }

    protected MvcApplicationDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public MvcApplicationDMO getNew(){
        MvcApplicationDMO rc = new MvcApplicationDMO();
        return(rc);
    }

    @Override
    public MvcApplicationDMO getSlice(DmcSliceInfo info){
        MvcApplicationDMO rc = new MvcApplicationDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public MvcApplicationDMO(DmcTypeModifierMV mods) {
        super("MvcApplication");
        modrec(true);
        setModifier(mods);
    }

    public MvcApplicationDMO getModificationRecorder(){
        MvcApplicationDMO rc = new MvcApplicationDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:742)
    public StringName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((StringName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcApplicationDMO){
            return( getObjectName().equals( ((MvcApplicationDMO) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:868)
    public Iterator<MvcEventREF> getStartEvents(){
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__startEvents);
        if (attr == null)
            return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of MvcEventREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:888)
    public Iterator<MvcEventREF> getStartEventsREFs(){
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__startEvents);
        if (attr == null)
            return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another startEvents to the specified value.
     * @param value MvcEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:902)
    public DmcAttribute<?> addStartEvents(MvcEventDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__startEvents);
        if (attr == null)
            attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__startEvents);
        
        try{
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__startEvents,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another startEvents value.
     * @param value A value compatible with MvcEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1143)
    public DmcAttribute<?> addStartEvents(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__startEvents);
        if (attr == null)
            attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__startEvents);
        
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__startEvents,attr);
        return(attr);
    }

    /**
     * Returns the number of values in startEvents
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1160)
    public int getStartEventsSize(){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__startEvents);
        if (attr == null){
            if (ExtgwtDMSAG.__startEvents.indexSize == 0)
                return(0);
            else
                return(ExtgwtDMSAG.__startEvents.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a startEvents value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1199)
    public DmcAttribute<?> delStartEvents(Object value){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__startEvents);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__startEvents), value);
        else
            attr = del(ExtgwtDMSAG.__startEvents, value);
        
        return(attr);
    }

    /**
     * Removes the startEvents attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1253)
    public void remStartEvents(){
         rem(ExtgwtDMSAG.__startEvents);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:868)
    public Iterator<MvcEventREF> getDefinesEvent(){
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__definesEvent);
        if (attr == null)
            return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of MvcEventREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:888)
    public Iterator<MvcEventREF> getDefinesEventREFs(){
        DmcTypeMvcEventREFMV attr = (DmcTypeMvcEventREFMV) get(ExtgwtDMSAG.__definesEvent);
        if (attr == null)
            return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another definesEvent to the specified value.
     * @param value MvcEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:902)
    public DmcAttribute<?> addDefinesEvent(MvcEventDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definesEvent);
        if (attr == null)
            attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__definesEvent);
        
        try{
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__definesEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another definesEvent value.
     * @param value A value compatible with MvcEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1143)
    public DmcAttribute<?> addDefinesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definesEvent);
        if (attr == null)
            attr = new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__definesEvent);
        
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__definesEvent,attr);
        return(attr);
    }

    /**
     * Returns the number of values in definesEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1160)
    public int getDefinesEventSize(){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definesEvent);
        if (attr == null){
            if (ExtgwtDMSAG.__definesEvent.indexSize == 0)
                return(0);
            else
                return(ExtgwtDMSAG.__definesEvent.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a definesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1199)
    public DmcAttribute<?> delDefinesEvent(Object value){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definesEvent);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeMvcEventREFMV(ExtgwtDMSAG.__definesEvent), value);
        else
            attr = del(ExtgwtDMSAG.__definesEvent, value);
        
        return(attr);
    }

    /**
     * Removes the definesEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1253)
    public void remDefinesEvent(){
         rem(ExtgwtDMSAG.__definesEvent);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:685)
    public StringName getName(){
        DmcTypeStringNameSV attr = (DmcTypeStringNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:723)
    public void setName(StringName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:775)
    public void setName(Object value) throws DmcValueException {
        DmcTypeStringNameSV attr  = (DmcTypeStringNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:795)
    public void remName(){
         rem(MetaDMSAG.__name);
    }

    /**
     * @return An Iterator of MvcControllerDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:868)
    public Iterator<MvcControllerREF> getControllers(){
        DmcTypeMvcControllerREFMV attr = (DmcTypeMvcControllerREFMV) get(ExtgwtDMSAG.__controllers);
        if (attr == null)
            return( ((List<MvcControllerREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<MvcControllerREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of MvcControllerREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:888)
    public Iterator<MvcControllerREF> getControllersREFs(){
        DmcTypeMvcControllerREFMV attr = (DmcTypeMvcControllerREFMV) get(ExtgwtDMSAG.__controllers);
        if (attr == null)
            return( ((List<MvcControllerREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another controllers to the specified value.
     * @param value MvcController
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:902)
    public DmcAttribute<?> addControllers(MvcControllerDMO value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__controllers);
        if (attr == null)
            attr = new DmcTypeMvcControllerREFMV(ExtgwtDMSAG.__controllers);
        
        try{
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__controllers,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another controllers value.
     * @param value A value compatible with MvcController
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1143)
    public DmcAttribute<?> addControllers(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__controllers);
        if (attr == null)
            attr = new DmcTypeMvcControllerREFMV(ExtgwtDMSAG.__controllers);
        
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__controllers,attr);
        return(attr);
    }

    /**
     * Returns the number of values in controllers
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1160)
    public int getControllersSize(){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__controllers);
        if (attr == null){
            if (ExtgwtDMSAG.__controllers.indexSize == 0)
                return(0);
            else
                return(ExtgwtDMSAG.__controllers.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a controllers value.
     * @param value The MvcController to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1199)
    public DmcAttribute<?> delControllers(Object value){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__controllers);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeMvcControllerREFMV(ExtgwtDMSAG.__controllers), value);
        else
            attr = del(ExtgwtDMSAG.__controllers, value);
        
        return(attr);
    }

    /**
     * Removes the controllers attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1253)
    public void remControllers(){
         rem(ExtgwtDMSAG.__controllers);
    }




}
