package org.dmd.dmt.client.generated.gxt;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:351)
import org.dmd.dmc.*;                                             // If any attributes - (BaseDMWGeneratorNewest.java:954)
import org.dmd.dms.generated.dmo.MetaDMSAG;                       // Required for MODREC constructor - (BaseDMWGeneratorNewest.java:943)
import org.dmd.dms.generated.enums.ValueTypeEnum;                 // To allow overload of GxtWrapper.set() - (GxtDMWGenerator.java:120)
import org.dmd.dms.generated.types.DmcTypeModifierMV;             // Required for MODREC constructor - (BaseDMWGeneratorNewest.java:942)
import org.dmd.dmt.shared.generated.dmo.ExtendedRefSVDMO;         // Class not auxiliary or abstract - (BaseDMWGeneratorNewest.java:1119)
import org.dmd.dmt.shared.generated.types.SomeRelation;           // DMO reference - (BaseDMWGeneratorNewest.java:1009)
import org.dmd.mvw.client.gxt.dmw.GxtWrapper;                     // Unnamed object wrapper - (BaseDMWGeneratorNewest.java:1102)


/**
 * null
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:368)
 */
public class ExtendedRefSVGXT extends GxtWrapper {


    static final int svExtendedRefID = 10441;

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:459)
    public ExtendedRefSVGXT() {
        super(new ExtendedRefSVDMO());
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:464)
    public ExtendedRefSVGXT(DmcTypeModifierMV mods) {
        super(new ExtendedRefSVDMO(mods));
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:482)
    public ExtendedRefSVGXT getModificationRecorder(){
        ExtendedRefSVGXT rc = new ExtendedRefSVGXT(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    public ExtendedRefSVDMO getDMO() {
        return((ExtendedRefSVDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:544)
    public ExtendedRefSVGXT(ExtendedRefSVDMO obj) {
        super(obj);
    }

    /**
     * @return A reference to a SomeRelation object.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1313)
    public SomeRelation getSvExtendedRef(){
        SomeRelation ref = ((ExtendedRefSVDMO) core).getSvExtendedRef();
        if (ref == null)
            return(null);
        
        return(ref);
    }

    /**
     * Sets the svExtendedRef to the specified value.
     * @param value A value compatible with SomeRelation
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1403)
    public void setSvExtendedRef(SomeRelation value) {
        ((ExtendedRefSVDMO) core).setSvExtendedRef(value);
    }

    /**
     * Sets the svExtendedRef to the specified value.
     * @param value A value compatible with SomeRelation
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1423)
    public void setSvExtendedRef(Object value) throws DmcValueException {
        ((ExtendedRefSVDMO) core).setSvExtendedRef(value);
    }

    /**
     * Removes the svExtendedRef attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1482)
    public void remSvExtendedRef(){
        ((ExtendedRefSVDMO) core).remSvExtendedRef();
    }

    @Override
    public <X> X set(String property, X value) {
        DmcAttributeInfo ai = core.getAttributeInfo(property);
			
			if (ai == null)
				throw(new IllegalStateException("Unknown attribute: " + property + " for class: " + core.getConstructionClassName()));

			if (ai.valueType != ValueTypeEnum.SINGLE)
				throw(new IllegalStateException("The set() method only supports single-valued attributes. This attribute is multi-valued: " + property));

			X oldValue = get(property);
			
			try {
				switch(ai.id){

				case svExtendedRefID:
				    ((ExtendedRefSVDMO) core).setSvExtendedRef(value);
				    break;

			    }
	        } catch (DmcValueException e) {
		        throw(new IllegalStateException(e));
	        }

			notifyPropertyChanged(property, value, oldValue);
			return(oldValue);
		}

}
