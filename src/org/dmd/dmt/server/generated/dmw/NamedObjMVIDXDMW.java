//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmt.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import org.dmd.dmc.*;                                             // If any attributes - (BaseDMWGenerator.java:1087)
import org.dmd.dms.ClassDefinition;                               // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:1067)
import org.dmd.dms.generated.dmo.MetaDMSAG;                       // Required for MODREC constructor - (BaseDMWGenerator.java:1072)
import org.dmd.dms.generated.types.DmcTypeModifierMV;             // Required for MODREC constructor - (BaseDMWGenerator.java:1071)
import org.dmd.dmt.server.extended.ObjWithRefs;                   // Is reference type - (BaseDMWGenerator.java:1107)
import org.dmd.dmt.shared.generated.dmo.NamedObjMVIDXDMO;         // Class not auxiliary or abstract - (BaseDMWGenerator.java:1252)
import org.dmd.dmt.shared.generated.dmo.ObjWithRefsDMO;           // For setNth of ObjWithRefs - (BaseDMWGenerator.java:1914)
import org.dmd.dmt.shared.generated.types.ObjWithRefsREF;         // To support getMVCopy() for REFs ObjWithRefs-MULTI - (BaseDMWGenerator.java:1126)
import org.dmd.dmw.DmwWrapper;                                    // Unnamed object wrapper - (BaseDMWGenerator.java:1235)



/**
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:479)
 */
public class NamedObjMVIDXDMW extends DmwWrapper {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:558)
    public NamedObjMVIDXDMW() {
        super(new NamedObjMVIDXDMO(), org.dmd.dmt.server.generated.DmtSchemaAG._NamedObjMVIDX);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:564)
    public NamedObjMVIDXDMW(DmcTypeModifierMV mods) {
        super(new NamedObjMVIDXDMO(mods), org.dmd.dmt.server.generated.DmtSchemaAG._NamedObjMVIDX);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:593)
    public NamedObjMVIDXDMW getModificationRecorder(){
        NamedObjMVIDXDMW rc = new NamedObjMVIDXDMW(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:627)
    public NamedObjMVIDXDMW(NamedObjMVIDXDMO obj) {
        super(obj, org.dmd.dmt.server.generated.DmtSchemaAG._NamedObjMVIDX);
    }

    public NamedObjMVIDXDMW cloneIt() {
        NamedObjMVIDXDMW rc = new NamedObjMVIDXDMW();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public NamedObjMVIDXDMO getDMO() {
        return((NamedObjMVIDXDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:642)
    protected NamedObjMVIDXDMW(NamedObjMVIDXDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    /**
     * @return The number of ObjWithRefs items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getMvIdxNamedObjSize(){
        return(((NamedObjMVIDXDMO) core).getMvIdxNamedObjSize());
    }

    /**
     * @return true if there are no ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getMvIdxNamedObjIsEmpty(){
        if (((NamedObjMVIDXDMO) core).getMvIdxNamedObjSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getMvIdxNamedObjHasValue(){
        if (((NamedObjMVIDXDMO) core).getMvIdxNamedObjSize() == 0)
            return(false);
        return(true);
    }

    /**
     * Sets the mvIdxNamedObj value at the specified index.
     * @param value A value compatible with ObjWithRefs
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1931)
    public DmcAttribute<?> setNthMvIdxNamedObj(int index, ObjWithRefs value){
        if (value == null)
            return(((NamedObjMVIDXDMO) core).setNthMvIdxNamedObj(index, null));
        else
            return(((NamedObjMVIDXDMO) core).setNthMvIdxNamedObj(index, ((ObjWithRefsDMO)value.getDmcObject())));
    }

    /**
     * @return The ObjWithRefs object at the specified index.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2027)
    public ObjWithRefs getNthMvIdxNamedObj(int index){
        ObjWithRefsREF ref = ((NamedObjMVIDXDMO) core).getNthMvIdxNamedObj(index);
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((ObjWithRefs)ref.getObject().getContainer());
    }

    /**
     * @return The reference to the ObjWithRefs object at the specified index.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2067)
    public ObjWithRefsREF getNthMvIdxNamedObjREF(int index){
        ObjWithRefsREF ref = ((NamedObjMVIDXDMO) core).getNthMvIdxNamedObjREF(index);
        return(ref);
    }

    /**
     * Removes the mvIdxNamedObj attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remMvIdxNamedObj(){
        ((NamedObjMVIDXDMO) core).remMvIdxNamedObj();
    }


}
