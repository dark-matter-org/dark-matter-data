package org.dmd.dmt.shared.generated.types;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3297)
import java.io.Serializable;                                  // Marker interface for serialization - (GenUtility.java:3278)
import java.util.Iterator;                                    // For JSON formatting - (GenUtility.java:3279)
import org.dmd.dmc.DmcAttributeInfo;                          // Constructor support - (GenUtility.java:3283)
import org.dmd.dmc.DmcInputStreamIF;                          // To support serialization - (GenUtility.java:3280)
import org.dmd.dmc.DmcNameClashResolverIF;                    // Ambiguous reference resolution - (GenUtility.java:3289)
import org.dmd.dmc.DmcNameResolverIF;                         // Reference resolution - (GenUtility.java:3290)
import org.dmd.dmc.DmcNameResolverWithClashSupportIF;         // Ambiguous reference resolution - (GenUtility.java:3288)
import org.dmd.dmc.DmcObject;                                 // Ambiguous reference resolution - (GenUtility.java:3291)
import org.dmd.dmc.DmcOutputStreamIF;                         // To support serialization - (GenUtility.java:3281)
import org.dmd.dmc.DmcValueException;                         // Type checking - (GenUtility.java:3284)
import org.dmd.dmc.DmcValueExceptionSet;                      // Ambiguous reference resolution - (GenUtility.java:3292)
import org.dmd.dmc.types.DmcTypeComplexTypeWithRefs;          // Derivation base - (GenUtility.java:3287)



@SuppressWarnings("serial")
/**
 * The DmcTypeDmtOptionalValueFieldWithSpaces class.
 * This code was auto-generated by the createmeta utility and shouldn't be alterred
 * manually.
 * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3304)
 *    Called from: Called from: org.dmd.dms.util.NewComplexTypeFormatter.dumpComplexType(NewComplexTypeFormatter.java:1099)
 */
abstract public class DmcTypeDmtOptionalValueFieldWithSpaces extends DmcTypeComplexTypeWithRefs<DmtOptionalValueFieldWithSpaces> implements Serializable {

    /**
     * Default constructor.
     */
    public DmcTypeDmtOptionalValueFieldWithSpaces(){
    }

    /**
     * Default constructor.
     */
    public DmcTypeDmtOptionalValueFieldWithSpaces(DmcAttributeInfo ai){
        super(ai);
    }

    @Override
    // Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3327)
    protected void formatValueAsJSON(StringBuffer sb, int padding, String indent) {
        if (getMVSize() == 0){
            getSV().toJSON(sb,padding,indent);
        }
        else {
            Iterator<DmtOptionalValueFieldWithSpaces> it = getMV();
            while(it.hasNext()){
                DmtOptionalValueFieldWithSpaces value = it.next();
                value.toJSON(sb,padding,indent);
                if (it.hasNext())
                    sb.append(", \n");                    
            }
        }
    }

    // Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3343)
    protected DmtOptionalValueFieldWithSpaces typeCheck(Object value) throws DmcValueException {
        DmtOptionalValueFieldWithSpaces rc = null;

        if (value instanceof DmtOptionalValueFieldWithSpaces){
            rc = (DmtOptionalValueFieldWithSpaces)value;
        }
        else if (value instanceof String){
            rc = new DmtOptionalValueFieldWithSpaces((String)value);
        }
        else{
            throw(new DmcValueException("Object of class: " + value.getClass().getName() + " passed where object compatible with DmtOptionalValueFieldWithSpaces expected."));
        }
        return(rc);
    }

    /**
     * Returns a clone of a value associated with this type.
     * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3366)
     */
    public DmtOptionalValueFieldWithSpaces cloneValue(DmtOptionalValueFieldWithSpaces val){
        return(new DmtOptionalValueFieldWithSpaces(val));
    }

    /**
     * Writes a DmtOptionalValueFieldWithSpaces.
     * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3374)
     */
    @Override
    public void serializeValue(DmcOutputStreamIF dos, DmtOptionalValueFieldWithSpaces value) throws Exception {
        value.serializeIt(dos);
    }

    /**
     * Reads a DmtOptionalValueFieldWithSpaces.
     * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3383)
     */
    @Override
    public DmtOptionalValueFieldWithSpaces deserializeValue(DmcInputStreamIF dis) throws Exception {
        DmtOptionalValueFieldWithSpaces rc = new DmtOptionalValueFieldWithSpaces();
        rc.deserializeIt(dis);
        return(rc);
    }

    /**
     * Resolves a DmtOptionalValueFieldWithSpaces.
     * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3395)
     */
    @Override
    public void resolveValue(DmcNameResolverIF resolver, DmtOptionalValueFieldWithSpaces value, String attrName) throws DmcValueException {
        value.resolve(resolver,attrName);
    }

    /**
     * Resolves a DmtOptionalValueFieldWithSpaces.
     * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3404)
     */
    @Override
    public void resolveValue(DmcNameResolverWithClashSupportIF resolver, DmtOptionalValueFieldWithSpaces value, DmcObject object, DmcNameClashResolverIF ncr, DmcAttributeInfo ai) throws DmcValueException, DmcValueExceptionSet {
        value.resolve(resolver,object,ncr,ai);
    }

    /**
     * Removes references to other objects from a DmtOptionalValueFieldWithSpaces.
     * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:3413)
     */
    public void removeBackRefsFromValue(DmtOptionalValueFieldWithSpaces value){
        value.removeBackRefsFromValue();
    }



}
