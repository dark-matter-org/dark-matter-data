//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmt.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:408)
import java.io.Serializable;                                  // Always required - (GenUtility.java:227)
import java.util.*;                                           // Always required if we have any MV attributes - (GenUtility.java:224)
import org.dmd.dmc.DmcAttribute;                              // Any attributes - (GenUtility.java:248)
import org.dmd.dmc.DmcObject;                                 // Structural class - (GenUtility.java:362)
import org.dmd.dmc.DmcSliceInfo;                              // Required for object slicing - (GenUtility.java:232)
import org.dmd.dmc.DmcValueException;                         // Any attributes - (GenUtility.java:249)
import org.dmd.dms.generated.dmo.MetaDMSAG;                   // Required for MODREC constructor - (GenUtility.java:231)
import org.dmd.dms.generated.types.DmcTypeModifierMV;         // Required for MODREC constructor - (GenUtility.java:230)
import org.dmd.dms.generated.types.DmcTypeStringSET;          // Required type - (GenUtility.java:339)

// Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:678)
/**
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:134)
 */
@SuppressWarnings("serial")
public class PrimitiveTSDMO  extends DmcObject  implements Serializable  {

    public final static String constructionClassName = "PrimitiveTS";


    static {
    }

    public PrimitiveTSDMO() {
        super("PrimitiveTS");
    }

    protected PrimitiveTSDMO(String oc) {
        super(oc);
    }

    @Override
    public PrimitiveTSDMO getNew(){
        PrimitiveTSDMO rc = new PrimitiveTSDMO();
        return(rc);
    }

    @Override
    public PrimitiveTSDMO getSlice(DmcSliceInfo info){
        PrimitiveTSDMO rc = new PrimitiveTSDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public PrimitiveTSDMO(DmcTypeModifierMV mods) {
        super("PrimitiveTS");
        modrec(true);
        setModifier(mods);
    }

    public PrimitiveTSDMO getModificationRecorder(){
        PrimitiveTSDMO rc = new PrimitiveTSDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1289)
    public Iterator<String> getTsString(){
        DmcTypeStringSET attr = (DmcTypeStringSET) get(DmtDMSAG.__tsString);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @param i the index
     * @return The nth String value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1302)
    public String getNthTsString(int i){
        DmcTypeStringSET attr = (DmcTypeStringSET) get(DmtDMSAG.__tsString);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another tsString to the specified value.
     * @param value String
     * @return the attribute instance
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1317)
    public DmcAttribute<?> addTsString(String value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__tsString);
        if (attr == null)
            attr = new DmcTypeStringSET(DmtDMSAG.__tsString);
        
        try{
            setLastValue(attr.add(value));
            add(DmtDMSAG.__tsString,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * @param value String
     * @return true if we contain a valued keyed by the specified String.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1392)
    public boolean tsStringContains(String value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__tsString);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another tsString value.
     * @param value A value compatible with String
     * @return the attribute instance
     * @throws DmcValueException if value is not correct
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1426)
    public DmcAttribute<?> addTsString(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmtDMSAG.__tsString);
        if (attr == null)
            attr = new DmcTypeStringSET(DmtDMSAG.__tsString);
        
        setLastValue(attr.add(value));
        add(DmtDMSAG.__tsString,attr);
        return(attr);
    }

    /**
     * @return the number of values in tsString
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1443)
    public int getTsStringSize(){
        DmcAttribute<?> attr = get(DmtDMSAG.__tsString);
        if (attr == null){
            if (DmtDMSAG.__tsString.indexSize == 0)
                return(0);
            else
                return(DmtDMSAG.__tsString.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a tsString value.
     * @param value The String to be deleted from set of attribute values.
     * @return the deleted attribute instance
     * @throws DmcValueException if the value is incorrect
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1505)
    public DmcAttribute<?> delTsString(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmtDMSAG.__tsString);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringSET(DmtDMSAG.__tsString), value);
        else
            attr = del(DmtDMSAG.__tsString, value);
        
        return(attr);
    }

    /**
     * Deletes a tsString from the specified value.
     * @param value String
     * @return the deleted attribute instance     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1522)
    public DmcAttribute<?> delTsString(String value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__tsString);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringSET(DmtDMSAG.__tsString), value);
        else
            attr = del(DmtDMSAG.__tsString, value);
        
        return(attr);
    }

    /**
     * Removes the tsString attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1541)
    public void remTsString(){
         rem(DmtDMSAG.__tsString);
    }




}
