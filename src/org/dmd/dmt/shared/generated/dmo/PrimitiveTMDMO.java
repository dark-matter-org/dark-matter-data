package org.dmd.dmt.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:374)
import java.io.Serializable;                                         // Always required - (GenUtility.java:203)
import java.util.*;                                                  // Always required if we have any MV attributes - (GenUtility.java:198)
import org.dmd.dmc.DmcAttribute;                                     // Any attributes - (GenUtility.java:219)
import org.dmd.dmc.DmcObject;                                        // Structural class - (GenUtility.java:330)
import org.dmd.dmc.DmcSliceInfo;                                     // Required for object slicing - (GenUtility.java:208)
import org.dmd.dmc.DmcValueException;                                // Any attributes - (GenUtility.java:220)
import org.dmd.dmc.types.StringToString;                             // Primitive type and !auxiliary class - (GenUtility.java:250)
import org.dmd.dms.generated.dmo.MetaDMSAG;                          // Required for MODREC constructor - (GenUtility.java:207)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                // Required for MODREC constructor - (GenUtility.java:206)
import org.dmd.dms.generated.types.DmcTypeStringToStringMAP;         // Required type - (GenUtility.java:307)

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * null
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class PrimitiveTMDMO  extends DmcObject  implements Serializable  {

    public final static String constructionClassName = "PrimitiveTM";

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public PrimitiveTMDMO() {
        super("PrimitiveTM");
    }

    protected PrimitiveTMDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public PrimitiveTMDMO getNew(){
        PrimitiveTMDMO rc = new PrimitiveTMDMO();
        return(rc);
    }

    @Override
    public PrimitiveTMDMO getSlice(DmcSliceInfo info){
        PrimitiveTMDMO rc = new PrimitiveTMDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public PrimitiveTMDMO(DmcTypeModifierMV mods) {
        super("PrimitiveTM");
        modrec(true);
        setModifier(mods);
    }

    public PrimitiveTMDMO getModificationRecorder(){
        PrimitiveTMDMO rc = new PrimitiveTMDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    /**
     * @return An Iterator of StringToString objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1412)
    public Iterator<StringToString> getTmString(){
        DmcTypeStringToStringMAP attr = (DmcTypeStringToStringMAP) get(DmtDMSAG.__tmString);
        if (attr == null)
            return( ((List<StringToString>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @param key The key of the value you want.
     * @return The StringToString associated with the specified key.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1444)
    public StringToString getTmString(Object key){
        DmcTypeStringToStringMAP attr = (DmcTypeStringToStringMAP) get(DmtDMSAG.__tmString);
        if (attr == null)
            return(null);

        return(attr.getByKey(key));
    }

    /**
     * @return The first key of the map.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1464)
    public String getTmStringFirstKey(){
        DmcTypeStringToStringMAP attr = (DmcTypeStringToStringMAP) get(DmtDMSAG.__tmString);
        if (attr == null)
            return(null);

        return(attr.firstKey());
    }

    /**
     * Adds another tmString value.
     * @param value A value compatible with StringToString
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1482)
    public DmcAttribute<?> addTmString(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmtDMSAG.__tmString);
        if (attr == null)
            attr = new DmcTypeStringToStringMAP(DmtDMSAG.__tmString);
        
        setLastValue(attr.add(value));
        add(DmtDMSAG.__tmString,attr);
        return(attr);
    }

    /**
     * Adds another tmString value.
     * @param value StringToString
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1519)
    public DmcAttribute<?> addTmString(StringToString value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__tmString);
        if (attr == null)
            attr = new DmcTypeStringToStringMAP(DmtDMSAG.__tmString);
        
        try{
            setLastValue(attr.add(value));
            add(DmtDMSAG.__tmString,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Deletes a tmString value.
     * @param key The key of the StringToString to be deleted from the map of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1581)
    public DmcAttribute<?> delTmString(Object key){
        DmcAttribute<?> attr = get(DmtDMSAG.__tmString);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringToStringMAP(DmtDMSAG.__tmString), key);
        if (attr == null)
            return(null);
        
        attr = del(DmtDMSAG.__tmString, key);
        
        return(attr);
    }

    /**
     * Deletes a tmString value.
     * @param key the String key value
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1599)
    public DmcAttribute<?> delTmString(String key) {
        DmcAttribute<?> attr = get(DmtDMSAG.__tmString);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringToStringMAP(DmtDMSAG.__tmString), key);
        if (attr == null)
            return(null);
        
        attr = del(DmtDMSAG.__tmString, key);
        
        return(attr);
    }

    /**
     * Removes the tmString attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1653)
    public void remTmString(){
         rem(DmtDMSAG.__tmString);
    }




}
