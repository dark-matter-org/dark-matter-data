//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2014 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmt.shared.generated.dmo;

import java.io.Serializable;
import org.dmd.dms.extended.ActionTriggerInfo;
import org.dmd.dmc.DmcValueExceptionSet;
// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:408)
import java.util.*;                                                                      // Always required if we have any MV attributes - (GenUtility.java:224)
import org.dmd.dmc.DmcAttribute;                                                         // Any attributes - (GenUtility.java:248)
import org.dmd.dmc.DmcOmni;                                                              // Lazy resolution - (GenUtility.java:153)
import org.dmd.dmc.DmcValueException;                                                    // Any attributes - (GenUtility.java:249)
import org.dmd.dmc.types.DefinitionName;                                                 // Primitive type and !auxiliary class - (GenUtility.java:299)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                              // Attribute from meta schema - (GenUtility.java:138)
import org.dmd.dms.generated.types.DmcTypeBooleanSV;                                     // Required type - (GenUtility.java:339)
import org.dmd.dms.generated.types.DmcTypeDefinitionNameSV;                              // Required type - (GenUtility.java:339)
import org.dmd.dmt.shared.generated.dmo.TestBasicNamedObjectFixedDMO;                    // Type specific set/add - (GenUtility.java:318)
import org.dmd.dmt.shared.generated.dmo.TestBasicObjectFixedDMO;                         // Type specific set/add - (GenUtility.java:318)
import org.dmd.dmt.shared.generated.types.DmcTypeTestBasicNamedObjectFixedREFMV;         // Reference type - (GenUtility.java:311)
import org.dmd.dmt.shared.generated.types.DmcTypeTestBasicNamedObjectFixedREFSV;         // Reference type - (GenUtility.java:311)
import org.dmd.dmt.shared.generated.types.DmcTypeTestBasicObjectFixedREFMV;              // Reference type - (GenUtility.java:311)
import org.dmd.dmt.shared.generated.types.DmcTypeTestBasicObjectFixedREFSV;              // Reference type - (GenUtility.java:311)
import org.dmd.dmt.shared.generated.types.TestBasicNamedObjectFixedREF;                  // Helper class - (GenUtility.java:346)


import org.dmd.dmc.DmcObject;
import org.dmd.dms.generated.types.DmcTypeDmcObjectSV;
import org.dmd.dms.generated.types.DmcTypeDmcObjectMV;
/**
 * This is the generated ActionTriggerInfo derivative for the testAction action.
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoActionFormatter.dumpAction(DmoActionFormatter.java:135)
 */
@SuppressWarnings("serial")
public class TestActionATI extends ActionTriggerInfo implements Serializable {


    public TestActionATI(){
        super("TestAction","testAction");
    }

    // org.dmd.dms.util.GenUtility.formatMVObjectAccess(GenUtility.java:1034)
    public DmcAttribute<?> addMvTestBasicNamedObjectFixed(TestBasicNamedObjectFixedDMO value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__mvTestBasicNamedObjectFixed);
        if (attr == null)
            attr = new DmcTypeDmcObjectMV(DmtDMSAG.__mvTestBasicNamedObjectFixed);
        
        try{
            setLastValue(attr.add(value));
            add(DmtDMSAG.__mvTestBasicNamedObjectFixed,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    // org.dmd.dms.util.GenUtility.formatMVObjectAccess(GenUtility.java:1051)
    @SuppressWarnings("unchecked")
    public Iterator<TestBasicNamedObjectFixedDMO> getMvTestBasicNamedObjectFixed(){
        DmcTypeDmcObjectMV attr = (DmcTypeDmcObjectMV) get(DmtDMSAG.__mvTestBasicNamedObjectFixed);
        if (attr == null)
            return( ((List<TestBasicNamedObjectFixedDMO>) Collections.EMPTY_LIST).iterator() );
        else {
            ArrayList<TestBasicNamedObjectFixedDMO> list = new ArrayList<>();
            Iterator<DmcObject> it = attr.getMV();
            while(it.hasNext()) {
                list.add((TestBasicNamedObjectFixedDMO) it.next());
            }
            return(list.iterator());
        }
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:789)
    public DefinitionName getName(){
        DmcTypeDefinitionNameSV attr = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:829)
    public void setName(DefinitionName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:882)
    public void setName(Object value) throws DmcValueException {
        DmcTypeDefinitionNameSV attr  = (DmcTypeDefinitionNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeDefinitionNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:902)
    public void remName(){
         rem(MetaDMSAG.__name);
    }

    /**
     * @return An Iterator of TestBasicObjectFixedDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1124)
    public Iterator<TestBasicObjectFixedDMO> getPlainObjRef(){
        DmcTypeTestBasicObjectFixedREFMV attr = (DmcTypeTestBasicObjectFixedREFMV) get(DmtDMSAG.__plainObjRef);
        if (attr == null)
            return( ((List<TestBasicObjectFixedDMO>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another plainObjRef to the specified value.
     * @param value TestBasicObjectFixed
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1170)
    public DmcAttribute<?> addPlainObjRef(TestBasicObjectFixedDMO value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__plainObjRef);
        if (attr == null)
            attr = new DmcTypeTestBasicObjectFixedREFMV(DmtDMSAG.__plainObjRef);
        
        try{
            setLastValue(attr.add(value));
            add(DmtDMSAG.__plainObjRef,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another plainObjRef value.
     * @param value A value compatible with TestBasicObjectFixed
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1411)
    public DmcAttribute<?> addPlainObjRef(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmtDMSAG.__plainObjRef);
        if (attr == null)
            attr = new DmcTypeTestBasicObjectFixedREFMV(DmtDMSAG.__plainObjRef);
        
        setLastValue(attr.add(value));
        add(DmtDMSAG.__plainObjRef,attr);
        return(attr);
    }

    /**
     * Returns the number of values in plainObjRef
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1428)
    public int getPlainObjRefSize(){
        DmcAttribute<?> attr = get(DmtDMSAG.__plainObjRef);
        if (attr == null){
            if (DmtDMSAG.__plainObjRef.indexSize == 0)
                return(0);
            else
                return(DmtDMSAG.__plainObjRef.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a plainObjRef value.
     * @param value The TestBasicObjectFixed to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1450)
    public DmcAttribute<?> delPlainObjRef(Object value){
        DmcAttribute<?> attr = get(DmtDMSAG.__plainObjRef);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeTestBasicObjectFixedREFMV(DmtDMSAG.__plainObjRef), value);
        else
            attr = del(DmtDMSAG.__plainObjRef, value);
        
        return(attr);
    }

    /**
     * Removes the plainObjRef attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1521)
    public void remPlainObjRef(){
         rem(DmtDMSAG.__plainObjRef);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:660)
    public TestBasicObjectFixedDMO getSvUnnamedObj(){
        DmcTypeTestBasicObjectFixedREFSV attr = (DmcTypeTestBasicObjectFixedREFSV) get(DmtDMSAG.__svUnnamedObj);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets svUnnamedObj to the specified value.
     * @param value TestBasicObjectFixedDMO
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:714)
    public void setSvUnnamedObj(TestBasicObjectFixedDMO value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__svUnnamedObj);
        if (attr == null)
            attr = new DmcTypeTestBasicObjectFixedREFSV(DmtDMSAG.__svUnnamedObj);
        
        try{
            attr.set(value);
            set(DmtDMSAG.__svUnnamedObj,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets svUnnamedObj to the specified value.
     * @param value A value compatible with DmcTypeTestBasicObjectFixedREFSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:882)
    public void setSvUnnamedObj(Object value) throws DmcValueException {
        DmcTypeTestBasicObjectFixedREFSV attr  = (DmcTypeTestBasicObjectFixedREFSV) get(DmtDMSAG.__svUnnamedObj);
        if (attr == null)
            attr = new DmcTypeTestBasicObjectFixedREFSV(DmtDMSAG.__svUnnamedObj);
        
        attr.set(value);
        set(DmtDMSAG.__svUnnamedObj,attr);
    }

    /**
     * Removes the svUnnamedObj attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:902)
    public void remSvUnnamedObj(){
         rem(DmtDMSAG.__svUnnamedObj);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:789)
    public Boolean isSvBoolean(){
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(DmtDMSAG.__svBoolean);
        if (attr == null)
            return(false);

        return(attr.getSV());
    }

    /**
     * Sets svBoolean to the specified value.
     * @param value Boolean
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:829)
    public void setSvBoolean(Boolean value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__svBoolean);
        if (attr == null)
            attr = new DmcTypeBooleanSV(DmtDMSAG.__svBoolean);
        
        try{
            attr.set(value);
            set(DmtDMSAG.__svBoolean,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets svBoolean to the specified value.
     * @param value A value compatible with DmcTypeBooleanSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:882)
    public void setSvBoolean(Object value) throws DmcValueException {
        DmcTypeBooleanSV attr  = (DmcTypeBooleanSV) get(DmtDMSAG.__svBoolean);
        if (attr == null)
            attr = new DmcTypeBooleanSV(DmtDMSAG.__svBoolean);
        
        attr.set(value);
        set(DmtDMSAG.__svBoolean,attr);
    }

    /**
     * Removes the svBoolean attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:902)
    public void remSvBoolean(){
         rem(DmtDMSAG.__svBoolean);
    }

    // org.dmd.dms.util.GenUtility.formatSVObjectAccess(GenUtility.java:947)
    public TestBasicNamedObjectFixedDMO getSvTestBasicNamedObjectFixed(){
        DmcTypeDmcObjectSV attr = (DmcTypeDmcObjectSV) get(DmtDMSAG.__svTestBasicNamedObjectFixed);
        if (attr == null)
            return(null);

        return((TestBasicNamedObjectFixedDMO)attr.getSV());
    }

    // org.dmd.dms.util.GenUtility.formatSVObjectAccess(GenUtility.java:963)
    /**
     * Sets svTestBasicNamedObjectFixed to the specified value.
     * @param value A value compatible with DmcTypeDmcObjectSV
     */
    // org.dmd.dms.util.GenUtility.formatSVObjectAccess(GenUtility.java:968)
    public void setSvTestBasicNamedObjectFixed(TestBasicNamedObjectFixedDMO value){
        DmcTypeDmcObjectSV attr  = (DmcTypeDmcObjectSV) get(DmtDMSAG.__svTestBasicNamedObjectFixed);
        if (attr == null)
            attr = new DmcTypeDmcObjectSV(DmtDMSAG.__svTestBasicNamedObjectFixed);
        
        try {
            attr.set(value);
            set(DmtDMSAG.__svTestBasicNamedObjectFixed,attr);
        } catch (DmcValueException e) {
            throw(new IllegalStateException("This setSvTestBasicNamedObjectFixed() call should never throw an exception", e));
        }
    }

    // org.dmd.dms.util.GenUtility.formatSVObjectAccess(GenUtility.java:984)
    /**
     * Removes the svTestBasicNamedObjectFixed attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSVObjectAccess(GenUtility.java:988)
    public void remSvTestBasicNamedObjectFixed(){
         rem(DmtDMSAG.__svTestBasicNamedObjectFixed);
    }


    @Override
    public void checkParams() throws DmcValueExceptionSet {
        DmcValueExceptionSet ex = null;

        if (get(DmtDMSAG.__svBoolean) == null){
            if (ex == null)
                ex = new DmcValueExceptionSet();
            ex.add(new DmcValueException("TestActionATI - missing mandatory parameter: svBoolean"));
        }
        if (get(DmtDMSAG.__svTestBasicNamedObjectFixed) == null){
            if (ex == null)
                ex = new DmcValueExceptionSet();
            ex.add(new DmcValueException("TestActionATI - missing mandatory parameter: svTestBasicNamedObjectFixed"));
        }
        if (ex != null)
            throw(ex);
  }

    @Override
    public boolean isInstanceOf(DmcObject object) {
        if (object instanceof TestActionATI)
            return(true);
        return(false);
    }

}
