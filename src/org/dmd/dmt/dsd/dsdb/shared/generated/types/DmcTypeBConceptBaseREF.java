package org.dmd.dmt.dsd.dsdb.shared.generated.types;

import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.DmcOutputStreamIF;
import org.dmd.dmc.DmcInputStreamIF;
import org.dmd.dmc.types.DmcTypeNamedObjectREF;
import org.dmd.dmc.types.DefinitionName;

import org.dmd.dmt.dsd.dsdb.shared.generated.types.BConceptBaseREF;

import org.dmd.dmt.dsd.dsdb.shared.generated.dmo.BConceptBaseDMO;

/**
 * This is the generated DmcAttribute derivative for values of type BConceptBase
 * <P>
 * Generated from the dsdB schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoTypeFormatter.dumpNamedREFHelperType(DmoTypeFormatter.java:585)
 */
@SuppressWarnings("serial")
abstract public class DmcTypeBConceptBaseREF extends DmcTypeNamedObjectREF<BConceptBaseREF, DefinitionName> {

    public DmcTypeBConceptBaseREF(){
    
    }

    public DmcTypeBConceptBaseREF(DmcAttributeInfo ai){
        super(ai);
    }

    @Override
    protected BConceptBaseREF getNewHelper(){
        return(new BConceptBaseREF());
    }

    @Override
    protected DefinitionName getNewName(){
        return(new DefinitionName());
    }

    @Override
    protected String getDMOClassName(){
        return( BConceptBaseDMO.class.getName());
    }

    @Override
    protected boolean isDMO(Object value){
        if (value instanceof BConceptBaseDMO)
            return(true);
        return(false);
    }

    @Override
    protected BConceptBaseREF typeCheck(Object value) throws DmcValueException {
        BConceptBaseREF rc = null;

        if (value instanceof BConceptBaseREF)
            rc = (BConceptBaseREF)value;
        else if (value instanceof BConceptBaseDMO)
            rc = new BConceptBaseREF((BConceptBaseDMO)value);
        else if (value instanceof DefinitionName)
            rc = new BConceptBaseREF((DefinitionName)value);
        else if (value instanceof String)
            rc = new BConceptBaseREF((String)value);
        else
            throw(new DmcValueException("Object of class: " + value.getClass().getName() + " passed where object compatible with BConceptBaseREF, BConceptBaseDMO or String expected."));

        return(rc);
    }

    @Override
    public void serializeValue(DmcOutputStreamIF dos, BConceptBaseREF value) throws Exception {
        value.serializeIt(dos);
    }

    @Override
    public BConceptBaseREF deserializeValue(DmcInputStreamIF dis) throws Exception {
        BConceptBaseREF rc = new BConceptBaseREF();
        rc.deserializeIt(dis);
        return(rc);
    }

    @Override
    public BConceptBaseREF cloneValue(BConceptBaseREF value){
        return(new BConceptBaseREF(value));
    }



}
