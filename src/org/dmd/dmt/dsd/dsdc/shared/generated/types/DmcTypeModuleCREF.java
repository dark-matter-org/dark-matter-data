package org.dmd.dmt.dsd.dsdc.shared.generated.types;

import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.DmcOutputStreamIF;
import org.dmd.dmc.DmcInputStreamIF;
import org.dmd.dmc.types.DmcTypeNamedObjectREF;
import org.dmd.dmc.types.DefinitionName;

import org.dmd.dmt.dsd.dsdc.shared.generated.types.ModuleCREF;

import org.dmd.dmt.dsd.dsdc.shared.generated.dmo.ModuleCDMO;

/**
 * This is the generated DmcAttribute derivative for values of type ModuleC
 * <P>
 * Generated from the dsdC schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoTypeFormatter.dumpNamedREFHelperType(DmoTypeFormatter.java:585)
 */
@SuppressWarnings("serial")
abstract public class DmcTypeModuleCREF extends DmcTypeNamedObjectREF<ModuleCREF, DefinitionName> {

    public DmcTypeModuleCREF(){
    
    }

    public DmcTypeModuleCREF(DmcAttributeInfo ai){
        super(ai);
    }

    @Override
    protected ModuleCREF getNewHelper(){
        return(new ModuleCREF());
    }

    @Override
    protected DefinitionName getNewName(){
        return(new DefinitionName());
    }

    @Override
    protected String getDMOClassName(){
        return( ModuleCDMO.class.getName());
    }

    @Override
    protected boolean isDMO(Object value){
        if (value instanceof ModuleCDMO)
            return(true);
        return(false);
    }

    @Override
    protected ModuleCREF typeCheck(Object value) throws DmcValueException {
        ModuleCREF rc = null;

        if (value instanceof ModuleCREF)
            rc = (ModuleCREF)value;
        else if (value instanceof ModuleCDMO)
            rc = new ModuleCREF((ModuleCDMO)value);
        else if (value instanceof DefinitionName)
            rc = new ModuleCREF((DefinitionName)value);
        else if (value instanceof String)
            rc = new ModuleCREF((String)value);
        else
            throw(new DmcValueException("Object of class: " + value.getClass().getName() + " passed where object compatible with ModuleCREF, ModuleCDMO or String expected."));

        return(rc);
    }

    @Override
    public void serializeValue(DmcOutputStreamIF dos, ModuleCREF value) throws Exception {
        value.serializeIt(dos);
    }

    @Override
    public ModuleCREF deserializeValue(DmcInputStreamIF dis) throws Exception {
        ModuleCREF rc = new ModuleCREF();
        rc.deserializeIt(dis);
        return(rc);
    }

    @Override
    public ModuleCREF cloneValue(ModuleCREF value){
        return(new ModuleCREF(value));
    }



}
