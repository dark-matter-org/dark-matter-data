//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2013 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmt.dsd.dsdc.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import org.dmd.dmc.*;                                                     // If any attributes - (BaseDMWGenerator.java:975)
import org.dmd.dmc.definitions.DmcDefinitionIF;                           // The object is a domain specific definition - (BaseDMWGenerator.java:411)
import org.dmd.dmc.types.DefinitionName;                                  // Is named by - (BaseDMWGenerator.java:939)
import org.dmd.dmc.types.DotName;                                         // Primitive type - (BaseDMWGenerator.java:1038)
import org.dmd.dms.ClassDefinition;                                       // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:944)
import org.dmd.dms.DSDefinition;                                          // Derived class - (BaseDMWGenerator.java:1136)
import org.dmd.dmt.dsd.dsdc.server.extended.CConceptBase;                 // Required for getModificationRecorder() - (BaseDMWGenerator.java:953)
import org.dmd.dmt.dsd.dsdc.server.extended.ModuleC;                      // Is reference type - (BaseDMWGenerator.java:995)
import org.dmd.dmt.dsd.dsdc.shared.generated.dmo.CConceptBaseDMO;         // Abstract class - (BaseDMWGenerator.java:1118)
import org.dmd.dmt.dsd.dsdc.shared.generated.types.ModuleCREF;            // Is reference type REF - (BaseDMWGenerator.java:1003)



/**
 * The base definition for this DSD module.
 * <P>
 * Generated from the dsdC schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:488)
 */
abstract public class CConceptBaseDMW extends DSDefinition implements DmcDefinitionIF, DmcNamedObjectIF {

    protected CConceptBaseDMW() {
        super();
    }

    abstract public CConceptBase getModificationRecorder();

    public CConceptBaseDMO getDMO() {
        return((CConceptBaseDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:661)
    protected CConceptBaseDMW(CConceptBaseDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1185)
    public DefinitionName getObjectName(){
        return(((CConceptBaseDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((CConceptBaseDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof CConceptBaseDMW){
            return( getObjectName().equals( ((CConceptBaseDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return A ModuleC object.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1322)
    public ModuleC getDefinedInModuleC(){
        ModuleCREF ref = ((CConceptBaseDMO) core).getDefinedInModuleC();
        if (ref == null)
            return(null);
        
        if (ref.getObject() == null)
            return(null);
        
        return((ModuleC)ref.getObject().getContainer());
    }

    /**
     * Sets the definedInModuleC to the specified value.
     * @param value A value compatible with ModuleCREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1407)
    public void setDefinedInModuleC(ModuleC value) {
        ((CConceptBaseDMO) core).setDefinedInModuleC(value.getDMO());
    }

    /**
     * Sets the definedInModuleC to the specified value.
     * @param value A value compatible with ModuleCREF
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1416)
    public void setDefinedInModuleC(Object value) throws DmcValueException {
        ((CConceptBaseDMO) core).setDefinedInModuleC(value);
    }

    /**
     * Removes the definedInModuleC attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1507)
    public void remDefinedInModuleC(){
        ((CConceptBaseDMO) core).remDefinedInModuleC();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1362)
    public DotName getDotName(){
        return(((CConceptBaseDMO) core).getDotName());
    }

    /**
     * Sets dotName to the specified value.
     * @param value A value compatible with DmcTypeDotName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1472)
    public void setDotName(Object value) throws DmcValueException {
        ((CConceptBaseDMO) core).setDotName(value);
    }

    /**
     * Sets dotName to the specified value.
     * @param value DotName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1481)
    public void setDotName(DotName value){
        ((CConceptBaseDMO) core).setDotName(value);
    }

    /**
     * Removes the dotName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1507)
    public void remDotName(){
        ((CConceptBaseDMO) core).remDotName();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1362)
    public DefinitionName getName(){
        return(((CConceptBaseDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1472)
    public void setName(Object value) throws DmcValueException {
        ((CConceptBaseDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1481)
    public void setName(DefinitionName value){
        ((CConceptBaseDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1507)
    public void remName(){
        ((CConceptBaseDMO) core).remName();
    }


}
