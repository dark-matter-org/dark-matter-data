package org.dmd.dmt.dsd.dsda.server.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import org.dmd.dmc.*;                                                        // If any attributes - (BaseDMWGenerator.java:977)
import org.dmd.dmc.definitions.DmcDefinitionIF;                              // The object is a domain specific definition - (BaseDMWGenerator.java:411)
import org.dmd.dmc.types.DefinitionName;                                     // Is named by - (BaseDMWGenerator.java:939)
import org.dmd.dms.ClassDefinition;                                          // Passing derived class def up the hierarchy - (BaseDMWGenerator.java:944)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                  // Required for MODREC constructor - (BaseDMWGenerator.java:949)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                        // Required for MODREC constructor - (BaseDMWGenerator.java:948)
import org.dmd.dmt.dsd.dsda.server.extended.ABConceptX;                      // Required for getModificationRecorder() - (BaseDMWGenerator.java:953)
import org.dmd.dmt.dsd.dsda.server.extended.AConceptX;                       // Derived class - (BaseDMWGenerator.java:1138)
import org.dmd.dmt.dsd.dsda.shared.generated.dmo.ABConceptXDMO;              // Class not auxiliary or abstract - (BaseDMWGenerator.java:1142)
import org.dmd.dmt.dsd.dsda.shared.generated.types.ModuleAREF;               // Required to access defined in module name - (DMWGenerator.java:184)
import org.dmd.dmt.dsd.dsda.shared.generated.types.Reference;                // Primitive type - (BaseDMWGenerator.java:1040)
import org.dmd.dmt.dsd.dsda.shared.generated.types.TypeAndAttribute;         // Primitive type - (BaseDMWGenerator.java:1040)



/**
 * <P>
 * Generated from the dsdA schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:488)
 */
abstract public class ABConceptXDMW extends AConceptX implements DmcDefinitionIF, DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:577)
    public ABConceptXDMW() {
        super(new ABConceptXDMO(), org.dmd.dmt.dsd.dsda.server.generated.DsdASchemaAG._ABConceptX);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:583)
    public ABConceptXDMW(DmcTypeModifierMV mods) {
        super(new ABConceptXDMO(mods), org.dmd.dmt.dsd.dsda.server.generated.DsdASchemaAG._ABConceptX);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:625)
    public ABConceptX getModificationRecorder(){
        ABConceptX rc = new ABConceptX();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:646)
    public ABConceptXDMW(ABConceptXDMO obj) {
        super(obj, org.dmd.dmt.dsd.dsda.server.generated.DsdASchemaAG._ABConceptX);
    }

    public ABConceptX cloneIt() {
        ABConceptX rc = new ABConceptX();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public ABConceptXDMO getDMO() {
        return((ABConceptXDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:661)
    protected ABConceptXDMW(ABConceptXDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.getAccessFunctions(BaseDMWGenerator.java:1187)
    public DefinitionName getObjectName(){
        return(((ABConceptXDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ABConceptXDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ABConceptXDMW){
            return( getObjectName().equals( ((ABConceptXDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public DefinitionName getName(){
        return(((ABConceptXDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeDefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1475)
    public void setName(Object value) throws DmcValueException {
        ((ABConceptXDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value DefinitionName
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1484)
    public void setName(DefinitionName value){
        ((ABConceptXDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1510)
    public void remName(){
        ((ABConceptXDMO) core).remName();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public Reference getReferenceToAB(){
        return(((ABConceptXDMO) core).getReferenceToAB());
    }

    /**
     * Sets referenceToAB to the specified value.
     * @param value A value compatible with DmcTypeReference
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1475)
    public void setReferenceToAB(Object value) throws DmcValueException {
        ((ABConceptXDMO) core).setReferenceToAB(value);
    }

    /**
     * Sets referenceToAB to the specified value.
     * @param value Reference
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1484)
    public void setReferenceToAB(Reference value){
        ((ABConceptXDMO) core).setReferenceToAB(value);
    }

    /**
     * Removes the referenceToAB attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1510)
    public void remReferenceToAB(){
        ((ABConceptXDMO) core).remReferenceToAB();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1364)
    public TypeAndAttribute getTypeAndAttr(){
        return(((ABConceptXDMO) core).getTypeAndAttr());
    }

    /**
     * Sets typeAndAttr to the specified value.
     * @param value A value compatible with DmcTypeTypeAndAttribute
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1475)
    public void setTypeAndAttr(Object value) throws DmcValueException {
        ((ABConceptXDMO) core).setTypeAndAttr(value);
    }

    /**
     * Sets typeAndAttr to the specified value.
     * @param value TypeAndAttribute
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1484)
    public void setTypeAndAttr(TypeAndAttribute value){
        ((ABConceptXDMO) core).setTypeAndAttr(value);
    }

    /**
     * Removes the typeAndAttr attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1510)
    public void remTypeAndAttr(){
        ((ABConceptXDMO) core).remTypeAndAttr();
    }

    // Generated from: org.dmd.dmg.generators.DMWGenerator.dumpAdditionalWrapperFunctions(DMWGenerator.java:237)
    /**
     * This method indicates the name of the module from which this definition was loaded.
     */
    @Override
    public String getNameOfModuleWhereThisCameFrom(){
        ModuleAREF ref = ((ABConceptXDMO) core).getDefinedInModuleA();
        return(ref.getName().getNameString());
    }


}
