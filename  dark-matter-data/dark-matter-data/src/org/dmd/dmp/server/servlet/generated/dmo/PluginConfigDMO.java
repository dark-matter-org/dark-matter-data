//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmp.server.servlet.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:286)
import java.io.Serializable;                                       // Always required
import java.util.*;                                                // Always required
import org.dmd.dmc.DmcAttribute;                                   // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                               // Always required
import org.dmd.dmc.DmcNamedObjectIF;                               // Named object
import org.dmd.dmc.DmcObject;                                      // Structural class
import org.dmd.dmc.DmcSliceInfo;                                   // Required for object slicing
import org.dmd.dmc.DmcValueException;                              // Any attributes
import org.dmd.dmc.types.CamelCaseName;                            // Naming attribute type
import org.dmd.dms.generated.enums.DataTypeEnum;                   // Required if we have any attributes
import org.dmd.dms.generated.enums.ValueTypeEnum;                  // Required if we have any attributes
import org.dmd.dms.generated.types.DmcTypeBooleanSV;               // Required type
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;         // Required type
import org.dmd.dms.generated.types.DmcTypeIntegerSV;               // Required type
import org.dmd.dms.generated.types.DmcTypeModifierMV;              // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeStringSV;                // Required type

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The PluginConfig is used to specify a plugin to be loaded into the DMP
 * Servlet Reference Implementation servlet.
 * <P>
 * Generated from the dmp.server schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:132)
 */
@SuppressWarnings("serial")
public class PluginConfigDMO  extends DmcObject  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "PluginConfig";

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __camelCaseName = new DmcAttributeInfo("camelCaseName",116,"CamelCaseName",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __description = new DmcAttributeInfo("description",18,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __file = new DmcAttributeInfo("file",74,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __lineNumber = new DmcAttributeInfo("lineNumber",75,"Integer",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __pluginClass = new DmcAttributeInfo("pluginClass",703,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __pluginName = new DmcAttributeInfo("pluginName",701,"CamelCaseName",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __runnable = new DmcAttributeInfo("runnable",709,"Boolean",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __startOrder = new DmcAttributeInfo("startOrder",702,"Integer",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__camelCaseName.id,__camelCaseName);
        _ImAp.put(__description.id,__description);
        _ImAp.put(__file.id,__file);
        _ImAp.put(__lineNumber.id,__lineNumber);
        _ImAp.put(__pluginClass.id,__pluginClass);
        _ImAp.put(__pluginName.id,__pluginName);
        _ImAp.put(__runnable.id,__runnable);
        _ImAp.put(__startOrder.id,__startOrder);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__camelCaseName.name,__camelCaseName);
        _SmAp.put(__description.name,__description);
        _SmAp.put(__file.name,__file);
        _SmAp.put(__lineNumber.name,__lineNumber);
        _SmAp.put(__pluginClass.name,__pluginClass);
        _SmAp.put(__pluginName.name,__pluginName);
        _SmAp.put(__runnable.name,__runnable);
        _SmAp.put(__startOrder.name,__startOrder);

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public PluginConfigDMO() {
        super("PluginConfig");
    }

    protected PluginConfigDMO(String oc) {
        super(oc);
    }

    @Override
    public boolean supportsBackrefTracking(){
        return(false);
    }

    public Map<Integer,DmcAttributeInfo> getIdToAttrInfo(){
        return(_ImAp);
    }

    public Map<String,DmcAttributeInfo> getStringToAttrInfo(){
        return(_SmAp);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public PluginConfigDMO getNew(){
        PluginConfigDMO rc = new PluginConfigDMO();
        return(rc);
    }

    @Override
    public PluginConfigDMO getSlice(DmcSliceInfo info){
        PluginConfigDMO rc = new PluginConfigDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public PluginConfigDMO(DmcTypeModifierMV mods) {
        super("PluginConfig");
        modrec(true);
        setModifier(mods);
    }

    public PluginConfigDMO getModificationRecorder(){
        PluginConfigDMO rc = new PluginConfigDMO();
        rc.setCamelCaseName(getCamelCaseName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:738)
    public CamelCaseName getObjectName(){
        DmcAttribute<?> name = get(__camelCaseName);
        if (name != null)
            return((CamelCaseName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(__camelCaseName);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof PluginConfigDMO){
            return( getObjectName().equals( ((PluginConfigDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public Integer getStartOrder(){
        DmcTypeIntegerSV attr = (DmcTypeIntegerSV) get(__startOrder);
        if (attr == null)
            return(5);

        return(attr.getSV());
    }

    /**
     * Sets startOrder to the specified value.
     * @param value Integer
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setStartOrder(Integer value) {
        DmcAttribute<?> attr = get(__startOrder);
        if (attr == null)
            attr = new DmcTypeIntegerSV(__startOrder);
        
        try{
            attr.set(value);
            set(__startOrder,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets startOrder to the specified value.
     * @param value A value compatible with DmcTypeIntegerSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setStartOrder(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__startOrder);
        if (attr == null)
            attr = new DmcTypeIntegerSV(__startOrder);
        
        attr.set(value);
        set(__startOrder,attr);
    }

    /**
     * Removes the startOrder attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remStartOrder(){
         rem(__startOrder);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public Boolean isRunnable(){
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(__runnable);
        if (attr == null)
            return(false);

        return(attr.getSV());
    }

    /**
     * Sets runnable to the specified value.
     * @param value Boolean
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setRunnable(Boolean value) {
        DmcAttribute<?> attr = get(__runnable);
        if (attr == null)
            attr = new DmcTypeBooleanSV(__runnable);
        
        try{
            attr.set(value);
            set(__runnable,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets runnable to the specified value.
     * @param value A value compatible with DmcTypeBooleanSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setRunnable(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__runnable);
        if (attr == null)
            attr = new DmcTypeBooleanSV(__runnable);
        
        attr.set(value);
        set(__runnable,attr);
    }

    /**
     * Removes the runnable attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remRunnable(){
         rem(__runnable);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public String getDescription(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(__description);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets description to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setDescription(String value) {
        DmcAttribute<?> attr = get(__description);
        if (attr == null)
            attr = new DmcTypeStringSV(__description);
        
        try{
            attr.set(value);
            set(__description,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setDescription(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__description);
        if (attr == null)
            attr = new DmcTypeStringSV(__description);
        
        attr.set(value);
        set(__description,attr);
    }

    /**
     * Removes the description attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remDescription(){
         rem(__description);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public Integer getLineNumber(){
        DmcTypeIntegerSV attr = (DmcTypeIntegerSV) get(__lineNumber);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets lineNumber to the specified value.
     * @param value Integer
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setLineNumber(Integer value) {
        DmcAttribute<?> attr = get(__lineNumber);
        if (attr == null)
            attr = new DmcTypeIntegerSV(__lineNumber);
        
        try{
            attr.set(value);
            set(__lineNumber,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets lineNumber to the specified value.
     * @param value A value compatible with DmcTypeIntegerSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setLineNumber(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__lineNumber);
        if (attr == null)
            attr = new DmcTypeIntegerSV(__lineNumber);
        
        attr.set(value);
        set(__lineNumber,attr);
    }

    /**
     * Removes the lineNumber attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remLineNumber(){
         rem(__lineNumber);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public String getFile(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(__file);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets file to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setFile(String value) {
        DmcAttribute<?> attr = get(__file);
        if (attr == null)
            attr = new DmcTypeStringSV(__file);
        
        try{
            attr.set(value);
            set(__file,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets file to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setFile(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__file);
        if (attr == null)
            attr = new DmcTypeStringSV(__file);
        
        attr.set(value);
        set(__file,attr);
    }

    /**
     * Removes the file attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remFile(){
         rem(__file);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public CamelCaseName getCamelCaseName(){
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(__camelCaseName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets camelCaseName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setCamelCaseName(CamelCaseName value) {
        DmcAttribute<?> attr = get(__camelCaseName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__camelCaseName);
        
        try{
            attr.set(value);
            set(__camelCaseName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets camelCaseName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setCamelCaseName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__camelCaseName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__camelCaseName);
        
        attr.set(value);
        set(__camelCaseName,attr);
    }

    /**
     * Removes the camelCaseName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remCamelCaseName(){
         rem(__camelCaseName);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public CamelCaseName getPluginName(){
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(__pluginName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets pluginName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setPluginName(CamelCaseName value) {
        DmcAttribute<?> attr = get(__pluginName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__pluginName);
        
        try{
            attr.set(value);
            set(__pluginName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets pluginName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setPluginName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__pluginName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__pluginName);
        
        attr.set(value);
        set(__pluginName,attr);
    }

    /**
     * Removes the pluginName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remPluginName(){
         rem(__pluginName);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:589)
    public String getPluginClass(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(__pluginClass);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets pluginClass to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:626)
    public void setPluginClass(String value) {
        DmcAttribute<?> attr = get(__pluginClass);
        if (attr == null)
            attr = new DmcTypeStringSV(__pluginClass);
        
        try{
            attr.set(value);
            set(__pluginClass,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets pluginClass to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:674)
    public void setPluginClass(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__pluginClass);
        if (attr == null)
            attr = new DmcTypeStringSV(__pluginClass);
        
        attr.set(value);
        set(__pluginClass,attr);
    }

    /**
     * Removes the pluginClass attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:689)
    public void remPluginClass(){
         rem(__pluginClass);
    }




}
