package org.dmd.dmp.server.servlet.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import java.util.ArrayList;                                               // To support getMVCopy()
import java.util.Iterator;                                                // To support getMVCopy()
import org.dmd.dmc.*;                                                     // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                   // Primitive type
import org.dmd.dmp.server.servlet.extended.ServletPlugin;                 // Required for getModificationRecorder()
import org.dmd.dmp.server.servlet.generated.dmo.ServletPluginDMO;         // Class not auxiliary or abstract
import org.dmd.dms.*;                                                     // Always 2
import org.dmd.dms.generated.dmw.StringIterableDMW;                       // For multi-valued String
import org.dmd.dms.generated.types.DmcTypeModifierMV;                     // Required for MODREC constructor

/**
 * The ServletPlugin is used to specify a plugin to be loaded into the DMP
 * Servlet Reference Implementation servlet.
 * <P>
 * Generated from the dmp.server schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
public class ServletPluginDMW extends DmwWrapper implements DmcNamedObjectIF {

    public ServletPluginDMW() {
        super(new ServletPluginDMO(), org.dmd.dmp.server.servlet.generated.DmpServerSchemaAG._ServletPlugin);
    }

    public ServletPluginDMW(DmcTypeModifierMV mods) {
        super(new ServletPluginDMO(mods), org.dmd.dmp.server.servlet.generated.DmpServerSchemaAG._ServletPlugin);
    }

    public ServletPlugin getModificationRecorder(){
        ServletPlugin rc = new ServletPlugin();
        rc.setPluginName(getPluginName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public ServletPluginDMW(ServletPluginDMO obj) {
        super(obj, org.dmd.dmp.server.servlet.generated.DmpServerSchemaAG._ServletPlugin);
    }

    public ServletPluginDMO getDMO() {
        return((ServletPluginDMO) core);
    }

    protected ServletPluginDMW(ServletPluginDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((ServletPluginDMO) core).getPluginName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ServletPluginDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ServletPluginDMW){
            return( getObjectName().equals( ((ServletPluginDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getDependsOnSchemaSize(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnSchema);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getDependsOnSchemaIsEmpty(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnSchema);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getDependsOnSchemaHasValue(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnSchema);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public StringIterableDMW getDependsOnSchemaIterable(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnSchema);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ServletPluginDMO) core).getDependsOnSchema()));
    }

    /**
     * Adds another dependsOnSchema value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addDependsOnSchema(Object value) throws DmcValueException {
        ((ServletPluginDMO) core).addDependsOnSchema(value);
    }

    /**
     * Adds another dependsOnSchema value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addDependsOnSchema(String value){
        ((ServletPluginDMO) core).addDependsOnSchema(value);
    }

    /**
     * Returns true if the collection contains the dependsOnSchema value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean dependsOnSchemaContains(String value){
        return(((ServletPluginDMO) core).dependsOnSchemaContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getDependsOnSchemaCopy(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnSchema);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a dependsOnSchema value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delDependsOnSchema(Object value) throws DmcValueException {
        ((ServletPluginDMO) core).delDependsOnSchema(value);
    }

    /**
     * Deletes a dependsOnSchema value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delDependsOnSchema(String value){
        ((ServletPluginDMO) core).delDependsOnSchema(value);
    }

    /**
     * Removes the dependsOnSchema attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remDependsOnSchema(){
        ((ServletPluginDMO) core).remDependsOnSchema();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getDependsOnPluginSize(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnPlugin);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getDependsOnPluginIsEmpty(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnPlugin);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getDependsOnPluginHasValue(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnPlugin);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public StringIterableDMW getDependsOnPluginIterable(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnPlugin);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ServletPluginDMO) core).getDependsOnPlugin()));
    }

    /**
     * Adds another dependsOnPlugin value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addDependsOnPlugin(Object value) throws DmcValueException {
        ((ServletPluginDMO) core).addDependsOnPlugin(value);
    }

    /**
     * Adds another dependsOnPlugin value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addDependsOnPlugin(String value){
        ((ServletPluginDMO) core).addDependsOnPlugin(value);
    }

    /**
     * Returns true if the collection contains the dependsOnPlugin value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean dependsOnPluginContains(String value){
        return(((ServletPluginDMO) core).dependsOnPluginContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getDependsOnPluginCopy(){
        DmcAttribute<?> attr = core.get(ServletPluginDMO.__dependsOnPlugin);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a dependsOnPlugin value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delDependsOnPlugin(Object value) throws DmcValueException {
        ((ServletPluginDMO) core).delDependsOnPlugin(value);
    }

    /**
     * Deletes a dependsOnPlugin value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delDependsOnPlugin(String value){
        ((ServletPluginDMO) core).delDependsOnPlugin(value);
    }

    /**
     * Removes the dependsOnPlugin attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remDependsOnPlugin(){
        ((ServletPluginDMO) core).remDependsOnPlugin();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getPluginName(){
        return(((ServletPluginDMO) core).getPluginName());
    }

    /**
     * Sets pluginName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setPluginName(Object value) throws DmcValueException {
        ((ServletPluginDMO) core).setPluginName(value);
    }

    /**
     * Sets pluginName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setPluginName(CamelCaseName value){
        ((ServletPluginDMO) core).setPluginName(value);
    }

    /**
     * Removes the pluginName attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remPluginName(){
        ((ServletPluginDMO) core).remPluginName();
    }


}
