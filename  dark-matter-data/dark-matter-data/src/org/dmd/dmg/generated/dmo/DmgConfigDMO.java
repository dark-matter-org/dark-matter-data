//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmg.generated.dmo;

import java.util.*;

import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmg.types.Generator;
import org.dmd.dmg.types.DmcTypeGenerator;
import org.dmd.dmc.types.DmcTypeString;

import org.dmd.dmc.DmcObject;

@SuppressWarnings("serial")
/**
 * The DmgConfig class is used to specify a set of schemas and a set of  code
 * generators to be run when you want to generate various types of code.
 * 
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:200)
 */
public class DmgConfigDMO  extends DmcObject  {

    public final static String _generator = "generator";
    public final static String _schemaToLoad = "schemaToLoad";

    public DmgConfigDMO() {
    }

    /**
     * @returns An Iterator of Generator objects.
     */
    public Iterator<Generator> getGenerator(){
        DmcTypeGenerator attr = (DmcTypeGenerator) get(_generator);
        if (attr == null)
            return(null);

        return(attr.getMV());
    }

    /**
     * Adds another generator value.
     * @param value A value compatible with Generator
     */
    @SuppressWarnings("unchecked")
    public void addGenerator(Object value) throws DmcValueException {
        DmcAttribute attr = get(_generator);
        if (attr == null)
            attr = new DmcTypeGenerator();
        
        attr.add(value);
        add(_generator,attr);
    }

    /**
     * Deletes a generator value.
     * @param value The Generator to be deleted from set of attribute values.
     */
    public void delGenerator(Object value){
        try{
            del(_generator, value);
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }

    /**
     * @returns An Iterator of String objects.
     */
    public Iterator<String> getSchemaToLoad(){
        DmcTypeString attr = (DmcTypeString) get(_schemaToLoad);
        if (attr == null)
            return(null);

        return(attr.getMV());
    }

    /**
     * Adds another schemaToLoad value.
     * @param value A value compatible with String
     */
    @SuppressWarnings("unchecked")
    public void addSchemaToLoad(Object value) throws DmcValueException {
        DmcAttribute attr = get(_schemaToLoad);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.add(value);
        add(_schemaToLoad,attr);
    }

    /**
     * Deletes a schemaToLoad value.
     * @param value The String to be deleted from set of attribute values.
     */
    public void delSchemaToLoad(Object value){
        try{
            del(_schemaToLoad, value);
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }




}
