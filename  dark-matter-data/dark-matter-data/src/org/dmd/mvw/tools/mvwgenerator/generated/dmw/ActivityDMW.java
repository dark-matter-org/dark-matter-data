package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import java.util.Iterator;                                                             // To support getMVCopy()
import java.util.TreeSet;                                                              // To support getMVCopy()
import org.dmd.dmc.*;                                                                  // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                                // Primitive type
import org.dmd.dms.*;                                                                  // Always 2
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                  // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.Activity;                               // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.extended.Component;                              // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.RunContextItem;                         // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ActivityDMO;                       // Class not auxiliary or abstract
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                 // For multi-valued containsRunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW;         // For multi-valued RunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF;               // To support getMVCopy() for REFs

/**
 * If you are making use of activities, you'll define an Activity for each of
 * them; all activities are derived from com.google.gwt.app.place.Activity.
 * If you have common functionality that you wish to use for your Activity
 * classes, implement it in a class derived from
 * com.google.gwt.app.place.Activity and specify that class in the
 * useBaseClass attribute of your defined Activity. <P> Activities are meant
 * to be short-lived, disposable entities that run in a particular Place.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class ActivityDMW extends Component implements DmcNamedObjectIF {

    public ActivityDMW() {
        super(new ActivityDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Activity);
    }

    public ActivityDMW(DmcTypeModifierMV mods) {
        super(new ActivityDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Activity);
    }

    public Activity getModificationRecorder(){
        Activity rc = new Activity();
        rc.setActivityName(getActivityName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public ActivityDMW(ActivityDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Activity);
    }

    public ActivityDMO getDMO() {
        return((ActivityDMO) core);
    }

    protected ActivityDMW(ActivityDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((ActivityDMO) core).getActivityName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ActivityDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ActivityDMW){
            return( getObjectName().equals( ((ActivityDMW) obj).getObjectName()) );
        }
        return(false);
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public String getUseBaseClass(){
        return(((ActivityDMO) core).getUseBaseClass());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setUseBaseClass(Object value) throws DmcValueException {
        ((ActivityDMO) core).setUseBaseClass(value);
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setUseBaseClass(String value){
        ((ActivityDMO) core).setUseBaseClass(value);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remUseBaseClass(){
        ((ActivityDMO) core).remUseBaseClass();
    }

    /**
     * @return The number of RunContextItem items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getUseRunContextItemSize(){
        DmcAttribute<?> attr = core.get(ActivityDMO.__useRunContextItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no RunContextItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getUseRunContextItemIsEmpty(){
        DmcAttribute<?> attr = core.get(ActivityDMO.__useRunContextItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any RunContextItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getUseRunContextItemHasValue(){
        DmcAttribute<?> attr = core.get(ActivityDMO.__useRunContextItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1229)
    public RunContextItemIterableDMW getUseRunContextItemIterable(){
        DmcAttribute attr = ((ActivityDMO) core).get(ActivityDMO.__useRunContextItem);
        if (attr == null)
            return(RunContextItemIterableDMW.emptyList);
        
        return(new RunContextItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another useRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public DmcAttribute<?> addUseRunContextItem(RunContextItem value){
        DmcAttribute<?> attr = ((ActivityDMO) core).addUseRunContextItem(((RunContextItemDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a useRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1258)
    public void delUseRunContextItem(RunContextItem value){
        ((ActivityDMO) core).delUseRunContextItem(value.getDMO());
    }

    /**
     * @return A COPY of the collection of RunContextItem objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1293)
    public TreeSet<RunContextItem> getUseRunContextItemCopy(){
        DmcAttribute<?> attr = ((ActivityDMO) core).get(ActivityDMO.__useRunContextItem);
        if (attr == null)
            return(new TreeSet<RunContextItem>());
        
        TreeSet<RunContextItem> rc = new TreeSet<RunContextItem>();
        
        RunContextItemIterableDMW it = getUseRunContextItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the useRunContextItem attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remUseRunContextItem(){
        ((ActivityDMO) core).remUseRunContextItem();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getActivityName(){
        return(((ActivityDMO) core).getActivityName());
    }

    /**
     * Sets activityName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setActivityName(Object value) throws DmcValueException {
        ((ActivityDMO) core).setActivityName(value);
    }

    /**
     * Sets activityName to the specified value.
     * @param value CamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setActivityName(CamelCaseName value){
        ((ActivityDMO) core).setActivityName(value);
    }

    /**
     * Removes the activityName attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remActivityName(){
        ((ActivityDMO) core).remActivityName();
    }


}
