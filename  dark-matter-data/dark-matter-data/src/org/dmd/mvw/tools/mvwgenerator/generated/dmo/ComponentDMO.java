//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2011 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.mvw.tools.mvwgenerator.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:323)
import java.io.Serializable;                                                               // Always required
import java.util.*;                                                                        // Always required
import org.dmd.dmc.DmcAttribute;                                                           // Any attributes
import org.dmd.dmc.DmcNamedObjectIF;                                                       // Named object
import org.dmd.dmc.DmcOmni;                                                                // Lazy resolution
import org.dmd.dmc.DmcValueException;                                                      // Any attributes
import org.dmd.dmc.types.CamelCaseName;                                                    // Naming attribute type
import org.dmd.dms.generated.dmo.MetaDMSAG;                                                // Attribute from meta schema
import org.dmd.dms.generated.dmo.SchemaDefinitionDMO;                                      // Type specific set/add
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;                                 // Required type
import org.dmd.dms.generated.types.DmcTypeSchemaDefinitionREFMV;                           // Reference type
import org.dmd.dms.generated.types.DmcTypeStringSV;                                        // Required type
import org.dmd.dms.generated.types.SchemaDefinitionREF;                                    // Helper class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.EventDMO;                              // Type specific set/add
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDefinitionDMO;                      // Base class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                     // Type specific set/add
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;                               // Type specific set/add
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeEventREFMAP;                  // Reference type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeGetWithOptionsMV;             // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeRequestWithOptionsMV;         // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeRunContextItemREFSET;         // Reference type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeViewREFMV;                    // Reference type
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventREF;                            // Helper class
import org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF;                   // Helper class
import org.dmd.mvw.tools.mvwgenerator.generated.types.ViewREF;                             // Helper class
import org.dmd.mvw.tools.mvwgenerator.types.GetWithOptions;                                // Primitive type and !auxiliary class
import org.dmd.mvw.tools.mvwgenerator.types.RequestWithOptions;                            // Primitive type and !auxiliary class

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The Component is an abstract base for classes that define the building
 * blocks of Applications. The primary feature of an Component is that it
 * fires and/or handles events. Beyond that, a component can be whatever you
 * require it to be. A variety of derived component types provide more
 * focussed behavioural units. <p /> Many of the classes generated by MVW
 * must be extended in order to provide the actual behaviour of your
 * application e.g. Controllers, Views, Presenters etc. Activities must also
 * be extended to provide your behaviour, however, Activities are also
 * referred to by generated code and must be in a known location. By default,
 * the classes that extend the generated activity class will reside in the
 * 'extended' package that lies beneath the genPackage specified for your
 * module i.e. if your gen package is com.mine, then the  derived activity
 * classes are expected to be in com.mine.extended. If you want to place
 * these classes in a subpackage beneath extended, use the subpackage
 * attribute to indicate the package name e.g. if subpackage is defined as
 * 'activities', your activity implementation class will be expected to
 * reside in com.mine.extended.activities.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:134)
 */
@SuppressWarnings("serial")
abstract public class ComponentDMO  extends MvwDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "Component";

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public ComponentDMO() {
        super("Component");
    }

    protected ComponentDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:736)
    public CamelCaseName getObjectName(){
        DmcAttribute<?> name = get(MvwDMSAG.__componentName);
        if (name != null)
            return((CamelCaseName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MvwDMSAG.__componentName);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof ComponentDMO){
            return( getObjectName().equals( ((ComponentDMO) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return An Iterator of EventDMO objects.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1214)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getFiresEvent(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of EventREFs without attempting lazy resolution (if it's turned on).
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1244)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getFiresEventREFs(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * @param key The key of the value you want.
     * @return The Event associated with the specified key.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1278)
    public EventREF getFiresEvent(Object key){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(null);

        return(attr.getByKey(key));
    }

    /**
     * Adds another firesEvent value.
     * @param value A value compatible with Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1309)
    public DmcAttribute<?> addFiresEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__firesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(MvwDMSAG.__firesEvent);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__firesEvent,attr);
        return(attr);
    }

    /**
     * Adds another firesEvent value.
     * @param value Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1325)
    public DmcAttribute<?> addFiresEvent(EventDMO value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__firesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(MvwDMSAG.__firesEvent);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__firesEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Deletes a firesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delFiresEvent(Object value) throws DmcValueException {
        return(del(MvwDMSAG.__firesEvent, value));
    }

    /**
     * Deletes a firesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delFiresEvent(EventDMO value){
        DmcAttribute<?> rc = null;
        rc = del(MvwDMSAG.__firesEvent, value);
        return(rc);
    }

    /**
     * Removes the firesEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1475)
    public void remFiresEvent(){
         rem(MvwDMSAG.__firesEvent);
    }

    /**
     * @return An Iterator of EventDMO objects.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1214)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getHandlesEvent(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of EventREFs without attempting lazy resolution (if it's turned on).
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1244)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getHandlesEventREFs(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * @param key The key of the value you want.
     * @return The Event associated with the specified key.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1278)
    public EventREF getHandlesEvent(Object key){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(null);

        return(attr.getByKey(key));
    }

    /**
     * Adds another handlesEvent value.
     * @param value A value compatible with Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1309)
    public DmcAttribute<?> addHandlesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(MvwDMSAG.__handlesEvent);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__handlesEvent,attr);
        return(attr);
    }

    /**
     * Adds another handlesEvent value.
     * @param value Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1325)
    public DmcAttribute<?> addHandlesEvent(EventDMO value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(MvwDMSAG.__handlesEvent);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__handlesEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delHandlesEvent(Object value) throws DmcValueException {
        return(del(MvwDMSAG.__handlesEvent, value));
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delHandlesEvent(EventDMO value){
        DmcAttribute<?> rc = null;
        rc = del(MvwDMSAG.__handlesEvent, value);
        return(rc);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1475)
    public void remHandlesEvent(){
         rem(MvwDMSAG.__handlesEvent);
    }

    /**
     * @return An Iterator of SchemaDefinitionDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:812)
    public Iterator<SchemaDefinitionREF> getUseSchema(){
        DmcTypeSchemaDefinitionREFMV attr = (DmcTypeSchemaDefinitionREFMV) get(MvwDMSAG.__useSchema);
        if (attr == null)
            return( ((List<SchemaDefinitionREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<SchemaDefinitionREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of SchemaDefinitionREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:832)
    public Iterator<SchemaDefinitionREF> getUseSchemaREFs(){
        DmcTypeSchemaDefinitionREFMV attr = (DmcTypeSchemaDefinitionREFMV) get(MvwDMSAG.__useSchema);
        if (attr == null)
            return( ((List<SchemaDefinitionREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another useSchema to the specified value.
     * @param value SchemaDefinition
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:846)
    public DmcAttribute<?> addUseSchema(SchemaDefinitionDMO value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__useSchema);
        if (attr == null)
            attr = new DmcTypeSchemaDefinitionREFMV(MvwDMSAG.__useSchema);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__useSchema,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another useSchema value.
     * @param value A value compatible with SchemaDefinition
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addUseSchema(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__useSchema);
        if (attr == null)
            attr = new DmcTypeSchemaDefinitionREFMV(MvwDMSAG.__useSchema);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__useSchema,attr);
        return(attr);
    }

    /**
     * Returns the number of values in useSchema
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getUseSchemaSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__useSchema);
        if (attr == null){
            if (MvwDMSAG.__useSchema.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__useSchema.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a useSchema value.
     * @param value The SchemaDefinition to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1129)
    public DmcAttribute<?> delUseSchema(Object value){
        DmcAttribute<?> attr = del(MvwDMSAG.__useSchema, ((DmcNamedObjectIF)value).getObjectName());
        return(attr);
    }

    /**
     * Removes the useSchema attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remUseSchema(){
         rem(MvwDMSAG.__useSchema);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public String getUseBaseClass(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MvwDMSAG.__useBaseClass);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setUseBaseClass(String value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__useBaseClass);
        if (attr == null)
            attr = new DmcTypeStringSV(MvwDMSAG.__useBaseClass);
        
        try{
            attr.set(value);
            set(MvwDMSAG.__useBaseClass,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setUseBaseClass(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__useBaseClass);
        if (attr == null)
            attr = new DmcTypeStringSV(MvwDMSAG.__useBaseClass);
        
        attr.set(value);
        set(MvwDMSAG.__useBaseClass,attr);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remUseBaseClass(){
         rem(MvwDMSAG.__useBaseClass);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:812)
    public Iterator<RunContextItemREF> getUsesRunContextItem(){
        DmcTypeRunContextItemREFSET attr = (DmcTypeRunContextItemREFSET) get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return( ((List<RunContextItemREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<RunContextItemREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of RunContextItemREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:832)
    public Iterator<RunContextItemREF> getUsesRunContextItemREFs(){
        DmcTypeRunContextItemREFSET attr = (DmcTypeRunContextItemREFSET) get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return( ((List<RunContextItemREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another usesRunContextItem to the specified value.
     * @param value RunContextItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:846)
    public DmcAttribute<?> addUsesRunContextItem(RunContextItemDMO value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            attr = new DmcTypeRunContextItemREFSET(MvwDMSAG.__usesRunContextItem);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__usesRunContextItem,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another usesRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addUsesRunContextItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            attr = new DmcTypeRunContextItemREFSET(MvwDMSAG.__usesRunContextItem);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__usesRunContextItem,attr);
        return(attr);
    }

    /**
     * Returns the number of values in usesRunContextItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getUsesRunContextItemSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__usesRunContextItem);
        if (attr == null){
            if (MvwDMSAG.__usesRunContextItem.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__usesRunContextItem.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a usesRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1129)
    public DmcAttribute<?> delUsesRunContextItem(Object value){
        DmcAttribute<?> attr = del(MvwDMSAG.__usesRunContextItem, ((DmcNamedObjectIF)value).getObjectName());
        return(attr);
    }

    /**
     * Removes the usesRunContextItem attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remUsesRunContextItem(){
         rem(MvwDMSAG.__usesRunContextItem);
    }

    /**
     * @return An Iterator of GetWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:947)
    public Iterator<GetWithOptions> getSendsGetRequest(){
        DmcTypeGetWithOptionsMV attr = (DmcTypeGetWithOptionsMV) get(MvwDMSAG.__sendsGetRequest);
        if (attr == null)
            return( ((List<GetWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth GetWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:959)
    public GetWithOptions getNthSendsGetRequest(int i){
        DmcTypeGetWithOptionsMV attr = (DmcTypeGetWithOptionsMV) get(MvwDMSAG.__sendsGetRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsGetRequest to the specified value.
     * @param value GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:973)
    public DmcAttribute<?> addSendsGetRequest(GetWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsGetRequest);
        if (attr == null)
            attr = new DmcTypeGetWithOptionsMV(MvwDMSAG.__sendsGetRequest);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__sendsGetRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified GetWithOptions.
     * @param value GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1047)
    public boolean sendsGetRequestContains(GetWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsGetRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addSendsGetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsGetRequest);
        if (attr == null)
            attr = new DmcTypeGetWithOptionsMV(MvwDMSAG.__sendsGetRequest);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__sendsGetRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsGetRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getSendsGetRequestSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsGetRequest);
        if (attr == null){
            if (MvwDMSAG.__sendsGetRequest.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__sendsGetRequest.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsGetRequest value.
     * @param value The GetWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1141)
    public DmcAttribute<?> delSendsGetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsGetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeGetWithOptionsMV(MvwDMSAG.__sendsGetRequest), value);
        else
            attr = del(MvwDMSAG.__sendsGetRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsGetRequest from the specified value.
     * @param value GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1157)
    public DmcAttribute<?> delSendsGetRequest(GetWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsGetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeGetWithOptionsMV(MvwDMSAG.__sendsGetRequest), value);
        else
            attr = del(MvwDMSAG.__sendsGetRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsGetRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remSendsGetRequest(){
         rem(MvwDMSAG.__sendsGetRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:947)
    public Iterator<RequestWithOptions> getSendsDeleteRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:959)
    public RequestWithOptions getNthSendsDeleteRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsDeleteRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:973)
    public DmcAttribute<?> addSendsDeleteRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsDeleteRequest);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__sendsDeleteRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1047)
    public boolean sendsDeleteRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addSendsDeleteRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsDeleteRequest);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__sendsDeleteRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsDeleteRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getSendsDeleteRequestSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null){
            if (MvwDMSAG.__sendsDeleteRequest.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__sendsDeleteRequest.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsDeleteRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1141)
    public DmcAttribute<?> delSendsDeleteRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsDeleteRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsDeleteRequest), value);
        else
            attr = del(MvwDMSAG.__sendsDeleteRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsDeleteRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1157)
    public DmcAttribute<?> delSendsDeleteRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsDeleteRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsDeleteRequest), value);
        else
            attr = del(MvwDMSAG.__sendsDeleteRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsDeleteRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remSendsDeleteRequest(){
         rem(MvwDMSAG.__sendsDeleteRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:947)
    public Iterator<RequestWithOptions> getSendsSetRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsSetRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:959)
    public RequestWithOptions getNthSendsSetRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsSetRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsSetRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:973)
    public DmcAttribute<?> addSendsSetRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsSetRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsSetRequest);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__sendsSetRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1047)
    public boolean sendsSetRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsSetRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addSendsSetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsSetRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsSetRequest);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__sendsSetRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsSetRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getSendsSetRequestSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsSetRequest);
        if (attr == null){
            if (MvwDMSAG.__sendsSetRequest.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__sendsSetRequest.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsSetRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1141)
    public DmcAttribute<?> delSendsSetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsSetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsSetRequest), value);
        else
            attr = del(MvwDMSAG.__sendsSetRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsSetRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1157)
    public DmcAttribute<?> delSendsSetRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsSetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsSetRequest), value);
        else
            attr = del(MvwDMSAG.__sendsSetRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsSetRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remSendsSetRequest(){
         rem(MvwDMSAG.__sendsSetRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:947)
    public Iterator<RequestWithOptions> getSendsCreateRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:959)
    public RequestWithOptions getNthSendsCreateRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsCreateRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:973)
    public DmcAttribute<?> addSendsCreateRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsCreateRequest);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__sendsCreateRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1047)
    public boolean sendsCreateRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsCreateRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addSendsCreateRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsCreateRequest);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__sendsCreateRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsCreateRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getSendsCreateRequestSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null){
            if (MvwDMSAG.__sendsCreateRequest.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__sendsCreateRequest.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsCreateRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1141)
    public DmcAttribute<?> delSendsCreateRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsCreateRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsCreateRequest), value);
        else
            attr = del(MvwDMSAG.__sendsCreateRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsCreateRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1157)
    public DmcAttribute<?> delSendsCreateRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsCreateRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsCreateRequest), value);
        else
            attr = del(MvwDMSAG.__sendsCreateRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsCreateRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remSendsCreateRequest(){
         rem(MvwDMSAG.__sendsCreateRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:947)
    public Iterator<RequestWithOptions> getSendsActionRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsActionRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:959)
    public RequestWithOptions getNthSendsActionRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsActionRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsActionRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:973)
    public DmcAttribute<?> addSendsActionRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsActionRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsActionRequest);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__sendsActionRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1047)
    public boolean sendsActionRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsActionRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsActionRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addSendsActionRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsActionRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsActionRequest);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__sendsActionRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsActionRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getSendsActionRequestSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsActionRequest);
        if (attr == null){
            if (MvwDMSAG.__sendsActionRequest.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__sendsActionRequest.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsActionRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1141)
    public DmcAttribute<?> delSendsActionRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsActionRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsActionRequest), value);
        else
            attr = del(MvwDMSAG.__sendsActionRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsActionRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1157)
    public DmcAttribute<?> delSendsActionRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsActionRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsActionRequest), value);
        else
            attr = del(MvwDMSAG.__sendsActionRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsActionRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remSendsActionRequest(){
         rem(MvwDMSAG.__sendsActionRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:947)
    public Iterator<RequestWithOptions> getSendsLoginRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:959)
    public RequestWithOptions getNthSendsLoginRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsLoginRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:973)
    public DmcAttribute<?> addSendsLoginRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLoginRequest);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__sendsLoginRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1047)
    public boolean sendsLoginRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsLoginRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addSendsLoginRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLoginRequest);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__sendsLoginRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsLoginRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getSendsLoginRequestSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null){
            if (MvwDMSAG.__sendsLoginRequest.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__sendsLoginRequest.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsLoginRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1141)
    public DmcAttribute<?> delSendsLoginRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLoginRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLoginRequest), value);
        else
            attr = del(MvwDMSAG.__sendsLoginRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsLoginRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1157)
    public DmcAttribute<?> delSendsLoginRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLoginRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLoginRequest), value);
        else
            attr = del(MvwDMSAG.__sendsLoginRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsLoginRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remSendsLoginRequest(){
         rem(MvwDMSAG.__sendsLoginRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:947)
    public Iterator<RequestWithOptions> getSendsLogoutRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:959)
    public RequestWithOptions getNthSendsLogoutRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsLogoutRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:973)
    public DmcAttribute<?> addSendsLogoutRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLogoutRequest);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__sendsLogoutRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1047)
    public boolean sendsLogoutRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsLogoutRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addSendsLogoutRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLogoutRequest);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__sendsLogoutRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsLogoutRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getSendsLogoutRequestSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null){
            if (MvwDMSAG.__sendsLogoutRequest.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__sendsLogoutRequest.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsLogoutRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1141)
    public DmcAttribute<?> delSendsLogoutRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLogoutRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLogoutRequest), value);
        else
            attr = del(MvwDMSAG.__sendsLogoutRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsLogoutRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1157)
    public DmcAttribute<?> delSendsLogoutRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__sendsLogoutRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(MvwDMSAG.__sendsLogoutRequest), value);
        else
            attr = del(MvwDMSAG.__sendsLogoutRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsLogoutRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remSendsLogoutRequest(){
         rem(MvwDMSAG.__sendsLogoutRequest);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public String getSubpackage(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MetaDMSAG.__subpackage);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets subpackage to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setSubpackage(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__subpackage);
        if (attr == null)
            attr = new DmcTypeStringSV(MetaDMSAG.__subpackage);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__subpackage,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets subpackage to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setSubpackage(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MetaDMSAG.__subpackage);
        if (attr == null)
            attr = new DmcTypeStringSV(MetaDMSAG.__subpackage);
        
        attr.set(value);
        set(MetaDMSAG.__subpackage,attr);
    }

    /**
     * Removes the subpackage attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remSubpackage(){
         rem(MetaDMSAG.__subpackage);
    }

    /**
     * @return An Iterator of ViewDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:812)
    public Iterator<ViewREF> getInstantiatesView(){
        DmcTypeViewREFMV attr = (DmcTypeViewREFMV) get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            return( ((List<ViewREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<ViewREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of ViewREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:832)
    public Iterator<ViewREF> getInstantiatesViewREFs(){
        DmcTypeViewREFMV attr = (DmcTypeViewREFMV) get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            return( ((List<ViewREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another instantiatesView to the specified value.
     * @param value View
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:846)
    public DmcAttribute<?> addInstantiatesView(ViewDMO value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            attr = new DmcTypeViewREFMV(MvwDMSAG.__instantiatesView);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__instantiatesView,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another instantiatesView value.
     * @param value A value compatible with View
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1079)
    public DmcAttribute<?> addInstantiatesView(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            attr = new DmcTypeViewREFMV(MvwDMSAG.__instantiatesView);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__instantiatesView,attr);
        return(attr);
    }

    /**
     * Returns the number of values in instantiatesView
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1096)
    public int getInstantiatesViewSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__instantiatesView);
        if (attr == null){
            if (MvwDMSAG.__instantiatesView.indexSize == 0)
                return(0);
            else
                return(MvwDMSAG.__instantiatesView.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a instantiatesView value.
     * @param value The View to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1129)
    public DmcAttribute<?> delInstantiatesView(Object value){
        DmcAttribute<?> attr = del(MvwDMSAG.__instantiatesView, ((DmcNamedObjectIF)value).getObjectName());
        return(attr);
    }

    /**
     * Removes the instantiatesView attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1176)
    public void remInstantiatesView(){
         rem(MvwDMSAG.__instantiatesView);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public CamelCaseName getComponentName(){
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(MvwDMSAG.__componentName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets componentName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setComponentName(CamelCaseName value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__componentName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__componentName);
        
        try{
            attr.set(value);
            set(MvwDMSAG.__componentName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets componentName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setComponentName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__componentName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__componentName);
        
        attr.set(value);
        set(MvwDMSAG.__componentName,attr);
    }

    /**
     * Removes the componentName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remComponentName(){
         rem(MvwDMSAG.__componentName);
    }




}
