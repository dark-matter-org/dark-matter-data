//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2011 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.mvw.tools.mvwgenerator.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:282)
import java.io.Serializable;                                                               // Always required
import java.util.*;                                                                        // Always required
import org.dmd.dmc.DmcAttribute;                                                           // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                                                       // Always required
import org.dmd.dmc.DmcNamedObjectIF;                                                       // Named object
import org.dmd.dmc.DmcOmni;                                                                // Lazy resolution
import org.dmd.dmc.DmcValueException;                                                      // Any attributes
import org.dmd.dmc.types.CamelCaseName;                                                    // Naming attribute type
import org.dmd.dms.generated.dmo.SchemaDefinitionDMO;                                      // Type specific set/add
import org.dmd.dms.generated.enums.DataTypeEnum;                                           // Required if we have any attributes
import org.dmd.dms.generated.enums.ValueTypeEnum;                                          // Required if we have any attributes
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;                                 // Required type
import org.dmd.dms.generated.types.DmcTypeSchemaDefinitionREFMV;                           // Reference type
import org.dmd.dms.generated.types.DmcTypeStringSV;                                        // Required type
import org.dmd.dms.generated.types.SchemaDefinitionREF;                                    // Helper class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.EventDMO;                              // Type specific set/add
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDefinitionDMO;                      // Base class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                     // Type specific set/add
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeEventREFMAP;                  // Reference type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeGetWithOptionsMV;             // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeRequestWithOptionsMV;         // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeRunContextItemREFSET;         // Reference type
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventREF;                            // Helper class
import org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF;                   // Helper class
import org.dmd.mvw.tools.mvwgenerator.types.GetWithOptions;                                // Primitive type and !auxiliary class
import org.dmd.mvw.tools.mvwgenerator.types.RequestWithOptions;                            // Primitive type and !auxiliary class

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The Component is an abstract base for classes that define the building
 * blocks of Applications. The primary feature of an Component is that it
 * fires and/or handles events. Beyond that, a component can be whatever you
 * require it to be. A variety of derived component types provide more
 * focussed behavioural units.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:132)
 */
@SuppressWarnings("serial")
abstract public class ComponentDMO  extends MvwDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "Component";

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __camelCaseName = new DmcAttributeInfo("camelCaseName",116,"CamelCaseName",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __componentName = new DmcAttributeInfo("componentName",811,"CamelCaseName",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __definedInModule = new DmcAttributeInfo("definedInModule",800,"Module",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __description = new DmcAttributeInfo("description",18,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __file = new DmcAttributeInfo("file",74,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __firesEvent = new DmcAttributeInfo("firesEvent",801,"Event",ValueTypeEnum.TREEMAPPED,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __handlesEvent = new DmcAttributeInfo("handlesEvent",802,"Event",ValueTypeEnum.TREEMAPPED,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __lineNumber = new DmcAttributeInfo("lineNumber",75,"Integer",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __sendsActionRequest = new DmcAttributeInfo("sendsActionRequest",848,"RequestWithOptions",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __sendsCreateRequest = new DmcAttributeInfo("sendsCreateRequest",847,"RequestWithOptions",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __sendsDeleteRequest = new DmcAttributeInfo("sendsDeleteRequest",845,"RequestWithOptions",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __sendsGetRequest = new DmcAttributeInfo("sendsGetRequest",844,"GetWithOptions",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __sendsLoginRequest = new DmcAttributeInfo("sendsLoginRequest",849,"RequestWithOptions",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __sendsLogoutRequest = new DmcAttributeInfo("sendsLogoutRequest",850,"RequestWithOptions",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __sendsSetRequest = new DmcAttributeInfo("sendsSetRequest",846,"RequestWithOptions",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __useBaseClass = new DmcAttributeInfo("useBaseClass",807,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __useRunContextItem = new DmcAttributeInfo("useRunContextItem",835,"RunContextItem",ValueTypeEnum.TREESET,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __useSchema = new DmcAttributeInfo("useSchema",843,"SchemaDefinition",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__camelCaseName.id,__camelCaseName);
        _ImAp.put(__componentName.id,__componentName);
        _ImAp.put(__definedInModule.id,__definedInModule);
        _ImAp.put(__description.id,__description);
        _ImAp.put(__file.id,__file);
        _ImAp.put(__firesEvent.id,__firesEvent);
        _ImAp.put(__handlesEvent.id,__handlesEvent);
        _ImAp.put(__lineNumber.id,__lineNumber);
        _ImAp.put(__sendsActionRequest.id,__sendsActionRequest);
        _ImAp.put(__sendsCreateRequest.id,__sendsCreateRequest);
        _ImAp.put(__sendsDeleteRequest.id,__sendsDeleteRequest);
        _ImAp.put(__sendsGetRequest.id,__sendsGetRequest);
        _ImAp.put(__sendsLoginRequest.id,__sendsLoginRequest);
        _ImAp.put(__sendsLogoutRequest.id,__sendsLogoutRequest);
        _ImAp.put(__sendsSetRequest.id,__sendsSetRequest);
        _ImAp.put(__useBaseClass.id,__useBaseClass);
        _ImAp.put(__useRunContextItem.id,__useRunContextItem);
        _ImAp.put(__useSchema.id,__useSchema);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__camelCaseName.name,__camelCaseName);
        _SmAp.put(__componentName.name,__componentName);
        _SmAp.put(__definedInModule.name,__definedInModule);
        _SmAp.put(__description.name,__description);
        _SmAp.put(__file.name,__file);
        _SmAp.put(__firesEvent.name,__firesEvent);
        _SmAp.put(__handlesEvent.name,__handlesEvent);
        _SmAp.put(__lineNumber.name,__lineNumber);
        _SmAp.put(__sendsActionRequest.name,__sendsActionRequest);
        _SmAp.put(__sendsCreateRequest.name,__sendsCreateRequest);
        _SmAp.put(__sendsDeleteRequest.name,__sendsDeleteRequest);
        _SmAp.put(__sendsGetRequest.name,__sendsGetRequest);
        _SmAp.put(__sendsLoginRequest.name,__sendsLoginRequest);
        _SmAp.put(__sendsLogoutRequest.name,__sendsLogoutRequest);
        _SmAp.put(__sendsSetRequest.name,__sendsSetRequest);
        _SmAp.put(__useBaseClass.name,__useBaseClass);
        _SmAp.put(__useRunContextItem.name,__useRunContextItem);
        _SmAp.put(__useSchema.name,__useSchema);

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public ComponentDMO() {
        super("Component");
    }

    protected ComponentDMO(String oc) {
        super(oc);
    }

    @Override
    public boolean supportsBackrefTracking(){
        return(false);
    }

    public Map<Integer,DmcAttributeInfo> getIdToAttrInfo(){
        return(_ImAp);
    }

    public Map<String,DmcAttributeInfo> getStringToAttrInfo(){
        return(_SmAp);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:733)
    public CamelCaseName getObjectName(){
        DmcAttribute<?> name = get(__componentName);
        if (name != null)
            return((CamelCaseName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(__componentName);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof ComponentDMO){
            return( getObjectName().equals( ((ComponentDMO) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return An Iterator of EventDMO objects.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1036)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getFiresEvent(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(__firesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of EventREFs without attempting lazy resolution (if it's turned on).
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1066)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getFiresEventREFs(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(__firesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * @param key The key of the value you want.
     * @return The Event associated with the specified key.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1100)
    public EventREF getFiresEvent(Object key){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(__firesEvent);
        if (attr == null)
            return(null);

        return(attr.getByKey(key));
    }

    /**
     * Adds another firesEvent value.
     * @param value A value compatible with Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1131)
    public DmcAttribute<?> addFiresEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__firesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(__firesEvent);
        
        setLastValue(attr.add(value));
        add(__firesEvent,attr);
        return(attr);
    }

    /**
     * Adds another firesEvent value.
     * @param value Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1147)
    public DmcAttribute<?> addFiresEvent(EventDMO value) {
        DmcAttribute<?> attr = get(__firesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(__firesEvent);
        
        try{
            setLastValue(attr.add(value));
            add(__firesEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Deletes a firesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delFiresEvent(Object value) throws DmcValueException {
        return(del(__firesEvent, value));
    }

    /**
     * Deletes a firesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delFiresEvent(EventDMO value){
        DmcAttribute<?> rc = null;
        rc = del(__firesEvent, value);
        return(rc);
    }

    /**
     * Removes the firesEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1297)
    public void remFiresEvent(){
         rem(__firesEvent);
    }

    /**
     * @return An Iterator of EventDMO objects.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1036)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getHandlesEvent(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(__handlesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of EventREFs without attempting lazy resolution (if it's turned on).
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1066)
    @SuppressWarnings("unchecked")
    public Iterator<EventREF> getHandlesEventREFs(){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(__handlesEvent);
        if (attr == null)
            return( ((List<EventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * @param key The key of the value you want.
     * @return The Event associated with the specified key.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1100)
    public EventREF getHandlesEvent(Object key){
        DmcTypeEventREFMAP attr = (DmcTypeEventREFMAP) get(__handlesEvent);
        if (attr == null)
            return(null);

        return(attr.getByKey(key));
    }

    /**
     * Adds another handlesEvent value.
     * @param value A value compatible with Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1131)
    public DmcAttribute<?> addHandlesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__handlesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(__handlesEvent);
        
        setLastValue(attr.add(value));
        add(__handlesEvent,attr);
        return(attr);
    }

    /**
     * Adds another handlesEvent value.
     * @param value Event
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1147)
    public DmcAttribute<?> addHandlesEvent(EventDMO value) {
        DmcAttribute<?> attr = get(__handlesEvent);
        if (attr == null)
            attr = new DmcTypeEventREFMAP(__handlesEvent);
        
        try{
            setLastValue(attr.add(value));
            add(__handlesEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delHandlesEvent(Object value) throws DmcValueException {
        return(del(__handlesEvent, value));
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    public DmcAttribute delHandlesEvent(EventDMO value){
        DmcAttribute<?> rc = null;
        rc = del(__handlesEvent, value);
        return(rc);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:1297)
    public void remHandlesEvent(){
         rem(__handlesEvent);
    }

    /**
     * @return An Iterator of SchemaDefinitionDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:747)
    public Iterator<SchemaDefinitionREF> getUseSchema(){
        DmcTypeSchemaDefinitionREFMV attr = (DmcTypeSchemaDefinitionREFMV) get(__useSchema);
        if (attr == null)
            return( ((List<SchemaDefinitionREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<SchemaDefinitionREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of SchemaDefinitionREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:767)
    public Iterator<SchemaDefinitionREF> getUseSchemaREFs(){
        DmcTypeSchemaDefinitionREFMV attr = (DmcTypeSchemaDefinitionREFMV) get(__useSchema);
        if (attr == null)
            return( ((List<SchemaDefinitionREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another useSchema to the specified value.
     * @param value SchemaDefinition
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:782)
    public DmcAttribute<?> addUseSchema(SchemaDefinitionDMO value) {
        DmcAttribute<?> attr = get(__useSchema);
        if (attr == null)
            attr = new DmcTypeSchemaDefinitionREFMV(__useSchema);
        
        try{
            setLastValue(attr.add(value));
            add(__useSchema,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another useSchema value.
     * @param value A value compatible with SchemaDefinition
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addUseSchema(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__useSchema);
        if (attr == null)
            attr = new DmcTypeSchemaDefinitionREFMV(__useSchema);
        
        setLastValue(attr.add(value));
        add(__useSchema,attr);
        return(attr);
    }

    /**
     * Returns the number of values in useSchema
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getUseSchemaSize(){
        DmcAttribute<?> attr = get(__useSchema);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a useSchema value.
     * @param value The SchemaDefinition to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:950)
    public DmcAttribute<?> delUseSchema(Object value){
        DmcAttribute<?> attr = del(__useSchema, ((DmcNamedObjectIF)value).getObjectName());
        return(attr);
    }

    /**
     * Removes the useSchema attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remUseSchema(){
         rem(__useSchema);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:585)
    public String getUseBaseClass(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(__useBaseClass);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:622)
    public void setUseBaseClass(String value) {
        DmcAttribute<?> attr = get(__useBaseClass);
        if (attr == null)
            attr = new DmcTypeStringSV(__useBaseClass);
        
        try{
            attr.set(value);
            set(__useBaseClass,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:670)
    public void setUseBaseClass(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__useBaseClass);
        if (attr == null)
            attr = new DmcTypeStringSV(__useBaseClass);
        
        attr.set(value);
        set(__useBaseClass,attr);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:685)
    public void remUseBaseClass(){
         rem(__useBaseClass);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:747)
    public Iterator<RunContextItemREF> getUseRunContextItem(){
        DmcTypeRunContextItemREFSET attr = (DmcTypeRunContextItemREFSET) get(__useRunContextItem);
        if (attr == null)
            return( ((List<RunContextItemREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<RunContextItemREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of RunContextItemREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:767)
    public Iterator<RunContextItemREF> getUseRunContextItemREFs(){
        DmcTypeRunContextItemREFSET attr = (DmcTypeRunContextItemREFSET) get(__useRunContextItem);
        if (attr == null)
            return( ((List<RunContextItemREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another useRunContextItem to the specified value.
     * @param value RunContextItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:782)
    public DmcAttribute<?> addUseRunContextItem(RunContextItemDMO value) {
        DmcAttribute<?> attr = get(__useRunContextItem);
        if (attr == null)
            attr = new DmcTypeRunContextItemREFSET(__useRunContextItem);
        
        try{
            setLastValue(attr.add(value));
            add(__useRunContextItem,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another useRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addUseRunContextItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__useRunContextItem);
        if (attr == null)
            attr = new DmcTypeRunContextItemREFSET(__useRunContextItem);
        
        setLastValue(attr.add(value));
        add(__useRunContextItem,attr);
        return(attr);
    }

    /**
     * Returns the number of values in useRunContextItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getUseRunContextItemSize(){
        DmcAttribute<?> attr = get(__useRunContextItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a useRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:950)
    public DmcAttribute<?> delUseRunContextItem(Object value){
        DmcAttribute<?> attr = del(__useRunContextItem, ((DmcNamedObjectIF)value).getObjectName());
        return(attr);
    }

    /**
     * Removes the useRunContextItem attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remUseRunContextItem(){
         rem(__useRunContextItem);
    }

    /**
     * @return An Iterator of GetWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:804)
    public Iterator<GetWithOptions> getSendsGetRequest(){
        DmcTypeGetWithOptionsMV attr = (DmcTypeGetWithOptionsMV) get(__sendsGetRequest);
        if (attr == null)
            return( ((List<GetWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth GetWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:816)
    public GetWithOptions getNthSendsGetRequest(int i){
        DmcTypeGetWithOptionsMV attr = (DmcTypeGetWithOptionsMV) get(__sendsGetRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsGetRequest to the specified value.
     * @param value GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:829)
    public DmcAttribute<?> addSendsGetRequest(GetWithOptions value) {
        DmcAttribute<?> attr = get(__sendsGetRequest);
        if (attr == null)
            attr = new DmcTypeGetWithOptionsMV(__sendsGetRequest);
        
        try{
            setLastValue(attr.add(value));
            add(__sendsGetRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified GetWithOptions.
     * @param value GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:871)
    public boolean sendsGetRequestContains(GetWithOptions value) {
        DmcAttribute<?> attr = get(__sendsGetRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addSendsGetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsGetRequest);
        if (attr == null)
            attr = new DmcTypeGetWithOptionsMV(__sendsGetRequest);
        
        setLastValue(attr.add(value));
        add(__sendsGetRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsGetRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getSendsGetRequestSize(){
        DmcAttribute<?> attr = get(__sendsGetRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsGetRequest value.
     * @param value The GetWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:962)
    public DmcAttribute<?> delSendsGetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsGetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeGetWithOptionsMV(__sendsGetRequest), value);
        else
            attr = del(__sendsGetRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsGetRequest from the specified value.
     * @param value GetWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:978)
    public DmcAttribute<?> delSendsGetRequest(GetWithOptions value) {
        DmcAttribute<?> attr = get(__sendsGetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeGetWithOptionsMV(__sendsGetRequest), value);
        else
            attr = del(__sendsGetRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsGetRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remSendsGetRequest(){
         rem(__sendsGetRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:804)
    public Iterator<RequestWithOptions> getSendsDeleteRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsDeleteRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:816)
    public RequestWithOptions getNthSendsDeleteRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsDeleteRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsDeleteRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:829)
    public DmcAttribute<?> addSendsDeleteRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsDeleteRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsDeleteRequest);
        
        try{
            setLastValue(attr.add(value));
            add(__sendsDeleteRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:871)
    public boolean sendsDeleteRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsDeleteRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addSendsDeleteRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsDeleteRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsDeleteRequest);
        
        setLastValue(attr.add(value));
        add(__sendsDeleteRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsDeleteRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getSendsDeleteRequestSize(){
        DmcAttribute<?> attr = get(__sendsDeleteRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsDeleteRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:962)
    public DmcAttribute<?> delSendsDeleteRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsDeleteRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsDeleteRequest), value);
        else
            attr = del(__sendsDeleteRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsDeleteRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:978)
    public DmcAttribute<?> delSendsDeleteRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsDeleteRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsDeleteRequest), value);
        else
            attr = del(__sendsDeleteRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsDeleteRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remSendsDeleteRequest(){
         rem(__sendsDeleteRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:804)
    public Iterator<RequestWithOptions> getSendsSetRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsSetRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:816)
    public RequestWithOptions getNthSendsSetRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsSetRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsSetRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:829)
    public DmcAttribute<?> addSendsSetRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsSetRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsSetRequest);
        
        try{
            setLastValue(attr.add(value));
            add(__sendsSetRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:871)
    public boolean sendsSetRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsSetRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addSendsSetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsSetRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsSetRequest);
        
        setLastValue(attr.add(value));
        add(__sendsSetRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsSetRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getSendsSetRequestSize(){
        DmcAttribute<?> attr = get(__sendsSetRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsSetRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:962)
    public DmcAttribute<?> delSendsSetRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsSetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsSetRequest), value);
        else
            attr = del(__sendsSetRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsSetRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:978)
    public DmcAttribute<?> delSendsSetRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsSetRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsSetRequest), value);
        else
            attr = del(__sendsSetRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsSetRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remSendsSetRequest(){
         rem(__sendsSetRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:804)
    public Iterator<RequestWithOptions> getSendsCreateRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsCreateRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:816)
    public RequestWithOptions getNthSendsCreateRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsCreateRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsCreateRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:829)
    public DmcAttribute<?> addSendsCreateRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsCreateRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsCreateRequest);
        
        try{
            setLastValue(attr.add(value));
            add(__sendsCreateRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:871)
    public boolean sendsCreateRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsCreateRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsCreateRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addSendsCreateRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsCreateRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsCreateRequest);
        
        setLastValue(attr.add(value));
        add(__sendsCreateRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsCreateRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getSendsCreateRequestSize(){
        DmcAttribute<?> attr = get(__sendsCreateRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsCreateRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:962)
    public DmcAttribute<?> delSendsCreateRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsCreateRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsCreateRequest), value);
        else
            attr = del(__sendsCreateRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsCreateRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:978)
    public DmcAttribute<?> delSendsCreateRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsCreateRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsCreateRequest), value);
        else
            attr = del(__sendsCreateRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsCreateRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remSendsCreateRequest(){
         rem(__sendsCreateRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:804)
    public Iterator<RequestWithOptions> getSendsActionRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsActionRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:816)
    public RequestWithOptions getNthSendsActionRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsActionRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsActionRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:829)
    public DmcAttribute<?> addSendsActionRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsActionRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsActionRequest);
        
        try{
            setLastValue(attr.add(value));
            add(__sendsActionRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:871)
    public boolean sendsActionRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsActionRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsActionRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addSendsActionRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsActionRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsActionRequest);
        
        setLastValue(attr.add(value));
        add(__sendsActionRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsActionRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getSendsActionRequestSize(){
        DmcAttribute<?> attr = get(__sendsActionRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsActionRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:962)
    public DmcAttribute<?> delSendsActionRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsActionRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsActionRequest), value);
        else
            attr = del(__sendsActionRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsActionRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:978)
    public DmcAttribute<?> delSendsActionRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsActionRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsActionRequest), value);
        else
            attr = del(__sendsActionRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsActionRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remSendsActionRequest(){
         rem(__sendsActionRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:804)
    public Iterator<RequestWithOptions> getSendsLoginRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsLoginRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:816)
    public RequestWithOptions getNthSendsLoginRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsLoginRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsLoginRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:829)
    public DmcAttribute<?> addSendsLoginRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsLoginRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsLoginRequest);
        
        try{
            setLastValue(attr.add(value));
            add(__sendsLoginRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:871)
    public boolean sendsLoginRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsLoginRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsLoginRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addSendsLoginRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsLoginRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsLoginRequest);
        
        setLastValue(attr.add(value));
        add(__sendsLoginRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsLoginRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getSendsLoginRequestSize(){
        DmcAttribute<?> attr = get(__sendsLoginRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsLoginRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:962)
    public DmcAttribute<?> delSendsLoginRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsLoginRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsLoginRequest), value);
        else
            attr = del(__sendsLoginRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsLoginRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:978)
    public DmcAttribute<?> delSendsLoginRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsLoginRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsLoginRequest), value);
        else
            attr = del(__sendsLoginRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsLoginRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remSendsLoginRequest(){
         rem(__sendsLoginRequest);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:804)
    public Iterator<RequestWithOptions> getSendsLogoutRequest(){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsLogoutRequest);
        if (attr == null)
            return( ((List<RequestWithOptions>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth RequestWithOptions value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:816)
    public RequestWithOptions getNthSendsLogoutRequest(int i){
        DmcTypeRequestWithOptionsMV attr = (DmcTypeRequestWithOptionsMV) get(__sendsLogoutRequest);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another sendsLogoutRequest to the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:829)
    public DmcAttribute<?> addSendsLogoutRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsLogoutRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsLogoutRequest);
        
        try{
            setLastValue(attr.add(value));
            add(__sendsLogoutRequest,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified RequestWithOptions.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:871)
    public boolean sendsLogoutRequestContains(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsLogoutRequest);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another sendsLogoutRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:903)
    public DmcAttribute<?> addSendsLogoutRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsLogoutRequest);
        if (attr == null)
            attr = new DmcTypeRequestWithOptionsMV(__sendsLogoutRequest);
        
        setLastValue(attr.add(value));
        add(__sendsLogoutRequest,attr);
        return(attr);
    }

    /**
     * Returns the number of values in sendsLogoutRequest
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:920)
    public int getSendsLogoutRequestSize(){
        DmcAttribute<?> attr = get(__sendsLogoutRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a sendsLogoutRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:962)
    public DmcAttribute<?> delSendsLogoutRequest(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__sendsLogoutRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsLogoutRequest), value);
        else
            attr = del(__sendsLogoutRequest, value);
        
        return(attr);
    }

    /**
     * Deletes a sendsLogoutRequest from the specified value.
     * @param value RequestWithOptions
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:978)
    public DmcAttribute<?> delSendsLogoutRequest(RequestWithOptions value) {
        DmcAttribute<?> attr = get(__sendsLogoutRequest);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeRequestWithOptionsMV(__sendsLogoutRequest), value);
        else
            attr = del(__sendsLogoutRequest, value);
        
        return(attr);
    }

    /**
     * Removes the sendsLogoutRequest attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:997)
    public void remSendsLogoutRequest(){
         rem(__sendsLogoutRequest);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:585)
    public CamelCaseName getComponentName(){
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(__componentName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets componentName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:622)
    public void setComponentName(CamelCaseName value) {
        DmcAttribute<?> attr = get(__componentName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__componentName);
        
        try{
            attr.set(value);
            set(__componentName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets componentName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:670)
    public void setComponentName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__componentName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__componentName);
        
        attr.set(value);
        set(__componentName,attr);
    }

    /**
     * Removes the componentName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:685)
    public void remComponentName(){
         rem(__componentName);
    }




}
