package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.formatImports(BaseDMWGeneratorNew.java:855)
import java.util.ArrayList;                                                                // To support getMVCopy()
import java.util.Iterator;                                                                 // To support getMVCopy()
import java.util.TreeMap;                                                                  // To support getMVCopy()
import java.util.TreeSet;                                                                  // To support getMVCopy()
import org.dmd.dmc.*;                                                                      // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                                    // Primitive type
import org.dmd.dms.*;                                                                      // Always 2
import org.dmd.dms.generated.dmo.SchemaDefinitionDMO;                                      // For multi-valued containsSchemaDefinition
import org.dmd.dms.generated.dmw.SchemaDefinitionDMW;                                      // Is reference type aux
import org.dmd.dms.generated.dmw.SchemaDefinitionIterableDMW;                              // For multi-valued SchemaDefinition
import org.dmd.dms.generated.types.SchemaDefinitionREF;                                    // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.extended.Component;                                  // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.extended.Event;                                      // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                              // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.RunContextItem;                             // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.extended.View;                                       // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ComponentDMO;                          // Abstract class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.EventDMO;                              // For multi-valued containsEvent
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                              // Attribute from mvw schema
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                     // For multi-valued containsRunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;                               // For multi-valued containsView
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventIterableDMW;                      // For multi-valued Event
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.GetWithOptionsIterableDMW;             // For multi-valued GetWithOptions
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RequestWithOptionsIterableDMW;         // For multi-valued RequestWithOptions
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW;             // For multi-valued RunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.ViewIterableDMW;                       // For multi-valued View
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventREF;                            // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF;                   // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.generated.types.ViewREF;                             // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.types.GetWithOptions;                                // For multi-valued containsGetWithOptions
import org.dmd.mvw.tools.mvwgenerator.types.RequestWithOptions;                            // For multi-valued containsRequestWithOptions

/**
 * The Component is an abstract base for classes that define the building
 * blocks of Applications. The primary feature of an Component is that it
 * fires and/or handles events. Beyond that, a component can be whatever you
 * require it to be. A variety of derived component types provide more
 * focussed behavioural units. <p /> Many of the classes generated by MVW
 * must be extended in order to provide the actual behaviour of your
 * application e.g. Controllers, Views, Presenters etc. Activities must also
 * be extended to provide your behaviour, however, Activities are also
 * referred to by generated code and must be in a known location. By default,
 * the classes that extend the generated activity class will reside in the
 * 'extended' package that lies beneath the genPackage specified for your
 * module i.e. if your gen package is com.mine, then the  derived activity
 * classes are expected to be in com.mine.extended. If you want to place
 * these classes in a subpackage beneath extended, use the subpackage
 * attribute to indicate the package name e.g. if subpackage is defined as
 * 'activities', your activity implementation class will be expected to
 * reside in com.mine.extended.activities.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:290)
 */
abstract public class ComponentDMW extends MvwDefinition implements DmcNamedObjectIF {

    protected ComponentDMW() {
        super();
    }

    abstract public Component getModificationRecorder();

    public ComponentDMO getDMO() {
        return((ComponentDMO) core);
    }

    protected ComponentDMW(ComponentDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.getAccessFunctions(BaseDMWGeneratorNew.java:882)
    public CamelCaseName getObjectName(){
        return(((ComponentDMO) core).getComponentName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ComponentDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ComponentDMW){
            return( getObjectName().equals( ((ComponentDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1701)
    public int getFiresEventSize(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1713)
    public boolean getFiresEventIsEmpty(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1725)
    public boolean getFiresEventHasValue(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed Event object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1741)
    public Event getFiresEvent(Object key){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(null);
        
        return((Event)attr.getByKey(key));
    }

    /**
     * @return An Iterable of Event objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1777)
    public EventIterableDMW getFiresEventIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        Iterator<EventREF> it = ((ComponentDMO) core).getFiresEvent();
        
        if (it == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(it));
    }

    /**
     * Adds another firesEvent value.
     * @param value EventDMW
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1811)
    public DmcAttribute<?> addFiresEvent(Event value) {
        return(((ComponentDMO) core).addFiresEvent(value.getDMO()));
    }

    /**
     * Deletes a firesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1835)
    public void delFiresEvent(Event value){
        ((ComponentDMO) core).delFiresEvent(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1878)
    public TreeMap<CamelCaseName,Event> getFiresEventCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(new TreeMap<CamelCaseName,Event>());
        
        TreeMap<CamelCaseName,Event> rc = new TreeMap<CamelCaseName,Event>();
        
        EventIterableDMW it = getFiresEventIterable();
        while(it.hasNext()){
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(),obj);
        }
        return(rc);
    }

    /**
     * Removes the firesEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:2027)
    public void remFiresEvent(){
        ((ComponentDMO) core).remFiresEvent();
    }

    /**
     * @return The number of EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1701)
    public int getHandlesEventSize(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1713)
    public boolean getHandlesEventIsEmpty(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1725)
    public boolean getHandlesEventHasValue(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed Event object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1741)
    public Event getHandlesEvent(Object key){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(null);
        
        return((Event)attr.getByKey(key));
    }

    /**
     * @return An Iterable of Event objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1777)
    public EventIterableDMW getHandlesEventIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        Iterator<EventREF> it = ((ComponentDMO) core).getHandlesEvent();
        
        if (it == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(it));
    }

    /**
     * Adds another handlesEvent value.
     * @param value EventDMW
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1811)
    public DmcAttribute<?> addHandlesEvent(Event value) {
        return(((ComponentDMO) core).addHandlesEvent(value.getDMO()));
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1835)
    public void delHandlesEvent(Event value){
        ((ComponentDMO) core).delHandlesEvent(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:1878)
    public TreeMap<CamelCaseName,Event> getHandlesEventCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(new TreeMap<CamelCaseName,Event>());
        
        TreeMap<CamelCaseName,Event> rc = new TreeMap<CamelCaseName,Event>();
        
        EventIterableDMW it = getHandlesEventIterable();
        while(it.hasNext()){
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(),obj);
        }
        return(rc);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMAPPED(BaseDMWGeneratorNew.java:2027)
    public void remHandlesEvent(){
        ((ComponentDMO) core).remHandlesEvent();
    }

    /**
     * @return The number of SchemaDefinition items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getUseSchemaSize(){
        return(((ComponentDMO) core).getUseSchemaSize());
    }

    /**
     * @return true if there are no SchemaDefinitionDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getUseSchemaIsEmpty(){
        if (((ComponentDMO) core).getUseSchemaSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any SchemaDefinitionDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getUseSchemaHasValue(){
        if (((ComponentDMO) core).getUseSchemaSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of SchemaDefinitionDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1229)
    public SchemaDefinitionIterableDMW getUseSchemaIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(MvwDMSAG.__useSchema);
        if (attr == null)
            return(SchemaDefinitionIterableDMW.emptyList);
        
        return(new SchemaDefinitionIterableDMW(((ComponentDMO) core).getUseSchema()));
    }

    /**
     * Adds another useSchema value.
     * @param value A value compatible with SchemaDefinition
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1260)
    public DmcAttribute<?> addUseSchema(SchemaDefinitionDMW value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addUseSchema(((SchemaDefinitionDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a useSchema value.
     * @param value The SchemaDefinition to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1285)
    public void delUseSchema(SchemaDefinitionDMW value){
        ((ComponentDMO) core).delUseSchema(value.getDMO());
    }

    /**
     * @return A COPY of the collection of SchemaDefinition objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1332)
    public ArrayList<SchemaDefinitionDMW> getUseSchemaCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__useSchema);
        if (attr == null)
            return(new ArrayList<SchemaDefinitionDMW>());
        
        ArrayList<SchemaDefinitionDMW> rc = new ArrayList<SchemaDefinitionDMW>(attr.getMVSize());
        
        SchemaDefinitionIterableDMW it = getUseSchemaIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the useSchema attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remUseSchema(){
        ((ComponentDMO) core).remUseSchema();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1027)
    public String getUseBaseClass(){
        return(((ComponentDMO) core).getUseBaseClass());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1086)
    public void setUseBaseClass(Object value) throws DmcValueException {
        ((ComponentDMO) core).setUseBaseClass(value);
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1095)
    public void setUseBaseClass(String value){
        ((ComponentDMO) core).setUseBaseClass(value);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1121)
    public void remUseBaseClass(){
        ((ComponentDMO) core).remUseBaseClass();
    }

    /**
     * @return The number of RunContextItem items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getUsesRunContextItemSize(){
        return(((ComponentDMO) core).getUsesRunContextItemSize());
    }

    /**
     * @return true if there are no RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getUsesRunContextItemIsEmpty(){
        if (((ComponentDMO) core).getUsesRunContextItemSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getUsesRunContextItemHasValue(){
        if (((ComponentDMO) core).getUsesRunContextItemSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1229)
    public RunContextItemIterableDMW getUsesRunContextItemIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return(RunContextItemIterableDMW.emptyList);
        
        return(new RunContextItemIterableDMW(((ComponentDMO) core).getUsesRunContextItem()));
    }

    /**
     * Adds another usesRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1260)
    public DmcAttribute<?> addUsesRunContextItem(RunContextItem value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addUsesRunContextItem(((RunContextItemDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a usesRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1285)
    public void delUsesRunContextItem(RunContextItem value){
        ((ComponentDMO) core).delUsesRunContextItem(value.getDMO());
    }

    /**
     * @return A COPY of the collection of RunContextItem objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1332)
    public TreeSet<RunContextItem> getUsesRunContextItemCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return(new TreeSet<RunContextItem>());
        
        TreeSet<RunContextItem> rc = new TreeSet<RunContextItem>();
        
        RunContextItemIterableDMW it = getUsesRunContextItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the usesRunContextItem attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remUsesRunContextItem(){
        ((ComponentDMO) core).remUsesRunContextItem();
    }

    /**
     * @return The number of GetWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getSendsGetRequestSize(){
        return(((ComponentDMO) core).getSendsGetRequestSize());
    }

    /**
     * @return true if there are no GetWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getSendsGetRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsGetRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any GetWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getSendsGetRequestHasValue(){
        if (((ComponentDMO) core).getSendsGetRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of GetWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1468)
    public GetWithOptionsIterableDMW getSendsGetRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsGetRequest);
        if (attr == null)
            return(GetWithOptionsIterableDMW.emptyList);
        
        return(new GetWithOptionsIterableDMW(((ComponentDMO) core).getSendsGetRequest()));
    }

    /**
     * Adds another sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1494)
    public void addSendsGetRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsGetRequest(value);
    }

    /**
     * Adds another sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1504)
    public void addSendsGetRequest(GetWithOptions value){
        ((ComponentDMO) core).addSendsGetRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1561)
    public boolean sendsGetRequestContains(GetWithOptions value){
        return(((ComponentDMO) core).sendsGetRequestContains(value));
    }

    /**
     * @return A COPY of the collection of GetWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1601)
    @SuppressWarnings("unchecked")
    public ArrayList<GetWithOptions> getSendsGetRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsGetRequest);
        if (attr == null)
            return(new ArrayList<GetWithOptions>());
        
        ArrayList<GetWithOptions> rc = new ArrayList<GetWithOptions>(attr.getMVSize());
        
        Iterator<GetWithOptions> it = (Iterator<GetWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsGetRequest value.
     * @param value The GetWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1628)
    public void delSendsGetRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsGetRequest(value);
    }

    /**
     * Deletes a sendsGetRequest value.
     * @param value The GetWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1637)
    public void delSendsGetRequest(GetWithOptions value){
        ((ComponentDMO) core).delSendsGetRequest(value);
    }

    /**
     * Removes the sendsGetRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remSendsGetRequest(){
        ((ComponentDMO) core).remSendsGetRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getSendsDeleteRequestSize(){
        return(((ComponentDMO) core).getSendsDeleteRequestSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getSendsDeleteRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsDeleteRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getSendsDeleteRequestHasValue(){
        if (((ComponentDMO) core).getSendsDeleteRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1468)
    public RequestWithOptionsIterableDMW getSendsDeleteRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((ComponentDMO) core).getSendsDeleteRequest()));
    }

    /**
     * Adds another sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1494)
    public void addSendsDeleteRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsDeleteRequest(value);
    }

    /**
     * Adds another sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1504)
    public void addSendsDeleteRequest(RequestWithOptions value){
        ((ComponentDMO) core).addSendsDeleteRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1561)
    public boolean sendsDeleteRequestContains(RequestWithOptions value){
        return(((ComponentDMO) core).sendsDeleteRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1601)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsDeleteRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsDeleteRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsDeleteRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1628)
    public void delSendsDeleteRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsDeleteRequest(value);
    }

    /**
     * Deletes a sendsDeleteRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1637)
    public void delSendsDeleteRequest(RequestWithOptions value){
        ((ComponentDMO) core).delSendsDeleteRequest(value);
    }

    /**
     * Removes the sendsDeleteRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remSendsDeleteRequest(){
        ((ComponentDMO) core).remSendsDeleteRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getSendsSetRequestSize(){
        return(((ComponentDMO) core).getSendsSetRequestSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getSendsSetRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsSetRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getSendsSetRequestHasValue(){
        if (((ComponentDMO) core).getSendsSetRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1468)
    public RequestWithOptionsIterableDMW getSendsSetRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsSetRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((ComponentDMO) core).getSendsSetRequest()));
    }

    /**
     * Adds another sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1494)
    public void addSendsSetRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsSetRequest(value);
    }

    /**
     * Adds another sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1504)
    public void addSendsSetRequest(RequestWithOptions value){
        ((ComponentDMO) core).addSendsSetRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1561)
    public boolean sendsSetRequestContains(RequestWithOptions value){
        return(((ComponentDMO) core).sendsSetRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1601)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsSetRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsSetRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsSetRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1628)
    public void delSendsSetRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsSetRequest(value);
    }

    /**
     * Deletes a sendsSetRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1637)
    public void delSendsSetRequest(RequestWithOptions value){
        ((ComponentDMO) core).delSendsSetRequest(value);
    }

    /**
     * Removes the sendsSetRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remSendsSetRequest(){
        ((ComponentDMO) core).remSendsSetRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getSendsCreateRequestSize(){
        return(((ComponentDMO) core).getSendsCreateRequestSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getSendsCreateRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsCreateRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getSendsCreateRequestHasValue(){
        if (((ComponentDMO) core).getSendsCreateRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1468)
    public RequestWithOptionsIterableDMW getSendsCreateRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((ComponentDMO) core).getSendsCreateRequest()));
    }

    /**
     * Adds another sendsCreateRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1494)
    public void addSendsCreateRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsCreateRequest(value);
    }

    /**
     * Adds another sendsCreateRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1504)
    public void addSendsCreateRequest(RequestWithOptions value){
        ((ComponentDMO) core).addSendsCreateRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsCreateRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1561)
    public boolean sendsCreateRequestContains(RequestWithOptions value){
        return(((ComponentDMO) core).sendsCreateRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1601)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsCreateRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsCreateRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsCreateRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1628)
    public void delSendsCreateRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsCreateRequest(value);
    }

    /**
     * Deletes a sendsCreateRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1637)
    public void delSendsCreateRequest(RequestWithOptions value){
        ((ComponentDMO) core).delSendsCreateRequest(value);
    }

    /**
     * Removes the sendsCreateRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remSendsCreateRequest(){
        ((ComponentDMO) core).remSendsCreateRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getSendsActionRequestSize(){
        return(((ComponentDMO) core).getSendsActionRequestSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getSendsActionRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsActionRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getSendsActionRequestHasValue(){
        if (((ComponentDMO) core).getSendsActionRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1468)
    public RequestWithOptionsIterableDMW getSendsActionRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsActionRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((ComponentDMO) core).getSendsActionRequest()));
    }

    /**
     * Adds another sendsActionRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1494)
    public void addSendsActionRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsActionRequest(value);
    }

    /**
     * Adds another sendsActionRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1504)
    public void addSendsActionRequest(RequestWithOptions value){
        ((ComponentDMO) core).addSendsActionRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsActionRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1561)
    public boolean sendsActionRequestContains(RequestWithOptions value){
        return(((ComponentDMO) core).sendsActionRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1601)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsActionRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsActionRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsActionRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1628)
    public void delSendsActionRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsActionRequest(value);
    }

    /**
     * Deletes a sendsActionRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1637)
    public void delSendsActionRequest(RequestWithOptions value){
        ((ComponentDMO) core).delSendsActionRequest(value);
    }

    /**
     * Removes the sendsActionRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remSendsActionRequest(){
        ((ComponentDMO) core).remSendsActionRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getSendsLoginRequestSize(){
        return(((ComponentDMO) core).getSendsLoginRequestSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getSendsLoginRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsLoginRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getSendsLoginRequestHasValue(){
        if (((ComponentDMO) core).getSendsLoginRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1468)
    public RequestWithOptionsIterableDMW getSendsLoginRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((ComponentDMO) core).getSendsLoginRequest()));
    }

    /**
     * Adds another sendsLoginRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1494)
    public void addSendsLoginRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsLoginRequest(value);
    }

    /**
     * Adds another sendsLoginRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1504)
    public void addSendsLoginRequest(RequestWithOptions value){
        ((ComponentDMO) core).addSendsLoginRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsLoginRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1561)
    public boolean sendsLoginRequestContains(RequestWithOptions value){
        return(((ComponentDMO) core).sendsLoginRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1601)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsLoginRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsLoginRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsLoginRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1628)
    public void delSendsLoginRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsLoginRequest(value);
    }

    /**
     * Deletes a sendsLoginRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1637)
    public void delSendsLoginRequest(RequestWithOptions value){
        ((ComponentDMO) core).delSendsLoginRequest(value);
    }

    /**
     * Removes the sendsLoginRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remSendsLoginRequest(){
        ((ComponentDMO) core).remSendsLoginRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getSendsLogoutRequestSize(){
        return(((ComponentDMO) core).getSendsLogoutRequestSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getSendsLogoutRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsLogoutRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getSendsLogoutRequestHasValue(){
        if (((ComponentDMO) core).getSendsLogoutRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1468)
    public RequestWithOptionsIterableDMW getSendsLogoutRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((ComponentDMO) core).getSendsLogoutRequest()));
    }

    /**
     * Adds another sendsLogoutRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1494)
    public void addSendsLogoutRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsLogoutRequest(value);
    }

    /**
     * Adds another sendsLogoutRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1504)
    public void addSendsLogoutRequest(RequestWithOptions value){
        ((ComponentDMO) core).addSendsLogoutRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsLogoutRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1561)
    public boolean sendsLogoutRequestContains(RequestWithOptions value){
        return(((ComponentDMO) core).sendsLogoutRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1601)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsLogoutRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsLogoutRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsLogoutRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1628)
    public void delSendsLogoutRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsLogoutRequest(value);
    }

    /**
     * Deletes a sendsLogoutRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1637)
    public void delSendsLogoutRequest(RequestWithOptions value){
        ((ComponentDMO) core).delSendsLogoutRequest(value);
    }

    /**
     * Removes the sendsLogoutRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remSendsLogoutRequest(){
        ((ComponentDMO) core).remSendsLogoutRequest();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1027)
    public String getSubpackage(){
        return(((ComponentDMO) core).getSubpackage());
    }

    /**
     * Sets subpackage to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1086)
    public void setSubpackage(Object value) throws DmcValueException {
        ((ComponentDMO) core).setSubpackage(value);
    }

    /**
     * Sets subpackage to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1095)
    public void setSubpackage(String value){
        ((ComponentDMO) core).setSubpackage(value);
    }

    /**
     * Removes the subpackage attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1121)
    public void remSubpackage(){
        ((ComponentDMO) core).remSubpackage();
    }

    /**
     * @return The number of View items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1173)
    public int getInstantiatesViewSize(){
        return(((ComponentDMO) core).getInstantiatesViewSize());
    }

    /**
     * @return true if there are no ViewDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1189)
    public boolean getInstantiatesViewIsEmpty(){
        if (((ComponentDMO) core).getInstantiatesViewSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any ViewDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1204)
    public boolean getInstantiatesViewHasValue(){
        if (((ComponentDMO) core).getInstantiatesViewSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of ViewDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1229)
    public ViewIterableDMW getInstantiatesViewIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            return(ViewIterableDMW.emptyList);
        
        return(new ViewIterableDMW(((ComponentDMO) core).getInstantiatesView()));
    }

    /**
     * Adds another instantiatesView value.
     * @param value A value compatible with View
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1260)
    public DmcAttribute<?> addInstantiatesView(View value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addInstantiatesView(((ViewDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a instantiatesView value.
     * @param value The View to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1285)
    public void delInstantiatesView(View value){
        ((ComponentDMO) core).delInstantiatesView(value.getDMO());
    }

    /**
     * @return A COPY of the collection of View objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1332)
    public ArrayList<View> getInstantiatesViewCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            return(new ArrayList<View>());
        
        ArrayList<View> rc = new ArrayList<View>(attr.getMVSize());
        
        ViewIterableDMW it = getInstantiatesViewIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the instantiatesView attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1649)
    public void remInstantiatesView(){
        ((ComponentDMO) core).remInstantiatesView();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1027)
    public CamelCaseName getComponentName(){
        return(((ComponentDMO) core).getComponentName());
    }

    /**
     * Sets componentName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1086)
    public void setComponentName(Object value) throws DmcValueException {
        ((ComponentDMO) core).setComponentName(value);
    }

    /**
     * Sets componentName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1095)
    public void setComponentName(CamelCaseName value){
        ((ComponentDMO) core).setComponentName(value);
    }

    /**
     * Removes the componentName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1121)
    public void remComponentName(){
        ((ComponentDMO) core).remComponentName();
    }


}
