package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:349)
import java.util.ArrayList;                                                                    // To support getMVCopy() - (BaseDMWGeneratorNewest.java:997)
import java.util.Iterator;                                                                     // Support MV object get() - (BaseDMWGeneratorNewest.java:2239)
import java.util.TreeMap;                                                                      // To support getMVCopy() - (BaseDMWGeneratorNewest.java:1006)
import java.util.TreeSet;                                                                      // To support getMVCopy() - (BaseDMWGeneratorNewest.java:1022)
import org.dmd.dmc.*;                                                                          // If any attributes - (BaseDMWGeneratorNewest.java:903)
import org.dmd.dmc.types.CamelCaseName;                                                        // Is named by - (BaseDMWGeneratorNewest.java:884)
import org.dmd.dms.*;                                                                          // Always 2 - (BaseDMWGeneratorNewest.java:888)
import org.dmd.dms.generated.dmo.SchemaDefinitionDMO;                                          // For multi-valued adds of SchemaDefinition - (BaseDMWGeneratorNewest.java:1579)
import org.dmd.dms.generated.dmw.SchemaDefinitionDMW;                                          // Is reference type - (BaseDMWGeneratorNewest.java:923)
import org.dmd.dms.generated.dmw.SchemaDefinitionIterableDMW;                                  // For multi-valued SchemaDefinition - (BaseDMWGeneratorNewest.java:1521)
import org.dmd.mvw.tools.mvwgenerator.extended.Component;                                      // Required for getModificationRecorder() - (BaseDMWGeneratorNewest.java:896)
import org.dmd.mvw.tools.mvwgenerator.extended.Event;                                          // Is reference type - (BaseDMWGeneratorNewest.java:923)
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                                  // Derived class - (BaseDMWGeneratorNewest.java:1064)
import org.dmd.mvw.tools.mvwgenerator.extended.RunContextItem;                                 // Is reference type - (BaseDMWGeneratorNewest.java:923)
import org.dmd.mvw.tools.mvwgenerator.extended.View;                                           // Is reference type - (BaseDMWGeneratorNewest.java:923)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ComponentDMO;                              // Abstract class - (BaseDMWGeneratorNewest.java:1046)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                                  // Attribute firesEvent from the mvw schema - (BaseDMWGeneratorNewest.java:720)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                         // For multi-valued adds of RunContextItem - (BaseDMWGeneratorNewest.java:1579)
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;                                   // For multi-valued adds of View - (BaseDMWGeneratorNewest.java:1579)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RequestTypeWithOptionsIterableDMW;         // For multi-valued RequestTypeWithOptions - (BaseDMWGeneratorNewest.java:1913)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW;                 // For multi-valued RunContextItem - (BaseDMWGeneratorNewest.java:1521)
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.ViewIterableDMW;                           // For multi-valued View - (BaseDMWGeneratorNewest.java:1521)
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventREF;                                // To support getMVCopy() for REFs Event-TREEMAPPED - (BaseDMWGeneratorNewest.java:942)
import org.dmd.mvw.tools.mvwgenerator.types.RequestTypeWithOptions;                            // Primitive type - (BaseDMWGeneratorNewest.java:966)


/**
 * The Component is an abstract base for classes that define the building
 * blocks of Applications. The primary feature of an Component is that it
 * fires and/or handles events. Beyond that, a component can be whatever you
 * require it to be. A variety of derived component types provide more
 * focussed behavioural units. <p /> Many of the classes generated by MVW
 * must be extended in order to provide the actual behaviour of your
 * application e.g. Controllers, Views, Presenters etc. Activities must also
 * be extended to provide your behaviour, however, Activities are also
 * referred to by generated code and must be in a known location. By default,
 * the classes that extend the generated activity class will reside in the
 * 'extended' package that lies beneath the genPackage specified for your
 * module i.e. if your gen package is com.mine, then the  derived activity
 * classes are expected to be in com.mine.extended. If you want to place
 * these classes in a subpackage beneath extended, use the subpackage
 * attribute to indicate the package name e.g. if subpackage is defined as
 * 'activities', your activity implementation class will be expected to
 * reside in com.mine.extended.activities.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:366)
 */
abstract public class ComponentDMW extends MvwDefinition implements DmcNamedObjectIF {

    protected ComponentDMW() {
        super();
    }

    abstract public Component getModificationRecorder();

    public ComponentDMO getDMO() {
        return((ComponentDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNewest.dumpWrapper(BaseDMWGeneratorNewest.java:527)
    protected ComponentDMW(ComponentDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.getAccessFunctions(BaseDMWGeneratorNewest.java:1113)
    public CamelCaseName getObjectName(){
        return(((ComponentDMO) core).getComponentName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ComponentDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ComponentDMW){
            return( getObjectName().equals( ((ComponentDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public CamelCaseName getComponentName(){
        return(((ComponentDMO) core).getComponentName());
    }

    /**
     * Sets componentName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setComponentName(Object value) throws DmcValueException {
        ((ComponentDMO) core).setComponentName(value);
    }

    /**
     * Sets componentName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setComponentName(CamelCaseName value){
        ((ComponentDMO) core).setComponentName(value);
    }

    /**
     * Removes the componentName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remComponentName(){
        ((ComponentDMO) core).remComponentName();
    }

    /**
     * @return The number of EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2152)
    public int getFiresEventSize(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2164)
    public boolean getFiresEventIsEmpty(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2176)
    public boolean getFiresEventHasValue(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed Event object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2192)
    public Event getFiresEvent(Object key){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(null);
        
        return((Event)attr.getByKey(key));
    }

    /**
     * @return the first key of the map.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2223)
    public CamelCaseName getFiresEventFirstKey(){
        return(((ComponentDMO) core).getFiresEventFirstKey());
    }

    /**
     * @return An Iterable of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2247)
    public EventIterableDMW getFiresEventIterable(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        Iterator<EventREF> it = ((ComponentDMO) core).getFiresEvent();
        
        if (it == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(it));
    }

    /**
     * Adds another firesEvent value.
     * @param value EventDMW
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2281)
    public DmcAttribute<?> addFiresEvent(Event value) {
        return(((ComponentDMO) core).addFiresEvent(value.getDMO()));
    }

    /**
     * Deletes a firesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2305)
    public void delFiresEvent(Event value){
        ((ComponentDMO) core).delFiresEvent(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2349)
    public TreeMap<CamelCaseName,Event> getFiresEventCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__firesEvent);
        if (attr == null)
            return(new TreeMap<CamelCaseName,Event>());
        
        TreeMap<CamelCaseName,Event> rc = new TreeMap<CamelCaseName,Event>();
        
        EventIterableDMW it = getFiresEventIterable();
        while(it.hasNext()){
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(),obj);
        }
        return(rc);
    }

    /**
     * Removes the firesEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2503)
    public void remFiresEvent(){
        ((ComponentDMO) core).remFiresEvent();
    }

    /**
     * @return The number of EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2152)
    public int getHandlesEventSize(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2164)
    public boolean getHandlesEventIsEmpty(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2176)
    public boolean getHandlesEventHasValue(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed Event object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2192)
    public Event getHandlesEvent(Object key){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(null);
        
        return((Event)attr.getByKey(key));
    }

    /**
     * @return the first key of the map.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2223)
    public CamelCaseName getHandlesEventFirstKey(){
        return(((ComponentDMO) core).getHandlesEventFirstKey());
    }

    /**
     * @return An Iterable of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2247)
    public EventIterableDMW getHandlesEventIterable(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        Iterator<EventREF> it = ((ComponentDMO) core).getHandlesEvent();
        
        if (it == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(it));
    }

    /**
     * Adds another handlesEvent value.
     * @param value EventDMW
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2281)
    public DmcAttribute<?> addHandlesEvent(Event value) {
        return(((ComponentDMO) core).addHandlesEvent(value.getDMO()));
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2305)
    public void delHandlesEvent(Event value){
        ((ComponentDMO) core).delHandlesEvent(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2349)
    public TreeMap<CamelCaseName,Event> getHandlesEventCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__handlesEvent);
        if (attr == null)
            return(new TreeMap<CamelCaseName,Event>());
        
        TreeMap<CamelCaseName,Event> rc = new TreeMap<CamelCaseName,Event>();
        
        EventIterableDMW it = getHandlesEventIterable();
        while(it.hasNext()){
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(),obj);
        }
        return(rc);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMAPPED(BaseDMWGeneratorNewest.java:2503)
    public void remHandlesEvent(){
        ((ComponentDMO) core).remHandlesEvent();
    }

    /**
     * @return The number of View items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getInstantiatesViewSize(){
        return(((ComponentDMO) core).getInstantiatesViewSize());
    }

    /**
     * @return true if there are no ViewDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getInstantiatesViewIsEmpty(){
        if (((ComponentDMO) core).getInstantiatesViewSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any ViewDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getInstantiatesViewHasValue(){
        if (((ComponentDMO) core).getInstantiatesViewSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of ViewDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1528)
    public ViewIterableDMW getInstantiatesViewIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            return(ViewIterableDMW.emptyList);
        
        return(new ViewIterableDMW(((ComponentDMO) core).getInstantiatesView()));
    }

    /**
     * Adds another instantiatesView value.
     * @param value A value compatible with View
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1585)
    public DmcAttribute<?> addInstantiatesView(View value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addInstantiatesView(((ViewDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a instantiatesView value.
     * @param value The View to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1635)
    public void delInstantiatesView(View value){
        ((ComponentDMO) core).delInstantiatesView(value.getDMO());
    }

    /**
     * @return A COPY of the collection of View objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1697)
    public ArrayList<View> getInstantiatesViewCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__instantiatesView);
        if (attr == null)
            return(new ArrayList<View>());
        
        ArrayList<View> rc = new ArrayList<View>(attr.getMVSize());
        
        ViewIterableDMW it = getInstantiatesViewIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the instantiatesView attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remInstantiatesView(){
        ((ComponentDMO) core).remInstantiatesView();
    }

    /**
     * @return The number of RequestTypeWithOptions items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getSendsRequestSize(){
        return(((ComponentDMO) core).getSendsRequestSize());
    }

    /**
     * @return true if there are no RequestTypeWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getSendsRequestIsEmpty(){
        if (((ComponentDMO) core).getSendsRequestSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RequestTypeWithOptionsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getSendsRequestHasValue(){
        if (((ComponentDMO) core).getSendsRequestSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RequestTypeWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1917)
    public RequestTypeWithOptionsIterableDMW getSendsRequestIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsRequest);
        if (attr == null)
            return(RequestTypeWithOptionsIterableDMW.emptyList);
        
        return(new RequestTypeWithOptionsIterableDMW(((ComponentDMO) core).getSendsRequest()));
    }

    /**
     * Adds another sendsRequest value.
     * @param value A value compatible with RequestTypeWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1943)
    public void addSendsRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).addSendsRequest(value);
    }

    /**
     * Adds another sendsRequest value.
     * @param value A value compatible with RequestTypeWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1953)
    public void addSendsRequest(RequestTypeWithOptions value){
        ((ComponentDMO) core).addSendsRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsRequest value.
     * @param value A value compatible with RequestTypeWithOptions
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2010)
    public boolean sendsRequestContains(RequestTypeWithOptions value){
        return(((ComponentDMO) core).sendsRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestTypeWithOptions objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2052)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestTypeWithOptions> getSendsRequestCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__sendsRequest);
        if (attr == null)
            return(new ArrayList<RequestTypeWithOptions>());
        
        ArrayList<RequestTypeWithOptions> rc = new ArrayList<RequestTypeWithOptions>(attr.getMVSize());
        
        Iterator<RequestTypeWithOptions> it = (Iterator<RequestTypeWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsRequest value.
     * @param value The RequestTypeWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2079)
    public void delSendsRequest(Object value) throws DmcValueException {
        ((ComponentDMO) core).delSendsRequest(value);
    }

    /**
     * Deletes a sendsRequest value.
     * @param value The RequestTypeWithOptions to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2088)
    public void delSendsRequest(RequestTypeWithOptions value){
        ((ComponentDMO) core).delSendsRequest(value);
    }

    /**
     * Removes the sendsRequest attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remSendsRequest(){
        ((ComponentDMO) core).remSendsRequest();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public String getSubpackage(){
        return(((ComponentDMO) core).getSubpackage());
    }

    /**
     * Sets subpackage to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setSubpackage(Object value) throws DmcValueException {
        ((ComponentDMO) core).setSubpackage(value);
    }

    /**
     * Sets subpackage to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setSubpackage(String value){
        ((ComponentDMO) core).setSubpackage(value);
    }

    /**
     * Removes the subpackage attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remSubpackage(){
        ((ComponentDMO) core).remSubpackage();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1286)
    public String getUseBaseClass(){
        return(((ComponentDMO) core).getUseBaseClass());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1396)
    public void setUseBaseClass(Object value) throws DmcValueException {
        ((ComponentDMO) core).setUseBaseClass(value);
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1405)
    public void setUseBaseClass(String value){
        ((ComponentDMO) core).setUseBaseClass(value);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatSV(BaseDMWGeneratorNewest.java:1431)
    public void remUseBaseClass(){
        ((ComponentDMO) core).remUseBaseClass();
    }

    /**
     * @return The number of SchemaDefinition items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getUseSchemaSize(){
        return(((ComponentDMO) core).getUseSchemaSize());
    }

    /**
     * @return true if there are no SchemaDefinitionDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getUseSchemaIsEmpty(){
        if (((ComponentDMO) core).getUseSchemaSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any SchemaDefinitionDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getUseSchemaHasValue(){
        if (((ComponentDMO) core).getUseSchemaSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of SchemaDefinitionDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1528)
    public SchemaDefinitionIterableDMW getUseSchemaIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__useSchema);
        if (attr == null)
            return(SchemaDefinitionIterableDMW.emptyList);
        
        return(new SchemaDefinitionIterableDMW(((ComponentDMO) core).getUseSchema()));
    }

    /**
     * Adds another useSchema value.
     * @param value A value compatible with SchemaDefinition
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1585)
    public DmcAttribute<?> addUseSchema(SchemaDefinitionDMW value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addUseSchema(((SchemaDefinitionDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a useSchema value.
     * @param value The SchemaDefinition to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1635)
    public void delUseSchema(SchemaDefinitionDMW value){
        ((ComponentDMO) core).delUseSchema(value.getDMO());
    }

    /**
     * @return A COPY of the collection of SchemaDefinition objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1697)
    public ArrayList<SchemaDefinitionDMW> getUseSchemaCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__useSchema);
        if (attr == null)
            return(new ArrayList<SchemaDefinitionDMW>());
        
        ArrayList<SchemaDefinitionDMW> rc = new ArrayList<SchemaDefinitionDMW>(attr.getMVSize());
        
        SchemaDefinitionIterableDMW it = getUseSchemaIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the useSchema attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remUseSchema(){
        ((ComponentDMO) core).remUseSchema();
    }

    /**
     * @return The number of RunContextItem items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1483)
    public int getUsesRunContextItemSize(){
        return(((ComponentDMO) core).getUsesRunContextItemSize());
    }

    /**
     * @return true if there are no RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1491)
    public boolean getUsesRunContextItemIsEmpty(){
        if (((ComponentDMO) core).getUsesRunContextItemSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1501)
    public boolean getUsesRunContextItemHasValue(){
        if (((ComponentDMO) core).getUsesRunContextItemSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1528)
    public RunContextItemIterableDMW getUsesRunContextItemIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return(RunContextItemIterableDMW.emptyList);
        
        return(new RunContextItemIterableDMW(((ComponentDMO) core).getUsesRunContextItem()));
    }

    /**
     * Adds another usesRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1585)
    public DmcAttribute<?> addUsesRunContextItem(RunContextItem value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addUsesRunContextItem(((RunContextItemDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a usesRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1635)
    public void delUsesRunContextItem(RunContextItem value){
        ((ComponentDMO) core).delUsesRunContextItem(value.getDMO());
    }

    /**
     * @return A COPY of the collection of RunContextItem objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:1697)
    public TreeSet<RunContextItem> getUsesRunContextItemCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(MvwDMSAG.__usesRunContextItem);
        if (attr == null)
            return(new TreeSet<RunContextItem>());
        
        TreeSet<RunContextItem> rc = new TreeSet<RunContextItem>();
        
        RunContextItemIterableDMW it = getUsesRunContextItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the usesRunContextItem attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNewest.formatMV(BaseDMWGeneratorNewest.java:2100)
    public void remUsesRunContextItem(){
        ((ComponentDMO) core).remUsesRunContextItem();
    }


}
