package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import java.util.ArrayList;                                          // To support getMVCopy()
import java.util.Iterator;                                           // To support getMVCopy()
import org.dmd.dmc.*;                                                // If any attributes
import org.dmd.dmc.types.CamelCaseName;                              // Primitive type
import org.dmd.dms.*;                                                // Always 2
import org.dmd.dms.generated.dmw.StringIterableDMW;                  // For multi-valued String
import org.dmd.dms.generated.types.DmcTypeModifierMV;                // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.View;                 // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;         // Class not auxiliary or abstract

/**
 * The View is used to define the aspects of two kinds of interfaces that
 * define the functionality provided by a view of a model; the event
 * interface and the  data interface.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
public class ViewDMW extends DmwWrapper implements DmcNamedObjectIF {

    public ViewDMW() {
        super(new ViewDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public ViewDMW(DmcTypeModifierMV mods) {
        super(new ViewDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public View getModificationRecorder(){
        View rc = new View();
        rc.setViewName(getViewName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public ViewDMW(ViewDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public ViewDMO getDMO() {
        return((ViewDMO) core);
    }

    protected ViewDMW(ViewDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((ViewDMO) core).getViewName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ViewDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ViewDMW){
            return( getObjectName().equals( ((ViewDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public Boolean isIsWidget(){
        return(((ViewDMO) core).isIsWidget());
    }

    /**
     * Sets isWidget to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setIsWidget(Object value) throws DmcValueException {
        ((ViewDMO) core).setIsWidget(value);
    }

    /**
     * Sets isWidget to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setIsWidget(Boolean value){
        ((ViewDMO) core).setIsWidget(value);
    }

    /**
     * Removes the isWidget attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remIsWidget(){
        ((ViewDMO) core).remIsWidget();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getExtendsInterfaceSize(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getExtendsInterfaceIsEmpty(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getExtendsInterfaceHasValue(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public StringIterableDMW getExtendsInterfaceIterable(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ViewDMO) core).getExtendsInterface()));
    }

    /**
     * Adds another extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addExtendsInterface(Object value) throws DmcValueException {
        ((ViewDMO) core).addExtendsInterface(value);
    }

    /**
     * Adds another extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addExtendsInterface(String value){
        ((ViewDMO) core).addExtendsInterface(value);
    }

    /**
     * Returns true if the collection contains the extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean extendsInterfaceContains(String value){
        return(((ViewDMO) core).extendsInterfaceContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getExtendsInterfaceCopy(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a extendsInterface value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delExtendsInterface(Object value) throws DmcValueException {
        ((ViewDMO) core).delExtendsInterface(value);
    }

    /**
     * Deletes a extendsInterface value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delExtendsInterface(String value){
        ((ViewDMO) core).delExtendsInterface(value);
    }

    /**
     * Removes the extendsInterface attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remExtendsInterface(){
        ((ViewDMO) core).remExtendsInterface();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getViewName(){
        return(((ViewDMO) core).getViewName());
    }

    /**
     * Sets viewName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setViewName(Object value) throws DmcValueException {
        ((ViewDMO) core).setViewName(value);
    }

    /**
     * Sets viewName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setViewName(CamelCaseName value){
        ((ViewDMO) core).setViewName(value);
    }

    /**
     * Removes the viewName attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remViewName(){
        ((ViewDMO) core).remViewName();
    }


}
