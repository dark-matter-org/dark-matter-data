package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import org.dmd.dmc.*;                                                // If any attributes
import org.dmd.dmc.types.CamelCaseName;                              // Primitive type
import org.dmd.dms.*;                                                // Always 2
import org.dmd.dms.generated.types.DmcTypeModifierMV;                // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.Component;            // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.View;                 // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;         // Class not auxiliary or abstract

/**
 * The View is used to define a reusable set of MVW functionality which can
 * be referred to in Application definitions or other Module definitions. Due
 * to the fact there is no common base class for Views in GWT, the View
 * definition allows you to specific your own base class for the View
 * implementation if you happen to have one. That way, you can insert common
 * functonality into the generated abstract View implementations. <P> Each
 * firesEvent/handlesEvent specified for a View will add that event to the
 * View's interface definition. <P> Generated artifacts: the view's
 * event/data interface,  an abstract view implementation with abstract
 * functions for each handlesEvent and set/add data.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class ViewDMW extends Component implements DmcNamedObjectIF {

    public ViewDMW() {
        super(new ViewDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public ViewDMW(DmcTypeModifierMV mods) {
        super(new ViewDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public View getModificationRecorder(){
        View rc = new View();
        rc.setCamelCaseName(getCamelCaseName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public ViewDMW(ViewDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public ViewDMO getDMO() {
        return((ViewDMO) core);
    }

    protected ViewDMW(ViewDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((ViewDMO) core).getCamelCaseName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ViewDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ViewDMW){
            return( getObjectName().equals( ((ViewDMW) obj).getObjectName()) );
        }
        return(false);
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public String getUseBaseClass(){
        return(((ViewDMO) core).getUseBaseClass());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setUseBaseClass(Object value) throws DmcValueException {
        ((ViewDMO) core).setUseBaseClass(value);
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setUseBaseClass(String value){
        ((ViewDMO) core).setUseBaseClass(value);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remUseBaseClass(){
        ((ViewDMO) core).remUseBaseClass();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getCamelCaseName(){
        return(((ViewDMO) core).getCamelCaseName());
    }

    /**
     * Sets camelCaseName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setCamelCaseName(Object value) throws DmcValueException {
        ((ViewDMO) core).setCamelCaseName(value);
    }

    /**
     * Sets camelCaseName to the specified value.
     * @param value CamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setCamelCaseName(CamelCaseName value){
        ((ViewDMO) core).setCamelCaseName(value);
    }

    /**
     * Removes the camelCaseName attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remCamelCaseName(){
        ((ViewDMO) core).remCamelCaseName();
    }


}
