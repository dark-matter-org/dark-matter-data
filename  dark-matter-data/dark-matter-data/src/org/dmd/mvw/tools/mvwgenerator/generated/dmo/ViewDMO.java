//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2011 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.mvw.tools.mvwgenerator.generated.dmo;

// Generated from:  org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:281)
import java.io.Serializable;                                            // Always required
import java.util.*;                                                     // Always required
import org.dmd.dmc.DmcAttribute;                                        // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                                    // Always required
import org.dmd.dmc.DmcNamedObjectIF;                                    // Named object
import org.dmd.dmc.DmcOmni;                                             // Lazy resolution
import org.dmd.dmc.DmcSliceInfo;                                        // Required for object slicing
import org.dmd.dmc.DmcValueException;                                   // Any attributes
import org.dmd.dmc.types.CamelCaseName;                                 // Naming attribute type
import org.dmd.dms.generated.dmo.ClassDefinitionDMO;                    // Type specific set/add
import org.dmd.dms.generated.dmo.DmwWrapperDMO;                         // Structural class
import org.dmd.dms.generated.enums.DataTypeEnum;                        // Required if we have any attributes
import org.dmd.dms.generated.enums.ValueTypeEnum;                       // Required if we have any attributes
import org.dmd.dms.generated.types.ClassDefinitionREF;                  // Reference type helper class
import org.dmd.dms.generated.types.DmcTypeBooleanSV;                    // Required type
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;              // Required type
import org.dmd.dms.generated.types.DmcTypeClassDefinitionREFMV;         // Reference type
import org.dmd.dms.generated.types.DmcTypeModifierMV;                   // Required for MODREC constructor

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The View is used to define the aspects of two kinds of interfaces that
 * define the functionality provided by a view of a model; the event
 * interface and the  data interface.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:136)
 */
@SuppressWarnings("serial")
public class ViewDMO  extends DmwWrapperDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "View";

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __implements = new DmcAttributeInfo("implements",23,"ClassDefinitionREF",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __isWidget = new DmcAttributeInfo("isWidget",813,"Boolean",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __viewName = new DmcAttributeInfo("viewName",812,"CamelCaseName",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__implements.id,__implements);
        _ImAp.put(__isWidget.id,__isWidget);
        _ImAp.put(__viewName.id,__viewName);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__implements.name,__implements);
        _SmAp.put(__isWidget.name,__isWidget);
        _SmAp.put(__viewName.name,__viewName);

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public ViewDMO() {
        super("View");
    }

    protected ViewDMO(String oc) {
        super(oc);
    }

    @Override
    public boolean supportsBackrefTracking(){
        return(false);
    }

    public Map<Integer,DmcAttributeInfo> getIdToAttrInfo(){
        return(_ImAp);
    }

    public Map<String,DmcAttributeInfo> getStringToAttrInfo(){
        return(_SmAp);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public ViewDMO getNew(){
        ViewDMO rc = new ViewDMO();
        return(rc);
    }

    @Override
    public ViewDMO getSlice(DmcSliceInfo info){
        ViewDMO rc = new ViewDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public ViewDMO(DmcTypeModifierMV mods) {
        super("View");
        modrec(true);
        setModifier(mods);
    }

    public ViewDMO getModificationRecorder(){
        ViewDMO rc = new ViewDMO();
        rc.setViewName(getViewName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    //  org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:736)
    public CamelCaseName getObjectName(){
        DmcAttribute<?> name = get(__viewName);
        if (name != null)
            return((CamelCaseName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(__viewName);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof ViewDMO){
            return( getObjectName().equals( ((ViewDMO) obj).getObjectName()) );
        }
        return(false);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public Boolean isIsWidget(){
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(__isWidget);
        if (attr == null)
            return(false);

        return(attr.getSV());
    }

    /**
     * Sets isWidget to the specified value.
     * @param value Boolean
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setIsWidget(Boolean value) {
        DmcAttribute<?> attr = get(__isWidget);
        if (attr == null)
            attr = new DmcTypeBooleanSV(__isWidget);
        
        try{
            attr.set(value);
            set(__isWidget,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets isWidget to the specified value.
     * @param value A value compatible with DmcTypeBooleanSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setIsWidget(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__isWidget);
        if (attr == null)
            attr = new DmcTypeBooleanSV(__isWidget);
        
        attr.set(value);
        set(__isWidget,attr);
    }

    /**
     * Removes the isWidget attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remIsWidget(){
         rem(__isWidget);
    }

    /**
     * @return An Iterator of ClassDefinitionREFDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:745)
    public Iterator<ClassDefinitionREFREF> getImplements(){
        DmcTypeClassDefinitionREFMV attr = (DmcTypeClassDefinitionREFMV) get(__implements);
        if (attr == null)
            return( ((List<ClassDefinitionREFREF>) Collections.EMPTY_LIST).iterator() );

        if (DmcOmni.instance().lazyResolution()){
            if (attr.doLazyResolution(this)){
                rem(attr.getAttributeInfo());
                return( ((List<ClassDefinitionREFREF>) Collections.EMPTY_LIST).iterator() );
            }
        }

        return(attr.getMV());
    }

    /**
     * @return An Iterator of ClassDefinitionREFREFs without attempting lazy resolution (if it's turned on).
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:765)
    public Iterator<ClassDefinitionREFREF> getImplementsREFs(){
        DmcTypeClassDefinitionREFMV attr = (DmcTypeClassDefinitionREFMV) get(__implements);
        if (attr == null)
            return( ((List<ClassDefinitionREFREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another implements to the specified value.
     * @param value ClassDefinitionREF
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:780)
    public DmcAttribute<?> addImplements(ClassDefinitionREFDMO value) {
        DmcAttribute<?> attr = get(__implements);
        if (attr == null)
            attr = new DmcTypeClassDefinitionREFMV(__implements);
        
        try{
            setLastValue(attr.add(value));
            add(__implements,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another implements value.
     * @param value A value compatible with ClassDefinitionREF
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:901)
    public DmcAttribute<?> addImplements(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__implements);
        if (attr == null)
            attr = new DmcTypeClassDefinitionREFMV(__implements);
        
        setLastValue(attr.add(value));
        add(__implements,attr);
        return(attr);
    }

    /**
     * Returns the number of values in implements
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:918)
    public int getImplementsSize(){
        DmcAttribute<?> attr = get(__implements);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a implements value.
     * @param value The ClassDefinitionREF to be deleted from set of attribute values.
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:948)
    public DmcAttribute<?> delImplements(Object value){
        DmcAttribute<?> attr = del(__implements, ((DmcNamedObjectIF)value).getObjectName());
        return(attr);
    }

    /**
     * Removes the implements attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:995)
    public void remImplements(){
         rem(__implements);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public CamelCaseName getViewName(){
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(__viewName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets viewName to the specified value.
     * @param value CamelCaseName
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setViewName(CamelCaseName value) {
        DmcAttribute<?> attr = get(__viewName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__viewName);
        
        try{
            attr.set(value);
            set(__viewName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets viewName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseNameSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setViewName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__viewName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__viewName);
        
        attr.set(value);
        set(__viewName,attr);
    }

    /**
     * Removes the viewName attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remViewName(){
         rem(__viewName);
    }




}
