Module
moduleName	mvw
genPackage	org.dmd.mvw.client.mvw
description	The mvw module provides base functionality on which all Modules
 depend. This includes things like the various aspects of the RunContext.

RunContextItem
itemName		eventBus
useClass     	com.google.gwt.event.shared.EventBus
//importThis		com.google.gwt.event.shared.SimpleEventBus
//construction 	new SimpleEventBus()
importThis		org.dmd.mvw.client.mvw.MvwEventBus
construction 	new MvwEventBus()
itemOrder    	1
description		The overall application event bus.

//RunContextItem
//itemName		placeController
//useClass     	com.google.gwt.place.shared.PlaceController
//construction 	new PlaceController((com.google.gwt.event.shared.EventBus) eventBus)
//itemOrder    	2
//description		The place controller is used to initiate navigation to different
// places by calling its goTo() method.

RunContextItem
itemName		placeController
useClass     	org.dmd.mvw.client.mvw.MvwAsyncPlaceController
construction 	new MvwAsyncPlaceController(this, (com.google.gwt.event.shared.EventBus) eventBus)
itemOrder    	2
description		The place controller is used to initiate navigation to different
 places by calling its goTo() method.


RunContextItem
itemName		activityMapper
useClass     	org.dmd.mvw.client.mvw.MvwActivityMapper
construction 	new MvwActivityMapper(this)
itemOrder    	5
description		The activty mapper is a generic component that can be used for
 all applications; there is no need to create a separate activity mapper for each
 application. This works because of a couple of design choices: 1. Places map 
 one-to-one with Activities and 2. All Places are derived from a common MvwPlace
 which knows how to construct the Activity associated with it.

RunContextItem
itemName		activityManager
useClass     	com.google.gwt.activity.shared.ActivityManager
construction 	new ActivityManager(activityMapper, eventBus)
itemOrder    	6
description		The activity manager keeps track of all Activities running within the
 context of one container widget. It listens for PlaceChangeRequestEvents and notifies
 the current activity when a new Place has been requested. If the current Activity allows
 the Place change (Activity.onMayStop() returns null) or the user allows it (by clicking
 OK in the confirmation dialog), the ActivityManager discards the current Activity
 and starts the new one.
 
//
// Slot 7 is reserved for the application's specific PlaceHistoryMapper, which is
// called historyMapper so that it can be injected into the historyHandler,
// which comes next.
//
 
RunContextItem
itemName		historyHandler
useClass     	com.google.gwt.place.shared.PlaceHistoryHandler
construction 	new PlaceHistoryHandler(historyMapper)
itemOrder    	8
description		The history handler monitors place change and history events and
 keeps them in sync.

RunContextItem
itemName		centralAsyncErrorHandler
useClass     	org.dmd.mvw.client.mvw.MvwAsyncErrorHandlerIF
construction 	null
description		The centralAsyncErrorHandler is a place holder for a controller that
 implements the MvwAsyncErrorHandlerIF interface. This is a bit tricky. We don't know
 in advance which controller will implement this and we don't want to have to introduce
 dependencies into generated code on the run context interface associated with the controller
 that handles these errors. If code splitting is used, we'll fill in the contruction
 attribute and the item order (to be greater than that of the Controller), based on the Controller
 that is flagged as the centralAsyncErrorHandler.

