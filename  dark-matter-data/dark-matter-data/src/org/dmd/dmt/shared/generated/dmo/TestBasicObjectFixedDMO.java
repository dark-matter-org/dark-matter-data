package org.dmd.dmt.shared.generated.dmo;

// Generated from: org.dmd.dms.util.DmoFormatter.formatImports(DmoFormatter.java:707)
import java.util.*;                                        // Always required
import org.dmd.dmc.DmcAttribute;                           // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                       // Always required
import org.dmd.dmc.DmcValueException;                      // Any attributes
import org.dmd.dmc.types.DmcTypeIntegerToString;           // Required type
import org.dmd.dmc.types.DmcTypeLong;                      // Required type
import org.dmd.dmc.types.DmcTypeModifier;                  // Any MV attributes
import org.dmd.dmc.types.DmcTypeString;                    // Required type
import org.dmd.dmc.types.IntegerToString;                  // Primitive type and !auxiliary class
import org.dmd.dmc.types.Modification;                     // Any MV attributes
import org.dmd.dms.generated.dmo.DmwWrapperDMO;            // Structural class
import org.dmd.dms.generated.enums.ModifyTypeEnum;         // Any MV attributes
import org.dmd.dms.generated.enums.ValueTypeEnum;          // Always required

/**
 * The TestBasicObjectFixed class provides a test bed for all types of basic
 * attribute values.
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:140)
 */
@SuppressWarnings("serial")
public class TestBasicObjectFixedDMO  extends DmwWrapperDMO  {

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __intToString = new DmcAttributeInfo("intToString",820,"IntegerToString",ValueTypeEnum.HASHMAPPED,false);
    public final static DmcAttributeInfo __mvLongValue = new DmcAttributeInfo("mvLongValue",813,"Long",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __mvStringValue = new DmcAttributeInfo("mvStringValue",817,"String",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __svStringValue = new DmcAttributeInfo("svStringValue",816,"String",ValueTypeEnum.SINGLE,false);

    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__intToString.id,__intToString);
        _ImAp.put(__mvLongValue.id,__mvLongValue);
        _ImAp.put(__mvStringValue.id,__mvStringValue);
        _ImAp.put(__svStringValue.id,__svStringValue);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__intToString.name,__intToString);
        _SmAp.put(__mvLongValue.name,__mvLongValue);
        _SmAp.put(__mvStringValue.name,__mvStringValue);
        _SmAp.put(__svStringValue.name,__svStringValue);
    }

    public TestBasicObjectFixedDMO() {
        super("TestBasicObjectFixed",_ImAp,_SmAp);
    }

    protected TestBasicObjectFixedDMO(String oc) {
        super(oc,_ImAp,_SmAp);
    }

    public TestBasicObjectFixedDMO(String oc, Map<Integer,DmcAttributeInfo> im, Map<String,DmcAttributeInfo> sm){
        super(oc,im,sm);
    }

    public TestBasicObjectFixedDMO(TestBasicObjectFixedDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    @Override
    public TestBasicObjectFixedDMO getOneOfMe() {
        TestBasicObjectFixedDMO rc = new TestBasicObjectFixedDMO(this.getConstructionClassName());
        return(rc);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:432)
    public Iterator<String> getMvStringValue(){
        DmcTypeString attr = (DmcTypeString) get(__mvStringValue);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * Adds another mvStringValue value.
     * @param value A value compatible with String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addMvStringValue(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__mvStringValue);
        if (attr == null)
            attr = new DmcTypeString(__mvStringValue);
        
        attr.add(value);
        add(__mvStringValue,attr);
        return(attr);
    }

    /**
     * Deletes a mvStringValue value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:518)
    public DmcAttribute<?> delMvStringValue(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__mvStringValue, value);
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeString(__mvStringValue);
                attr.setName(__mvStringValue.name);
                attr.add(value);
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the mvStringValue attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remMvStringValue(){
         rem(__mvStringValue);
    }

    /**
     * @return An Iterator of IntegerToString objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:602)
    public Iterator<IntegerToString> getIntToString(){
        DmcTypeIntegerToString attr = (DmcTypeIntegerToString) get(__intToString);
        if (attr == null)
            return( ((List<IntegerToString>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @param key The key of the value you want.
     * @return The IntegerToString associated with the specified key.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:620)
    public IntegerToString getIntToStringByKey(Object key){
        DmcTypeIntegerToString attr = (DmcTypeIntegerToString) get(__intToString);
        if (attr == null)
            return(null);

        return(attr.getByKey(key));
    }

    /**
     * Adds another intToString value.
     * @param value A value compatible with IntegerToString
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:637)
    public DmcAttribute<?> addIntToString(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__intToString);
        if (attr == null){
            attr = new DmcTypeIntegerToString();
            attr.setAttributeInfo(__intToString);
        }
        
        attr.add(value);
        add(__intToString,attr);
        return(attr);
    }

    /**
     * Deletes a intToString value.
     * @param key The key of the IntegerToString to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:693)
    public DmcAttribute<?> delIntToString(Object key) throws DmcValueException {
        DmcAttribute<?> attr = del(__intToString, key);
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeIntegerToString();
                attr.setName(__intToString.name);
                attr.add(key);
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the intToString attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMAPPED(GenUtility.java:714)
    public void remIntToString(){
         rem(__intToString);
    }

    /**
     * @return An Iterator of Long objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:432)
    public Iterator<Long> getMvLongValue(){
        DmcTypeLong attr = (DmcTypeLong) get(__mvLongValue);
        if (attr == null)
            return( ((List<Long>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * Adds another mvLongValue value.
     * @param value A value compatible with Long
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addMvLongValue(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__mvLongValue);
        if (attr == null)
            attr = new DmcTypeLong(__mvLongValue);
        
        attr.add(value);
        add(__mvLongValue,attr);
        return(attr);
    }

    /**
     * Deletes a mvLongValue value.
     * @param value The Long to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:518)
    public DmcAttribute<?> delMvLongValue(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__mvLongValue, value);
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeLong(__mvLongValue);
                attr.setName(__mvLongValue.name);
                attr.add(value);
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the mvLongValue attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remMvLongValue(){
         rem(__mvLongValue);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public String getSvStringValue(){
        DmcTypeString attr = (DmcTypeString) get(__svStringValue);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets svStringValue to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setSvStringValue(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__svStringValue);
        if (attr == null)
            attr = new DmcTypeString(__svStringValue);
        
        attr.set(value);
        set(__svStringValue,attr);
    }

    /**
     * Removes the svStringValue attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remSvStringValue(){
         rem(__svStringValue);
    }




}
