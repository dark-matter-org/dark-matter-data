package org.dmd.dmt.server.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:751)
import java.util.Date;                                                          // For multi-valued containsDate
import org.dmd.dmc.*;                                                           // If any attributes
import org.dmd.dmc.types.IntegerToString;                                       // For multi-valued containsIntegerToString
import org.dmd.dms.*;                                                           // Always 2
import org.dmd.dms.generated.dmw.BooleanIterableDMW;                            // For multi-valued Boolean
import org.dmd.dms.generated.dmw.DateIterableDMW;                               // For multi-valued Date
import org.dmd.dms.generated.dmw.DoubleIterableDMW;                             // For multi-valued Double
import org.dmd.dms.generated.dmw.FloatIterableDMW;                              // For multi-valued Float
import org.dmd.dms.generated.dmw.IntegerIterableDMW;                            // For multi-valued Integer
import org.dmd.dms.generated.dmw.IntegerToStringIterableDMW;                    // For multi-valued IntegerToString
import org.dmd.dms.generated.dmw.LongIterableDMW;                               // For multi-valued Long
import org.dmd.dms.generated.dmw.StringIterableDMW;                             // For multi-valued String
import org.dmd.dmt.server.generated.dmw.TestBasicNamedObjectFixedDMW;           // Is reference type aux
import org.dmd.dmt.shared.generated.dmo.TestBasicObjectFixedDMO;                // Class not auxiliary or abstract
import org.dmd.dmt.shared.generated.types.TestBasicNamedObjectFixedREF;         // Is reference type REF

/**
 * The TestBasicObjectFixed class provides a test bed for all types of basic
 * attribute values.
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:339)
 */
public class TestBasicObjectFixedDMW extends DmwWrapper {

    private TestBasicObjectFixedDMO mycore;

    public TestBasicObjectFixedDMW() {
        super(new TestBasicObjectFixedDMO(), org.dmd.dmt.server.generated.DmtSchemaAG._TestBasicObjectFixed);
        mycore = (TestBasicObjectFixedDMO) core;
        mycore.setContainer(this);
    }

    public TestBasicObjectFixedDMW(TestBasicObjectFixedDMO obj) {
        super(obj, org.dmd.dmt.server.generated.DmtSchemaAG._TestBasicObjectFixed);
        mycore = (TestBasicObjectFixedDMO) core;
        mycore.setContainer(this);
    }

    @Override
    public void setDmcObject(DmcObject obj) {
        mycore = (TestBasicObjectFixedDMO) obj;
        mycore.setContainer(this);
        super.setDmcObject(obj);
    }

    public TestBasicObjectFixedDMO getDMO() {
        return(mycore);
    }

    protected TestBasicObjectFixedDMW(TestBasicObjectFixedDMO obj, ClassDefinition cd) {
        super(obj,cd);
        mycore = (TestBasicObjectFixedDMO) core;
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:881)
    public Boolean isSvBoolean(){
        return(mycore.isSvBoolean());
    }

    /**
     * Sets svBoolean to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:928)
    public void setSvBoolean(Object value) throws DmcValueException {
        mycore.setSvBoolean(value);
    }

    /**
     * Sets svBoolean to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:937)
    public void setSvBoolean(Boolean value){
        mycore.setSvBoolean(value);
    }

    /**
     * Removes the svBoolean attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvBoolean(){
        mycore.remSvBoolean();
    }

    /**
     * @return The number of BooleanDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getMvBooleanSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvBoolean);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no BooleanDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getMvBooleanIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvBoolean);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any BooleanDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getMvBooleanHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvBoolean);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Boolean objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public BooleanIterableDMW getMvBooleanIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvBoolean);
        if (attr == null)
            return(BooleanIterableDMW.emptyList);
        
        return(new BooleanIterableDMW(mycore.getMvBoolean()));
    }

    /**
     * Adds another mvBoolean value.
     * @param value A value compatible with Boolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addMvBoolean(Object value) throws DmcValueException {
        mycore.addMvBoolean(value);
    }

    /**
     * Returns true if the collection contains the mvBoolean value.
     * @param value A value compatible with Boolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean mvBooleanContains(Boolean value){
        return(mycore.mvBooleanContains(value));
    }

    /**
     * Deletes a mvBoolean value.
     * @param value The Boolean to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delMvBoolean(Object value) throws DmcValueException {
        mycore.delMvBoolean(value);
    }

    /**
     * Removes the mvBoolean attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remMvBoolean(){
        mycore.remMvBoolean();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:881)
    public Date getSvDate(){
        return(mycore.getSvDate());
    }

    /**
     * Sets svDate to the specified value.
     * @param value A value compatible with DmcTypeDate
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:928)
    public void setSvDate(Object value) throws DmcValueException {
        mycore.setSvDate(value);
    }

    /**
     * Sets svDate to the specified value.
     * @param value Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:937)
    public void setSvDate(Date value){
        mycore.setSvDate(value);
    }

    /**
     * Removes the svDate attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvDate(){
        mycore.remSvDate();
    }

    /**
     * @return The number of DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getMvDateSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDate);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getMvDateIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDate);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getMvDateHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDate);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Date objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public DateIterableDMW getMvDateIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDate);
        if (attr == null)
            return(DateIterableDMW.emptyList);
        
        return(new DateIterableDMW(mycore.getMvDate()));
    }

    /**
     * Adds another mvDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addMvDate(Object value) throws DmcValueException {
        mycore.addMvDate(value);
    }

    /**
     * Returns true if the collection contains the mvDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean mvDateContains(Date value){
        return(mycore.mvDateContains(value));
    }

    /**
     * Deletes a mvDate value.
     * @param value The Date to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delMvDate(Object value) throws DmcValueException {
        mycore.delMvDate(value);
    }

    /**
     * Removes the mvDate attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remMvDate(){
        mycore.remMvDate();
    }

    /**
     * @return The number of DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getHsDateSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDate);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getHsDateIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDate);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getHsDateHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDate);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Date objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public DateIterableDMW getHsDateIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDate);
        if (attr == null)
            return(DateIterableDMW.emptyList);
        
        return(new DateIterableDMW(mycore.getHsDate()));
    }

    /**
     * Adds another hsDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addHsDate(Object value) throws DmcValueException {
        mycore.addHsDate(value);
    }

    /**
     * Returns true if the collection contains the hsDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean hsDateContains(Date value){
        return(mycore.hsDateContains(value));
    }

    /**
     * Deletes a hsDate value.
     * @param value The Date to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delHsDate(Object value) throws DmcValueException {
        mycore.delHsDate(value);
    }

    /**
     * Removes the hsDate attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remHsDate(){
        mycore.remHsDate();
    }

    /**
     * @return The number of DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getTsDateSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDate);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getTsDateIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDate);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getTsDateHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDate);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Date objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public DateIterableDMW getTsDateIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDate);
        if (attr == null)
            return(DateIterableDMW.emptyList);
        
        return(new DateIterableDMW(mycore.getTsDate()));
    }

    /**
     * Adds another tsDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addTsDate(Object value) throws DmcValueException {
        mycore.addTsDate(value);
    }

    /**
     * Returns true if the collection contains the tsDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean tsDateContains(Date value){
        return(mycore.tsDateContains(value));
    }

    /**
     * Deletes a tsDate value.
     * @param value The Date to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delTsDate(Object value) throws DmcValueException {
        mycore.delTsDate(value);
    }

    /**
     * Removes the tsDate attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remTsDate(){
        mycore.remTsDate();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:881)
    public Double getSvDouble(){
        return(mycore.getSvDouble());
    }

    /**
     * Sets svDouble to the specified value.
     * @param value A value compatible with DmcTypeDouble
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:928)
    public void setSvDouble(Object value) throws DmcValueException {
        mycore.setSvDouble(value);
    }

    /**
     * Sets svDouble to the specified value.
     * @param value Double
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:937)
    public void setSvDouble(Double value){
        mycore.setSvDouble(value);
    }

    /**
     * Removes the svDouble attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvDouble(){
        mycore.remSvDouble();
    }

    /**
     * @return The number of DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getMvDoubleSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDouble);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getMvDoubleIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDouble);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getMvDoubleHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDouble);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Double objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public DoubleIterableDMW getMvDoubleIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvDouble);
        if (attr == null)
            return(DoubleIterableDMW.emptyList);
        
        return(new DoubleIterableDMW(mycore.getMvDouble()));
    }

    /**
     * Adds another mvDouble value.
     * @param value A value compatible with Double
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addMvDouble(Object value) throws DmcValueException {
        mycore.addMvDouble(value);
    }

    /**
     * Returns true if the collection contains the mvDouble value.
     * @param value A value compatible with Double
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean mvDoubleContains(Double value){
        return(mycore.mvDoubleContains(value));
    }

    /**
     * Deletes a mvDouble value.
     * @param value The Double to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delMvDouble(Object value) throws DmcValueException {
        mycore.delMvDouble(value);
    }

    /**
     * Removes the mvDouble attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remMvDouble(){
        mycore.remMvDouble();
    }

    /**
     * @return The number of DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getHsDoubleSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDouble);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getHsDoubleIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDouble);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getHsDoubleHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDouble);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Double objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public DoubleIterableDMW getHsDoubleIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsDouble);
        if (attr == null)
            return(DoubleIterableDMW.emptyList);
        
        return(new DoubleIterableDMW(mycore.getHsDouble()));
    }

    /**
     * Adds another hsDouble value.
     * @param value A value compatible with Double
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addHsDouble(Object value) throws DmcValueException {
        mycore.addHsDouble(value);
    }

    /**
     * Returns true if the collection contains the hsDouble value.
     * @param value A value compatible with Double
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean hsDoubleContains(Double value){
        return(mycore.hsDoubleContains(value));
    }

    /**
     * Deletes a hsDouble value.
     * @param value The Double to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delHsDouble(Object value) throws DmcValueException {
        mycore.delHsDouble(value);
    }

    /**
     * Removes the hsDouble attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remHsDouble(){
        mycore.remHsDouble();
    }

    /**
     * @return The number of DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getTsDoubleSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDouble);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getTsDoubleIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDouble);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DoubleDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getTsDoubleHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDouble);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Double objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public DoubleIterableDMW getTsDoubleIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsDouble);
        if (attr == null)
            return(DoubleIterableDMW.emptyList);
        
        return(new DoubleIterableDMW(mycore.getTsDouble()));
    }

    /**
     * Adds another tsDouble value.
     * @param value A value compatible with Double
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addTsDouble(Object value) throws DmcValueException {
        mycore.addTsDouble(value);
    }

    /**
     * Returns true if the collection contains the tsDouble value.
     * @param value A value compatible with Double
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean tsDoubleContains(Double value){
        return(mycore.tsDoubleContains(value));
    }

    /**
     * Deletes a tsDouble value.
     * @param value The Double to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delTsDouble(Object value) throws DmcValueException {
        mycore.delTsDouble(value);
    }

    /**
     * Removes the tsDouble attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remTsDouble(){
        mycore.remTsDouble();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:881)
    public Float getSvFloat(){
        return(mycore.getSvFloat());
    }

    /**
     * Sets svFloat to the specified value.
     * @param value A value compatible with DmcTypeFloat
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:928)
    public void setSvFloat(Object value) throws DmcValueException {
        mycore.setSvFloat(value);
    }

    /**
     * Sets svFloat to the specified value.
     * @param value Float
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:937)
    public void setSvFloat(Float value){
        mycore.setSvFloat(value);
    }

    /**
     * Removes the svFloat attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvFloat(){
        mycore.remSvFloat();
    }

    /**
     * @return The number of FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getMvFloatSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvFloat);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getMvFloatIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvFloat);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getMvFloatHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvFloat);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Float objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public FloatIterableDMW getMvFloatIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvFloat);
        if (attr == null)
            return(FloatIterableDMW.emptyList);
        
        return(new FloatIterableDMW(mycore.getMvFloat()));
    }

    /**
     * Adds another mvFloat value.
     * @param value A value compatible with Float
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addMvFloat(Object value) throws DmcValueException {
        mycore.addMvFloat(value);
    }

    /**
     * Returns true if the collection contains the mvFloat value.
     * @param value A value compatible with Float
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean mvFloatContains(Float value){
        return(mycore.mvFloatContains(value));
    }

    /**
     * Deletes a mvFloat value.
     * @param value The Float to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delMvFloat(Object value) throws DmcValueException {
        mycore.delMvFloat(value);
    }

    /**
     * Removes the mvFloat attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remMvFloat(){
        mycore.remMvFloat();
    }

    /**
     * @return The number of FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getHsFloatSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsFloat);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getHsFloatIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsFloat);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getHsFloatHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsFloat);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Float objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public FloatIterableDMW getHsFloatIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsFloat);
        if (attr == null)
            return(FloatIterableDMW.emptyList);
        
        return(new FloatIterableDMW(mycore.getHsFloat()));
    }

    /**
     * Adds another hsFloat value.
     * @param value A value compatible with Float
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addHsFloat(Object value) throws DmcValueException {
        mycore.addHsFloat(value);
    }

    /**
     * Returns true if the collection contains the hsFloat value.
     * @param value A value compatible with Float
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean hsFloatContains(Float value){
        return(mycore.hsFloatContains(value));
    }

    /**
     * Deletes a hsFloat value.
     * @param value The Float to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delHsFloat(Object value) throws DmcValueException {
        mycore.delHsFloat(value);
    }

    /**
     * Removes the hsFloat attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remHsFloat(){
        mycore.remHsFloat();
    }

    /**
     * @return The number of FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getTsFloatSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsFloat);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getTsFloatIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsFloat);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any FloatDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getTsFloatHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsFloat);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Float objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public FloatIterableDMW getTsFloatIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsFloat);
        if (attr == null)
            return(FloatIterableDMW.emptyList);
        
        return(new FloatIterableDMW(mycore.getTsFloat()));
    }

    /**
     * Adds another tsFloat value.
     * @param value A value compatible with Float
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addTsFloat(Object value) throws DmcValueException {
        mycore.addTsFloat(value);
    }

    /**
     * Returns true if the collection contains the tsFloat value.
     * @param value A value compatible with Float
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean tsFloatContains(Float value){
        return(mycore.tsFloatContains(value));
    }

    /**
     * Deletes a tsFloat value.
     * @param value The Float to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delTsFloat(Object value) throws DmcValueException {
        mycore.delTsFloat(value);
    }

    /**
     * Removes the tsFloat attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remTsFloat(){
        mycore.remTsFloat();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:881)
    public Integer getSvInteger(){
        return(mycore.getSvInteger());
    }

    /**
     * Sets svInteger to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:928)
    public void setSvInteger(Object value) throws DmcValueException {
        mycore.setSvInteger(value);
    }

    /**
     * Sets svInteger to the specified value.
     * @param value Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:937)
    public void setSvInteger(Integer value){
        mycore.setSvInteger(value);
    }

    /**
     * Removes the svInteger attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvInteger(){
        mycore.remSvInteger();
    }

    /**
     * @return The number of IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getMvIntegerSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvInteger);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getMvIntegerIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvInteger);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getMvIntegerHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvInteger);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Integer objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public IntegerIterableDMW getMvIntegerIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvInteger);
        if (attr == null)
            return(IntegerIterableDMW.emptyList);
        
        return(new IntegerIterableDMW(mycore.getMvInteger()));
    }

    /**
     * Adds another mvInteger value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addMvInteger(Object value) throws DmcValueException {
        mycore.addMvInteger(value);
    }

    /**
     * Returns true if the collection contains the mvInteger value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean mvIntegerContains(Integer value){
        return(mycore.mvIntegerContains(value));
    }

    /**
     * Deletes a mvInteger value.
     * @param value The Integer to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delMvInteger(Object value) throws DmcValueException {
        mycore.delMvInteger(value);
    }

    /**
     * Removes the mvInteger attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remMvInteger(){
        mycore.remMvInteger();
    }

    /**
     * @return The number of IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getHsIntegerSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsInteger);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getHsIntegerIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsInteger);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getHsIntegerHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsInteger);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Integer objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public IntegerIterableDMW getHsIntegerIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsInteger);
        if (attr == null)
            return(IntegerIterableDMW.emptyList);
        
        return(new IntegerIterableDMW(mycore.getHsInteger()));
    }

    /**
     * Adds another hsInteger value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addHsInteger(Object value) throws DmcValueException {
        mycore.addHsInteger(value);
    }

    /**
     * Returns true if the collection contains the hsInteger value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean hsIntegerContains(Integer value){
        return(mycore.hsIntegerContains(value));
    }

    /**
     * Deletes a hsInteger value.
     * @param value The Integer to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delHsInteger(Object value) throws DmcValueException {
        mycore.delHsInteger(value);
    }

    /**
     * Removes the hsInteger attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remHsInteger(){
        mycore.remHsInteger();
    }

    /**
     * @return The number of IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getTsIntegerSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsInteger);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getTsIntegerIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsInteger);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getTsIntegerHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsInteger);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Integer objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public IntegerIterableDMW getTsIntegerIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsInteger);
        if (attr == null)
            return(IntegerIterableDMW.emptyList);
        
        return(new IntegerIterableDMW(mycore.getTsInteger()));
    }

    /**
     * Adds another tsInteger value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addTsInteger(Object value) throws DmcValueException {
        mycore.addTsInteger(value);
    }

    /**
     * Returns true if the collection contains the tsInteger value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean tsIntegerContains(Integer value){
        return(mycore.tsIntegerContains(value));
    }

    /**
     * Deletes a tsInteger value.
     * @param value The Integer to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delTsInteger(Object value) throws DmcValueException {
        mycore.delTsInteger(value);
    }

    /**
     * Removes the tsInteger attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remTsInteger(){
        mycore.remTsInteger();
    }

    /**
     * @return The number of IntegerToStringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1200)
    public int getIntToStringSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__intToString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no IntegerToStringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1212)
    public boolean getIntToStringIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__intToString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any IntegerToStringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1224)
    public boolean getIntToStringHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__intToString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed IntegerToString object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1239)
    public IntegerToString getIntToString(Object key){
        // NOT IMPLEMENTED YET 
        return(null);
    }

    /**
     * @return An Iterator of IntegerToString objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1297)
    public IntegerToStringIterableDMW getIntToStringIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__intToString);
        if (attr == null)
            return(IntegerToStringIterableDMW.emptyList);
        
        return(new IntegerToStringIterableDMW(mycore.getIntToString()));
    }

    /**
     * Adds another intToString value.
     * @param value A value compatible with IntegerToString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1313)
    public void addIntToString(Object value) throws DmcValueException {
        mycore.addIntToString(value);
    }

    /**
     * Adds another intToString value.
     * @param value IntegerToString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1322)
    public void addIntToString(IntegerToString value) {
        mycore.addIntToString(value);
    }

    /**
     * Deletes a intToString value.
     * @param value The IntegerToString to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1334)
    public void delIntToString(Object value) throws DmcValueException {
        mycore.delIntToString(value);
    }

    /**
     * Deletes a intToString value.
     * @param value The IntegerToString to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1343)
    public void delIntToString(Integer value){
        mycore.delIntToString(value);
    }

    /**
     * Removes the intToString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1367)
    public void remIntToString(){
        mycore.remIntToString();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:881)
    public Long getSvLong(){
        return(mycore.getSvLong());
    }

    /**
     * Sets svLong to the specified value.
     * @param value A value compatible with DmcTypeLong
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:928)
    public void setSvLong(Object value) throws DmcValueException {
        mycore.setSvLong(value);
    }

    /**
     * Sets svLong to the specified value.
     * @param value Long
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:937)
    public void setSvLong(Long value){
        mycore.setSvLong(value);
    }

    /**
     * Removes the svLong attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvLong(){
        mycore.remSvLong();
    }

    /**
     * @return The number of LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getMvLongSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvLong);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getMvLongIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvLong);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getMvLongHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvLong);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Long objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public LongIterableDMW getMvLongIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvLong);
        if (attr == null)
            return(LongIterableDMW.emptyList);
        
        return(new LongIterableDMW(mycore.getMvLong()));
    }

    /**
     * Adds another mvLong value.
     * @param value A value compatible with Long
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addMvLong(Object value) throws DmcValueException {
        mycore.addMvLong(value);
    }

    /**
     * Returns true if the collection contains the mvLong value.
     * @param value A value compatible with Long
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean mvLongContains(Long value){
        return(mycore.mvLongContains(value));
    }

    /**
     * Deletes a mvLong value.
     * @param value The Long to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delMvLong(Object value) throws DmcValueException {
        mycore.delMvLong(value);
    }

    /**
     * Removes the mvLong attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remMvLong(){
        mycore.remMvLong();
    }

    /**
     * @return The number of LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getHsLongSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsLong);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getHsLongIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsLong);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getHsLongHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsLong);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Long objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public LongIterableDMW getHsLongIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsLong);
        if (attr == null)
            return(LongIterableDMW.emptyList);
        
        return(new LongIterableDMW(mycore.getHsLong()));
    }

    /**
     * Adds another hsLong value.
     * @param value A value compatible with Long
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addHsLong(Object value) throws DmcValueException {
        mycore.addHsLong(value);
    }

    /**
     * Returns true if the collection contains the hsLong value.
     * @param value A value compatible with Long
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean hsLongContains(Long value){
        return(mycore.hsLongContains(value));
    }

    /**
     * Deletes a hsLong value.
     * @param value The Long to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delHsLong(Object value) throws DmcValueException {
        mycore.delHsLong(value);
    }

    /**
     * Removes the hsLong attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remHsLong(){
        mycore.remHsLong();
    }

    /**
     * @return The number of LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getTsLongSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsLong);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getTsLongIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsLong);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any LongDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getTsLongHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsLong);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Long objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public LongIterableDMW getTsLongIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsLong);
        if (attr == null)
            return(LongIterableDMW.emptyList);
        
        return(new LongIterableDMW(mycore.getTsLong()));
    }

    /**
     * Adds another tsLong value.
     * @param value A value compatible with Long
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addTsLong(Object value) throws DmcValueException {
        mycore.addTsLong(value);
    }

    /**
     * Returns true if the collection contains the tsLong value.
     * @param value A value compatible with Long
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean tsLongContains(Long value){
        return(mycore.tsLongContains(value));
    }

    /**
     * Deletes a tsLong value.
     * @param value The Long to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delTsLong(Object value) throws DmcValueException {
        mycore.delTsLong(value);
    }

    /**
     * Removes the tsLong attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remTsLong(){
        mycore.remTsLong();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:881)
    public String getSvString(){
        return(mycore.getSvString());
    }

    /**
     * Sets svString to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:928)
    public void setSvString(Object value) throws DmcValueException {
        mycore.setSvString(value);
    }

    /**
     * Sets svString to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:937)
    public void setSvString(String value){
        mycore.setSvString(value);
    }

    /**
     * Removes the svString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvString(){
        mycore.remSvString();
    }

    /**
     * @return The number of StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getMvStringSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getMvStringIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getMvStringHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public StringIterableDMW getMvStringIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__mvString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(mycore.getMvString()));
    }

    /**
     * Adds another mvString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addMvString(Object value) throws DmcValueException {
        mycore.addMvString(value);
    }

    /**
     * Returns true if the collection contains the mvString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean mvStringContains(String value){
        return(mycore.mvStringContains(value));
    }

    /**
     * Deletes a mvString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delMvString(Object value) throws DmcValueException {
        mycore.delMvString(value);
    }

    /**
     * Removes the mvString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remMvString(){
        mycore.remMvString();
    }

    /**
     * @return The number of StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getHsStringSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getHsStringIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getHsStringHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public StringIterableDMW getHsStringIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__hsString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(mycore.getHsString()));
    }

    /**
     * Adds another hsString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addHsString(Object value) throws DmcValueException {
        mycore.addHsString(value);
    }

    /**
     * Returns true if the collection contains the hsString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean hsStringContains(String value){
        return(mycore.hsStringContains(value));
    }

    /**
     * Deletes a hsString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delHsString(Object value) throws DmcValueException {
        mycore.delHsString(value);
    }

    /**
     * Removes the hsString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remHsString(){
        mycore.remHsString();
    }

    /**
     * @return The number of StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1002)
    public int getTsStringSize(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1014)
    public boolean getTsStringIsEmpty(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1026)
    public boolean getTsStringHasValue(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1098)
    public StringIterableDMW getTsStringIterable(){
        DmcAttribute<?> attr = mycore.get(TestBasicObjectFixedDMO.__tsString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(mycore.getTsString()));
    }

    /**
     * Adds another tsString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1114)
    public void addTsString(Object value) throws DmcValueException {
        mycore.addTsString(value);
    }

    /**
     * Returns true if the collection contains the tsString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1126)
    public boolean tsStringContains(String value){
        return(mycore.tsStringContains(value));
    }

    /**
     * Deletes a tsString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1138)
    public void delTsString(Object value) throws DmcValueException {
        mycore.delTsString(value);
    }

    /**
     * Removes the tsString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public void remTsString(){
        mycore.remTsString();
    }

    /**
     * @return A TestBasicNamedObjectFixedDMW object.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:861)
    public TestBasicNamedObjectFixedDMW getSvTestBasicNamedObjectFixed(){
        TestBasicNamedObjectFixedREF ref = mycore.getSvTestBasicNamedObjectFixed();
        if (ref == null)
            return(null);
        
        return((TestBasicNamedObjectFixedDMW)ref.getObject().getContainer());
    }

    /**
     * Sets the svTestBasicNamedObjectFixed to the specified value.
     * @param value A value compatible with TestBasicNamedObjectFixedREF
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:905)
    public void setSvTestBasicNamedObjectFixed(TestBasicNamedObjectFixedDMW value) {
        mycore.setSvTestBasicNamedObjectFixed(value.getDMO());
    }

    /**
     * Removes the svTestBasicNamedObjectFixed attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:952)
    public void remSvTestBasicNamedObjectFixed(){
        mycore.remSvTestBasicNamedObjectFixed();
    }


}
