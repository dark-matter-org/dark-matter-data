package org.dmd.features.extgwt.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:665)
import java.util.*;                                              // Always 1
import org.dmd.dmc.*;                                            // Always 2
import org.dmd.dmc.types.StringName;                             // Primitive type
import org.dmd.dms.*;                                            // Always 3
import org.dmd.features.extgwt.extended.MvcDefinition;           // Derived class
import org.dmd.features.extgwt.extended.MvcEvent;                // Is reference type
import org.dmd.features.extgwt.extended.MvcRegistryItem;         // Is reference type
import org.dmd.features.extgwt.extended.MvcServerEvent;          // Is reference type
import org.dmd.features.extgwt.generated.dmo.MvcViewDMO;         // Class not auxiliary or abstract

/**
 * The MvcView class allows for the definition of views. MvcView instance are
 * derived from the ExtGWT View class.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:231)
 */
abstract public class MvcViewDMW extends MvcDefinition implements DmcNamedObjectIF {

    private MvcViewDMO mycore;

    public MvcViewDMW() {
        super(new MvcViewDMO(), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcView);
        mycore = (MvcViewDMO) core;
        mycore.setContainer(this);
    }

    public MvcViewDMW(MvcViewDMO obj) {
        super(obj, org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcView);
        mycore = (MvcViewDMO) core;
        mycore.setContainer(this);
    }

    @Override
    public void setDmcObject(DmcObject obj) {
        mycore = (MvcViewDMO) obj;
        mycore.setContainer(this);
        super.setDmcObject(obj);
    }

    protected MvcViewDMW(MvcViewDMO obj, ClassDefinition cd) {
        super(obj,cd);
        mycore = (MvcViewDMO) core;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected ArrayList getAuxDataHolder() {
        return(new ArrayList<org.dmd.features.extgwt.extended.MvcView>());
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:697)
    public StringName getObjectName(){
        return(mycore.getName());
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcViewDMW){
            return( getObjectName().equals( ((MvcViewDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:880)
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:882)
    public Iterator<MvcEvent> getHandlesEvent(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__handlesEvent);
        if (attr == null)
            return( ((List<MvcEvent>) Collections.EMPTY_LIST).iterator() );
        
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs == null)
            return( ((List<MvcEvent>) Collections.EMPTY_LIST).iterator() );
        
        return(refs.iterator());
    }

    /**
     * Adds another handlesEvent value.
     * @param value A value compatible with MvcEvent
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:908)
    public DmcAttribute<?> addHandlesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addHandlesEvent(value.getDmcObject());
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs == null){
            refs = new ArrayList<MvcEvent>();
            attr.setAuxData(refs);
        }
        refs.add(value);
        return(attr);
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:929)
    public void delHandlesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delHandlesEvent(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:985)
    public void remHandlesEvent(){
        mycore.remHandlesEvent();
    }

    /**
     * @return An Iterator of MvcServerEventDMO objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:880)
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:882)
    public Iterator<MvcServerEvent> getHandlesServerEvent(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__handlesServerEvent);
        if (attr == null)
            return( ((List<MvcServerEvent>) Collections.EMPTY_LIST).iterator() );
        
        ArrayList<MvcServerEvent> refs = (ArrayList<MvcServerEvent>) attr.getAuxData();
        
        if (refs == null)
            return( ((List<MvcServerEvent>) Collections.EMPTY_LIST).iterator() );
        
        return(refs.iterator());
    }

    /**
     * Adds another handlesServerEvent value.
     * @param value A value compatible with MvcServerEvent
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:908)
    public DmcAttribute<?> addHandlesServerEvent(MvcServerEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addHandlesServerEvent(value.getDmcObject());
        ArrayList<MvcServerEvent> refs = (ArrayList<MvcServerEvent>) attr.getAuxData();
        
        if (refs == null){
            refs = new ArrayList<MvcServerEvent>();
            attr.setAuxData(refs);
        }
        refs.add(value);
        return(attr);
    }

    /**
     * Deletes a handlesServerEvent value.
     * @param value The MvcServerEvent to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:929)
    public void delHandlesServerEvent(MvcServerEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delHandlesServerEvent(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcServerEvent> refs = (ArrayList<MvcServerEvent>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the handlesServerEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:985)
    public void remHandlesServerEvent(){
        mycore.remHandlesServerEvent();
    }

    /**
     * @return A MvcEvent object.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:776)
    public MvcEvent getFiresEvent(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__firesEvent);
        if (attr == null)
            return(null);
        
        MvcEvent ref = (MvcEvent) attr.getAuxData();
        
        return(ref);
    }

    /**
     * Sets the firesEvent to the specified value.
     * @param value A value compatible with MvcEventREF
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:805)
    public void setFiresEvent(MvcEvent value) throws DmcValueException {
        mycore.setFiresEvent(value.getDmcObject());
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__firesEvent);
        attr.setAuxData(value);
    }

    /**
     * Removes the firesEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:829)
    public void remFiresEvent(){
        mycore.remFiresEvent();
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:880)
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:882)
    public Iterator<MvcEvent> getDispatchesEvent(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__dispatchesEvent);
        if (attr == null)
            return( ((List<MvcEvent>) Collections.EMPTY_LIST).iterator() );
        
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs == null)
            return( ((List<MvcEvent>) Collections.EMPTY_LIST).iterator() );
        
        return(refs.iterator());
    }

    /**
     * Adds another dispatchesEvent value.
     * @param value A value compatible with MvcEvent
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:908)
    public DmcAttribute<?> addDispatchesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addDispatchesEvent(value.getDmcObject());
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs == null){
            refs = new ArrayList<MvcEvent>();
            attr.setAuxData(refs);
        }
        refs.add(value);
        return(attr);
    }

    /**
     * Deletes a dispatchesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:929)
    public void delDispatchesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delDispatchesEvent(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the dispatchesEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:985)
    public void remDispatchesEvent(){
        mycore.remDispatchesEvent();
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:880)
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:882)
    public Iterator<MvcRegistryItem> getUsesRegistryItem(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__usesRegistryItem);
        if (attr == null)
            return( ((List<MvcRegistryItem>) Collections.EMPTY_LIST).iterator() );
        
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs == null)
            return( ((List<MvcRegistryItem>) Collections.EMPTY_LIST).iterator() );
        
        return(refs.iterator());
    }

    /**
     * Adds another usesRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:908)
    public DmcAttribute<?> addUsesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addUsesRegistryItem(value.getDmcObject());
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs == null){
            refs = new ArrayList<MvcRegistryItem>();
            attr.setAuxData(refs);
        }
        refs.add(value);
        return(attr);
    }

    /**
     * Deletes a usesRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:929)
    public void delUsesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delUsesRegistryItem(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the usesRegistryItem attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:985)
    public void remUsesRegistryItem(){
        mycore.remUsesRegistryItem();
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:880)
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:882)
    public Iterator<MvcRegistryItem> getCreatesRegistryItem(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__createsRegistryItem);
        if (attr == null)
            return( ((List<MvcRegistryItem>) Collections.EMPTY_LIST).iterator() );
        
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs == null)
            return( ((List<MvcRegistryItem>) Collections.EMPTY_LIST).iterator() );
        
        return(refs.iterator());
    }

    /**
     * Adds another createsRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:908)
    public DmcAttribute<?> addCreatesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addCreatesRegistryItem(value.getDmcObject());
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs == null){
            refs = new ArrayList<MvcRegistryItem>();
            attr.setAuxData(refs);
        }
        refs.add(value);
        return(attr);
    }

    /**
     * Deletes a createsRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:929)
    public void delCreatesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delCreatesRegistryItem(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the createsRegistryItem attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:985)
    public void remCreatesRegistryItem(){
        mycore.remCreatesRegistryItem();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:790)
    public String getDescription(){
        return(mycore.getDescription());
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:818)
    public void setDescription(Object value) throws DmcValueException {
        mycore.setDescription(value);
    }

    /**
     * Removes the description attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:829)
    public void remDescription(){
        mycore.remDescription();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:790)
    public StringName getName(){
        return(mycore.getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:818)
    public void setName(Object value) throws DmcValueException {
        mycore.setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:829)
    public void remName(){
        mycore.remName();
    }


}
