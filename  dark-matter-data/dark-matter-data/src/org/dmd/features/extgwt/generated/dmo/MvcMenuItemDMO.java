//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

import java.util.*;

import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
// import 3 Boolean
import org.dmd.dmc.types.DmcTypeBoolean;
// import 3 Integer
import org.dmd.dmc.types.DmcTypeInteger;
// import 3 MvcAction
import org.dmd.features.extgwt.generated.types.DmcTypeMvcActionREF;
import org.dmd.features.extgwt.generated.types.MvcActionREF;
// import 4
import org.dmd.features.extgwt.generated.types.MvcActionREF;
// import 3 MvcController
import org.dmd.features.extgwt.generated.types.DmcTypeMvcControllerREF;
import org.dmd.features.extgwt.generated.types.MvcControllerREF;
// import 4
import org.dmd.features.extgwt.generated.types.MvcControllerREF;
// import 3 MvcMenu
import org.dmd.features.extgwt.generated.types.DmcTypeMvcMenuREF;
import org.dmd.features.extgwt.generated.types.MvcMenuREF;
// import 4
import org.dmd.features.extgwt.generated.types.MvcMenuREF;
// import 3 String
import org.dmd.dmc.types.DmcTypeString;

// import 6
import org.dmd.features.extgwt.generated.dmo.MvcDefinitionDMO;
// import 7
import org.dmd.dmc.DmcNamedObjectIF;

@SuppressWarnings("serial")
/**
 * null
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:615)
 */
public class MvcMenuItemDMO  extends MvcDefinitionDMO  implements DmcNamedObjectIF  {

    public final static String _displayLabel = "displayLabel";
    public final static String _customRender = "customRender";
    public final static String _name = "name";
    public final static String _triggersAction = "triggersAction";
    public final static String _addToMenu = "addToMenu";
    public final static String _associatedController = "associatedController";
    public final static String _menuOrder = "menuOrder";

    public MvcMenuItemDMO() {
        super("MvcMenuItem");
    }

    protected MvcMenuItemDMO(String oc) {
        super(oc);
    }

    public MvcMenuItemDMO(MvcMenuItemDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    @Override
    public MvcMenuItemDMO getOneOfMe() {
        MvcMenuItemDMO rc = new MvcMenuItemDMO(this.getConstructionClassName());
        return(rc);
    }

    @SuppressWarnings("unchecked")
    public String getObjectName(){
        DmcAttribute name = get(_name);
        if (name != null)
            return(name.getString());
    
        return(null);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcMenuItemDMO){
            return( getObjectName().equals( ((MvcMenuItemDMO) obj).getObjectName()) );
        }
        return(false);
    }

    public String getDisplayLabel(){
        DmcTypeString attr = (DmcTypeString) get(_displayLabel);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets displayLabel to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setDisplayLabel(Object value) throws DmcValueException {
        DmcAttribute attr = get(_displayLabel);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_displayLabel,attr);
    }

    /**
     * Removes the displayLabel attribute value.
     */
    public void remDisplayLabel(){
         rem(_displayLabel);
    }

    public Boolean getCustomRender(){
        DmcTypeBoolean attr = (DmcTypeBoolean) get(_customRender);
        if (attr == null)
            return(false);

        return(attr.getSV());
    }

    /**
     * Sets customRender to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    @SuppressWarnings("unchecked")
    public void setCustomRender(Object value) throws DmcValueException {
        DmcAttribute attr = get(_customRender);
        if (attr == null)
            attr = new DmcTypeBoolean();
        
        attr.set(value);
        set(_customRender,attr);
    }

    /**
     * Removes the customRender attribute value.
     */
    public void remCustomRender(){
         rem(_customRender);
    }

    public String getName(){
        DmcTypeString attr = (DmcTypeString) get(_name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setName(Object value) throws DmcValueException {
        DmcAttribute attr = get(_name);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    public void remName(){
         rem(_name);
    }

    public MvcActionREF getTriggersAction(){
        DmcTypeMvcActionREF attr = (DmcTypeMvcActionREF) get(_triggersAction);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets triggersAction to the specified value.
     * @param value A value compatible with DmcTypeMvcActionREF
     */
    @SuppressWarnings("unchecked")
    public void setTriggersAction(Object value) throws DmcValueException {
        DmcAttribute attr = get(_triggersAction);
        if (attr == null)
            attr = new DmcTypeMvcActionREF();
        
        attr.set(value);
        set(_triggersAction,attr);
    }

    /**
     * Removes the triggersAction attribute value.
     */
    public void remTriggersAction(){
         rem(_triggersAction);
    }

    public MvcMenuREF getAddToMenu(){
        DmcTypeMvcMenuREF attr = (DmcTypeMvcMenuREF) get(_addToMenu);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets addToMenu to the specified value.
     * @param value A value compatible with DmcTypeMvcMenuREF
     */
    @SuppressWarnings("unchecked")
    public void setAddToMenu(Object value) throws DmcValueException {
        DmcAttribute attr = get(_addToMenu);
        if (attr == null)
            attr = new DmcTypeMvcMenuREF();
        
        attr.set(value);
        set(_addToMenu,attr);
    }

    /**
     * Removes the addToMenu attribute value.
     */
    public void remAddToMenu(){
         rem(_addToMenu);
    }

    public MvcControllerREF getAssociatedController(){
        DmcTypeMvcControllerREF attr = (DmcTypeMvcControllerREF) get(_associatedController);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets associatedController to the specified value.
     * @param value A value compatible with DmcTypeMvcControllerREF
     */
    @SuppressWarnings("unchecked")
    public void setAssociatedController(Object value) throws DmcValueException {
        DmcAttribute attr = get(_associatedController);
        if (attr == null)
            attr = new DmcTypeMvcControllerREF();
        
        attr.set(value);
        set(_associatedController,attr);
    }

    /**
     * Removes the associatedController attribute value.
     */
    public void remAssociatedController(){
         rem(_associatedController);
    }

    public Integer getMenuOrder(){
        DmcTypeInteger attr = (DmcTypeInteger) get(_menuOrder);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets menuOrder to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    @SuppressWarnings("unchecked")
    public void setMenuOrder(Object value) throws DmcValueException {
        DmcAttribute attr = get(_menuOrder);
        if (attr == null)
            attr = new DmcTypeInteger();
        
        attr.set(value);
        set(_menuOrder,attr);
    }

    /**
     * Removes the menuOrder attribute value.
     */
    public void remMenuOrder(){
         rem(_menuOrder);
    }




}
