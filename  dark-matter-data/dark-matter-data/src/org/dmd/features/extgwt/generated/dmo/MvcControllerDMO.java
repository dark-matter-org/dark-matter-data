//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

// Generated from: org.dmd.dms.util.DmoFormatter.formatImports(DmoFormatter.java:707)
import java.util.*;                                                                // Always required
import org.dmd.dmc.DmcAttribute;                                                   // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                                               // Always required
import org.dmd.dmc.DmcNamedObjectIF;                                               // Named object
import org.dmd.dmc.DmcValueException;                                              // Any attributes
import org.dmd.dmc.types.DmcTypeModifier;                                          // Any MV attributes
import org.dmd.dmc.types.DmcTypeString;                                            // Required type
import org.dmd.dmc.types.DmcTypeStringName;                                        // Required type
import org.dmd.dmc.types.Modification;                                             // Any MV attributes
import org.dmd.dmc.types.StringName;                                               // Naming attribute type
import org.dmd.dms.generated.enums.ModifyTypeEnum;                                 // Any MV attributes
import org.dmd.dms.generated.enums.ValueTypeEnum;                                  // Always required
import org.dmd.features.extgwt.generated.dmo.MvcDefinitionDMO;                     // Base class
import org.dmd.features.extgwt.generated.types.DmcTypeMvcActionREF;                // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcControllerREF;            // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcEventREF;                 // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcMenuItemREF;              // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcMenuREF;                  // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcMenuSeparatorREF;         // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcMultiViewREF;             // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcRegistryItemREF;          // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcServerEventREF;           // Reference type
import org.dmd.features.extgwt.generated.types.DmcTypeMvcViewREF;                  // Reference type
import org.dmd.features.extgwt.generated.types.MvcActionREF;                       // Helper class
import org.dmd.features.extgwt.generated.types.MvcControllerREF;                   // Helper class
import org.dmd.features.extgwt.generated.types.MvcEventREF;                        // Helper class
import org.dmd.features.extgwt.generated.types.MvcMenuItemREF;                     // Helper class
import org.dmd.features.extgwt.generated.types.MvcMenuREF;                         // Helper class
import org.dmd.features.extgwt.generated.types.MvcMenuSeparatorREF;                // Helper class
import org.dmd.features.extgwt.generated.types.MvcMultiViewREF;                    // Helper class
import org.dmd.features.extgwt.generated.types.MvcRegistryItemREF;                 // Helper class
import org.dmd.features.extgwt.generated.types.MvcServerEventREF;                  // Helper class
import org.dmd.features.extgwt.generated.types.MvcViewREF;                         // Helper class

/**
 * The MvcController class allows for the definition of controllers. The
 * abstract controller generated by this definition will automatically
 * register for the events you specify via the handlesEvent attribute.
 * Likewise, it will have a standard handleEvent() method that forwards typed
 * events to abstract handler functions that you'll have to write.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:140)
 */
@SuppressWarnings("serial")
public class MvcControllerDMO  extends MvcDefinitionDMO  implements DmcNamedObjectIF  {

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __alias = new DmcAttributeInfo("alias",206,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __controlsMultiView = new DmcAttributeInfo("controlsMultiView",615,"MvcMultiView",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __controlsView = new DmcAttributeInfo("controlsView",614,"MvcView",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __createsRegistryItem = new DmcAttributeInfo("createsRegistryItem",611,"MvcRegistryItem",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __definedInMVCConfig = new DmcAttributeInfo("definedInMVCConfig",616,"MvcConfig",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __definesAction = new DmcAttributeInfo("definesAction",627,"MvcAction",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __definesMenu = new DmcAttributeInfo("definesMenu",628,"MvcMenu",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __definesMenuItem = new DmcAttributeInfo("definesMenuItem",629,"MvcMenuItem",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __definesMenuSeparator = new DmcAttributeInfo("definesMenuSeparator",630,"MvcMenuSeparator",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __description = new DmcAttributeInfo("description",18,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __dispatchesEvent = new DmcAttributeInfo("dispatchesEvent",603,"MvcEvent",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __file = new DmcAttributeInfo("file",74,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __handlesEvent = new DmcAttributeInfo("handlesEvent",602,"MvcEvent",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __handlesServerEvent = new DmcAttributeInfo("handlesServerEvent",610,"MvcServerEvent",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __lineNumber = new DmcAttributeInfo("lineNumber",75,"Integer",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __name = new DmcAttributeInfo("name",2,"StringName",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __parentController = new DmcAttributeInfo("parentController",618,"MvcController",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __subpackage = new DmcAttributeInfo("subpackage",88,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __usesRegistryItem = new DmcAttributeInfo("usesRegistryItem",612,"MvcRegistryItem",ValueTypeEnum.MULTI,false);

    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__alias.id,__alias);
        _ImAp.put(__controlsMultiView.id,__controlsMultiView);
        _ImAp.put(__controlsView.id,__controlsView);
        _ImAp.put(__createsRegistryItem.id,__createsRegistryItem);
        _ImAp.put(__definedInMVCConfig.id,__definedInMVCConfig);
        _ImAp.put(__definesAction.id,__definesAction);
        _ImAp.put(__definesMenu.id,__definesMenu);
        _ImAp.put(__definesMenuItem.id,__definesMenuItem);
        _ImAp.put(__definesMenuSeparator.id,__definesMenuSeparator);
        _ImAp.put(__description.id,__description);
        _ImAp.put(__dispatchesEvent.id,__dispatchesEvent);
        _ImAp.put(__file.id,__file);
        _ImAp.put(__handlesEvent.id,__handlesEvent);
        _ImAp.put(__handlesServerEvent.id,__handlesServerEvent);
        _ImAp.put(__lineNumber.id,__lineNumber);
        _ImAp.put(__name.id,__name);
        _ImAp.put(__parentController.id,__parentController);
        _ImAp.put(__subpackage.id,__subpackage);
        _ImAp.put(__usesRegistryItem.id,__usesRegistryItem);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__alias.name,__alias);
        _SmAp.put(__controlsMultiView.name,__controlsMultiView);
        _SmAp.put(__controlsView.name,__controlsView);
        _SmAp.put(__createsRegistryItem.name,__createsRegistryItem);
        _SmAp.put(__definedInMVCConfig.name,__definedInMVCConfig);
        _SmAp.put(__definesAction.name,__definesAction);
        _SmAp.put(__definesMenu.name,__definesMenu);
        _SmAp.put(__definesMenuItem.name,__definesMenuItem);
        _SmAp.put(__definesMenuSeparator.name,__definesMenuSeparator);
        _SmAp.put(__description.name,__description);
        _SmAp.put(__dispatchesEvent.name,__dispatchesEvent);
        _SmAp.put(__file.name,__file);
        _SmAp.put(__handlesEvent.name,__handlesEvent);
        _SmAp.put(__handlesServerEvent.name,__handlesServerEvent);
        _SmAp.put(__lineNumber.name,__lineNumber);
        _SmAp.put(__name.name,__name);
        _SmAp.put(__parentController.name,__parentController);
        _SmAp.put(__subpackage.name,__subpackage);
        _SmAp.put(__usesRegistryItem.name,__usesRegistryItem);
    }

    public MvcControllerDMO() {
        super("MvcController",_ImAp,_SmAp);
    }

    protected MvcControllerDMO(String oc) {
        super(oc,_ImAp,_SmAp);
    }

    public MvcControllerDMO(String oc, Map<Integer,DmcAttributeInfo> im, Map<String,DmcAttributeInfo> sm){
        super(oc,im,sm);
    }

    public MvcControllerDMO(MvcControllerDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    @Override
    public MvcControllerDMO getOneOfMe() {
        MvcControllerDMO rc = new MvcControllerDMO(this.getConstructionClassName());
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:783)
    public StringName getObjectName(){
        DmcAttribute<?> name = get(__name);
        if (name != null)
            return((StringName)name.getSV());
    
        return(null);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcControllerDMO){
            return( getObjectName().equals( ((MvcControllerDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public String getAlias(){
        DmcTypeString attr = (DmcTypeString) get(__alias);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets alias to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setAlias(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__alias);
        if (attr == null)
            attr = new DmcTypeString(__alias);
        
        attr.set(value);
        set(__alias,attr);
    }

    /**
     * Removes the alias attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remAlias(){
         rem(__alias);
    }

    /**
     * @return An Iterator of MvcViewDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcViewREF> getControlsView(){
        DmcTypeMvcViewREF attr = (DmcTypeMvcViewREF) get(__controlsView);
        if (attr == null)
            return( ((List<MvcViewREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another controlsView value.
     * @param value A value compatible with MvcView
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addControlsView(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__controlsView);
        if (attr == null)
            attr = new DmcTypeMvcViewREF(__controlsView);
        
        attr.add(value);
        add(__controlsView,attr);
        return(attr);
    }

    /**
     * Deletes a controlsView value.
     * @param value The MvcView to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delControlsView(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__controlsView, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcViewREF();
                attr.setName(__controlsView.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the controlsView attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remControlsView(){
         rem(__controlsView);
    }

    /**
     * @return An Iterator of MvcMultiViewDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcMultiViewREF> getControlsMultiView(){
        DmcTypeMvcMultiViewREF attr = (DmcTypeMvcMultiViewREF) get(__controlsMultiView);
        if (attr == null)
            return( ((List<MvcMultiViewREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another controlsMultiView value.
     * @param value A value compatible with MvcMultiView
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addControlsMultiView(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__controlsMultiView);
        if (attr == null)
            attr = new DmcTypeMvcMultiViewREF(__controlsMultiView);
        
        attr.add(value);
        add(__controlsMultiView,attr);
        return(attr);
    }

    /**
     * Deletes a controlsMultiView value.
     * @param value The MvcMultiView to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delControlsMultiView(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__controlsMultiView, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcMultiViewREF();
                attr.setName(__controlsMultiView.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the controlsMultiView attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remControlsMultiView(){
         rem(__controlsMultiView);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcEventREF> getHandlesEvent(){
        DmcTypeMvcEventREF attr = (DmcTypeMvcEventREF) get(__handlesEvent);
        if (attr == null)
            return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another handlesEvent value.
     * @param value A value compatible with MvcEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addHandlesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__handlesEvent);
        if (attr == null)
            attr = new DmcTypeMvcEventREF(__handlesEvent);
        
        attr.add(value);
        add(__handlesEvent,attr);
        return(attr);
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delHandlesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__handlesEvent, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcEventREF();
                attr.setName(__handlesEvent.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remHandlesEvent(){
         rem(__handlesEvent);
    }

    /**
     * @return An Iterator of MvcServerEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcServerEventREF> getHandlesServerEvent(){
        DmcTypeMvcServerEventREF attr = (DmcTypeMvcServerEventREF) get(__handlesServerEvent);
        if (attr == null)
            return( ((List<MvcServerEventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another handlesServerEvent value.
     * @param value A value compatible with MvcServerEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addHandlesServerEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__handlesServerEvent);
        if (attr == null)
            attr = new DmcTypeMvcServerEventREF(__handlesServerEvent);
        
        attr.add(value);
        add(__handlesServerEvent,attr);
        return(attr);
    }

    /**
     * Deletes a handlesServerEvent value.
     * @param value The MvcServerEvent to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delHandlesServerEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__handlesServerEvent, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcServerEventREF();
                attr.setName(__handlesServerEvent.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the handlesServerEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remHandlesServerEvent(){
         rem(__handlesServerEvent);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcEventREF> getDispatchesEvent(){
        DmcTypeMvcEventREF attr = (DmcTypeMvcEventREF) get(__dispatchesEvent);
        if (attr == null)
            return( ((List<MvcEventREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another dispatchesEvent value.
     * @param value A value compatible with MvcEvent
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addDispatchesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__dispatchesEvent);
        if (attr == null)
            attr = new DmcTypeMvcEventREF(__dispatchesEvent);
        
        attr.add(value);
        add(__dispatchesEvent,attr);
        return(attr);
    }

    /**
     * Deletes a dispatchesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delDispatchesEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__dispatchesEvent, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcEventREF();
                attr.setName(__dispatchesEvent.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the dispatchesEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remDispatchesEvent(){
         rem(__dispatchesEvent);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcRegistryItemREF> getUsesRegistryItem(){
        DmcTypeMvcRegistryItemREF attr = (DmcTypeMvcRegistryItemREF) get(__usesRegistryItem);
        if (attr == null)
            return( ((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another usesRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addUsesRegistryItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__usesRegistryItem);
        if (attr == null)
            attr = new DmcTypeMvcRegistryItemREF(__usesRegistryItem);
        
        attr.add(value);
        add(__usesRegistryItem,attr);
        return(attr);
    }

    /**
     * Deletes a usesRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delUsesRegistryItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__usesRegistryItem, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcRegistryItemREF();
                attr.setName(__usesRegistryItem.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the usesRegistryItem attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remUsesRegistryItem(){
         rem(__usesRegistryItem);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcRegistryItemREF> getCreatesRegistryItem(){
        DmcTypeMvcRegistryItemREF attr = (DmcTypeMvcRegistryItemREF) get(__createsRegistryItem);
        if (attr == null)
            return( ((List<MvcRegistryItemREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another createsRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addCreatesRegistryItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__createsRegistryItem);
        if (attr == null)
            attr = new DmcTypeMvcRegistryItemREF(__createsRegistryItem);
        
        attr.add(value);
        add(__createsRegistryItem,attr);
        return(attr);
    }

    /**
     * Deletes a createsRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delCreatesRegistryItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__createsRegistryItem, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcRegistryItemREF();
                attr.setName(__createsRegistryItem.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the createsRegistryItem attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remCreatesRegistryItem(){
         rem(__createsRegistryItem);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:301)
    public MvcControllerREF getParentController(){
        DmcTypeMvcControllerREF attr = (DmcTypeMvcControllerREF) get(__parentController);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets parentController to the specified value.
     * @param value A value compatible with DmcTypeMvcControllerREF
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setParentController(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__parentController);
        if (attr == null)
            attr = new DmcTypeMvcControllerREF(__parentController);
        
        attr.set(value);
        set(__parentController,attr);
    }

    /**
     * Removes the parentController attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remParentController(){
         rem(__parentController);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public String getSubpackage(){
        DmcTypeString attr = (DmcTypeString) get(__subpackage);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets subpackage to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setSubpackage(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__subpackage);
        if (attr == null)
            attr = new DmcTypeString(__subpackage);
        
        attr.set(value);
        set(__subpackage,attr);
    }

    /**
     * Removes the subpackage attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remSubpackage(){
         rem(__subpackage);
    }

    /**
     * @return An Iterator of MvcActionDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcActionREF> getDefinesAction(){
        DmcTypeMvcActionREF attr = (DmcTypeMvcActionREF) get(__definesAction);
        if (attr == null)
            return( ((List<MvcActionREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another definesAction value.
     * @param value A value compatible with MvcAction
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addDefinesAction(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__definesAction);
        if (attr == null)
            attr = new DmcTypeMvcActionREF(__definesAction);
        
        attr.add(value);
        add(__definesAction,attr);
        return(attr);
    }

    /**
     * Deletes a definesAction value.
     * @param value The MvcAction to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delDefinesAction(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__definesAction, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcActionREF();
                attr.setName(__definesAction.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the definesAction attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remDefinesAction(){
         rem(__definesAction);
    }

    /**
     * @return An Iterator of MvcMenuDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcMenuREF> getDefinesMenu(){
        DmcTypeMvcMenuREF attr = (DmcTypeMvcMenuREF) get(__definesMenu);
        if (attr == null)
            return( ((List<MvcMenuREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another definesMenu value.
     * @param value A value compatible with MvcMenu
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addDefinesMenu(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__definesMenu);
        if (attr == null)
            attr = new DmcTypeMvcMenuREF(__definesMenu);
        
        attr.add(value);
        add(__definesMenu,attr);
        return(attr);
    }

    /**
     * Deletes a definesMenu value.
     * @param value The MvcMenu to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delDefinesMenu(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__definesMenu, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcMenuREF();
                attr.setName(__definesMenu.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the definesMenu attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remDefinesMenu(){
         rem(__definesMenu);
    }

    /**
     * @return An Iterator of MvcMenuItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcMenuItemREF> getDefinesMenuItem(){
        DmcTypeMvcMenuItemREF attr = (DmcTypeMvcMenuItemREF) get(__definesMenuItem);
        if (attr == null)
            return( ((List<MvcMenuItemREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another definesMenuItem value.
     * @param value A value compatible with MvcMenuItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addDefinesMenuItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__definesMenuItem);
        if (attr == null)
            attr = new DmcTypeMvcMenuItemREF(__definesMenuItem);
        
        attr.add(value);
        add(__definesMenuItem,attr);
        return(attr);
    }

    /**
     * Deletes a definesMenuItem value.
     * @param value The MvcMenuItem to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delDefinesMenuItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__definesMenuItem, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcMenuItemREF();
                attr.setName(__definesMenuItem.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the definesMenuItem attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remDefinesMenuItem(){
         rem(__definesMenuItem);
    }

    /**
     * @return An Iterator of MvcMenuSeparatorDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:409)
    public Iterator<MvcMenuSeparatorREF> getDefinesMenuSeparator(){
        DmcTypeMvcMenuSeparatorREF attr = (DmcTypeMvcMenuSeparatorREF) get(__definesMenuSeparator);
        if (attr == null)
            return( ((List<MvcMenuSeparatorREF>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another definesMenuSeparator value.
     * @param value A value compatible with MvcMenuSeparator
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addDefinesMenuSeparator(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__definesMenuSeparator);
        if (attr == null)
            attr = new DmcTypeMvcMenuSeparatorREF(__definesMenuSeparator);
        
        attr.add(value);
        add(__definesMenuSeparator,attr);
        return(attr);
    }

    /**
     * Deletes a definesMenuSeparator value.
     * @param value The MvcMenuSeparator to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:495)
    public DmcAttribute<?> delDefinesMenuSeparator(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__definesMenuSeparator, ((DmcNamedObjectIF)value).getObjectName());
        if (attr == null){
            DmcTypeModifier mods = getModifier();
            if (mods != null){
                attr = new DmcTypeMvcMenuSeparatorREF();
                attr.setName(__definesMenuSeparator.name);
                attr.add(((DmcNamedObjectIF)value).getObjectName());
                mods.add(new Modification(ModifyTypeEnum.DEL, attr));
            }
        }
        return(attr);
    }

    /**
     * Removes the definesMenuSeparator attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remDefinesMenuSeparator(){
         rem(__definesMenuSeparator);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public StringName getName(){
        DmcTypeStringName attr = (DmcTypeStringName) get(__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__name);
        if (attr == null)
            attr = new DmcTypeStringName(__name);
        
        attr.set(value);
        set(__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remName(){
         rem(__name);
    }




}
