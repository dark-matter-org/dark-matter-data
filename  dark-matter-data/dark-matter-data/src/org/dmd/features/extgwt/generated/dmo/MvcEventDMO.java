//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:322)
import java.io.Serializable;                                           // Always required
import java.util.*;                                                    // Always required
import org.dmd.dmc.DmcAttribute;                                       // Any attributes
import org.dmd.dmc.DmcNamedObjectIF;                                   // Named object
import org.dmd.dmc.DmcSliceInfo;                                       // Required for object slicing
import org.dmd.dmc.DmcValueException;                                  // Any attributes
import org.dmd.dmc.types.StringName;                                   // Naming attribute type
import org.dmd.dmg.generated.dmo.DmgDMSAG;                             // Attribute from dmg schema
import org.dmd.dms.generated.dmo.MetaDMSAG;                            // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeBooleanSV;                   // Required type
import org.dmd.dms.generated.types.DmcTypeModifierMV;                  // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeStringMV;                    // Required type
import org.dmd.dms.generated.types.DmcTypeStringNameSV;                // Required type
import org.dmd.dms.generated.types.DmcTypeStringSV;                    // Required type
import org.dmd.features.extgwt.generated.dmo.MvcDefinitionDMO;         // Base class

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The MvcEvent class allows for the definition of events that are  handled
 * or emitted by Views and Controllers. By providing a description, you help
 * to document your application.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:134)
 */
@SuppressWarnings("serial")
public class MvcEventDMO  extends MvcDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "MvcEvent";

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public MvcEventDMO() {
        super("MvcEvent");
    }

    protected MvcEventDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public MvcEventDMO getNew(){
        MvcEventDMO rc = new MvcEventDMO();
        return(rc);
    }

    @Override
    public MvcEventDMO getSlice(DmcSliceInfo info){
        MvcEventDMO rc = new MvcEventDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public MvcEventDMO(DmcTypeModifierMV mods) {
        super("MvcEvent");
        modrec(true);
        setModifier(mods);
    }

    public MvcEventDMO getModificationRecorder(){
        MvcEventDMO rc = new MvcEventDMO();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:736)
    public StringName getObjectName(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        if (name != null)
            return((StringName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MetaDMSAG.__name);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcEventDMO){
            return( getObjectName().equals( ((MvcEventDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:643)
    public String getDescription(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MetaDMSAG.__description);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets description to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:681)
    public void setDescription(String value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__description);
        if (attr == null)
            attr = new DmcTypeStringSV(MetaDMSAG.__description);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__description,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:733)
    public void setDescription(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MetaDMSAG.__description);
        if (attr == null)
            attr = new DmcTypeStringSV(MetaDMSAG.__description);
        
        attr.set(value);
        set(MetaDMSAG.__description,attr);
    }

    /**
     * Removes the description attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:748)
    public void remDescription(){
         rem(MetaDMSAG.__description);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:643)
    public String getUserDataType(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(ExtgwtDMSAG.__userDataType);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets userDataType to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:681)
    public void setUserDataType(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__userDataType);
        if (attr == null)
            attr = new DmcTypeStringSV(ExtgwtDMSAG.__userDataType);
        
        try{
            attr.set(value);
            set(ExtgwtDMSAG.__userDataType,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets userDataType to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:733)
    public void setUserDataType(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__userDataType);
        if (attr == null)
            attr = new DmcTypeStringSV(ExtgwtDMSAG.__userDataType);
        
        attr.set(value);
        set(ExtgwtDMSAG.__userDataType,attr);
    }

    /**
     * Removes the userDataType attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:748)
    public void remUserDataType(){
         rem(ExtgwtDMSAG.__userDataType);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:643)
    public Boolean isIsHistoryEvent(){
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(ExtgwtDMSAG.__isHistoryEvent);
        if (attr == null)
            return(false);

        return(attr.getSV());
    }

    /**
     * Sets isHistoryEvent to the specified value.
     * @param value Boolean
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:681)
    public void setIsHistoryEvent(Boolean value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__isHistoryEvent);
        if (attr == null)
            attr = new DmcTypeBooleanSV(ExtgwtDMSAG.__isHistoryEvent);
        
        try{
            attr.set(value);
            set(ExtgwtDMSAG.__isHistoryEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets isHistoryEvent to the specified value.
     * @param value A value compatible with DmcTypeBooleanSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:733)
    public void setIsHistoryEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__isHistoryEvent);
        if (attr == null)
            attr = new DmcTypeBooleanSV(ExtgwtDMSAG.__isHistoryEvent);
        
        attr.set(value);
        set(ExtgwtDMSAG.__isHistoryEvent,attr);
    }

    /**
     * Removes the isHistoryEvent attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:748)
    public void remIsHistoryEvent(){
         rem(ExtgwtDMSAG.__isHistoryEvent);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:643)
    public String getUserDataCollection(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(ExtgwtDMSAG.__userDataCollection);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets userDataCollection to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:681)
    public void setUserDataCollection(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__userDataCollection);
        if (attr == null)
            attr = new DmcTypeStringSV(ExtgwtDMSAG.__userDataCollection);
        
        try{
            attr.set(value);
            set(ExtgwtDMSAG.__userDataCollection,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets userDataCollection to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:733)
    public void setUserDataCollection(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__userDataCollection);
        if (attr == null)
            attr = new DmcTypeStringSV(ExtgwtDMSAG.__userDataCollection);
        
        attr.set(value);
        set(ExtgwtDMSAG.__userDataCollection,attr);
    }

    /**
     * Removes the userDataCollection attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:748)
    public void remUserDataCollection(){
         rem(ExtgwtDMSAG.__userDataCollection);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:643)
    public String getUserDataGenericSpec(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(ExtgwtDMSAG.__userDataGenericSpec);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets userDataGenericSpec to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:681)
    public void setUserDataGenericSpec(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__userDataGenericSpec);
        if (attr == null)
            attr = new DmcTypeStringSV(ExtgwtDMSAG.__userDataGenericSpec);
        
        try{
            attr.set(value);
            set(ExtgwtDMSAG.__userDataGenericSpec,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets userDataGenericSpec to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:733)
    public void setUserDataGenericSpec(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__userDataGenericSpec);
        if (attr == null)
            attr = new DmcTypeStringSV(ExtgwtDMSAG.__userDataGenericSpec);
        
        attr.set(value);
        set(ExtgwtDMSAG.__userDataGenericSpec,attr);
    }

    /**
     * Removes the userDataGenericSpec attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:748)
    public void remUserDataGenericSpec(){
         rem(ExtgwtDMSAG.__userDataGenericSpec);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:946)
    public Iterator<String> getDefinedBy(){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(ExtgwtDMSAG.__definedBy);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth String value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:958)
    public String getNthDefinedBy(int i){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(ExtgwtDMSAG.__definedBy);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another definedBy to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:972)
    public DmcAttribute<?> addDefinedBy(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definedBy);
        if (attr == null)
            attr = new DmcTypeStringMV(ExtgwtDMSAG.__definedBy);
        
        try{
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__definedBy,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified String.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1046)
    public boolean definedByContains(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definedBy);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another definedBy value.
     * @param value A value compatible with String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1078)
    public DmcAttribute<?> addDefinedBy(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definedBy);
        if (attr == null)
            attr = new DmcTypeStringMV(ExtgwtDMSAG.__definedBy);
        
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__definedBy,attr);
        return(attr);
    }

    /**
     * Returns the number of values in definedBy
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1095)
    public int getDefinedBySize(){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definedBy);
        if (attr == null){
            if (ExtgwtDMSAG.__definedBy.indexSize == 0)
                return(0);
            else
                return(ExtgwtDMSAG.__definedBy.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a definedBy value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1140)
    public DmcAttribute<?> delDefinedBy(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definedBy);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(ExtgwtDMSAG.__definedBy), value);
        else
            attr = del(ExtgwtDMSAG.__definedBy, value);
        
        return(attr);
    }

    /**
     * Deletes a definedBy from the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1156)
    public DmcAttribute<?> delDefinedBy(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__definedBy);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(ExtgwtDMSAG.__definedBy), value);
        else
            attr = del(ExtgwtDMSAG.__definedBy, value);
        
        return(attr);
    }

    /**
     * Removes the definedBy attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1175)
    public void remDefinedBy(){
         rem(ExtgwtDMSAG.__definedBy);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:946)
    public Iterator<String> getEmittedBy(){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(ExtgwtDMSAG.__emittedBy);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth String value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:958)
    public String getNthEmittedBy(int i){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(ExtgwtDMSAG.__emittedBy);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another emittedBy to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:972)
    public DmcAttribute<?> addEmittedBy(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__emittedBy);
        if (attr == null)
            attr = new DmcTypeStringMV(ExtgwtDMSAG.__emittedBy);
        
        try{
            setLastValue(attr.add(value));
            add(ExtgwtDMSAG.__emittedBy,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified String.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1046)
    public boolean emittedByContains(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__emittedBy);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another emittedBy value.
     * @param value A value compatible with String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1078)
    public DmcAttribute<?> addEmittedBy(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__emittedBy);
        if (attr == null)
            attr = new DmcTypeStringMV(ExtgwtDMSAG.__emittedBy);
        
        setLastValue(attr.add(value));
        add(ExtgwtDMSAG.__emittedBy,attr);
        return(attr);
    }

    /**
     * Returns the number of values in emittedBy
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1095)
    public int getEmittedBySize(){
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__emittedBy);
        if (attr == null){
            if (ExtgwtDMSAG.__emittedBy.indexSize == 0)
                return(0);
            else
                return(ExtgwtDMSAG.__emittedBy.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a emittedBy value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1140)
    public DmcAttribute<?> delEmittedBy(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__emittedBy);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(ExtgwtDMSAG.__emittedBy), value);
        else
            attr = del(ExtgwtDMSAG.__emittedBy, value);
        
        return(attr);
    }

    /**
     * Deletes a emittedBy from the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1156)
    public DmcAttribute<?> delEmittedBy(String value) {
        DmcAttribute<?> attr = get(ExtgwtDMSAG.__emittedBy);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(ExtgwtDMSAG.__emittedBy), value);
        else
            attr = del(ExtgwtDMSAG.__emittedBy, value);
        
        return(attr);
    }

    /**
     * Removes the emittedBy attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1175)
    public void remEmittedBy(){
         rem(ExtgwtDMSAG.__emittedBy);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:643)
    public String getUpperConstantName(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(DmgDMSAG.__upperConstantName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets upperConstantName to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:681)
    public void setUpperConstantName(String value) {
        DmcAttribute<?> attr = get(DmgDMSAG.__upperConstantName);
        if (attr == null)
            attr = new DmcTypeStringSV(DmgDMSAG.__upperConstantName);
        
        try{
            attr.set(value);
            set(DmgDMSAG.__upperConstantName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets upperConstantName to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:733)
    public void setUpperConstantName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmgDMSAG.__upperConstantName);
        if (attr == null)
            attr = new DmcTypeStringSV(DmgDMSAG.__upperConstantName);
        
        attr.set(value);
        set(DmgDMSAG.__upperConstantName,attr);
    }

    /**
     * Removes the upperConstantName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:748)
    public void remUpperConstantName(){
         rem(DmgDMSAG.__upperConstantName);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:643)
    public StringName getName(){
        DmcTypeStringNameSV attr = (DmcTypeStringNameSV) get(MetaDMSAG.__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:681)
    public void setName(StringName value) {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        
        try{
            attr.set(value);
            set(MetaDMSAG.__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:733)
    public void setName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MetaDMSAG.__name);
        if (attr == null)
            attr = new DmcTypeStringNameSV(MetaDMSAG.__name);
        
        attr.set(value);
        set(MetaDMSAG.__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:748)
    public void remName(){
         rem(MetaDMSAG.__name);
    }




}
