package org.dmd.features.extgwt.client.generated.mvc;

import com.extjs.gxt.ui.client.mvc.Controller;
import com.extjs.gxt.ui.client.mvc.Dispatcher;
import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.event.EventType;
import com.extjs.gxt.ui.client.Registry;
import org.dmd.features.extgwt.client.ApplicationIF;
import org.dmd.features.extgwt.client.extended.MenuController;

/**
 * The MenuController provides overall management of menus for your
 * application. Used in conjunction with derived classes of various GXT
 * display components, the MenuController provides context sensitive menus
 * for things like TreePanels and dispatch of triggered menu item to your
 * controllers. The controller also  provides a standard mechanism for
 * determining whether a particular menu item is enabled or not.
 * <P>
 * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.features.extgwt.extended.MvcController.initCodeGenInfo(MvcController.java:112)
 */
abstract public class MenuControllerMVC extends Controller {

    // Resources
    protected ApplicationIF application;
    protected MenuController mvcMenuController;

    // Events
    public EventType MvcInit;
    public EventType MvcRegisterMenus;

    // org.dmd.features.extgwt.extended.MvcController.initLocalVariables(MvcController.java:444)

    // View(s)

    protected MenuControllerMVC(){
        // Resolve our events
        MvcInit = getApplication().getEvent("mvc.init");
        MvcRegisterMenus = getApplication().getEvent("mvc.registerMenus");

        // org.dmd.features.extgwt.util.MvcGenerator.dumpController(MvcGenerator.java:177)
        registerEventTypes(MvcInit);
        registerEventTypes(MvcRegisterMenus);

        // Instantiate our views

        // Instantiate our multiviews

        // Instantiate our actions

        // Instantiate our menus

        // Instantiate our menu items

        // Instantiate our menu separators
    }

    /**
     * Derived classes must override this method to perform their initialization behaviour.
     */
    abstract protected void initialize();

    // org.dmd.features.extgwt.extended.MvcController.initHandleEventFunction(MvcController.java:538)
    public void handleEvent(AppEvent event) {
        EventType type = event.getType();
        if (type == MvcInit) {
            handleMvcInitEvent(event);
        }
    }

    /**
     * The derived class must overload this method to handle the mvc.init event.
     * <P>
     * The mvc init event can be injected to cause initialization of the Dark
     * Matter MVC framework elements.
     */
    abstract protected void handleMvcInitEvent(AppEvent event);

    /**
     * @return This is the universal handle to the application.
     */
    public ApplicationIF getApplication(){
        if (application == null)
            application = (ApplicationIF) Registry.get("application");
        return(application);
    }

    /**
     * @return Handle to the menu controller. Views that make use of the menu
     * definition mechanism will access the menu controller to find the menus
     * that have been constructed and attach them to the appropriate locations.
     */
    public MenuController getMvcMenuController(){
        if (mvcMenuController == null)
            mvcMenuController = (MenuController) Registry.get("mvc.menuController");
        return(mvcMenuController);
    }

    /**
     * Adds the MvcMenuController item to the Registry.
     * Handle to the menu controller. Views that make use of the menu definition
     * mechanism will access the menu controller to find the menus that have been
     * constructed and attach them to the appropriate locations.
     */
    protected void registerMvcMenuController(MenuController item){
            Registry.register("mvc.menuController", item);
    }

    public void dispatchMvcRegisterMenus(MenuController data){
        Dispatcher.get().dispatch(MvcRegisterMenus,data);
    }

}
