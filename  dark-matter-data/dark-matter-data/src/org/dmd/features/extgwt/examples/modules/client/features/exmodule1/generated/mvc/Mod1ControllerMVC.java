package org.dmd.features.extgwt.examples.modules.client.features.exmodule1.generated.mvc;

import com.extjs.gxt.ui.client.mvc.Controller;
import com.extjs.gxt.ui.client.mvc.Dispatcher;
import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.event.EventType;
import com.extjs.gxt.ui.client.Registry;
import org.dmd.features.extgwt.client.ApplicationIF;
import org.dmd.features.extgwt.examples.modules.client.features.exmodule1.extended.Mod1View;

/**
 * The Mod1Controller does some things.
 * <P>
 * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.features.extgwt.extended.MvcController.initCodeGenInfo(MvcController.java:112)
 */
abstract public class Mod1ControllerMVC extends Controller {

    // Resources
    protected ApplicationIF application;

    // Events
    public EventType CommonInit;
    public EventType CommonLoggedIn;
    public EventType Mod1DataReady;

    // org.dmd.features.extgwt.extended.MvcController.initLocalVariables(MvcController.java:444)

    // View(s)
    protected Mod1View mod1View;

    protected Mod1ControllerMVC(){
        // Resolve our events
        CommonInit = getApplication().getEvent("common.init");
        CommonLoggedIn = getApplication().getEvent("common.loggedIn");
        Mod1DataReady = getApplication().getEvent("mod1.dataReady");

        // org.dmd.features.extgwt.util.MvcGenerator.dumpController(MvcGenerator.java:177)
        registerEventTypes(CommonInit);
        registerEventTypes(CommonLoggedIn);
        registerEventTypes(Mod1DataReady);

        // Instantiate our views
        mod1View = new Mod1View(this);

        // Instantiate our multiviews

        // Instantiate our actions

        // Instantiate our menus

        // Instantiate our menu items

        // Instantiate our menu separators
    }

    /**
     * Derived classes must override this method to perform their initialization behaviour.
     */
    abstract protected void initialize();

    // org.dmd.features.extgwt.extended.MvcController.initHandleEventFunction(MvcController.java:538)
    public void handleEvent(AppEvent event) {
        EventType type = event.getType();
        if (type == CommonInit) {
            handleCommonInitEvent(event);
            forwardToView(mod1View,event);
        }
        else if (type == CommonLoggedIn) {
            handleCommonLoggedInEvent(event);
        }
    }

    /**
     * The derived class must overload this method to handle the common.init event.
     * <P>
     * The init event is generated once the user has logged in to the system.
     */
    abstract protected void handleCommonInitEvent(AppEvent event);

    /**
     * The derived class must overload this method to handle the common.loggedIn event.
     * <P>
     * The loggedIn event is usually generated when the user has successfully
     * logged into a required service.
     */
    abstract protected void handleCommonLoggedInEvent(AppEvent event);

    /**
     * @return This is the universal handle to the application.
     */
    public ApplicationIF getApplication(){
        if (application == null)
            application = (ApplicationIF) Registry.get("application");
        return(application);
    }

    public void dispatchMod1DataReady(){
        Dispatcher.get().dispatch(Mod1DataReady);
    }

}
