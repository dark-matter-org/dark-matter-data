//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.examples.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:323)
import java.io.Serializable;                                     // Always required
import java.util.*;                                              // Always required
import org.dmd.dmc.DmcAttribute;                                 // Any attributes
import org.dmd.dmc.DmcNamedObjectIF;                             // Named object
import org.dmd.dmc.DmcObject;                                    // Structural class
import org.dmd.dmc.DmcSliceInfo;                                 // Required for object slicing
import org.dmd.dmc.DmcValueException;                            // Any attributes
import org.dmd.dmc.types.IntegerName;                            // Naming attribute type
import org.dmd.dms.generated.dmo.MetaDMSAG;                      // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeIntegerNameSV;         // Required type
import org.dmd.dms.generated.types.DmcTypeModifierMV;            // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeStringSV;              // Required type

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The MailItem class represents a single piece of email.
 * <P>
 * Generated from the mail schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:134)
 */
@SuppressWarnings("serial")
public class MailItemDMO  extends DmcObject  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "MailItem";

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public MailItemDMO() {
        super("MailItem");
    }

    protected MailItemDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public MailItemDMO getNew(){
        MailItemDMO rc = new MailItemDMO();
        return(rc);
    }

    @Override
    public MailItemDMO getSlice(DmcSliceInfo info){
        MailItemDMO rc = new MailItemDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public MailItemDMO(DmcTypeModifierMV mods) {
        super("MailItem");
        modrec(true);
        setModifier(mods);
    }

    public MailItemDMO getModificationRecorder(){
        MailItemDMO rc = new MailItemDMO();
        rc.setMailID(getMailID());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:736)
    public IntegerName getObjectName(){
        DmcAttribute<?> name = get(MailDMSAG.__mailID);
        if (name != null)
            return((IntegerName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MailDMSAG.__mailID);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof MailItemDMO){
            return( getObjectName().equals( ((MailItemDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public IntegerName getMailID(){
        DmcTypeIntegerNameSV attr = (DmcTypeIntegerNameSV) get(MailDMSAG.__mailID);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets mailID to the specified value.
     * @param value IntegerName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setMailID(IntegerName value) {
        DmcAttribute<?> attr = get(MailDMSAG.__mailID);
        if (attr == null)
            attr = new DmcTypeIntegerNameSV(MailDMSAG.__mailID);
        
        try{
            attr.set(value);
            set(MailDMSAG.__mailID,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets mailID to the specified value.
     * @param value A value compatible with DmcTypeIntegerNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setMailID(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MailDMSAG.__mailID);
        if (attr == null)
            attr = new DmcTypeIntegerNameSV(MailDMSAG.__mailID);
        
        attr.set(value);
        set(MailDMSAG.__mailID,attr);
    }

    /**
     * Removes the mailID attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remMailID(){
         rem(MailDMSAG.__mailID);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public String getSender(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MailDMSAG.__sender);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets sender to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setSender(String value) {
        DmcAttribute<?> attr = get(MailDMSAG.__sender);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__sender);
        
        try{
            attr.set(value);
            set(MailDMSAG.__sender,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets sender to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setSender(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MailDMSAG.__sender);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__sender);
        
        attr.set(value);
        set(MailDMSAG.__sender,attr);
    }

    /**
     * Removes the sender attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remSender(){
         rem(MailDMSAG.__sender);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public String getEmail(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MailDMSAG.__email);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets email to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setEmail(String value) {
        DmcAttribute<?> attr = get(MailDMSAG.__email);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__email);
        
        try{
            attr.set(value);
            set(MailDMSAG.__email,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets email to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setEmail(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MailDMSAG.__email);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__email);
        
        attr.set(value);
        set(MailDMSAG.__email,attr);
    }

    /**
     * Removes the email attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remEmail(){
         rem(MailDMSAG.__email);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public String getSubject(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MailDMSAG.__subject);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets subject to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setSubject(String value) {
        DmcAttribute<?> attr = get(MailDMSAG.__subject);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__subject);
        
        try{
            attr.set(value);
            set(MailDMSAG.__subject,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets subject to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setSubject(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MailDMSAG.__subject);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__subject);
        
        attr.set(value);
        set(MailDMSAG.__subject,attr);
    }

    /**
     * Removes the subject attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remSubject(){
         rem(MailDMSAG.__subject);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:644)
    public String getBody(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(MailDMSAG.__body);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets body to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:682)
    public void setBody(String value) {
        DmcAttribute<?> attr = get(MailDMSAG.__body);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__body);
        
        try{
            attr.set(value);
            set(MailDMSAG.__body,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets body to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:734)
    public void setBody(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MailDMSAG.__body);
        if (attr == null)
            attr = new DmcTypeStringSV(MailDMSAG.__body);
        
        attr.set(value);
        set(MailDMSAG.__body,attr);
    }

    /**
     * Removes the body attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:749)
    public void remBody(){
         rem(MailDMSAG.__body);
    }




}
