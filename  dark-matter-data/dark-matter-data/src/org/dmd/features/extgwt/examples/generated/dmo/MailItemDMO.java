//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.examples.generated.dmo;

import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
// import 3 Integer
import org.dmd.dmc.types.DmcTypeInteger;
// import 3 String
import org.dmd.dmc.types.DmcTypeString;

// import 5
import org.dmd.dms.generated.dmo.DmwWrapperDMO;
// import 7
import org.dmd.dmc.DmcNamedObjectIF;

@SuppressWarnings("serial")
/**
 * The MailItem class represents a single piece of email.
 * <P>
 * Generated from the mail schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:537)
 */
public class MailItemDMO  extends DmwWrapperDMO  implements DmcNamedObjectIF  {

    public final static String _mailID = "mailID";
    public final static String _sender = "sender";
    public final static String _email = "email";
    public final static String _subject = "subject";
    public final static String _body = "body";

    public MailItemDMO() {
        super("MailItem");
    }

    protected MailItemDMO(String oc) {
        super(oc);
    }

    public MailItemDMO(MailItemDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    @Override
    public MailItemDMO getOneOfMe() {
        MailItemDMO rc = new MailItemDMO(this.getConstructionClassName());
        return(rc);
    }

    @SuppressWarnings("unchecked")
    public String getObjectName(){
        DmcAttribute name = get(_mailID);
        if (name != null)
            return(name.getString());
    
        return(null);
    }

    public boolean equals(Object obj){
        if (obj instanceof MailItemDMO){
            return( getObjectName().equals( ((MailItemDMO) obj).getObjectName()) );
        }
        return(false);
    }

    public Integer getMailID(){
        DmcTypeInteger attr = (DmcTypeInteger) get(_mailID);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets mailID to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    @SuppressWarnings("unchecked")
    public void setMailID(Object value) throws DmcValueException {
        DmcAttribute attr = get(_mailID);
        if (attr == null)
            attr = new DmcTypeInteger();
        
        attr.set(value);
        set(_mailID,attr);
    }

    /**
     * Removes the mailID attribute value.
     */
    public void remMailID(){
         rem(_mailID);
    }

    public String getSender(){
        DmcTypeString attr = (DmcTypeString) get(_sender);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets sender to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setSender(Object value) throws DmcValueException {
        DmcAttribute attr = get(_sender);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_sender,attr);
    }

    /**
     * Removes the sender attribute value.
     */
    public void remSender(){
         rem(_sender);
    }

    public String getEmail(){
        DmcTypeString attr = (DmcTypeString) get(_email);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets email to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setEmail(Object value) throws DmcValueException {
        DmcAttribute attr = get(_email);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_email,attr);
    }

    /**
     * Removes the email attribute value.
     */
    public void remEmail(){
         rem(_email);
    }

    public String getSubject(){
        DmcTypeString attr = (DmcTypeString) get(_subject);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets subject to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setSubject(Object value) throws DmcValueException {
        DmcAttribute attr = get(_subject);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_subject,attr);
    }

    /**
     * Removes the subject attribute value.
     */
    public void remSubject(){
         rem(_subject);
    }

    public String getBody(){
        DmcTypeString attr = (DmcTypeString) get(_body);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets body to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setBody(Object value) throws DmcValueException {
        DmcAttribute attr = get(_body);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_body,attr);
    }

    /**
     * Removes the body attribute value.
     */
    public void remBody(){
         rem(_body);
    }




}
