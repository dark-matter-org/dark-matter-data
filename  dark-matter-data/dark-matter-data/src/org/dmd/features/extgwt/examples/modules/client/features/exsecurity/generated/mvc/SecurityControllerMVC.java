package org.dmd.features.extgwt.examples.modules.client.features.exsecurity.generated.mvc;

import com.extjs.gxt.ui.client.mvc.Controller;
import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.event.EventType;
import com.extjs.gxt.ui.client.Registry;
import org.dmd.features.extgwt.client.ApplicationIF;

/**
 * The SecurityController handles our login and feature access.
 * <P>
 * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.features.extgwt.extended.MvcController.initCodeGenInfo(MvcController.java:70)
 */
abstract public class SecurityControllerMVC extends Controller {

    // Resources
    protected ApplicationIF application;

    // Events
    public EventType CommonInit;
    public EventType CommonPerformLogin;

    protected SecurityControllerMVC(){
        // Resolve our events
        CommonInit = getApplication().getEvent("common.init");
        CommonPerformLogin = getApplication().getEvent("common.performLogin");

        registerEventTypes(CommonInit);
        registerEventTypes(CommonPerformLogin);
    }

    public void handleEvent(AppEvent event) {
        EventType type = event.getType();
        if (type == CommonInit) {
            handleCommonInitEvent(event);
        }
        else if (type == CommonPerformLogin) {
            handleCommonPerformLoginEvent(event);
        }
    }

    /**
     * The derived class must overload this method to handle the common.init event.
     * <P>
     * The init event is generated once the user has logged in to the system.
     */
    abstract protected void handleCommonInitEvent(AppEvent event);

    /**
     * The derived class must overload this method to handle the common.performLogin event.
     * <P>
     * The performLogin event is usually generated when an application wants to
     * perform its login behaviour.
     */
    abstract protected void handleCommonPerformLoginEvent(AppEvent event);

    /**
     * @return This is the universal handle to the application.
     */
    protected ApplicationIF getApplication(){
        if (application == null)
            application = (ApplicationIF) Registry.get("application");
        return(application);
    }

}
