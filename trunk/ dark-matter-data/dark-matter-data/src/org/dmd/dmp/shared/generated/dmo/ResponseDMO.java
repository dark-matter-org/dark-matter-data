//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmp.shared.generated.dmo;

// Generated from: org.dmd.dms.util.DmoFormatter.formatImports(DmoFormatter.java:563)
import java.util.*;                                                            // Always required
import org.dmd.dmc.DmcAttribute;                                               // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                                           // Always required
import org.dmd.dmc.DmcNamedObjectIF;                                           // Named object
import org.dmd.dmc.DmcValueException;                                          // Any attributes
import org.dmd.dmc.types.DmcTypeBoolean;                                       // Required type
import org.dmd.dmc.types.DmcTypeIntegerName;                                   // Required type
import org.dmd.dmc.types.DmcTypeString;                                        // Required type
import org.dmd.dmc.types.IntegerName;                                          // Naming attribute type
import org.dmd.dmp.shared.generated.dmo.DMPMessageDMO;                         // Base class
import org.dmd.dmp.shared.generated.enums.ResponseCategoryEnum;                // Primitive type and !auxiliary class
import org.dmd.dmp.shared.generated.enums.ResponseTypeEnum;                    // Primitive type and !auxiliary class
import org.dmd.dmp.shared.generated.types.DmcTypeResponseCategoryEnum;         // Required type
import org.dmd.dmp.shared.generated.types.DmcTypeResponseTypeEnum;             // Required type
import org.dmd.dms.generated.enums.ValueTypeEnum;                              // Required if we have any attributes

/**
 * The Response class serves as a common base for all response messages. It
 * used to be that the Response was abstract, but because we could receive a
 * completely unknown request (for instance via a JSON/XML interface), we had
 * to have the ability to return a generic error response.
 * <P>
 * Generated from the dmp schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:131)
 */
@SuppressWarnings("serial")
public class ResponseDMO  extends DMPMessageDMO  implements DmcNamedObjectIF  {

    public final static String constructionClassName = "Response";

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __lastResponse = new DmcAttributeInfo("lastResponse",510,"Boolean",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __requestID = new DmcAttributeInfo("requestID",501,"IntegerName",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __responseCategory = new DmcAttributeInfo("responseCategory",505,"ResponseCategoryEnum",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __responseText = new DmcAttributeInfo("responseText",506,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __responseType = new DmcAttributeInfo("responseType",504,"ResponseTypeEnum",ValueTypeEnum.SINGLE,false);

    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__lastResponse.id,__lastResponse);
        _ImAp.put(__requestID.id,__requestID);
        _ImAp.put(__responseCategory.id,__responseCategory);
        _ImAp.put(__responseText.id,__responseText);
        _ImAp.put(__responseType.id,__responseType);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__lastResponse.name,__lastResponse);
        _SmAp.put(__requestID.name,__requestID);
        _SmAp.put(__responseCategory.name,__responseCategory);
        _SmAp.put(__responseText.name,__responseText);
        _SmAp.put(__responseType.name,__responseType);
    }

    public ResponseDMO() {
        super("Response",_ImAp,_SmAp);
    }

    protected ResponseDMO(String oc) {
        super(oc,_ImAp,_SmAp);
    }

    public ResponseDMO(String oc, Map<Integer,DmcAttributeInfo> im, Map<String,DmcAttributeInfo> sm){
        super(oc,im,sm);
    }

    public ResponseDMO(ResponseDMO original) {
        super(constructionClassName);
        System.out.println("Full object cloning not implemented...");
    }

    @Override
    public ResponseDMO getOneOfMe() {
        ResponseDMO rc = new ResponseDMO(constructionClassName);
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:634)
    public IntegerName getObjectName(){
        DmcAttribute<?> name = get(__requestID);
        if (name != null)
            return((IntegerName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(__requestID);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof ResponseDMO){
            return( getObjectName().equals( ((ResponseDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:348)
    public String getResponseText(){
        DmcTypeString attr = (DmcTypeString) get(__responseText);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets responseText to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:381)
    public void setResponseText(String value) {
        DmcAttribute<?> attr = get(__responseText);
        if (attr == null)
            attr = new DmcTypeString(__responseText);
        
        try{
            attr.set(value);
            set(__responseText,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets responseText to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:408)
    public void setResponseText(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__responseText);
        if (attr == null)
            attr = new DmcTypeString(__responseText);
        
        attr.set(value);
        set(__responseText,attr);
    }

    /**
     * Removes the responseText attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:423)
    public void remResponseText(){
         rem(__responseText);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:348)
    public ResponseCategoryEnum getResponseCategory(){
        DmcTypeResponseCategoryEnum attr = (DmcTypeResponseCategoryEnum) get(__responseCategory);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets responseCategory to the specified value.
     * @param value ResponseCategoryEnum
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:381)
    public void setResponseCategory(ResponseCategoryEnum value) {
        DmcAttribute<?> attr = get(__responseCategory);
        if (attr == null)
            attr = new DmcTypeResponseCategoryEnum(__responseCategory);
        
        try{
            attr.set(value);
            set(__responseCategory,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets responseCategory to the specified value.
     * @param value A value compatible with DmcTypeResponseCategoryEnum
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:408)
    public void setResponseCategory(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__responseCategory);
        if (attr == null)
            attr = new DmcTypeResponseCategoryEnum(__responseCategory);
        
        attr.set(value);
        set(__responseCategory,attr);
    }

    /**
     * Removes the responseCategory attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:423)
    public void remResponseCategory(){
         rem(__responseCategory);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:348)
    public IntegerName getRequestID(){
        DmcTypeIntegerName attr = (DmcTypeIntegerName) get(__requestID);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets requestID to the specified value.
     * @param value IntegerName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:381)
    public void setRequestID(IntegerName value) {
        DmcAttribute<?> attr = get(__requestID);
        if (attr == null)
            attr = new DmcTypeIntegerName(__requestID);
        
        try{
            attr.set(value);
            set(__requestID,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets requestID to the specified value.
     * @param value A value compatible with DmcTypeIntegerName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:408)
    public void setRequestID(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__requestID);
        if (attr == null)
            attr = new DmcTypeIntegerName(__requestID);
        
        attr.set(value);
        set(__requestID,attr);
    }

    /**
     * Removes the requestID attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:423)
    public void remRequestID(){
         rem(__requestID);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:348)
    public Boolean getLastResponse(){
        DmcTypeBoolean attr = (DmcTypeBoolean) get(__lastResponse);
        if (attr == null)
            return(false);

        return(attr.getSV());
    }

    /**
     * Sets lastResponse to the specified value.
     * @param value Boolean
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:381)
    public void setLastResponse(Boolean value) {
        DmcAttribute<?> attr = get(__lastResponse);
        if (attr == null)
            attr = new DmcTypeBoolean(__lastResponse);
        
        try{
            attr.set(value);
            set(__lastResponse,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets lastResponse to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:408)
    public void setLastResponse(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__lastResponse);
        if (attr == null)
            attr = new DmcTypeBoolean(__lastResponse);
        
        attr.set(value);
        set(__lastResponse,attr);
    }

    /**
     * Removes the lastResponse attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:423)
    public void remLastResponse(){
         rem(__lastResponse);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:348)
    public ResponseTypeEnum getResponseType(){
        DmcTypeResponseTypeEnum attr = (DmcTypeResponseTypeEnum) get(__responseType);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets responseType to the specified value.
     * @param value ResponseTypeEnum
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:381)
    public void setResponseType(ResponseTypeEnum value) {
        DmcAttribute<?> attr = get(__responseType);
        if (attr == null)
            attr = new DmcTypeResponseTypeEnum(__responseType);
        
        try{
            attr.set(value);
            set(__responseType,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets responseType to the specified value.
     * @param value A value compatible with DmcTypeResponseTypeEnum
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:408)
    public void setResponseType(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__responseType);
        if (attr == null)
            attr = new DmcTypeResponseTypeEnum(__responseType);
        
        attr.set(value);
        set(__responseType,attr);
    }

    /**
     * Removes the responseType attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:423)
    public void remResponseType(){
         rem(__responseType);
    }




}
