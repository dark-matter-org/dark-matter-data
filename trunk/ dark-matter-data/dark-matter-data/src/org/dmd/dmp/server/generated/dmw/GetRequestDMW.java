//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmp.server.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:847)
import java.util.ArrayList;                                      // To support getMVCopy()
import java.util.HashSet;                                        // To support getMVCopy()
import java.util.Iterator;                                       // To support getMVCopy()
import org.dmd.dmc.*;                                            // If any attributes
import org.dmd.dmc.DmcAttributeInfo;                             // Alternative type for AttributeID values
import org.dmd.dmc.DmcObjectName;                                // Alternative type for NameContainer values
import org.dmd.dmc.types.AttributeID;                            // For multi-valued containsAttributeID
import org.dmd.dmc.types.NameContainer;                          // Primitive type
import org.dmd.dmp.server.extended.Request;                      // Derived class
import org.dmd.dmp.shared.generated.dmo.GetRequestDMO;           // Class not auxiliary or abstract
import org.dmd.dmp.shared.generated.enums.ScopeEnum;             // Primitive type
import org.dmd.dms.*;                                            // Always 2
import org.dmd.dms.generated.dmw.AttributeIDIterableDMW;         // For multi-valued AttributeID
import org.dmd.dms.generated.dmw.ClassDefinitionDMW;             // Is reference type aux
import org.dmd.dms.generated.dmw.IntegerIterableDMW;             // For multi-valued Integer
import org.dmd.dms.generated.types.ClassDefinitionREF;           // To support getMVCopy() for REFs
import org.dmd.dms.generated.types.DmcTypeModifierMV;            // Required for MODREC constructor

/**
 * The GetRequest is used to retrieve objects.
 * <P>
 * Generated from the dmp schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class GetRequestDMW extends Request {

    private GetRequestDMO mycore;

    public GetRequestDMW() {
        super(new GetRequestDMO(), org.dmd.dmp.server.generated.DmpSchemaAG._GetRequest);
        mycore = (GetRequestDMO) core;
        mycore.setContainer(this);
    }

    public GetRequestDMW(DmcTypeModifierMV mods) {
        super(new GetRequestDMO(mods), org.dmd.dmp.server.generated.DmpSchemaAG._GetRequest);
        mycore = (GetRequestDMO) core;
        mycore.setContainer(this);
    }

    public GetRequestDMW(GetRequestDMO obj) {
        super(obj, org.dmd.dmp.server.generated.DmpSchemaAG._GetRequest);
        mycore = (GetRequestDMO) core;
        mycore.setContainer(this);
    }

    @Override
    public void setDmcObject(DmcObject obj) {
        mycore = (GetRequestDMO) obj;
        mycore.setContainer(this);
        super.setDmcObject(obj);
    }

    public GetRequestDMO getDMO() {
        return(mycore);
    }

    protected GetRequestDMW(GetRequestDMO obj, ClassDefinition cd) {
        super(obj,cd);
        mycore = (GetRequestDMO) core;
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1004)
    public NameContainer getTarget(){
        return(mycore.getTarget());
    }

    /**
     * Sets target to the specified value.
     * @param value A value compatible with DmcTypeNameContainer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public void setTarget(Object value) throws DmcValueException {
        mycore.setTarget(value);
    }

    /**
     * Sets target to the specified value.
     * @param value NameContainer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1060)
    public void setTarget(NameContainer value){
        mycore.setTarget(value);
    }

    /**
     * Sets target to the specified value.
     * @param value NameContainer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1074)
    public void setTarget(DmcObjectName value){
        mycore.setTarget(value);
    }

    /**
     * Removes the target attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1086)
    public void remTarget(){
        mycore.remTarget();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1004)
    public String getFilter(){
        return(mycore.getFilter());
    }

    /**
     * Sets filter to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public void setFilter(Object value) throws DmcValueException {
        mycore.setFilter(value);
    }

    /**
     * Sets filter to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1060)
    public void setFilter(String value){
        mycore.setFilter(value);
    }

    /**
     * Removes the filter attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1086)
    public void remFilter(){
        mycore.remFilter();
    }

    /**
     * @return A ClassDefinitionDMW object.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:983)
    public ClassDefinitionDMW getFilterByClass(){
        ClassDefinitionREF ref = mycore.getFilterByClass();
        if (ref == null)
            return(null);
        
        return((ClassDefinitionDMW)ref.getObject().getContainer());
    }

    /**
     * Sets the filterByClass to the specified value.
     * @param value A value compatible with ClassDefinitionREF
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1028)
    public void setFilterByClass(ClassDefinitionDMW value) {
        mycore.setFilterByClass(value.getDMO());
    }

    /**
     * Removes the filterByClass attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1086)
    public void remFilterByClass(){
        mycore.remFilterByClass();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1004)
    public Integer getBlockingFactor(){
        return(mycore.getBlockingFactor());
    }

    /**
     * Sets blockingFactor to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public void setBlockingFactor(Object value) throws DmcValueException {
        mycore.setBlockingFactor(value);
    }

    /**
     * Sets blockingFactor to the specified value.
     * @param value Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1060)
    public void setBlockingFactor(Integer value){
        mycore.setBlockingFactor(value);
    }

    /**
     * Removes the blockingFactor attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1086)
    public void remBlockingFactor(){
        mycore.remBlockingFactor();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1004)
    public Boolean isRegisterForEvents(){
        return(mycore.isRegisterForEvents());
    }

    /**
     * Sets registerForEvents to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public void setRegisterForEvents(Object value) throws DmcValueException {
        mycore.setRegisterForEvents(value);
    }

    /**
     * Sets registerForEvents to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1060)
    public void setRegisterForEvents(Boolean value){
        mycore.setRegisterForEvents(value);
    }

    /**
     * Removes the registerForEvents attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1086)
    public void remRegisterForEvents(){
        mycore.remRegisterForEvents();
    }

    /**
     * @return The number of AttributeIDDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1136)
    public int getAttributeSelectorSize(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__attributeSelector);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no AttributeIDDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1148)
    public boolean getAttributeSelectorIsEmpty(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__attributeSelector);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any AttributeIDDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1160)
    public boolean getAttributeSelectorHasValue(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__attributeSelector);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of AttributeID objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1271)
    public AttributeIDIterableDMW getAttributeSelectorIterable(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__attributeSelector);
        if (attr == null)
            return(AttributeIDIterableDMW.emptyList);
        
        return(new AttributeIDIterableDMW(mycore.getAttributeSelector()));
    }

    /**
     * Adds another attributeSelector value.
     * @param value A value compatible with AttributeID
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1287)
    public void addAttributeSelector(Object value) throws DmcValueException {
        mycore.addAttributeSelector(value);
    }

    /**
     * Adds another attributeSelector value.
     * @param value A value compatible with AttributeID
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1296)
    public void addAttributeSelector(AttributeID value){
        mycore.addAttributeSelector(value);
    }

    /**
     * Returns true if the collection contains the attributeSelector value.
     * @param value A value compatible with AttributeID
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1308)
    public boolean attributeSelectorContains(AttributeID value){
        return(mycore.attributeSelectorContains(value));
    }

    /**
     * @return A COPY of the collection of AttributeID objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1336)
    @SuppressWarnings("unchecked")
    public HashSet<AttributeID> getAttributeSelectorCopy(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__attributeSelector);
        if (attr == null)
            return(new HashSet<AttributeID>());
        
        HashSet<AttributeID> rc = new HashSet<AttributeID>(attr.getMVSize());
        
        Iterator<AttributeID> it = (Iterator<AttributeID>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a attributeSelector value.
     * @param value The AttributeID to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1363)
    public void delAttributeSelector(Object value) throws DmcValueException {
        mycore.delAttributeSelector(value);
    }

    /**
     * Removes the attributeSelector attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1375)
    public void remAttributeSelector(){
        mycore.remAttributeSelector();
    }

    /**
     * @return The number of IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1136)
    public int getRequestIDSize(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__requestID);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1148)
    public boolean getRequestIDIsEmpty(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__requestID);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any IntegerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1160)
    public boolean getRequestIDHasValue(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__requestID);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Integer objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1271)
    public IntegerIterableDMW getRequestIDIterable(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__requestID);
        if (attr == null)
            return(IntegerIterableDMW.emptyList);
        
        return(new IntegerIterableDMW(mycore.getRequestID()));
    }

    /**
     * Adds another requestID value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1287)
    public void addRequestID(Object value) throws DmcValueException {
        mycore.addRequestID(value);
    }

    /**
     * Adds another requestID value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1296)
    public void addRequestID(Integer value){
        mycore.addRequestID(value);
    }

    /**
     * Returns true if the collection contains the requestID value.
     * @param value A value compatible with Integer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1308)
    public boolean requestIDContains(Integer value){
        return(mycore.requestIDContains(value));
    }

    /**
     * @return A COPY of the collection of Integer objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1336)
    @SuppressWarnings("unchecked")
    public ArrayList<Integer> getRequestIDCopy(){
        DmcAttribute<?> attr = mycore.get(GetRequestDMO.__requestID);
        if (attr == null)
            return(new ArrayList<Integer>());
        
        ArrayList<Integer> rc = new ArrayList<Integer>(attr.getMVSize());
        
        Iterator<Integer> it = (Iterator<Integer>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a requestID value.
     * @param value The Integer to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1363)
    public void delRequestID(Object value) throws DmcValueException {
        mycore.delRequestID(value);
    }

    /**
     * Removes the requestID attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1375)
    public void remRequestID(){
        mycore.remRequestID();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1004)
    public ScopeEnum getScope(){
        return(mycore.getScope());
    }

    /**
     * Sets scope to the specified value.
     * @param value A value compatible with DmcTypeScopeEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public void setScope(Object value) throws DmcValueException {
        mycore.setScope(value);
    }

    /**
     * Sets scope to the specified value.
     * @param value ScopeEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1060)
    public void setScope(ScopeEnum value){
        mycore.setScope(value);
    }

    /**
     * Removes the scope attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1086)
    public void remScope(){
        mycore.remScope();
    }


}
