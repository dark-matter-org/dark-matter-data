//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmv.shared.generated.dmo;

import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
// import 1
import org.dmd.dms.generated.dmo.AttributeDefinitionDMO;
// import 3 AttributeDefinition
import org.dmd.dms.generated.types.DmcTypeAttributeDefinitionREF;
import org.dmd.dms.generated.types.AttributeDefinitionREF;
// import 4
import org.dmd.dms.generated.types.AttributeDefinitionREF;

// import 6
import org.dmd.dmv.shared.generated.dmo.RuleDMO;

@SuppressWarnings("serial")
/**
 * The AttributeRule is the simplest rule that operates on a single attribute.
 * <P>
 * Generated from the dmv schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:537)
 */
abstract public class AttributeRuleDMO  extends RuleDMO  {

    public final static String _applyToAttribute = "applyToAttribute";

    public AttributeRuleDMO() {
        super("AttributeRule");
    }

    protected AttributeRuleDMO(String oc) {
        super(oc);
    }

    public AttributeRuleDMO(AttributeRuleDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    public AttributeDefinitionREF getApplyToAttribute(){
        DmcTypeAttributeDefinitionREF attr = (DmcTypeAttributeDefinitionREF) get(_applyToAttribute);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets applyToAttribute to the specified value.
     * @param value A value compatible with DmcTypeAttributeDefinitionREF
     */
    @SuppressWarnings("unchecked")
    public void setApplyToAttribute(Object value) throws DmcValueException {
        DmcAttribute attr = get(_applyToAttribute);
        if (attr == null)
            attr = new DmcTypeAttributeDefinitionREF();
        
        attr.set(value);
        set(_applyToAttribute,attr);
    }

    /**
     * Removes the applyToAttribute attribute value.
     */
    public void remApplyToAttribute(){
         rem(_applyToAttribute);
    }




}
