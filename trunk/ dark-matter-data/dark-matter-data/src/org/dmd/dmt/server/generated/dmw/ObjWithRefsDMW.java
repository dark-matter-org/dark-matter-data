package org.dmd.dmt.server.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:933)
import java.util.ArrayList;                                             // To support getMVCopy()
import java.util.Date;                                                  // For multi-valued containsDate
import java.util.HashMap;                                               // To support getMVCopy()
import java.util.HashSet;                                               // To support getMVCopy()
import java.util.Iterator;                                              // To support getMVCopy()
import org.dmd.dmc.*;                                                   // If any attributes
import org.dmd.dmc.DmcAttributeInfo;                                    // Alternative type for AttributeID values
import org.dmd.dmc.DmcObjectName;                                       // Alternative type for NameContainer values
import org.dmd.dmc.types.AttributeID;                                   // For multi-valued containsAttributeID
import org.dmd.dmc.types.IntegerToString;                               // For multi-valued containsIntegerToString
import org.dmd.dmc.types.NameContainer;                                 // For multi-valued containsNameContainer
import org.dmd.dmc.types.StringName;                                    // Primitive type
import org.dmd.dms.*;                                                   // Always 2
import org.dmd.dms.generated.dmo.MetaDMSAG;                             // Attribute from meta schema
import org.dmd.dms.generated.dmw.AttributeIDIterableDMW;                // For multi-valued AttributeID
import org.dmd.dms.generated.dmw.DateIterableDMW;                       // For multi-valued Date
import org.dmd.dms.generated.dmw.IntegerToStringIterableDMW;            // For multi-valued IntegerToString
import org.dmd.dms.generated.dmw.NameContainerIterableDMW;              // For multi-valued NameContainer
import org.dmd.dms.generated.dmw.StringIterableDMW;                     // For multi-valued String
import org.dmd.dms.generated.types.DmcTypeModifierMV;                   // Required for MODREC constructor
import org.dmd.dmt.server.extended.ObjWithRefs;                         // Is reference type aux
import org.dmd.dmt.server.generated.dmw.BaseObjDMW;                     // Derived class
import org.dmd.dmt.server.generated.dmw.DmtTestEnumIterableDMW;         // For multi-valued DmtTestEnum
import org.dmd.dmt.server.generated.dmw.ObjWithRefsIterableDMW;         // For multi-valued ObjWithRefs
import org.dmd.dmt.shared.generated.dmo.DmtDMSAG;                       // Attribute from dmt schema
import org.dmd.dmt.shared.generated.dmo.ObjWithRefsDMO;                 // Class not auxiliary or abstract
import org.dmd.dmt.shared.generated.enums.DmtTestEnum;                  // For multi-valued containsDmtTestEnum
import org.dmd.dmt.shared.generated.types.ObjWithRefsREF;               // To support getMVCopy() for REFs

/**
 * null
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:348)
 */
public class ObjWithRefsDMW extends BaseObjDMW implements DmcNamedObjectIF {

    public ObjWithRefsDMW() {
        super(new ObjWithRefsDMO(), org.dmd.dmt.server.generated.DmtSchemaAG._ObjWithRefs);
    }

    public ObjWithRefsDMW(DmcTypeModifierMV mods) {
        super(new ObjWithRefsDMO(mods), org.dmd.dmt.server.generated.DmtSchemaAG._ObjWithRefs);
    }

    public ObjWithRefs getModificationRecorder(){
        ObjWithRefs rc = new ObjWithRefs();
        rc.setName(getName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public ObjWithRefsDMW(ObjWithRefsDMO obj) {
        super(obj, org.dmd.dmt.server.generated.DmtSchemaAG._ObjWithRefs);
    }

    public ObjWithRefsDMO getDMO() {
        return((ObjWithRefsDMO) core);
    }

    protected ObjWithRefsDMW(ObjWithRefsDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:961)
    public StringName getObjectName(){
        return(((ObjWithRefsDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ObjWithRefsDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ObjWithRefsDMW){
            return( getObjectName().equals( ((ObjWithRefsDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return A ObjWithRefs object.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1077)
    public ObjWithRefs getObjRef(){
        ObjWithRefsREF ref = ((ObjWithRefsDMO) core).getObjRef();
        if (ref == null)
            return(null);
        
        return((ObjWithRefs)ref.getObject().getContainer());
    }

    /**
     * Sets the objRef to the specified value.
     * @param value A value compatible with ObjWithRefsREF
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1122)
    public void setObjRef(ObjWithRefs value) {
        ((ObjWithRefsDMO) core).setObjRef(value.getDMO());
    }

    /**
     * Removes the objRef attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1180)
    public void remObjRef(){
        ((ObjWithRefsDMO) core).remObjRef();
    }

    /**
     * @return The number of ObjWithRefs items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getObjRefMVSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__objRefMV);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getObjRefMVIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__objRefMV);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getObjRefMVHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__objRefMV);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of ObjWithRefsDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1278)
    public ObjWithRefsIterableDMW getObjRefMVIterable(){
        DmcAttribute attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefMV);
        if (attr == null)
            return(ObjWithRefsIterableDMW.emptyList);
        
        return(new ObjWithRefsIterableDMW(attr.getMV()));
    }

    /**
     * Adds another objRefMV value.
     * @param value A value compatible with ObjWithRefs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1294)
    public DmcAttribute<?> addObjRefMV(ObjWithRefs value){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).addObjRefMV(((ObjWithRefsDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a objRefMV value.
     * @param value The ObjWithRefs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1307)
    public void delObjRefMV(ObjWithRefs value){
        ((ObjWithRefsDMO) core).delObjRefMV(value.getDMO());
    }

    /**
     * @return A COPY of the collection of ObjWithRefs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1342)
    public ArrayList<ObjWithRefs> getObjRefMVCopy(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefMV);
        if (attr == null)
            return(new ArrayList<ObjWithRefs>());
        
        ArrayList<ObjWithRefs> rc = new ArrayList<ObjWithRefs>(attr.getMVSize());
        
        ObjWithRefsIterableDMW it = getObjRefMVIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the objRefMV attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remObjRefMV(){
        ((ObjWithRefsDMO) core).remObjRefMV();
    }

    /**
     * @return The number of ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1665)
    public int getObjRefHMSize(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefHM);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1677)
    public boolean getObjRefHMIsEmpty(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefHM);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1689)
    public boolean getObjRefHMHasValue(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefHM);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed ObjWithRefs object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1704)
    public ObjWithRefs getObjRefHM(Object key){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefHM);
        if (attr == null)
            return(null);
        
        return((ObjWithRefs)attr.getByKey(key));
    }

    /**
     * @return An Iterable of ObjWithRefs objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1728)
    public ObjWithRefsIterableDMW getObjRefHMIterable(){
        DmcAttribute attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefHM);
        if (attr == null)
            return(ObjWithRefsIterableDMW.emptyList);
        
        Iterator<ObjWithRefsREF> it = ((ObjWithRefsDMO) core).getObjRefHM();
        
        if (it == null)
            return(ObjWithRefsIterableDMW.emptyList);
        
        return(new ObjWithRefsIterableDMW(it));
    }

    /**
     * Adds another objRefHM value.
     * @param value ObjWithRefsDMW
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1750)
    public DmcAttribute<?> addObjRefHM(ObjWithRefs value) {
        return(((ObjWithRefsDMO) core).addObjRefHM(value.getDMO()));
    }

    /**
     * Deletes a objRefHM value.
     * @param value The ObjWithRefs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1762)
    public void delObjRefHM(ObjWithRefs value){
        ((ObjWithRefsDMO) core).delObjRefHM(value.getDMO());
    }

    /**
     * @return A COPY of the collection of ObjWithRefs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1796)
    public HashMap<StringName,ObjWithRefs> getObjRefHMCopy(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__objRefHM);
        if (attr == null)
            return(new HashMap<StringName,ObjWithRefs>());
        
        HashMap<StringName,ObjWithRefs> rc = new HashMap<StringName,ObjWithRefs>();
        
        ObjWithRefsIterableDMW it = getObjRefHMIterable();
        while(it.hasNext()){
            ObjWithRefs obj = it.next();
            rc.put((StringName) obj.getObjectName(),obj);
        }
        return(rc);
    }

    /**
     * Removes the objRefHM attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1933)
    public void remObjRefHM(){
        ((ObjWithRefsDMO) core).remObjRefHM();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getMvStringSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getMvStringIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getMvStringHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public StringIterableDMW getMvStringIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ObjWithRefsDMO) core).getMvString()));
    }

    /**
     * Adds another mvString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addMvString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addMvString(value);
    }

    /**
     * Adds another mvString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addMvString(String value){
        ((ObjWithRefsDMO) core).addMvString(value);
    }

    /**
     * Returns true if the collection contains the mvString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean mvStringContains(String value){
        return(((ObjWithRefsDMO) core).mvStringContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getMvStringCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvString);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a mvString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delMvString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delMvString(value);
    }

    /**
     * Deletes a mvString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delMvString(String value){
        ((ObjWithRefsDMO) core).delMvString(value);
    }

    /**
     * Removes the mvString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remMvString(){
        ((ObjWithRefsDMO) core).remMvString();
    }

    /**
     * @return The number of IntegerToStringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1665)
    public int getIntToStringSize(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__intToString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no IntegerToStringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1677)
    public boolean getIntToStringIsEmpty(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__intToString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any IntegerToStringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1689)
    public boolean getIntToStringHasValue(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__intToString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed IntegerToString object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1704)
    public IntegerToString getIntToString(Object key){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__intToString);
        if (attr == null)
            return(null);
        
        return((IntegerToString)attr.getByKey(key));
    }

    /**
     * @return An Iterator of IntegerToString objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1821)
    public IntegerToStringIterableDMW getIntToStringIterable(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__intToString);
        if (attr == null)
            return(IntegerToStringIterableDMW.emptyList);
        
        return(new IntegerToStringIterableDMW(((ObjWithRefsDMO) core).getIntToString()));
    }

    /**
     * Adds another intToString value.
     * @param value A value compatible with IntegerToString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1837)
    public void addIntToString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addIntToString(value);
    }

    /**
     * Adds another intToString value.
     * @param value IntegerToString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1846)
    public void addIntToString(IntegerToString value) {
        ((ObjWithRefsDMO) core).addIntToString(value);
    }

    /**
     * Deletes a intToString value.
     * @param value The IntegerToString to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1858)
    public void delIntToString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delIntToString(value);
    }

    /**
     * Deletes a intToString value.
     * @param value The IntegerToString to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1867)
    public void delIntToString(Integer value){
        ((ObjWithRefsDMO) core).delIntToString(value);
    }

    /**
     * @return A COPY of the collection of IntegerToString objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1893)
    @SuppressWarnings("unchecked")
    public HashMap<Integer,IntegerToString> getIntToStringCopy(){
        DmcAttribute<?> attr = ((ObjWithRefsDMO) core).get(DmtDMSAG.__intToString);
        if (attr == null)
            return(new HashMap<Integer,IntegerToString>());
        
        HashMap<Integer,IntegerToString> rc = new HashMap<Integer,IntegerToString>(attr.getMVSize());
        
        Iterator<IntegerToString> it = (Iterator<IntegerToString>) attr.getMV();
        while(it.hasNext()){
            IntegerToString obj = it.next();
            rc.put((Integer)obj.getKey(),obj);
        }
        
        return(rc);
    }

    /**
     * Removes the intToString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1933)
    public void remIntToString(){
        ((ObjWithRefsDMO) core).remIntToString();
    }

    /**
     * @return The number of AttributeID items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getAttrIDsSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__attrIDs);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no AttributeIDDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getAttrIDsIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__attrIDs);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any AttributeIDDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getAttrIDsHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__attrIDs);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of AttributeID objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public AttributeIDIterableDMW getAttrIDsIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__attrIDs);
        if (attr == null)
            return(AttributeIDIterableDMW.emptyList);
        
        return(new AttributeIDIterableDMW(((ObjWithRefsDMO) core).getAttrIDs()));
    }

    /**
     * Adds another attrIDs value.
     * @param value A value compatible with AttributeID
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addAttrIDs(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addAttrIDs(value);
    }

    /**
     * Adds another attrIDs value.
     * @param value A value compatible with AttributeID
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addAttrIDs(AttributeID value){
        ((ObjWithRefsDMO) core).addAttrIDs(value);
    }

    /**
     * Adds another DmcAttributeInfo value.
     * @param value A value compatible with DmcAttributeInfo
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1501)
    public void addAttrIDs(DmcAttributeInfo value){
        ((ObjWithRefsDMO) core).addAttrIDs(value);
    }

    /**
     * Returns true if the collection contains the attrIDs value.
     * @param value A value compatible with AttributeID
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean attrIDsContains(AttributeID value){
        return(((ObjWithRefsDMO) core).attrIDsContains(value));
    }

    /**
     * Returns true if the collection contains the DmcAttributeInfo value.
     * @param value A value compatible with DmcAttributeInfo
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1536)
    public boolean attrIDsContains(DmcAttributeInfo value){
        return(((ObjWithRefsDMO) core).attrIDsContains(value));
    }

    /**
     * @return A COPY of the collection of AttributeID objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public HashSet<AttributeID> getAttrIDsCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__attrIDs);
        if (attr == null)
            return(new HashSet<AttributeID>());
        
        HashSet<AttributeID> rc = new HashSet<AttributeID>(attr.getMVSize());
        
        Iterator<AttributeID> it = (Iterator<AttributeID>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a attrIDs value.
     * @param value The AttributeID to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delAttrIDs(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delAttrIDs(value);
    }

    /**
     * Deletes a attrIDs value.
     * @param value The AttributeID to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delAttrIDs(AttributeID value){
        ((ObjWithRefsDMO) core).delAttrIDs(value);
    }

    /**
     * Removes the attrIDs attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remAttrIDs(){
        ((ObjWithRefsDMO) core).remAttrIDs();
    }

    /**
     * @return The number of Date items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getHsDateSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsDate);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getHsDateIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsDate);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DateDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getHsDateHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsDate);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of Date objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public DateIterableDMW getHsDateIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsDate);
        if (attr == null)
            return(DateIterableDMW.emptyList);
        
        return(new DateIterableDMW(((ObjWithRefsDMO) core).getHsDate()));
    }

    /**
     * Adds another hsDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addHsDate(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addHsDate(value);
    }

    /**
     * Adds another hsDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addHsDate(Date value){
        ((ObjWithRefsDMO) core).addHsDate(value);
    }

    /**
     * Returns true if the collection contains the hsDate value.
     * @param value A value compatible with Date
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean hsDateContains(Date value){
        return(((ObjWithRefsDMO) core).hsDateContains(value));
    }

    /**
     * @return A COPY of the collection of Date objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public HashSet<Date> getHsDateCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsDate);
        if (attr == null)
            return(new HashSet<Date>());
        
        HashSet<Date> rc = new HashSet<Date>(attr.getMVSize());
        
        Iterator<Date> it = (Iterator<Date>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a hsDate value.
     * @param value The Date to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delHsDate(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delHsDate(value);
    }

    /**
     * Deletes a hsDate value.
     * @param value The Date to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delHsDate(Date value){
        ((ObjWithRefsDMO) core).delHsDate(value);
    }

    /**
     * Removes the hsDate attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remHsDate(){
        ((ObjWithRefsDMO) core).remHsDate();
    }

    /**
     * @return The number of DmtTestEnum items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getHsTestEnumSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsTestEnum);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DmtTestEnumDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getHsTestEnumIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsTestEnum);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DmtTestEnumDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getHsTestEnumHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsTestEnum);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of DmtTestEnum objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public DmtTestEnumIterableDMW getHsTestEnumIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsTestEnum);
        if (attr == null)
            return(DmtTestEnumIterableDMW.emptyList);
        
        return(new DmtTestEnumIterableDMW(((ObjWithRefsDMO) core).getHsTestEnum()));
    }

    /**
     * Adds another hsTestEnum value.
     * @param value A value compatible with DmtTestEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addHsTestEnum(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addHsTestEnum(value);
    }

    /**
     * Adds another hsTestEnum value.
     * @param value A value compatible with DmtTestEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addHsTestEnum(DmtTestEnum value){
        ((ObjWithRefsDMO) core).addHsTestEnum(value);
    }

    /**
     * Returns true if the collection contains the hsTestEnum value.
     * @param value A value compatible with DmtTestEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean hsTestEnumContains(DmtTestEnum value){
        return(((ObjWithRefsDMO) core).hsTestEnumContains(value));
    }

    /**
     * @return A COPY of the collection of DmtTestEnum objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public HashSet<DmtTestEnum> getHsTestEnumCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsTestEnum);
        if (attr == null)
            return(new HashSet<DmtTestEnum>());
        
        HashSet<DmtTestEnum> rc = new HashSet<DmtTestEnum>(attr.getMVSize());
        
        Iterator<DmtTestEnum> it = (Iterator<DmtTestEnum>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a hsTestEnum value.
     * @param value The DmtTestEnum to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delHsTestEnum(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delHsTestEnum(value);
    }

    /**
     * Deletes a hsTestEnum value.
     * @param value The DmtTestEnum to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delHsTestEnum(DmtTestEnum value){
        ((ObjWithRefsDMO) core).delHsTestEnum(value);
    }

    /**
     * Removes the hsTestEnum attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remHsTestEnum(){
        ((ObjWithRefsDMO) core).remHsTestEnum();
    }

    /**
     * @return The number of NameContainer items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getHsNamesSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsNames);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no NameContainerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getHsNamesIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsNames);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any NameContainerDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getHsNamesHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsNames);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of NameContainer objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public NameContainerIterableDMW getHsNamesIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsNames);
        if (attr == null)
            return(NameContainerIterableDMW.emptyList);
        
        return(new NameContainerIterableDMW(((ObjWithRefsDMO) core).getHsNames()));
    }

    /**
     * Adds another hsNames value.
     * @param value A value compatible with NameContainer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addHsNames(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addHsNames(value);
    }

    /**
     * Adds another hsNames value.
     * @param value A value compatible with NameContainer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addHsNames(NameContainer value){
        ((ObjWithRefsDMO) core).addHsNames(value);
    }

    /**
     * Adds another DmcObjectName value.
     * @param value A value compatible with DmcObjectName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1501)
    public void addHsNames(DmcObjectName value){
        ((ObjWithRefsDMO) core).addHsNames(value);
    }

    /**
     * Returns true if the collection contains the hsNames value.
     * @param value A value compatible with NameContainer
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean hsNamesContains(NameContainer value){
        return(((ObjWithRefsDMO) core).hsNamesContains(value));
    }

    /**
     * Returns true if the collection contains the DmcObjectName value.
     * @param value A value compatible with DmcObjectName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1536)
    public boolean hsNamesContains(DmcObjectName value){
        return(((ObjWithRefsDMO) core).hsNamesContains(value));
    }

    /**
     * @return A COPY of the collection of NameContainer objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public HashSet<NameContainer> getHsNamesCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsNames);
        if (attr == null)
            return(new HashSet<NameContainer>());
        
        HashSet<NameContainer> rc = new HashSet<NameContainer>(attr.getMVSize());
        
        Iterator<NameContainer> it = (Iterator<NameContainer>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a hsNames value.
     * @param value The NameContainer to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delHsNames(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delHsNames(value);
    }

    /**
     * Deletes a hsNames value.
     * @param value The NameContainer to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delHsNames(NameContainer value){
        ((ObjWithRefsDMO) core).delHsNames(value);
    }

    /**
     * Removes the hsNames attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remHsNames(){
        ((ObjWithRefsDMO) core).remHsNames();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getNonperStringSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__nonperString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getNonperStringIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__nonperString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getNonperStringHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__nonperString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public StringIterableDMW getNonperStringIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__nonperString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ObjWithRefsDMO) core).getNonperString()));
    }

    /**
     * Adds another nonperString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addNonperString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addNonperString(value);
    }

    /**
     * Adds another nonperString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addNonperString(String value){
        ((ObjWithRefsDMO) core).addNonperString(value);
    }

    /**
     * Returns true if the collection contains the nonperString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean nonperStringContains(String value){
        return(((ObjWithRefsDMO) core).nonperStringContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public HashSet<String> getNonperStringCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__nonperString);
        if (attr == null)
            return(new HashSet<String>());
        
        HashSet<String> rc = new HashSet<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a nonperString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delNonperString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delNonperString(value);
    }

    /**
     * Deletes a nonperString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delNonperString(String value){
        ((ObjWithRefsDMO) core).delNonperString(value);
    }

    /**
     * Removes the nonperString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remNonperString(){
        ((ObjWithRefsDMO) core).remNonperString();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getTransStringSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__transString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getTransStringIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__transString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getTransStringHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__transString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public StringIterableDMW getTransStringIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__transString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ObjWithRefsDMO) core).getTransString()));
    }

    /**
     * Adds another transString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addTransString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addTransString(value);
    }

    /**
     * Adds another transString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addTransString(String value){
        ((ObjWithRefsDMO) core).addTransString(value);
    }

    /**
     * Returns true if the collection contains the transString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean transStringContains(String value){
        return(((ObjWithRefsDMO) core).transStringContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public HashSet<String> getTransStringCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__transString);
        if (attr == null)
            return(new HashSet<String>());
        
        HashSet<String> rc = new HashSet<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a transString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delTransString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delTransString(value);
    }

    /**
     * Deletes a transString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delTransString(String value){
        ((ObjWithRefsDMO) core).delTransString(value);
    }

    /**
     * Removes the transString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remTransString(){
        ((ObjWithRefsDMO) core).remTransString();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getIndexedStringSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedString);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getIndexedStringIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedString);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getIndexedStringHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedString);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public StringIterableDMW getIndexedStringIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedString);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ObjWithRefsDMO) core).getIndexedString()));
    }

    /**
     * Adds another indexedString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addIndexedString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addIndexedString(value);
    }

    /**
     * Sets a indexedString value at the specified index.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1488)
    public void setNthIndexedString(int index, String value){
        ((ObjWithRefsDMO) core).setNthIndexedString(index, value);
    }

    /**
     * Returns true if the collection contains the indexedString value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean indexedStringContains(String value){
        return(((ObjWithRefsDMO) core).indexedStringContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getIndexedStringCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedString);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a indexedString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delIndexedString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delIndexedString(value);
    }

    /**
     * Deletes a indexedString value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delIndexedString(String value){
        ((ObjWithRefsDMO) core).delIndexedString(value);
    }

    /**
     * Removes the indexedString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remIndexedString(){
        ((ObjWithRefsDMO) core).remIndexedString();
    }

    /**
     * @return The number of ObjWithRefs items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getIndexedObjRefSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedObjRef);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getIndexedObjRefIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedObjRef);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getIndexedObjRefHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__indexedObjRef);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * Sets the indexedObjRef value at the specified index.
     * @param value A value compatible with ObjWithRefs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public DmcAttribute<?> setNthIndexedObjRef(int index, ObjWithRefs value){
        DmcAttribute<?> attr = null;
        if (value == null)
            attr = ((ObjWithRefsDMO) core).setNthIndexedObjRef(index, null);
        else
            attr = ((ObjWithRefsDMO) core).setNthIndexedObjRef(index, ((ObjWithRefsDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * @return The ObjWithRefs object at the specified index.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    public ObjWithRefs getNthIndexedObjRef(int index){
        ObjWithRefsREF ref = ((ObjWithRefsDMO) core).getNthIndexedObjRef(index);
        if (ref == null)
            return(null);
        
        return((ObjWithRefs)ref.getObject().getContainer());
    }

    /**
     * @return The reference to the ObjWithRefs object at the specified index.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1422)
    public ObjWithRefsREF getNthIndexedObjRefREF(int index){
        ObjWithRefsREF ref = ((ObjWithRefsDMO) core).getNthIndexedObjRefREF(index);
        return(ref);
    }

    /**
     * Removes the indexedObjRef attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remIndexedObjRef(){
        ((ObjWithRefsDMO) core).remIndexedObjRef();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public StringName getName(){
        return(((ObjWithRefsDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1145)
    public void setName(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1154)
    public void setName(StringName value){
        ((ObjWithRefsDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1180)
    public void remName(){
        ((ObjWithRefsDMO) core).remName();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public String getSvString(){
        return(((ObjWithRefsDMO) core).getSvString());
    }

    /**
     * Sets svString to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1145)
    public void setSvString(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).setSvString(value);
    }

    /**
     * Sets svString to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1154)
    public void setSvString(String value){
        ((ObjWithRefsDMO) core).setSvString(value);
    }

    /**
     * Removes the svString attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1180)
    public void remSvString(){
        ((ObjWithRefsDMO) core).remSvString();
    }

    /**
     * @return The number of DmtTestEnum items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1232)
    public int getMvTestEnumSize(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvTestEnum);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no DmtTestEnumDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public boolean getMvTestEnumIsEmpty(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvTestEnum);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any DmtTestEnumDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1257)
    public boolean getMvTestEnumHasValue(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvTestEnum);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of DmtTestEnum objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1452)
    public DmtTestEnumIterableDMW getMvTestEnumIterable(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvTestEnum);
        if (attr == null)
            return(DmtTestEnumIterableDMW.emptyList);
        
        return(new DmtTestEnumIterableDMW(((ObjWithRefsDMO) core).getMvTestEnum()));
    }

    /**
     * Adds another mvTestEnum value.
     * @param value A value compatible with DmtTestEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1468)
    public void addMvTestEnum(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).addMvTestEnum(value);
    }

    /**
     * Adds another mvTestEnum value.
     * @param value A value compatible with DmtTestEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1478)
    public void addMvTestEnum(DmtTestEnum value){
        ((ObjWithRefsDMO) core).addMvTestEnum(value);
    }

    /**
     * Returns true if the collection contains the mvTestEnum value.
     * @param value A value compatible with DmtTestEnum
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1525)
    public boolean mvTestEnumContains(DmtTestEnum value){
        return(((ObjWithRefsDMO) core).mvTestEnumContains(value));
    }

    /**
     * @return A COPY of the collection of DmtTestEnum objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1565)
    @SuppressWarnings("unchecked")
    public ArrayList<DmtTestEnum> getMvTestEnumCopy(){
        DmcAttribute<?> attr = core.get(DmtDMSAG.__mvTestEnum);
        if (attr == null)
            return(new ArrayList<DmtTestEnum>());
        
        ArrayList<DmtTestEnum> rc = new ArrayList<DmtTestEnum>(attr.getMVSize());
        
        Iterator<DmtTestEnum> it = (Iterator<DmtTestEnum>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a mvTestEnum value.
     * @param value The DmtTestEnum to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1592)
    public void delMvTestEnum(Object value) throws DmcValueException {
        ((ObjWithRefsDMO) core).delMvTestEnum(value);
    }

    /**
     * Deletes a mvTestEnum value.
     * @param value The DmtTestEnum to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1601)
    public void delMvTestEnum(DmtTestEnum value){
        ((ObjWithRefsDMO) core).delMvTestEnum(value);
    }

    /**
     * Removes the mvTestEnum attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1613)
    public void remMvTestEnum(){
        ((ObjWithRefsDMO) core).remMvTestEnum();
    }


}
