package org.dmd.dmt.shared.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:368)
import java.io.Serializable;                                                         // Always required - (GenUtility.java:197)
import java.util.*;                                                                  // Always required if we have any MV attributes - (GenUtility.java:193)
import org.dmd.dmc.DmcAttribute;                                                     // Any attributes - (GenUtility.java:213)
import org.dmd.dmc.DmcObject;                                                        // Structural class - (GenUtility.java:324)
import org.dmd.dmc.DmcSliceInfo;                                                     // Required for object slicing - (GenUtility.java:202)
import org.dmd.dmc.DmcValueException;                                                // Any attributes - (GenUtility.java:214)
import org.dmd.dms.generated.dmo.MetaDMSAG;                                          // Required for MODREC constructor - (GenUtility.java:201)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                // Required for MODREC constructor - (GenUtility.java:200)
import org.dmd.dmt.shared.generated.dmo.TestBasicObjectFixedDMO;                     // Type specific set/add - (GenUtility.java:280)
import org.dmd.dmt.shared.generated.types.DmcTypeTestBasicObjectFixedREFSET;         // Reference type - (GenUtility.java:273)

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * null
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class UnnamedObjHSDMO  extends DmcObject  implements Serializable  {

    public final static String constructionClassName = "UnnamedObjHS";

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public UnnamedObjHSDMO() {
        super("UnnamedObjHS");
    }

    protected UnnamedObjHSDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public UnnamedObjHSDMO getNew(){
        UnnamedObjHSDMO rc = new UnnamedObjHSDMO();
        return(rc);
    }

    @Override
    public UnnamedObjHSDMO getSlice(DmcSliceInfo info){
        UnnamedObjHSDMO rc = new UnnamedObjHSDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public UnnamedObjHSDMO(DmcTypeModifierMV mods) {
        super("UnnamedObjHS");
        modrec(true);
        setModifier(mods);
    }

    public UnnamedObjHSDMO getModificationRecorder(){
        UnnamedObjHSDMO rc = new UnnamedObjHSDMO();
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        rc.modrec(true);
        return(rc);
    }

    /**
     * @return An Iterator of TestBasicObjectFixedDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:922)
    public Iterator<TestBasicObjectFixedDMO> getHsUnnamedObj(){
        DmcTypeTestBasicObjectFixedREFSET attr = (DmcTypeTestBasicObjectFixedREFSET) get(DmtDMSAG.__hsUnnamedObj);
        if (attr == null)
            return( ((List<TestBasicObjectFixedDMO>) Collections.EMPTY_LIST).iterator() );

        return(attr.getMV());
    }

    /**
     * Adds another hsUnnamedObj to the specified value.
     * @param value TestBasicObjectFixed
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:968)
    public DmcAttribute<?> addHsUnnamedObj(TestBasicObjectFixedDMO value) {
        DmcAttribute<?> attr = get(DmtDMSAG.__hsUnnamedObj);
        if (attr == null)
            attr = new DmcTypeTestBasicObjectFixedREFSET(DmtDMSAG.__hsUnnamedObj);
        
        try{
            setLastValue(attr.add(value));
            add(DmtDMSAG.__hsUnnamedObj,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Adds another hsUnnamedObj value.
     * @param value A value compatible with TestBasicObjectFixed
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1209)
    public DmcAttribute<?> addHsUnnamedObj(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(DmtDMSAG.__hsUnnamedObj);
        if (attr == null)
            attr = new DmcTypeTestBasicObjectFixedREFSET(DmtDMSAG.__hsUnnamedObj);
        
        setLastValue(attr.add(value));
        add(DmtDMSAG.__hsUnnamedObj,attr);
        return(attr);
    }

    /**
     * Returns the number of values in hsUnnamedObj
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1226)
    public int getHsUnnamedObjSize(){
        DmcAttribute<?> attr = get(DmtDMSAG.__hsUnnamedObj);
        if (attr == null){
            if (DmtDMSAG.__hsUnnamedObj.indexSize == 0)
                return(0);
            else
                return(DmtDMSAG.__hsUnnamedObj.indexSize);
        }
        return(attr.getMVSize());
    }

    /**
     * Deletes a hsUnnamedObj value.
     * @param value The TestBasicObjectFixed to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1248)
    public DmcAttribute<?> delHsUnnamedObj(Object value){
        DmcAttribute<?> attr = get(DmtDMSAG.__hsUnnamedObj);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeTestBasicObjectFixedREFSET(DmtDMSAG.__hsUnnamedObj), value);
        else
            attr = del(DmtDMSAG.__hsUnnamedObj, value);
        
        return(attr);
    }

    /**
     * Removes the hsUnnamedObj attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1319)
    public void remHsUnnamedObj(){
         rem(DmtDMSAG.__hsUnnamedObj);
    }




}
