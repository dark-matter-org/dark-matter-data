package org.dmd.dmt.shared.generated.types;

import java.util.ArrayList;
import org.dmd.dmc.types.DmcTypeNamedObjectREF;
import org.dmd.dmc.types.StringName;

import org.dmd.dmt.shared.generated.types.TestDerivedDiffSubpackageREF;

import org.dmd.dmt.shared.generated.dmo.TestDerivedDiffSubpackageDMO;

/**
 * This is the generated DmcAttribute derivative for values of type TestDerivedDiffSubpackage
 * <P>
 * Generated from the dmt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dms.util.DmoTypeFormatter.dumpNamedREFHelperType(DmoTypeFormatter.java:428)
 */
@SuppressWarnings("serial")
public class DmcTypeTestDerivedDiffSubpackageREF extends DmcTypeNamedObjectREF<TestDerivedDiffSubpackageREF, StringName> {

    public DmcTypeTestDerivedDiffSubpackageREF(){
    }

    @Override
    protected TestDerivedDiffSubpackageREF getNewHelper(){
        return(new TestDerivedDiffSubpackageREF());
    }

    @Override
    protected StringName getNewName(){
        return(new StringName());
    }

    @Override
    protected String getDMOClassName(){
        return( TestDerivedDiffSubpackageDMO.class.getName());
    }

    @Override
    protected boolean isDMO(Object value){
        if (value instanceof TestDerivedDiffSubpackageDMO)
            return(true);
        return(false);
    }

    /**
     * Returns a clone of this attribute.
     */
    public DmcTypeTestDerivedDiffSubpackageREF cloneMe(){
        DmcTypeTestDerivedDiffSubpackageREF rc = new DmcTypeTestDerivedDiffSubpackageREF();
        if (mv == null){
            rc.sv = sv.cloneMe();
        }
        else{
            rc.mv = new ArrayList<TestDerivedDiffSubpackageREF>();
            for(TestDerivedDiffSubpackageREF val : mv){
                rc.mv.add(val.cloneMe());
            }
        }
        return(rc);
    }

    /**
     * Returns an empty attribute of this same type. This is used in conjunction with the DmcTypeModifier.
     */
    public DmcTypeTestDerivedDiffSubpackageREF getOneOfMe(){
        DmcTypeTestDerivedDiffSubpackageREF rc = new DmcTypeTestDerivedDiffSubpackageREF();
        return(rc);
    }

    /**
     * Returns a clone of a value associated with this type.
     */
    public TestDerivedDiffSubpackageREF cloneValue(TestDerivedDiffSubpackageREF val){
        TestDerivedDiffSubpackageREF rc = new TestDerivedDiffSubpackageREF(val);
        return(rc);
    }



}
