package org.dmd.dmt.shared.generated.types;

import java.io.Serializable;
import org.dmd.dmc.DmcInputStreamIF;
import org.dmd.dmc.DmcOutputStreamIF;
import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.types.DmcTypeNamedObjectREF;
import org.dmd.dmc.types.StringName;
@SuppressWarnings("serial")
/**
 * The DmcTypeSomeRelation class.
 * This code was auto-generated by the createmeta utility and shouldn't be alterred
 * manually.
 * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:2785)
 *    Called from: Called from: org.dmd.dms.util.ExtendedReferenceTypeFormatter.dumpExtendedReferenceType(ExtendedReferenceTypeFormatter.java:351)
 */
abstract public class DmcTypeSomeRelation extends DmcTypeNamedObjectREF<SomeRelation, StringName> {

    /**
     * Default constructor.
     */
    public DmcTypeSomeRelation(){
    }

    /**
     * Default constructor.
     */
    public DmcTypeSomeRelation(DmcAttributeInfo ai){
        super(ai);
    }

	@Override
	protected SomeRelation getNewHelper() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected StringName getNewName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected boolean isDMO(Object value) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected String getDMOClassName() {
		// TODO Auto-generated method stub
		return null;
	}
    protected SomeRelation typeCheck(Object value) throws DmcValueException {
        SomeRelation rc = null;

        if (value instanceof SomeRelation){
            rc = (SomeRelation)value;
        }
        else if (value instanceof String){
            rc = new SomeRelation((String)value);
        }
        else{
            throw(new DmcValueException("Object of class: " + value.getClass().getName() + " passed where object compatible with SomeRelation expected."));
        }
        return(rc);
    }

    /**
     * Returns a clone of a value associated with this type.
     */
    public SomeRelation cloneValue(SomeRelation val){
        return(new SomeRelation(val));
    }

    /**
     * Writes a SomeRelation.
     */
    @Override
    public void serializeValue(DmcOutputStreamIF dos, SomeRelation value) throws Exception {
        value.serializeIt(dos);
    }

    /**
     * Reads a SomeRelation.
     */
    @Override
    public SomeRelation deserializeValue(DmcInputStreamIF dis) throws Exception {
        SomeRelation rc = new SomeRelation();
        rc.deserializeIt(dis);
        return(rc);
    }



}
