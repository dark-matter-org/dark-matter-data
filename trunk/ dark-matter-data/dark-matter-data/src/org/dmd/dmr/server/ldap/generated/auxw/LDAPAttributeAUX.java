//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmr.server.ldap.generated.auxw;

import org.dmd.dmw.DmwWrapperBase;
import org.dmd.dms.ClassDefinition;

import org.dmd.dmc.DmcAttribute;

import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.types.DmcTypeString;


/**
 * The LDAPSchemaExtension class is used to extend the basic SchemaDefinition
 * class with information required to map objects onto an LDAP repository.
 * <P>
 * Generated from the dmr.ldap schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.getAuxClassHeader(DMWGenerator.java:827)
 */
public class LDAPAttributeAUX {

    public final static ClassDefinition _auxClass = org.dmd.dmr.server.ldap.generated.DmrLdapSchemaAG._LDAPAttributeAUX;
    public final static String _reposName = "reposName";

    /**
     * This method adds the auxiliary class to the wrapped object.
     */
    static public void addAux(DmwWrapperBase corew) throws DmcValueException {
        if (corew == null)
            return;
        corew.addAux(_auxClass);
    }

    /**
     * This method removes the auxiliary class from the wrapped object.
     */
    static public void removeAux(DmwWrapperBase corew){
        if (corew == null)
            return;
        corew.removeAux(_auxClass);
    }

    /**
     * This method checks if the object has this auxiliary class.
     */
    static public boolean hasAux(DmwWrapperBase corew){
        if (corew == null)
            return(false);
        return(corew.hasAux(_auxClass));
    }

    static public String getReposName(DmwWrapperBase corew){
        DmcTypeString attr = (DmcTypeString) corew.getDmcObject().get(_reposName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets reposName to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    static public void setReposName(DmwWrapperBase corew, Object value) throws DmcValueException {
        DmcAttribute attr = corew.getDmcObject().get(_reposName);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        corew.getDmcObject().set(_reposName,attr);
    }




}
