package org.dmd.mvw.tools.mvwgenerator.generated;

import org.dmd.dmc.DmcValueException;
import org.dmd.dms.*;
import org.dmd.dms.generated.dmo.*;


/**
 * The MVW (Model-View-Whatever) schema defines classes that can be used to
 * model aspects of both Model-View-Controller or Model-View-Presenter style
 * applications.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.util.SchemaFormatter.dumpSchema(SchemaFormatter.java:159)
 */
public class MvwSchemaAG extends SchemaDefinition {

    public static ClassDefinition _MvwDefinition;
    public static ClassDefinition _MvwEvent;
    public static ClassDefinition _BroadcastEvent;
    public static ClassDefinition _Event;
    public static ClassDefinition _SingleDMOSelectedEvent;
    public static ClassDefinition _MultipleDMOSelectedEvent;
    public static ClassDefinition _Module;
    public static ClassDefinition _View;
    public static ClassDefinition _Component;
    public static ClassDefinition _Controller;
    public static ClassDefinition _Presenter;
    public static ClassDefinition _Activity;
    public static ClassDefinition _RunContextItem;
    public static ClassDefinition _WebApplication;

    public static AttributeDefinition _definedInModule;
    public static AttributeDefinition _firesEvent;
    public static AttributeDefinition _handlesEvent;
    public static AttributeDefinition _argVector;
    public static AttributeDefinition _userDataImport;
    public static AttributeDefinition _dependsOnModule;
    public static AttributeDefinition _selectedDMO;
    public static AttributeDefinition _useBaseClass;
    public static AttributeDefinition _dependsOnSchema;
    public static AttributeDefinition _eventName;
    public static AttributeDefinition _moduleName;
    public static AttributeDefinition _componentName;
    public static AttributeDefinition _viewName;
    public static AttributeDefinition _isWidget;
    public static AttributeDefinition _localEvent;
    public static AttributeDefinition _displayDMO;
    public static AttributeDefinition _selectEvent;
    public static AttributeDefinition _deleteEvent;
    public static AttributeDefinition _clickEvent;
    public static AttributeDefinition _modifyEvent;
    public static AttributeDefinition _createEvent;
    public static AttributeDefinition _broadcast;
    public static AttributeDefinition _broadcastOnly;
    public static AttributeDefinition _presenterMethod;
    public static AttributeDefinition _viewMethod;
    public static AttributeDefinition _useClass;
    public static AttributeDefinition _itemName;
    public static AttributeDefinition _construction;
    public static AttributeDefinition _itemOrder;
    public static AttributeDefinition _contextImpl;
    public static AttributeDefinition _importThis;
    public static AttributeDefinition _local;
    public static AttributeDefinition _appName;
    public static AttributeDefinition _controllerName;
    public static AttributeDefinition _useRunContextItem;
    public static AttributeDefinition _presenterImport;
    public static AttributeDefinition _viewImport;
    public static AttributeDefinition _sharedImport;
    public static AttributeDefinition _presenterName;
    public static AttributeDefinition _activityName;
    public static AttributeDefinition _managesView;
    public static AttributeDefinition _usesController;
    public static AttributeDefinition _useSchema;
    public static AttributeDefinition _sendsGetRequest;
    public static AttributeDefinition _sendsDeleteRequest;
    public static AttributeDefinition _sendsSetRequest;
    public static AttributeDefinition _sendsCreateRequest;
    public static AttributeDefinition _sendsActionRequest;
    public static AttributeDefinition _sendsLoginRequest;
    public static AttributeDefinition _sendsLogoutRequest;
    public static AttributeDefinition _centralDMPErrorHandler;
    public static AttributeDefinition _centralRPCErrorHandler;

    public static TypeDefinition _EventWithArgs;
    public static TypeDefinition _MethodWithArgs;
    public static TypeDefinition _GetWithOptions;
    public static TypeDefinition _RequestWithOptions;
    public static TypeDefinition _DisplayDataSpec;
    public static TypeDefinition _EventSpec;
    public static TypeDefinition _OperationSpec;


    public static EnumDefinition _SelectionTypeEnum;
    public static EnumDefinition _EventScopeEnum;
    public static EnumDefinition _GetFunctionOptionEnum;
    public static EnumDefinition _RequestOptionEnum;

    static MvwSchemaAG instance;

    public MvwSchemaAG() throws DmcValueException {
        generatedSchema = true;
        staticRefName   = "org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG";

        dependsOnSchemaClasses.put("dmg","null.generated.DmgSchemaAG");

    }

    private void initialize() throws DmcValueException {
        if (instance == null){
            instance        = this;
            SchemaDefinitionDMO me = (SchemaDefinitionDMO) this.getDmcObject();
            me.setName("mvw");
            me.setSchemaPackage("org.dmd.mvw.tools.mvwgenerator");
            me.setDmwPackage("org.dmd.mvw.tools.mvwgenerator");
            me.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/mvw.dms");


            me.addDependsOn("dmg");
            dependsOnSchemaClasses.put("dmg","null.generated.DmgSchemaAG");


            initClasses();
            initAttributes();
            initTypes();
            initActions();
            initEnums();
        }
    }

    private void initClasses() throws DmcValueException {
            ClassDefinitionDMO _MvwDefinitionOBJ = new ClassDefinitionDMO();
            _MvwDefinition = new ClassDefinition(_MvwDefinitionOBJ);
            _MvwDefinitionOBJ.setName("MvwDefinition");
            _MvwDefinitionOBJ.setClassType("ABSTRACT");
            _MvwDefinitionOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _MvwDefinitionOBJ.setLineNumber("13");
            _MvwDefinitionOBJ.setDescription("The MvwDefinition class provide a common base for all MVW definition classes.");
            _MvwDefinitionOBJ.setIsNamedBy("camelCaseName");
            _MvwDefinitionOBJ.setUseWrapperType("EXTENDED");
            _MvwDefinitionOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.MvwDefinitionREF");
            _MvwDefinitionOBJ.setDmwIteratorClass("MvwDefinitionIterableDMW");
            _MvwDefinitionOBJ.addMay("file");
            _MvwDefinitionOBJ.addMay("lineNumber");
            _MvwDefinitionOBJ.addMay("description");
            _MvwDefinitionOBJ.addMust("camelCaseName");
            _MvwDefinitionOBJ.addMust("definedInModule");
            _MvwDefinitionOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.MvwDefinitionIterableDMW");
            _MvwDefinition.setDefinedIn(this);
            addClassDefList(_MvwDefinition);

            ClassDefinitionDMO _MvwEventOBJ = new ClassDefinitionDMO();
            _MvwEvent = new ClassDefinition(_MvwEventOBJ);
            _MvwEventOBJ.setName("MvwEvent");
            _MvwEventOBJ.setClassType("ABSTRACT");
            _MvwEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _MvwEventOBJ.setLineNumber("41");
            _MvwEventOBJ.setDescription("The MvwEvent is an autonomous definition of some kind of event that is fired and handled by components in a Model-View-Whatever application. Specification of an MvwEvent will result the creation of a GwtEvent.Type<H> class and its associated EventHandler class.");
            _MvwEventOBJ.setDerivedFrom("MvwDefinition");
            _MvwEventOBJ.setIsNamedBy("eventName");
            _MvwEventOBJ.setUseWrapperType("EXTENDED");
            _MvwEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.MvwEventREF");
            _MvwEventOBJ.setDmwIteratorClass("MvwEventIterableDMW");
            _MvwEventOBJ.addMay("description");
            _MvwEventOBJ.addMay("argVector");
            _MvwEventOBJ.addMay("userDataImport");
            _MvwEventOBJ.addMust("eventName");
            _MvwEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.MvwEventIterableDMW");
            _MvwEvent.setDefinedIn(this);
            addClassDefList(_MvwEvent);

            ClassDefinitionDMO _BroadcastEventOBJ = new ClassDefinitionDMO();
            _BroadcastEvent = new ClassDefinition(_BroadcastEventOBJ);
            _BroadcastEventOBJ.setName("BroadcastEvent");
            _BroadcastEventOBJ.setClassType("STRUCTURAL");
            _BroadcastEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _BroadcastEventOBJ.setLineNumber("61");
            _BroadcastEventOBJ.setDescription("The BroadcastEvent is fired by producers that want to publish an event on the Event Bus.");
            _BroadcastEventOBJ.setDerivedFrom("MvwEvent");
            _BroadcastEventOBJ.setIsNamedBy("eventName");
            _BroadcastEventOBJ.setUseWrapperType("EXTENDED");
            _BroadcastEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.BroadcastEventREF");
            _BroadcastEventOBJ.setDmwIteratorClass("BroadcastEventIterableDMW");
            _BroadcastEventOBJ.addMust("eventName");
            _BroadcastEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.BroadcastEventIterableDMW");
            _BroadcastEvent.setDefinedIn(this);
            addClassDefList(_BroadcastEvent);

            ClassDefinitionDMO _EventOBJ = new ClassDefinitionDMO();
            _Event = new ClassDefinition(_EventOBJ);
            _EventOBJ.setName("Event");
            _EventOBJ.setClassType("STRUCTURAL");
            _EventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _EventOBJ.setLineNumber("73");
            _EventOBJ.setDescription("The specification of an Event definition will result in the creation of a gwtEvent and its associated handler interface.");
            _EventOBJ.setDerivedFrom("MvwDefinition");
            _EventOBJ.setIsNamedBy("eventName");
            _EventOBJ.setUseWrapperType("EXTENDED");
            _EventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.EventREF");
            _EventOBJ.setDmwIteratorClass("EventIterableDMW");
            _EventOBJ.addMay("argVector");
            _EventOBJ.addMay("importThis");
            _EventOBJ.addMust("eventName");
            _EventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventIterableDMW");
            _Event.setDefinedIn(this);
            addClassDefList(_Event);

            ClassDefinitionDMO _SingleDMOSelectedEventOBJ = new ClassDefinitionDMO();
            _SingleDMOSelectedEvent = new ClassDefinition(_SingleDMOSelectedEventOBJ);
            _SingleDMOSelectedEventOBJ.setName("SingleDMOSelectedEvent");
            _SingleDMOSelectedEventOBJ.setClassType("STRUCTURAL");
            _SingleDMOSelectedEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _SingleDMOSelectedEventOBJ.setLineNumber("88");
            _SingleDMOSelectedEventOBJ.setDescription("The SingleDMOSelectedEvent is a BroadcastEvent that indicates that a single  Dark Matter Object has been selected, usually in an MvwView component. By defining an event of this type, your component will have the event added to its event interface and, when that event is fired, the framework will also fire a generic DMO event that is handled by the  MvwSelectionManager component.");
            _SingleDMOSelectedEventOBJ.setDerivedFrom("BroadcastEvent");
            _SingleDMOSelectedEventOBJ.setIsNamedBy("eventName");
            _SingleDMOSelectedEventOBJ.setUseWrapperType("EXTENDED");
            _SingleDMOSelectedEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.SingleDMOSelectedEventREF");
            _SingleDMOSelectedEventOBJ.setDmwIteratorClass("SingleDMOSelectedEventIterableDMW");
            _SingleDMOSelectedEventOBJ.addMust("eventName");
            _SingleDMOSelectedEventOBJ.addMust("selectedDMO");
            _SingleDMOSelectedEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.SingleDMOSelectedEventIterableDMW");
            _SingleDMOSelectedEvent.setDefinedIn(this);
            addClassDefList(_SingleDMOSelectedEvent);

            ClassDefinitionDMO _MultipleDMOSelectedEventOBJ = new ClassDefinitionDMO();
            _MultipleDMOSelectedEvent = new ClassDefinition(_MultipleDMOSelectedEventOBJ);
            _MultipleDMOSelectedEventOBJ.setName("MultipleDMOSelectedEvent");
            _MultipleDMOSelectedEventOBJ.setClassType("STRUCTURAL");
            _MultipleDMOSelectedEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _MultipleDMOSelectedEventOBJ.setLineNumber("100");
            _MultipleDMOSelectedEventOBJ.setDescription("The MultipleDMOSelectedEvent is a BroadcastEvent that indicates that multiple DMOs have been selected. As with the single select event, a generic DMO event that is handled by the MvwSelectionManager is fired as well.");
            _MultipleDMOSelectedEventOBJ.setDerivedFrom("BroadcastEvent");
            _MultipleDMOSelectedEventOBJ.setIsNamedBy("eventName");
            _MultipleDMOSelectedEventOBJ.setUseWrapperType("EXTENDED");
            _MultipleDMOSelectedEventOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.MultipleDMOSelectedEventREF");
            _MultipleDMOSelectedEventOBJ.setDmwIteratorClass("MultipleDMOSelectedEventIterableDMW");
            _MultipleDMOSelectedEventOBJ.addMust("eventName");
            _MultipleDMOSelectedEventOBJ.addMust("selectedDMO");
            _MultipleDMOSelectedEventOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.MultipleDMOSelectedEventIterableDMW");
            _MultipleDMOSelectedEvent.setDefinedIn(this);
            addClassDefList(_MultipleDMOSelectedEvent);

            ClassDefinitionDMO _ModuleOBJ = new ClassDefinitionDMO();
            _Module = new ClassDefinition(_ModuleOBJ);
            _ModuleOBJ.setName("Module");
            _ModuleOBJ.setClassType("STRUCTURAL");
            _ModuleOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ModuleOBJ.setLineNumber("113");
            _ModuleOBJ.setDescription("The Module is used to define a reusable set of MVW functionality which can be referred to in Application definitions or other Module definitions.");
            _ModuleOBJ.setDerivedFrom("MvwDefinition");
            _ModuleOBJ.setIsNamedBy("moduleName");
            _ModuleOBJ.setUseWrapperType("EXTENDED");
            _ModuleOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ModuleREF");
            _ModuleOBJ.setDmwIteratorClass("ModuleIterableDMW");
            _ModuleOBJ.addMay("dependsOnModule");
            _ModuleOBJ.addMay("dependsOnSchema");
            _ModuleOBJ.addMust("moduleName");
            _ModuleOBJ.addMust("genPackage");
            _ModuleOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ModuleIterableDMW");
            _Module.setDefinedIn(this);
            addClassDefList(_Module);

            ClassDefinitionDMO _ViewOBJ = new ClassDefinitionDMO();
            _View = new ClassDefinition(_ViewOBJ);
            _ViewOBJ.setName("View");
            _ViewOBJ.setClassType("STRUCTURAL");
            _ViewOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ViewOBJ.setLineNumber("146");
            _ViewOBJ.setDescription("The View is used to define the aspects of two kinds of interfaces that define the functionality provided by a view of a model; the event interface and the  data interface.");
            _ViewOBJ.setDerivedFrom("MvwDefinition");
            _ViewOBJ.setIsNamedBy("viewName");
            _ViewOBJ.setUseWrapperType("EXTENDED");
            _ViewOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ViewREF");
            _ViewOBJ.setDmwIteratorClass("ViewIterableDMW");
            _ViewOBJ.addMay("useBaseClass");
            _ViewOBJ.addMay("local");
            _ViewOBJ.addMay("broadcast");
            _ViewOBJ.addMay("broadcastOnly");
            _ViewOBJ.addMay("viewImport");
            _ViewOBJ.addMay("presenterImport");
            _ViewOBJ.addMay("sharedImport");
            _ViewOBJ.addMay("useRunContextItem");
            _ViewOBJ.addMay("isWidget");
            _ViewOBJ.addMay("extendsInterface");
            _ViewOBJ.addMay("presenterMethod");
            _ViewOBJ.addMay("viewMethod");
            _ViewOBJ.addMay("displayDMO");
            _ViewOBJ.addMay("selectEvent");
            _ViewOBJ.addMay("deleteEvent");
            _ViewOBJ.addMay("clickEvent");
            _ViewOBJ.addMay("modifyEvent");
            _ViewOBJ.addMay("createEvent");
            _ViewOBJ.addMust("viewName");
            _ViewOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ViewIterableDMW");
            _View.setDefinedIn(this);
            addClassDefList(_View);

            ClassDefinitionDMO _ComponentOBJ = new ClassDefinitionDMO();
            _Component = new ClassDefinition(_ComponentOBJ);
            _ComponentOBJ.setName("Component");
            _ComponentOBJ.setClassType("ABSTRACT");
            _ComponentOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ComponentOBJ.setLineNumber("172");
            _ComponentOBJ.setDescription("The Component is an abstract base for classes that define the building blocks of Applications. The primary feature of an Component is that it fires and/or handles events. Beyond that, a component can be whatever you require it to be. A variety of derived component types provide more focussed behavioural units.");
            _ComponentOBJ.setDerivedFrom("MvwDefinition");
            _ComponentOBJ.setIsNamedBy("componentName");
            _ComponentOBJ.setUseWrapperType("EXTENDED");
            _ComponentOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ComponentREF");
            _ComponentOBJ.setDmwIteratorClass("ComponentIterableDMW");
            _ComponentOBJ.addMay("firesEvent");
            _ComponentOBJ.addMay("handlesEvent");
            _ComponentOBJ.addMay("useSchema");
            _ComponentOBJ.addMay("useBaseClass");
            _ComponentOBJ.addMay("useRunContextItem");
            _ComponentOBJ.addMay("sendsGetRequest");
            _ComponentOBJ.addMay("sendsDeleteRequest");
            _ComponentOBJ.addMay("sendsSetRequest");
            _ComponentOBJ.addMay("sendsCreateRequest");
            _ComponentOBJ.addMay("sendsActionRequest");
            _ComponentOBJ.addMay("sendsLoginRequest");
            _ComponentOBJ.addMay("sendsLogoutRequest");
            _ComponentOBJ.addMay("centralDMPErrorHandler");
            _ComponentOBJ.addMay("centralRPCErrorHandler");
            _ComponentOBJ.addMust("componentName");
            _ComponentOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ComponentIterableDMW");
            _Component.setDefinedIn(this);
            addClassDefList(_Component);

            ClassDefinitionDMO _ControllerOBJ = new ClassDefinitionDMO();
            _Controller = new ClassDefinition(_ControllerOBJ);
            _ControllerOBJ.setName("Controller");
            _ControllerOBJ.setClassType("STRUCTURAL");
            _ControllerOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ControllerOBJ.setLineNumber("185");
            _ControllerOBJ.setDescription("The Controller represents a behavioural component that lives throughout the entire lifecycle of an WebApplication or WebSite. Generally, it manages the Presenters and Views that are displayed, but may also provide behind the scenes management of things like communications, security, menu structure etc. Controllers do not implement Presenter interfaces i.e. they do not interact directly with Views; that is the role of Presenters.");
            _ControllerOBJ.setDerivedFrom("Component");
            _ControllerOBJ.setIsNamedBy("controllerName");
            _ControllerOBJ.setUseWrapperType("EXTENDED");
            _ControllerOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ControllerREF");
            _ControllerOBJ.setDmwIteratorClass("ControllerIterableDMW");
            _ControllerOBJ.addMust("controllerName");
            _ControllerOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ControllerIterableDMW");
            _Controller.setDefinedIn(this);
            addClassDefList(_Controller);

            ClassDefinitionDMO _PresenterOBJ = new ClassDefinitionDMO();
            _Presenter = new ClassDefinition(_PresenterOBJ);
            _PresenterOBJ.setName("Presenter");
            _PresenterOBJ.setClassType("STRUCTURAL");
            _PresenterOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _PresenterOBJ.setLineNumber("199");
            _PresenterOBJ.setDescription("The Presenter is a behavioural component that manages one or more Views and thus implements the Presenter interface of any View it manages. Presenters populate and potentially update Views with data. This will often involve interacting with the communications interface(s) associated with an application. If a View allows the creation or alteration of data, those behaviours are usually handled directly by the View's Presenter.");
            _PresenterOBJ.setDerivedFrom("Component");
            _PresenterOBJ.setIsNamedBy("presenterName");
            _PresenterOBJ.setUseWrapperType("EXTENDED");
            _PresenterOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.PresenterREF");
            _PresenterOBJ.setDmwIteratorClass("PresenterIterableDMW");
            _PresenterOBJ.addMust("presenterName");
            _PresenterOBJ.addMust("managesView");
            _PresenterOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.PresenterIterableDMW");
            _Presenter.setDefinedIn(this);
            addClassDefList(_Presenter);

            ClassDefinitionDMO _ActivityOBJ = new ClassDefinitionDMO();
            _Activity = new ClassDefinition(_ActivityOBJ);
            _ActivityOBJ.setName("Activity");
            _ActivityOBJ.setClassType("STRUCTURAL");
            _ActivityOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _ActivityOBJ.setLineNumber("216");
            _ActivityOBJ.setDescription("If you are making use of activities, you'll define an Activity for each of them; all activities are derived from com.google.gwt.app.place.Activity. If you have common functionality that you wish to use for your Activity classes, implement it in a class derived from com.google.gwt.app.place.Activity and specify that class in the useBaseClass attribute of your defined Activity. <P> Activities are meant to be short-lived, disposable entities that run in a particular Place.");
            _ActivityOBJ.setDerivedFrom("MvwDefinition");
            _ActivityOBJ.setIsNamedBy("activityName");
            _ActivityOBJ.setUseWrapperType("EXTENDED");
            _ActivityOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.ActivityREF");
            _ActivityOBJ.setDmwIteratorClass("ActivityIterableDMW");
            _ActivityOBJ.addMay("useBaseClass");
            _ActivityOBJ.addMay("useRunContextItem");
            _ActivityOBJ.addMust("activityName");
            _ActivityOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.ActivityIterableDMW");
            _Activity.setDefinedIn(this);
            addClassDefList(_Activity);

            ClassDefinitionDMO _RunContextItemOBJ = new ClassDefinitionDMO();
            _RunContextItem = new ClassDefinition(_RunContextItemOBJ);
            _RunContextItemOBJ.setName("RunContextItem");
            _RunContextItemOBJ.setClassType("STRUCTURAL");
            _RunContextItemOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _RunContextItemOBJ.setLineNumber("231");
            _RunContextItemOBJ.setDescription("The RunContextItem allows for the generation of an overall RunContext for a WebApplication or WebSite.");
            _RunContextItemOBJ.setDerivedFrom("MvwDefinition");
            _RunContextItemOBJ.setIsNamedBy("itemName");
            _RunContextItemOBJ.setUseWrapperType("EXTENDED");
            _RunContextItemOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF");
            _RunContextItemOBJ.setDmwIteratorClass("RunContextItemIterableDMW");
            _RunContextItemOBJ.addMay("itemOrder");
            _RunContextItemOBJ.addMay("contextImpl");
            _RunContextItemOBJ.addMay("importThis");
            _RunContextItemOBJ.addMust("itemName");
            _RunContextItemOBJ.addMust("useClass");
            _RunContextItemOBJ.addMust("construction");
            _RunContextItemOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW");
            _RunContextItem.setDefinedIn(this);
            addClassDefList(_RunContextItem);

            ClassDefinitionDMO _WebApplicationOBJ = new ClassDefinitionDMO();
            _WebApplication = new ClassDefinition(_WebApplicationOBJ);
            _WebApplicationOBJ.setName("WebApplication");
            _WebApplicationOBJ.setClassType("STRUCTURAL");
            _WebApplicationOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/classes.dmd");
            _WebApplicationOBJ.setLineNumber("241");
            _WebApplicationOBJ.setDescription("The WebApplication definition allows for the definition of the superstructure for an application, basically it's the definition of the overall application controller.");
            _WebApplicationOBJ.setDerivedFrom("MvwDefinition");
            _WebApplicationOBJ.setIsNamedBy("appName");
            _WebApplicationOBJ.setUseWrapperType("EXTENDED");
            _WebApplicationOBJ.setDmtREFImport("org.dmd.mvw.tools.mvwgenerator.generated.types.WebApplicationREF");
            _WebApplicationOBJ.setDmwIteratorClass("WebApplicationIterableDMW");
            _WebApplicationOBJ.addMay("usesController");
            _WebApplicationOBJ.addMust("appName");
            _WebApplicationOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.WebApplicationIterableDMW");
            _WebApplication.setDefinedIn(this);
            addClassDefList(_WebApplication);

    }

    private void initAttributes() throws DmcValueException {
            AttributeDefinitionDMO _definedInModuleOBJ = new AttributeDefinitionDMO();
            _definedInModule = new AttributeDefinition(_definedInModuleOBJ);
            _definedInModuleOBJ.setType("Module");
            _definedInModuleOBJ.setName("definedInModule");
            _definedInModuleOBJ.setDmdID("800");
            _definedInModuleOBJ.setDescription("All MvwDefinitions are defined in an Module file that ends with a .mvw extension.");
            _definedInModule.setDefinedIn(this);
            _definedInModuleOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _definedInModuleOBJ.setLineNumber("7");
            addAttributeDefList(_definedInModule);

            AttributeDefinitionDMO _firesEventOBJ = new AttributeDefinitionDMO();
            _firesEvent = new AttributeDefinition(_firesEventOBJ);
            _firesEventOBJ.setType("Event");
            _firesEventOBJ.setName("firesEvent");
            _firesEventOBJ.setDmdID("801");
            _firesEventOBJ.setDescription("Indicates the MvwEvents that are fired by various MVW components.");
            _firesEventOBJ.setValueType("TREEMAPPED");
            _firesEvent.setDefinedIn(this);
            _firesEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _firesEventOBJ.setLineNumber("14");
            addAttributeDefList(_firesEvent);

            AttributeDefinitionDMO _handlesEventOBJ = new AttributeDefinitionDMO();
            _handlesEvent = new AttributeDefinition(_handlesEventOBJ);
            _handlesEventOBJ.setType("Event");
            _handlesEventOBJ.setName("handlesEvent");
            _handlesEventOBJ.setDmdID("802");
            _handlesEventOBJ.setDescription("This attributes holds a list of MvwEvents that are handled by various MVW components.");
            _handlesEventOBJ.setValueType("TREEMAPPED");
            _handlesEvent.setDefinedIn(this);
            _handlesEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _handlesEventOBJ.setLineNumber("22");
            addAttributeDefList(_handlesEvent);

            AttributeDefinitionDMO _argVectorOBJ = new AttributeDefinitionDMO();
            _argVector = new AttributeDefinition(_argVectorOBJ);
            _argVectorOBJ.setType("String");
            _argVectorOBJ.setName("argVector");
            _argVectorOBJ.setDmdID("803");
            _argVectorOBJ.setDescription("Indicates an argument vector for an event or interface.");
            _argVectorOBJ.setNullReturnValue("()");
            _argVector.setDefinedIn(this);
            _argVectorOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _argVectorOBJ.setLineNumber("41");
            addAttributeDefList(_argVector);

            AttributeDefinitionDMO _userDataImportOBJ = new AttributeDefinitionDMO();
            _userDataImport = new AttributeDefinition(_userDataImportOBJ);
            _userDataImportOBJ.setType("String");
            _userDataImportOBJ.setName("userDataImport");
            _userDataImportOBJ.setDmdID("804");
            _userDataImportOBJ.setDescription("The additionalImport attribute indicates the fully qualified class names of types that are required to support your userDataType indications. You need not explicitly indicate Java native types such as String, Integer etc. but you will have to specify things like java.util.TreeMap.");
            _userDataImportOBJ.setValueType("TREESET");
            _userDataImport.setDefinedIn(this);
            _userDataImportOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _userDataImportOBJ.setLineNumber("51");
            addAttributeDefList(_userDataImport);

            AttributeDefinitionDMO _dependsOnModuleOBJ = new AttributeDefinitionDMO();
            _dependsOnModule = new AttributeDefinition(_dependsOnModuleOBJ);
            _dependsOnModuleOBJ.setType("String");
            _dependsOnModuleOBJ.setName("dependsOnModule");
            _dependsOnModuleOBJ.setDmdID("805");
            _dependsOnModuleOBJ.setDescription("This attribute allows a Module to refer to other Modules on which it depends.");
            _dependsOnModuleOBJ.setValueType("TREESET");
            _dependsOnModule.setDefinedIn(this);
            _dependsOnModuleOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _dependsOnModuleOBJ.setLineNumber("59");
            addAttributeDefList(_dependsOnModule);

            AttributeDefinitionDMO _selectedDMOOBJ = new AttributeDefinitionDMO();
            _selectedDMO = new AttributeDefinition(_selectedDMOOBJ);
            _selectedDMOOBJ.setType("ClassDefinition");
            _selectedDMOOBJ.setName("selectedDMO");
            _selectedDMOOBJ.setDmdID("806");
            _selectedDMOOBJ.setDescription("This attribute indicates the class of DMO that is selected by a  SingleDMOSelectedEvent.");
            _selectedDMO.setDefinedIn(this);
            _selectedDMOOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _selectedDMOOBJ.setLineNumber("66");
            addAttributeDefList(_selectedDMO);

            AttributeDefinitionDMO _useBaseClassOBJ = new AttributeDefinitionDMO();
            _useBaseClass = new AttributeDefinition(_useBaseClassOBJ);
            _useBaseClassOBJ.setType("String");
            _useBaseClassOBJ.setName("useBaseClass");
            _useBaseClassOBJ.setDmdID("807");
            _useBaseClassOBJ.setDescription("The useBaseClass attribute is used to specify the class from which a generated component class should be derived. It should be fully qualified name of a class.");
            _useBaseClass.setDefinedIn(this);
            _useBaseClassOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _useBaseClassOBJ.setLineNumber("74");
            addAttributeDefList(_useBaseClass);

            AttributeDefinitionDMO _dependsOnSchemaOBJ = new AttributeDefinitionDMO();
            _dependsOnSchema = new AttributeDefinition(_dependsOnSchemaOBJ);
            _dependsOnSchemaOBJ.setType("String");
            _dependsOnSchemaOBJ.setName("dependsOnSchema");
            _dependsOnSchemaOBJ.setDmdID("808");
            _dependsOnSchemaOBJ.setDescription("Indicates the schema(s) on which a Module depends.");
            _dependsOnSchemaOBJ.setValueType("MULTI");
            _dependsOnSchema.setDefinedIn(this);
            _dependsOnSchemaOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _dependsOnSchemaOBJ.setLineNumber("81");
            addAttributeDefList(_dependsOnSchema);

            AttributeDefinitionDMO _eventNameOBJ = new AttributeDefinitionDMO();
            _eventName = new AttributeDefinition(_eventNameOBJ);
            _eventNameOBJ.setType("CamelCaseName");
            _eventNameOBJ.setName("eventName");
            _eventNameOBJ.setDmdID("809");
            _eventNameOBJ.setDescription("The name of an event.");
            _eventName.setDefinedIn(this);
            _eventNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _eventNameOBJ.setLineNumber("87");
            addAttributeDefList(_eventName);

            AttributeDefinitionDMO _moduleNameOBJ = new AttributeDefinitionDMO();
            _moduleName = new AttributeDefinition(_moduleNameOBJ);
            _moduleNameOBJ.setType("CamelCaseName");
            _moduleNameOBJ.setName("moduleName");
            _moduleNameOBJ.setDmdID("810");
            _moduleNameOBJ.setDescription("The name of a module.");
            _moduleName.setDefinedIn(this);
            _moduleNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _moduleNameOBJ.setLineNumber("93");
            addAttributeDefList(_moduleName);

            AttributeDefinitionDMO _componentNameOBJ = new AttributeDefinitionDMO();
            _componentName = new AttributeDefinition(_componentNameOBJ);
            _componentNameOBJ.setType("CamelCaseName");
            _componentNameOBJ.setName("componentName");
            _componentNameOBJ.setDmdID("811");
            _componentNameOBJ.setDescription("The name of a component.");
            _componentName.setDefinedIn(this);
            _componentNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _componentNameOBJ.setLineNumber("99");
            addAttributeDefList(_componentName);

            AttributeDefinitionDMO _viewNameOBJ = new AttributeDefinitionDMO();
            _viewName = new AttributeDefinition(_viewNameOBJ);
            _viewNameOBJ.setType("CamelCaseName");
            _viewNameOBJ.setName("viewName");
            _viewNameOBJ.setDmdID("812");
            _viewNameOBJ.setDescription("The name of a View.");
            _viewName.setDefinedIn(this);
            _viewNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _viewNameOBJ.setLineNumber("105");
            addAttributeDefList(_viewName);

            AttributeDefinitionDMO _isWidgetOBJ = new AttributeDefinitionDMO();
            _isWidget = new AttributeDefinition(_isWidgetOBJ);
            _isWidgetOBJ.setType("Boolean");
            _isWidgetOBJ.setName("isWidget");
            _isWidgetOBJ.setDmdID("813");
            _isWidgetOBJ.setDescription("Indicates if the View interface extends IsWidget.");
            _isWidget.setDefinedIn(this);
            _isWidgetOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _isWidgetOBJ.setLineNumber("111");
            addAttributeDefList(_isWidget);

            AttributeDefinitionDMO _localEventOBJ = new AttributeDefinitionDMO();
            _localEvent = new AttributeDefinition(_localEventOBJ);
            _localEventOBJ.setType("EventWithArgs");
            _localEventOBJ.setName("localEvent");
            _localEventOBJ.setDmdID("814");
            _localEventOBJ.setDescription("Indicates a local event name. An example would be localEvent deleteButtonClicked,  which would result in a method named onDeleteButtonClicked() to be created for the Presenter interface. <P> If there are arguments associated with the event, use the form: deleteButtonClicked (ContactDMO contact)");
            _localEvent.setDefinedIn(this);
            _localEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _localEventOBJ.setLineNumber("120");
            addAttributeDefList(_localEvent);

            AttributeDefinitionDMO _displayDMOOBJ = new AttributeDefinitionDMO();
            _displayDMO = new AttributeDefinition(_displayDMOOBJ);
            _displayDMOOBJ.setType("DisplayDataSpec");
            _displayDMOOBJ.setName("displayDMO");
            _displayDMOOBJ.setDmdID("816");
            _displayDMOOBJ.setDescription("Indicates data to be displayed in a View. The attributes takes the form Class SINGLE|MULTI varname.");
            _displayDMOOBJ.setValueType("MULTI");
            _displayDMO.setDefinedIn(this);
            _displayDMOOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _displayDMOOBJ.setLineNumber("134");
            addAttributeDefList(_displayDMO);

            AttributeDefinitionDMO _selectEventOBJ = new AttributeDefinitionDMO();
            _selectEvent = new AttributeDefinition(_selectEventOBJ);
            _selectEventOBJ.setType("EventSpec");
            _selectEventOBJ.setName("selectEvent");
            _selectEventOBJ.setDmdID("817");
            _selectEventOBJ.setDescription("Indicates type of events to be generated when data is selected.");
            _selectEventOBJ.setValueType("MULTI");
            _selectEvent.setDefinedIn(this);
            _selectEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _selectEventOBJ.setLineNumber("141");
            addAttributeDefList(_selectEvent);

            AttributeDefinitionDMO _deleteEventOBJ = new AttributeDefinitionDMO();
            _deleteEvent = new AttributeDefinition(_deleteEventOBJ);
            _deleteEventOBJ.setType("EventSpec");
            _deleteEventOBJ.setName("deleteEvent");
            _deleteEventOBJ.setDmdID("818");
            _deleteEventOBJ.setDescription("Indicates type of events to be generated when data is deleted.");
            _deleteEventOBJ.setValueType("MULTI");
            _deleteEvent.setDefinedIn(this);
            _deleteEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _deleteEventOBJ.setLineNumber("148");
            addAttributeDefList(_deleteEvent);

            AttributeDefinitionDMO _clickEventOBJ = new AttributeDefinitionDMO();
            _clickEvent = new AttributeDefinition(_clickEventOBJ);
            _clickEventOBJ.setType("OperationSpec");
            _clickEventOBJ.setName("clickEvent");
            _clickEventOBJ.setDmdID("819");
            _clickEventOBJ.setDescription("Indicates type of event to be generated when an object is clicked.");
            _clickEventOBJ.setValueType("MULTI");
            _clickEvent.setDefinedIn(this);
            _clickEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _clickEventOBJ.setLineNumber("155");
            addAttributeDefList(_clickEvent);

            AttributeDefinitionDMO _modifyEventOBJ = new AttributeDefinitionDMO();
            _modifyEvent = new AttributeDefinition(_modifyEventOBJ);
            _modifyEventOBJ.setType("OperationSpec");
            _modifyEventOBJ.setName("modifyEvent");
            _modifyEventOBJ.setDmdID("820");
            _modifyEventOBJ.setDescription("Indicates type of event to be generated when an object is modified.");
            _modifyEvent.setDefinedIn(this);
            _modifyEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _modifyEventOBJ.setLineNumber("161");
            addAttributeDefList(_modifyEvent);

            AttributeDefinitionDMO _createEventOBJ = new AttributeDefinitionDMO();
            _createEvent = new AttributeDefinition(_createEventOBJ);
            _createEventOBJ.setType("OperationSpec");
            _createEventOBJ.setName("createEvent");
            _createEventOBJ.setDmdID("821");
            _createEventOBJ.setDescription("Indicates type of event to be generated when an object is created.");
            _createEvent.setDefinedIn(this);
            _createEventOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _createEventOBJ.setLineNumber("167");
            addAttributeDefList(_createEvent);

            AttributeDefinitionDMO _broadcastOBJ = new AttributeDefinitionDMO();
            _broadcast = new AttributeDefinition(_broadcastOBJ);
            _broadcastOBJ.setType("Event");
            _broadcastOBJ.setName("broadcast");
            _broadcastOBJ.setDmdID("822");
            _broadcastOBJ.setDescription("Indicates an event that a View will first call on its Presenter interface and then broadcast on the event bus.");
            _broadcastOBJ.setValueType("MULTI");
            _broadcast.setDefinedIn(this);
            _broadcastOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _broadcastOBJ.setLineNumber("175");
            addAttributeDefList(_broadcast);

            AttributeDefinitionDMO _broadcastOnlyOBJ = new AttributeDefinitionDMO();
            _broadcastOnly = new AttributeDefinition(_broadcastOnlyOBJ);
            _broadcastOnlyOBJ.setType("Event");
            _broadcastOnlyOBJ.setName("broadcastOnly");
            _broadcastOnlyOBJ.setDmdID("823");
            _broadcastOnlyOBJ.setDescription("Indicates an event tha a View will broadcast only on the event bus; it is not  sent to its presenter.");
            _broadcastOnlyOBJ.setValueType("MULTI");
            _broadcastOnly.setDefinedIn(this);
            _broadcastOnlyOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _broadcastOnlyOBJ.setLineNumber("184");
            addAttributeDefList(_broadcastOnly);

            AttributeDefinitionDMO _presenterMethodOBJ = new AttributeDefinitionDMO();
            _presenterMethod = new AttributeDefinition(_presenterMethodOBJ);
            _presenterMethodOBJ.setType("MethodWithArgs");
            _presenterMethodOBJ.setName("presenterMethod");
            _presenterMethodOBJ.setDmdID("824");
            _presenterMethodOBJ.setDescription("Indicates a local function name (on the Presenter), optionally followed by an argument vector and, if required fully qualified class names.");
            _presenterMethodOBJ.setValueType("MULTI");
            _presenterMethod.setDefinedIn(this);
            _presenterMethodOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _presenterMethodOBJ.setLineNumber("192");
            addAttributeDefList(_presenterMethod);

            AttributeDefinitionDMO _viewMethodOBJ = new AttributeDefinitionDMO();
            _viewMethod = new AttributeDefinition(_viewMethodOBJ);
            _viewMethodOBJ.setType("MethodWithArgs");
            _viewMethodOBJ.setName("viewMethod");
            _viewMethodOBJ.setDmdID("825");
            _viewMethodOBJ.setDescription("Indicates a local function name (on the View), optionally followed by an argument vector and, if required fully qualified class names.");
            _viewMethodOBJ.setValueType("MULTI");
            _viewMethod.setDefinedIn(this);
            _viewMethodOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _viewMethodOBJ.setLineNumber("200");
            addAttributeDefList(_viewMethod);

            AttributeDefinitionDMO _useClassOBJ = new AttributeDefinitionDMO();
            _useClass = new AttributeDefinition(_useClassOBJ);
            _useClassOBJ.setType("String");
            _useClassOBJ.setName("useClass");
            _useClassOBJ.setDmdID("826");
            _useClassOBJ.setDescription("The fully qualified class name of a RunContextItem.");
            _useClass.setDefinedIn(this);
            _useClassOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _useClassOBJ.setLineNumber("206");
            addAttributeDefList(_useClass);

            AttributeDefinitionDMO _itemNameOBJ = new AttributeDefinitionDMO();
            _itemName = new AttributeDefinition(_itemNameOBJ);
            _itemNameOBJ.setType("CamelCaseName");
            _itemNameOBJ.setName("itemName");
            _itemNameOBJ.setDmdID("827");
            _itemNameOBJ.setDescription("The name of a RunContextItem.");
            _itemName.setDefinedIn(this);
            _itemNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _itemNameOBJ.setLineNumber("212");
            addAttributeDefList(_itemName);

            AttributeDefinitionDMO _constructionOBJ = new AttributeDefinitionDMO();
            _construction = new AttributeDefinition(_constructionOBJ);
            _constructionOBJ.setType("String");
            _constructionOBJ.setName("construction");
            _constructionOBJ.setDmdID("828");
            _constructionOBJ.setDescription("The statement used to construct the RunContextItem instance.");
            _construction.setDefinedIn(this);
            _constructionOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _constructionOBJ.setLineNumber("218");
            addAttributeDefList(_construction);

            AttributeDefinitionDMO _itemOrderOBJ = new AttributeDefinitionDMO();
            _itemOrder = new AttributeDefinition(_itemOrderOBJ);
            _itemOrderOBJ.setType("Integer");
            _itemOrderOBJ.setName("itemOrder");
            _itemOrderOBJ.setDmdID("829");
            _itemOrderOBJ.setDescription("The order in which a RunContextItem should be instantiated.");
            _itemOrderOBJ.setNullReturnValue("50");
            _itemOrder.setDefinedIn(this);
            _itemOrderOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _itemOrderOBJ.setLineNumber("225");
            addAttributeDefList(_itemOrder);

            AttributeDefinitionDMO _contextImplOBJ = new AttributeDefinitionDMO();
            _contextImpl = new AttributeDefinition(_contextImplOBJ);
            _contextImplOBJ.setType("String");
            _contextImplOBJ.setName("contextImpl");
            _contextImplOBJ.setDmdID("830");
            _contextImplOBJ.setDescription("The context implementation in which this RunContextItem definition should be used. All items are part of the Default implementation, but if you need other implementations, just respecify the item with different useClass and/or different construction syntax.");
            _contextImplOBJ.setNullReturnValue("Default");
            _contextImpl.setDefinedIn(this);
            _contextImplOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _contextImplOBJ.setLineNumber("235");
            addAttributeDefList(_contextImpl);

            AttributeDefinitionDMO _importThisOBJ = new AttributeDefinitionDMO();
            _importThis = new AttributeDefinition(_importThisOBJ);
            _importThisOBJ.setType("String");
            _importThisOBJ.setName("importThis");
            _importThisOBJ.setDmdID("831");
            _importThisOBJ.setDescription("Allows for the specification of other import statements in various definitions.");
            _importThisOBJ.setValueType("TREESET");
            _importThis.setDefinedIn(this);
            _importThisOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _importThisOBJ.setLineNumber("242");
            addAttributeDefList(_importThis);

            AttributeDefinitionDMO _localOBJ = new AttributeDefinitionDMO();
            _local = new AttributeDefinition(_localOBJ);
            _localOBJ.setType("Event");
            _localOBJ.setName("local");
            _localOBJ.setDmdID("832");
            _localOBJ.setDescription("Indicates that a View fires a local event to its Presenter. This is shorthand for a call to a member function on the Presenter.");
            _localOBJ.setValueType("TREESET");
            _local.setDefinedIn(this);
            _localOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _localOBJ.setLineNumber("250");
            addAttributeDefList(_local);

            AttributeDefinitionDMO _appNameOBJ = new AttributeDefinitionDMO();
            _appName = new AttributeDefinition(_appNameOBJ);
            _appNameOBJ.setType("CamelCaseName");
            _appNameOBJ.setName("appName");
            _appNameOBJ.setDmdID("833");
            _appNameOBJ.setDescription("The name of an application.");
            _appName.setDefinedIn(this);
            _appNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _appNameOBJ.setLineNumber("256");
            addAttributeDefList(_appName);

            AttributeDefinitionDMO _controllerNameOBJ = new AttributeDefinitionDMO();
            _controllerName = new AttributeDefinition(_controllerNameOBJ);
            _controllerNameOBJ.setType("CamelCaseName");
            _controllerNameOBJ.setName("controllerName");
            _controllerNameOBJ.setDmdID("834");
            _controllerNameOBJ.setDescription("The name of a controller.");
            _controllerName.setDefinedIn(this);
            _controllerNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _controllerNameOBJ.setLineNumber("262");
            addAttributeDefList(_controllerName);

            AttributeDefinitionDMO _useRunContextItemOBJ = new AttributeDefinitionDMO();
            _useRunContextItem = new AttributeDefinition(_useRunContextItemOBJ);
            _useRunContextItemOBJ.setType("RunContextItem");
            _useRunContextItemOBJ.setName("useRunContextItem");
            _useRunContextItemOBJ.setDmdID("835");
            _useRunContextItemOBJ.setDescription("Indicates a RunContextItem on which something depends. This implies that the  entity must have the overall run context injected at construction time. Run context items are  represented as private final members of the generated base implementation of the entity and are assigned from the run context.");
            _useRunContextItemOBJ.setValueType("TREESET");
            _useRunContextItem.setDefinedIn(this);
            _useRunContextItemOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _useRunContextItemOBJ.setLineNumber("272");
            addAttributeDefList(_useRunContextItem);

            AttributeDefinitionDMO _presenterImportOBJ = new AttributeDefinitionDMO();
            _presenterImport = new AttributeDefinition(_presenterImportOBJ);
            _presenterImportOBJ.setType("String");
            _presenterImportOBJ.setName("presenterImport");
            _presenterImportOBJ.setDmdID("836");
            _presenterImportOBJ.setDescription("Indicates an import required by the Presenter interface of a View.");
            _presenterImportOBJ.setValueType("TREESET");
            _presenterImport.setDefinedIn(this);
            _presenterImportOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _presenterImportOBJ.setLineNumber("279");
            addAttributeDefList(_presenterImport);

            AttributeDefinitionDMO _viewImportOBJ = new AttributeDefinitionDMO();
            _viewImport = new AttributeDefinition(_viewImportOBJ);
            _viewImportOBJ.setType("String");
            _viewImportOBJ.setName("viewImport");
            _viewImportOBJ.setDmdID("837");
            _viewImportOBJ.setDescription("Indicates an import required by the View interface.");
            _viewImportOBJ.setValueType("TREESET");
            _viewImport.setDefinedIn(this);
            _viewImportOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _viewImportOBJ.setLineNumber("286");
            addAttributeDefList(_viewImport);

            AttributeDefinitionDMO _sharedImportOBJ = new AttributeDefinitionDMO();
            _sharedImport = new AttributeDefinition(_sharedImportOBJ);
            _sharedImportOBJ.setType("String");
            _sharedImportOBJ.setName("sharedImport");
            _sharedImportOBJ.setDmdID("838");
            _sharedImportOBJ.setDescription("Indicates an import required by both the View and Presenter interfaces.");
            _sharedImportOBJ.setValueType("TREESET");
            _sharedImport.setDefinedIn(this);
            _sharedImportOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sharedImportOBJ.setLineNumber("293");
            addAttributeDefList(_sharedImport);

            AttributeDefinitionDMO _presenterNameOBJ = new AttributeDefinitionDMO();
            _presenterName = new AttributeDefinition(_presenterNameOBJ);
            _presenterNameOBJ.setType("CamelCaseName");
            _presenterNameOBJ.setName("presenterName");
            _presenterNameOBJ.setDmdID("839");
            _presenterNameOBJ.setDescription("The name of a Presenter.");
            _presenterName.setDefinedIn(this);
            _presenterNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _presenterNameOBJ.setLineNumber("299");
            addAttributeDefList(_presenterName);

            AttributeDefinitionDMO _activityNameOBJ = new AttributeDefinitionDMO();
            _activityName = new AttributeDefinition(_activityNameOBJ);
            _activityNameOBJ.setType("CamelCaseName");
            _activityNameOBJ.setName("activityName");
            _activityNameOBJ.setDmdID("840");
            _activityNameOBJ.setDescription("The name of an Activity.");
            _activityName.setDefinedIn(this);
            _activityNameOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _activityNameOBJ.setLineNumber("305");
            addAttributeDefList(_activityName);

            AttributeDefinitionDMO _managesViewOBJ = new AttributeDefinitionDMO();
            _managesView = new AttributeDefinition(_managesViewOBJ);
            _managesViewOBJ.setType("View");
            _managesViewOBJ.setName("managesView");
            _managesViewOBJ.setDmdID("841");
            _managesViewOBJ.setDescription("Indicates Views that are managed by a Component.");
            _managesViewOBJ.setValueType("MULTI");
            _managesView.setDefinedIn(this);
            _managesViewOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _managesViewOBJ.setLineNumber("312");
            addAttributeDefList(_managesView);

            AttributeDefinitionDMO _usesControllerOBJ = new AttributeDefinitionDMO();
            _usesController = new AttributeDefinition(_usesControllerOBJ);
            _usesControllerOBJ.setType("Controller");
            _usesControllerOBJ.setName("usesController");
            _usesControllerOBJ.setDmdID("842");
            _usesControllerOBJ.setDescription("Indicates Controllers that are used by an application or a site.");
            _usesControllerOBJ.setValueType("MULTI");
            _usesController.setDefinedIn(this);
            _usesControllerOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _usesControllerOBJ.setLineNumber("319");
            addAttributeDefList(_usesController);

            AttributeDefinitionDMO _useSchemaOBJ = new AttributeDefinitionDMO();
            _useSchema = new AttributeDefinition(_useSchemaOBJ);
            _useSchemaOBJ.setType("SchemaDefinition");
            _useSchemaOBJ.setName("useSchema");
            _useSchemaOBJ.setDmdID("843");
            _useSchemaOBJ.setDescription("Indicates the schemas that a component uses. Your module must specify dependsOnSchema for the appropriate schemas.");
            _useSchemaOBJ.setValueType("MULTI");
            _useSchema.setDefinedIn(this);
            _useSchemaOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _useSchemaOBJ.setLineNumber("327");
            addAttributeDefList(_useSchema);

            AttributeDefinitionDMO _sendsGetRequestOBJ = new AttributeDefinitionDMO();
            _sendsGetRequest = new AttributeDefinition(_sendsGetRequestOBJ);
            _sendsGetRequestOBJ.setType("GetWithOptions");
            _sendsGetRequestOBJ.setName("sendsGetRequest");
            _sendsGetRequestOBJ.setDmdID("844");
            _sendsGetRequestOBJ.setDescription("Indicates that a component performs get requests.");
            _sendsGetRequestOBJ.setValueType("MULTI");
            _sendsGetRequest.setDefinedIn(this);
            _sendsGetRequestOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sendsGetRequestOBJ.setLineNumber("334");
            addAttributeDefList(_sendsGetRequest);

            AttributeDefinitionDMO _sendsDeleteRequestOBJ = new AttributeDefinitionDMO();
            _sendsDeleteRequest = new AttributeDefinition(_sendsDeleteRequestOBJ);
            _sendsDeleteRequestOBJ.setType("RequestWithOptions");
            _sendsDeleteRequestOBJ.setName("sendsDeleteRequest");
            _sendsDeleteRequestOBJ.setDmdID("845");
            _sendsDeleteRequestOBJ.setDescription("Indicates that a component performs delete requests.");
            _sendsDeleteRequestOBJ.setValueType("MULTI");
            _sendsDeleteRequest.setDefinedIn(this);
            _sendsDeleteRequestOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sendsDeleteRequestOBJ.setLineNumber("341");
            addAttributeDefList(_sendsDeleteRequest);

            AttributeDefinitionDMO _sendsSetRequestOBJ = new AttributeDefinitionDMO();
            _sendsSetRequest = new AttributeDefinition(_sendsSetRequestOBJ);
            _sendsSetRequestOBJ.setType("RequestWithOptions");
            _sendsSetRequestOBJ.setName("sendsSetRequest");
            _sendsSetRequestOBJ.setDmdID("846");
            _sendsSetRequestOBJ.setDescription("Indicates that a component performs set requests.");
            _sendsSetRequestOBJ.setValueType("MULTI");
            _sendsSetRequest.setDefinedIn(this);
            _sendsSetRequestOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sendsSetRequestOBJ.setLineNumber("348");
            addAttributeDefList(_sendsSetRequest);

            AttributeDefinitionDMO _sendsCreateRequestOBJ = new AttributeDefinitionDMO();
            _sendsCreateRequest = new AttributeDefinition(_sendsCreateRequestOBJ);
            _sendsCreateRequestOBJ.setType("RequestWithOptions");
            _sendsCreateRequestOBJ.setName("sendsCreateRequest");
            _sendsCreateRequestOBJ.setDmdID("847");
            _sendsCreateRequestOBJ.setDescription("Indicates that a component performs create requests.");
            _sendsCreateRequestOBJ.setValueType("MULTI");
            _sendsCreateRequest.setDefinedIn(this);
            _sendsCreateRequestOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sendsCreateRequestOBJ.setLineNumber("355");
            addAttributeDefList(_sendsCreateRequest);

            AttributeDefinitionDMO _sendsActionRequestOBJ = new AttributeDefinitionDMO();
            _sendsActionRequest = new AttributeDefinition(_sendsActionRequestOBJ);
            _sendsActionRequestOBJ.setType("RequestWithOptions");
            _sendsActionRequestOBJ.setName("sendsActionRequest");
            _sendsActionRequestOBJ.setDmdID("848");
            _sendsActionRequestOBJ.setDescription("Indicates that a component performs action requests.");
            _sendsActionRequestOBJ.setValueType("MULTI");
            _sendsActionRequest.setDefinedIn(this);
            _sendsActionRequestOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sendsActionRequestOBJ.setLineNumber("362");
            addAttributeDefList(_sendsActionRequest);

            AttributeDefinitionDMO _sendsLoginRequestOBJ = new AttributeDefinitionDMO();
            _sendsLoginRequest = new AttributeDefinition(_sendsLoginRequestOBJ);
            _sendsLoginRequestOBJ.setType("RequestWithOptions");
            _sendsLoginRequestOBJ.setName("sendsLoginRequest");
            _sendsLoginRequestOBJ.setDmdID("849");
            _sendsLoginRequestOBJ.setDescription("Indicates that a component performs login requests.");
            _sendsLoginRequestOBJ.setValueType("MULTI");
            _sendsLoginRequest.setDefinedIn(this);
            _sendsLoginRequestOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sendsLoginRequestOBJ.setLineNumber("369");
            addAttributeDefList(_sendsLoginRequest);

            AttributeDefinitionDMO _sendsLogoutRequestOBJ = new AttributeDefinitionDMO();
            _sendsLogoutRequest = new AttributeDefinition(_sendsLogoutRequestOBJ);
            _sendsLogoutRequestOBJ.setType("RequestWithOptions");
            _sendsLogoutRequestOBJ.setName("sendsLogoutRequest");
            _sendsLogoutRequestOBJ.setDmdID("850");
            _sendsLogoutRequestOBJ.setDescription("Indicates that a component performs logout requests.");
            _sendsLogoutRequestOBJ.setValueType("MULTI");
            _sendsLogoutRequest.setDefinedIn(this);
            _sendsLogoutRequestOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _sendsLogoutRequestOBJ.setLineNumber("376");
            addAttributeDefList(_sendsLogoutRequest);

            AttributeDefinitionDMO _centralDMPErrorHandlerOBJ = new AttributeDefinitionDMO();
            _centralDMPErrorHandler = new AttributeDefinition(_centralDMPErrorHandlerOBJ);
            _centralDMPErrorHandlerOBJ.setType("Boolean");
            _centralDMPErrorHandlerOBJ.setName("centralDMPErrorHandler");
            _centralDMPErrorHandlerOBJ.setDmdID("851");
            _centralDMPErrorHandlerOBJ.setDescription("Indicates that a component is the target for centralized handling of Dark Matter Protocol errors.");
            _centralDMPErrorHandler.setDefinedIn(this);
            _centralDMPErrorHandlerOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _centralDMPErrorHandlerOBJ.setLineNumber("382");
            addAttributeDefList(_centralDMPErrorHandler);

            AttributeDefinitionDMO _centralRPCErrorHandlerOBJ = new AttributeDefinitionDMO();
            _centralRPCErrorHandler = new AttributeDefinition(_centralRPCErrorHandlerOBJ);
            _centralRPCErrorHandlerOBJ.setType("Boolean");
            _centralRPCErrorHandlerOBJ.setName("centralRPCErrorHandler");
            _centralRPCErrorHandlerOBJ.setDmdID("852");
            _centralRPCErrorHandlerOBJ.setDescription("Indicates that a component is the target for centralized handling of GWT RPC errors.");
            _centralRPCErrorHandler.setDefinedIn(this);
            _centralRPCErrorHandlerOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/attributes.dmd");
            _centralRPCErrorHandlerOBJ.setLineNumber("388");
            addAttributeDefList(_centralRPCErrorHandler);

    }

    private void initTypes() throws DmcValueException {
            TypeDefinitionDMO _EventWithArgsOBJ = new TypeDefinitionDMO();
            _EventWithArgs = new TypeDefinition(_EventWithArgsOBJ);
            _EventWithArgsOBJ.setName("EventWithArgs");
            _EventWithArgsOBJ.setDescription("The EventWithArgs type is used to handle definitions of events associated with various Model View Whatever components.");
            _EventWithArgsOBJ.setTypeClassName("org.dmd.mvw.tools.mvwgenerator.types.DmcTypeEventWithArgs");
            _EventWithArgsOBJ.setPrimitiveType("org.dmd.mvw.tools.mvwgenerator.types.EventWithArgs");
            _EventWithArgsOBJ.setDmwIteratorClass("EventWithArgsIterableDMW");
            _EventWithArgsOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventWithArgsIterableDMW");
            _EventWithArgs.setDefinedIn(this);
            _EventWithArgsOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _EventWithArgsOBJ.setLineNumber("7");
            addTypeDefList(_EventWithArgs);

            TypeDefinitionDMO _MethodWithArgsOBJ = new TypeDefinitionDMO();
            _MethodWithArgs = new TypeDefinition(_MethodWithArgsOBJ);
            _MethodWithArgsOBJ.setName("MethodWithArgs");
            _MethodWithArgsOBJ.setDescription("The MethodWithArgs type is used to handle definitions of function calls associated with various Model View Whatever components.");
            _MethodWithArgsOBJ.setTypeClassName("org.dmd.mvw.tools.mvwgenerator.types.DmcTypeMethodWithArgs");
            _MethodWithArgsOBJ.setPrimitiveType("org.dmd.mvw.tools.mvwgenerator.types.MethodWithArgs");
            _MethodWithArgsOBJ.setDmwIteratorClass("MethodWithArgsIterableDMW");
            _MethodWithArgsOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.MethodWithArgsIterableDMW");
            _MethodWithArgs.setDefinedIn(this);
            _MethodWithArgsOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _MethodWithArgsOBJ.setLineNumber("14");
            addTypeDefList(_MethodWithArgs);

            TypeDefinitionDMO _GetWithOptionsOBJ = new TypeDefinitionDMO();
            _GetWithOptions = new TypeDefinition(_GetWithOptionsOBJ);
            _GetWithOptionsOBJ.setName("GetWithOptions");
            _GetWithOptionsOBJ.setDescription("The GetWithOptions type is used to handle indications that a component will perform get operations.");
            _GetWithOptionsOBJ.setTypeClassName("org.dmd.mvw.tools.mvwgenerator.types.DmcTypeGetWithOptions");
            _GetWithOptionsOBJ.setPrimitiveType("org.dmd.mvw.tools.mvwgenerator.types.GetWithOptions");
            _GetWithOptionsOBJ.setDmwIteratorClass("GetWithOptionsIterableDMW");
            _GetWithOptionsOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.GetWithOptionsIterableDMW");
            _GetWithOptions.setDefinedIn(this);
            _GetWithOptionsOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _GetWithOptionsOBJ.setLineNumber("21");
            addTypeDefList(_GetWithOptions);

            TypeDefinitionDMO _RequestWithOptionsOBJ = new TypeDefinitionDMO();
            _RequestWithOptions = new TypeDefinition(_RequestWithOptionsOBJ);
            _RequestWithOptionsOBJ.setName("RequestWithOptions");
            _RequestWithOptionsOBJ.setDescription("The RequestWithOptions type is used to handle indications that a component will perform delete or set operations.");
            _RequestWithOptionsOBJ.setTypeClassName("org.dmd.mvw.tools.mvwgenerator.types.DmcTypeRequestWithOptions");
            _RequestWithOptionsOBJ.setPrimitiveType("org.dmd.mvw.tools.mvwgenerator.types.RequestWithOptions");
            _RequestWithOptionsOBJ.setDmwIteratorClass("RequestWithOptionsIterableDMW");
            _RequestWithOptionsOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.RequestWithOptionsIterableDMW");
            _RequestWithOptions.setDefinedIn(this);
            _RequestWithOptionsOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _RequestWithOptionsOBJ.setLineNumber("28");
            addTypeDefList(_RequestWithOptions);

            TypeDefinitionDMO _DisplayDataSpecOBJ = new TypeDefinitionDMO();
            _DisplayDataSpec = new TypeDefinition(_DisplayDataSpecOBJ);
            _DisplayDataSpecOBJ.setIsEnumType("false");
            _DisplayDataSpecOBJ.setName("DisplayDataSpec");
            _DisplayDataSpecOBJ.setDescription("This is an internally generated type to represent complex type DisplayDataSpec values.");
            _DisplayDataSpecOBJ.setTypeClassName("org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeDisplayDataSpec");
            _DisplayDataSpecOBJ.setPrimitiveType("org.dmd.mvw.tools.mvwgenerator.generated.types.DisplayDataSpec");
            _DisplayDataSpecOBJ.setDmwIteratorClass("DisplayDataSpecIterableDMW");
            _DisplayDataSpecOBJ.setInternallyGenerated("true");
            _DisplayDataSpecOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.DisplayDataSpecIterableDMW");
            _DisplayDataSpec.setDefinedIn(this);
            _DisplayDataSpecOBJ.setIsRefType("false");
            addTypeDefList(_DisplayDataSpec);

            TypeDefinitionDMO _EventSpecOBJ = new TypeDefinitionDMO();
            _EventSpec = new TypeDefinition(_EventSpecOBJ);
            _EventSpecOBJ.setIsEnumType("false");
            _EventSpecOBJ.setName("EventSpec");
            _EventSpecOBJ.setDescription("This is an internally generated type to represent complex type EventSpec values.");
            _EventSpecOBJ.setTypeClassName("org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeEventSpec");
            _EventSpecOBJ.setPrimitiveType("org.dmd.mvw.tools.mvwgenerator.generated.types.EventSpec");
            _EventSpecOBJ.setDmwIteratorClass("EventSpecIterableDMW");
            _EventSpecOBJ.setInternallyGenerated("true");
            _EventSpecOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventSpecIterableDMW");
            _EventSpec.setDefinedIn(this);
            _EventSpecOBJ.setIsRefType("false");
            addTypeDefList(_EventSpec);

            TypeDefinitionDMO _OperationSpecOBJ = new TypeDefinitionDMO();
            _OperationSpec = new TypeDefinition(_OperationSpecOBJ);
            _OperationSpecOBJ.setIsEnumType("false");
            _OperationSpecOBJ.setName("OperationSpec");
            _OperationSpecOBJ.setDescription("This is an internally generated type to represent complex type OperationSpec values.");
            _OperationSpecOBJ.setTypeClassName("org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeOperationSpec");
            _OperationSpecOBJ.setPrimitiveType("org.dmd.mvw.tools.mvwgenerator.generated.types.OperationSpec");
            _OperationSpecOBJ.setDmwIteratorClass("OperationSpecIterableDMW");
            _OperationSpecOBJ.setInternallyGenerated("true");
            _OperationSpecOBJ.setDmwIteratorImport("org.dmd.mvw.tools.mvwgenerator.generated.dmw.OperationSpecIterableDMW");
            _OperationSpec.setDefinedIn(this);
            _OperationSpecOBJ.setIsRefType("false");
            addTypeDefList(_OperationSpec);

    }

    private void initActions() throws DmcValueException {
    }

    private void initEnums() throws DmcValueException {
            EnumDefinitionDMO _SelectionTypeEnumOBJ = new EnumDefinitionDMO();
            _SelectionTypeEnum = new EnumDefinition(_SelectionTypeEnumOBJ);
            _SelectionTypeEnumOBJ.setName("SelectionTypeEnum");
            _SelectionTypeEnumOBJ.addEnumValue("0 SINGLE Single selection supported.");
            _SelectionTypeEnumOBJ.addEnumValue("1 MULTI Multi-selection supported.");
            _SelectionTypeEnumOBJ.setDescription("The SelectionTypeEnum indicates the selection mode of operations associated with object selection or object deletion.");
            _SelectionTypeEnum.setDefinedIn(this);
            _SelectionTypeEnumOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _SelectionTypeEnumOBJ.setLineNumber("35");
            addEnumDefList(_SelectionTypeEnum);

            EnumDefinitionDMO _EventScopeEnumOBJ = new EnumDefinitionDMO();
            _EventScopeEnum = new EnumDefinition(_EventScopeEnumOBJ);
            _EventScopeEnumOBJ.setName("EventScopeEnum");
            _EventScopeEnumOBJ.addEnumValue("0 LOCAL Single selection supported.");
            _EventScopeEnumOBJ.addEnumValue("1 BROADCAST Multi-selection supported.");
            _EventScopeEnumOBJ.addEnumValue("2 BROADCASTONLY Multi-selection supported.");
            _EventScopeEnumOBJ.setDescription("The SelectionTypeEnum indicates the selection mode of operations");
            _EventScopeEnum.setDefinedIn(this);
            _EventScopeEnumOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _EventScopeEnumOBJ.setLineNumber("42");
            addEnumDefList(_EventScopeEnum);

            EnumDefinitionDMO _GetFunctionOptionEnumOBJ = new EnumDefinitionDMO();
            _GetFunctionOptionEnum = new EnumDefinition(_GetFunctionOptionEnumOBJ);
            _GetFunctionOptionEnumOBJ.setName("GetFunctionOptionEnum");
            _GetFunctionOptionEnumOBJ.addEnumValue("0 NONE Indicates that no options are specified.");
            _GetFunctionOptionEnumOBJ.addEnumValue("1 DMPERRORS Indicates that DMP error responses will be handled locally.");
            _GetFunctionOptionEnumOBJ.addEnumValue("2 RPCERRORS Indicates that RPC errors will be handled locally.");
            _GetFunctionOptionEnumOBJ.addEnumValue("3 CENTRALERRORS Indicates that you want errors centrally handled.");
            _GetFunctionOptionEnumOBJ.addEnumValue("4 CACHE Indicates that you want the results centrally cached.");
            _GetFunctionOptionEnumOBJ.addEnumValue("5 CREATED Indicates that you want notification of create events associated with the get request.");
            _GetFunctionOptionEnumOBJ.addEnumValue("6 DELETED Indicates that you want notification of delete events associated with the get request.");
            _GetFunctionOptionEnumOBJ.addEnumValue("7 MODIFIED Indicates that you want notification of modification events associated with the get request.");
            _GetFunctionOptionEnumOBJ.setDescription("The GetFunctionModifierEnum indicates a set of modifiers that direct code generation for standard Dark Matter Protocol get request handling.");
            _GetFunctionOptionEnum.setDefinedIn(this);
            _GetFunctionOptionEnumOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _GetFunctionOptionEnumOBJ.setLineNumber("55");
            addEnumDefList(_GetFunctionOptionEnum);

            EnumDefinitionDMO _RequestOptionEnumOBJ = new EnumDefinitionDMO();
            _RequestOptionEnum = new EnumDefinition(_RequestOptionEnumOBJ);
            _RequestOptionEnumOBJ.setName("RequestOptionEnum");
            _RequestOptionEnumOBJ.addEnumValue("0 NONE Indicates that no options are specified.");
            _RequestOptionEnumOBJ.addEnumValue("1 DMPERRORS Indicates that DMP error responses will be handled locally.");
            _RequestOptionEnumOBJ.addEnumValue("2 RPCERRORS Indicates that RPC errors will be handled locally.");
            _RequestOptionEnumOBJ.addEnumValue("3 CENTRALERRORS Indicates that you want errors centrally handled.");
            _RequestOptionEnumOBJ.setDescription("The RequestOptionEnum indicates a set of modifiers that direct code generation for standard Dark Matter Protocol delete and set request handling.");
            _RequestOptionEnum.setDefinedIn(this);
            _RequestOptionEnumOBJ.setFile("/Users/peter/softdev/dark-matter-data/src/org/dmd/mvw/tools/mvwgenerator/dmdconfig/v0dot1/types.dmd");
            _RequestOptionEnumOBJ.setLineNumber("63");
            addEnumDefList(_RequestOptionEnum);

    }


    @Override
    public MvwSchemaAG getInstance() throws DmcValueException{
    	   if (instance == null)
    		   initialize();
    	   return(instance);
    }
}

