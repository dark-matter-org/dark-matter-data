//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2011 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.mvw.tools.mvwgenerator.generated.dmo;

// Generated from:  org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:281)
import java.io.Serializable;                                                            // Always required
import java.util.*;                                                                     // Always required
import org.dmd.dmc.DmcAttribute;                                                        // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                                                    // Always required
import org.dmd.dmc.DmcNamedObjectIF;                                                    // Named object
import org.dmd.dmc.DmcSliceInfo;                                                        // Required for object slicing
import org.dmd.dmc.DmcValueException;                                                   // Any attributes
import org.dmd.dmc.types.CamelCaseName;                                                 // Naming attribute type
import org.dmd.dms.generated.enums.DataTypeEnum;                                        // Required if we have any attributes
import org.dmd.dms.generated.enums.ValueTypeEnum;                                       // Required if we have any attributes
import org.dmd.dms.generated.types.DmcTypeBooleanSV;                                    // Required type
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;                              // Required type
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                   // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeStringMV;                                     // Required type
import org.dmd.dms.generated.types.DmcTypeStringSV;                                     // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDefinitionDMO;                   // Base class
import org.dmd.mvw.tools.mvwgenerator.generated.types.DisplayDataSpec;                  // Primitive type and !auxiliary class
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeDisplayDataSpecSV;         // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeEventSpecSV;               // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeOperationSpecSV;           // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventSpec;                        // Primitive type and !auxiliary class
import org.dmd.mvw.tools.mvwgenerator.generated.types.OperationSpec;                    // Primitive type and !auxiliary class

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The View is used to define the aspects of two kinds of interfaces that
 * define the functionality provided by a view of a model; the event
 * interface and the  data interface.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:136)
 */
@SuppressWarnings("serial")
public class ViewDMO  extends MvwDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "View";

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __broadcastEvent = new DmcAttributeInfo("broadcastEvent",815,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __camelCaseName = new DmcAttributeInfo("camelCaseName",116,"CamelCaseName",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __clickEvent = new DmcAttributeInfo("clickEvent",819,"OperationSpec",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __createEvent = new DmcAttributeInfo("createEvent",821,"OperationSpec",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __definedInModule = new DmcAttributeInfo("definedInModule",800,"Module",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);
    public final static DmcAttributeInfo __deleteEvent = new DmcAttributeInfo("deleteEvent",818,"EventSpec",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __description = new DmcAttributeInfo("description",18,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __displayData = new DmcAttributeInfo("displayData",816,"DisplayDataSpec",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __extendsInterface = new DmcAttributeInfo("extendsInterface",119,"String",ValueTypeEnum.MULTI,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __file = new DmcAttributeInfo("file",74,"String",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __isWidget = new DmcAttributeInfo("isWidget",813,"Boolean",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __lineNumber = new DmcAttributeInfo("lineNumber",75,"Integer",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __modifyEvent = new DmcAttributeInfo("modifyEvent",820,"OperationSpec",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __selectEvent = new DmcAttributeInfo("selectEvent",817,"EventSpec",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,false);
    public final static DmcAttributeInfo __viewName = new DmcAttributeInfo("viewName",812,"CamelCaseName",ValueTypeEnum.SINGLE,DataTypeEnum.PERSISTENT,true);

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__broadcastEvent.id,__broadcastEvent);
        _ImAp.put(__camelCaseName.id,__camelCaseName);
        _ImAp.put(__clickEvent.id,__clickEvent);
        _ImAp.put(__createEvent.id,__createEvent);
        _ImAp.put(__definedInModule.id,__definedInModule);
        _ImAp.put(__deleteEvent.id,__deleteEvent);
        _ImAp.put(__description.id,__description);
        _ImAp.put(__displayData.id,__displayData);
        _ImAp.put(__extendsInterface.id,__extendsInterface);
        _ImAp.put(__file.id,__file);
        _ImAp.put(__isWidget.id,__isWidget);
        _ImAp.put(__lineNumber.id,__lineNumber);
        _ImAp.put(__modifyEvent.id,__modifyEvent);
        _ImAp.put(__selectEvent.id,__selectEvent);
        _ImAp.put(__viewName.id,__viewName);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__broadcastEvent.name,__broadcastEvent);
        _SmAp.put(__camelCaseName.name,__camelCaseName);
        _SmAp.put(__clickEvent.name,__clickEvent);
        _SmAp.put(__createEvent.name,__createEvent);
        _SmAp.put(__definedInModule.name,__definedInModule);
        _SmAp.put(__deleteEvent.name,__deleteEvent);
        _SmAp.put(__description.name,__description);
        _SmAp.put(__displayData.name,__displayData);
        _SmAp.put(__extendsInterface.name,__extendsInterface);
        _SmAp.put(__file.name,__file);
        _SmAp.put(__isWidget.name,__isWidget);
        _SmAp.put(__lineNumber.name,__lineNumber);
        _SmAp.put(__modifyEvent.name,__modifyEvent);
        _SmAp.put(__selectEvent.name,__selectEvent);
        _SmAp.put(__viewName.name,__viewName);

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public ViewDMO() {
        super("View");
    }

    protected ViewDMO(String oc) {
        super(oc);
    }

    @Override
    public boolean supportsBackrefTracking(){
        return(false);
    }

    public Map<Integer,DmcAttributeInfo> getIdToAttrInfo(){
        return(_ImAp);
    }

    public Map<String,DmcAttributeInfo> getStringToAttrInfo(){
        return(_SmAp);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public ViewDMO getNew(){
        ViewDMO rc = new ViewDMO();
        return(rc);
    }

    @Override
    public ViewDMO getSlice(DmcSliceInfo info){
        ViewDMO rc = new ViewDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public ViewDMO(DmcTypeModifierMV mods) {
        super("View");
        modrec(true);
        setModifier(mods);
    }

    public ViewDMO getModificationRecorder(){
        ViewDMO rc = new ViewDMO();
        rc.setViewName(getViewName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    //  org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:736)
    public CamelCaseName getObjectName(){
        DmcAttribute<?> name = get(__viewName);
        if (name != null)
            return((CamelCaseName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(__viewName);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof ViewDMO){
            return( getObjectName().equals( ((ViewDMO) obj).getObjectName()) );
        }
        return(false);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public Boolean isIsWidget(){
        DmcTypeBooleanSV attr = (DmcTypeBooleanSV) get(__isWidget);
        if (attr == null)
            return(false);

        return(attr.getSV());
    }

    /**
     * Sets isWidget to the specified value.
     * @param value Boolean
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setIsWidget(Boolean value) {
        DmcAttribute<?> attr = get(__isWidget);
        if (attr == null)
            attr = new DmcTypeBooleanSV(__isWidget);
        
        try{
            attr.set(value);
            set(__isWidget,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets isWidget to the specified value.
     * @param value A value compatible with DmcTypeBooleanSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setIsWidget(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__isWidget);
        if (attr == null)
            attr = new DmcTypeBooleanSV(__isWidget);
        
        attr.set(value);
        set(__isWidget,attr);
    }

    /**
     * Removes the isWidget attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remIsWidget(){
         rem(__isWidget);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:802)
    public Iterator<String> getExtendsInterface(){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(__extendsInterface);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth String value.
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:814)
    public String getNthExtendsInterface(int i){
        DmcTypeStringMV attr = (DmcTypeStringMV) get(__extendsInterface);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another extendsInterface to the specified value.
     * @param value String
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:827)
    public DmcAttribute<?> addExtendsInterface(String value) {
        DmcAttribute<?> attr = get(__extendsInterface);
        if (attr == null)
            attr = new DmcTypeStringMV(__extendsInterface);
        
        try{
            setLastValue(attr.add(value));
            add(__extendsInterface,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified String.
     * @param value String
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:869)
    public boolean extendsInterfaceContains(String value) {
        DmcAttribute<?> attr = get(__extendsInterface);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another extendsInterface value.
     * @param value A value compatible with String
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:901)
    public DmcAttribute<?> addExtendsInterface(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__extendsInterface);
        if (attr == null)
            attr = new DmcTypeStringMV(__extendsInterface);
        
        setLastValue(attr.add(value));
        add(__extendsInterface,attr);
        return(attr);
    }

    /**
     * Returns the number of values in extendsInterface
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:918)
    public int getExtendsInterfaceSize(){
        DmcAttribute<?> attr = get(__extendsInterface);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a extendsInterface value.
     * @param value The String to be deleted from set of attribute values.
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:960)
    public DmcAttribute<?> delExtendsInterface(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__extendsInterface);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(__extendsInterface), value);
        else
            attr = del(__extendsInterface, value);
        
        return(attr);
    }

    /**
     * Deletes a extendsInterface from the specified value.
     * @param value String
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:976)
    public DmcAttribute<?> delExtendsInterface(String value) {
        DmcAttribute<?> attr = get(__extendsInterface);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeStringMV(__extendsInterface), value);
        else
            attr = del(__extendsInterface, value);
        
        return(attr);
    }

    /**
     * Removes the extendsInterface attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:995)
    public void remExtendsInterface(){
         rem(__extendsInterface);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public String getBroadcastEvent(){
        DmcTypeStringSV attr = (DmcTypeStringSV) get(__broadcastEvent);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets broadcastEvent to the specified value.
     * @param value String
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setBroadcastEvent(String value) {
        DmcAttribute<?> attr = get(__broadcastEvent);
        if (attr == null)
            attr = new DmcTypeStringSV(__broadcastEvent);
        
        try{
            attr.set(value);
            set(__broadcastEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets broadcastEvent to the specified value.
     * @param value A value compatible with DmcTypeStringSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setBroadcastEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__broadcastEvent);
        if (attr == null)
            attr = new DmcTypeStringSV(__broadcastEvent);
        
        attr.set(value);
        set(__broadcastEvent,attr);
    }

    /**
     * Removes the broadcastEvent attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remBroadcastEvent(){
         rem(__broadcastEvent);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public DisplayDataSpec getDisplayData(){
        DmcTypeDisplayDataSpecSV attr = (DmcTypeDisplayDataSpecSV) get(__displayData);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets displayData to the specified value.
     * @param value DisplayDataSpec
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setDisplayData(DisplayDataSpec value) {
        DmcAttribute<?> attr = get(__displayData);
        if (attr == null)
            attr = new DmcTypeDisplayDataSpecSV(__displayData);
        
        try{
            attr.set(value);
            set(__displayData,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets displayData to the specified value.
     * @param value A value compatible with DmcTypeDisplayDataSpecSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setDisplayData(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__displayData);
        if (attr == null)
            attr = new DmcTypeDisplayDataSpecSV(__displayData);
        
        attr.set(value);
        set(__displayData,attr);
    }

    /**
     * Removes the displayData attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remDisplayData(){
         rem(__displayData);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public EventSpec getSelectEvent(){
        DmcTypeEventSpecSV attr = (DmcTypeEventSpecSV) get(__selectEvent);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets selectEvent to the specified value.
     * @param value EventSpec
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setSelectEvent(EventSpec value) {
        DmcAttribute<?> attr = get(__selectEvent);
        if (attr == null)
            attr = new DmcTypeEventSpecSV(__selectEvent);
        
        try{
            attr.set(value);
            set(__selectEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets selectEvent to the specified value.
     * @param value A value compatible with DmcTypeEventSpecSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setSelectEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__selectEvent);
        if (attr == null)
            attr = new DmcTypeEventSpecSV(__selectEvent);
        
        attr.set(value);
        set(__selectEvent,attr);
    }

    /**
     * Removes the selectEvent attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remSelectEvent(){
         rem(__selectEvent);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public EventSpec getDeleteEvent(){
        DmcTypeEventSpecSV attr = (DmcTypeEventSpecSV) get(__deleteEvent);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets deleteEvent to the specified value.
     * @param value EventSpec
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setDeleteEvent(EventSpec value) {
        DmcAttribute<?> attr = get(__deleteEvent);
        if (attr == null)
            attr = new DmcTypeEventSpecSV(__deleteEvent);
        
        try{
            attr.set(value);
            set(__deleteEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets deleteEvent to the specified value.
     * @param value A value compatible with DmcTypeEventSpecSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setDeleteEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__deleteEvent);
        if (attr == null)
            attr = new DmcTypeEventSpecSV(__deleteEvent);
        
        attr.set(value);
        set(__deleteEvent,attr);
    }

    /**
     * Removes the deleteEvent attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remDeleteEvent(){
         rem(__deleteEvent);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public OperationSpec getClickEvent(){
        DmcTypeOperationSpecSV attr = (DmcTypeOperationSpecSV) get(__clickEvent);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets clickEvent to the specified value.
     * @param value OperationSpec
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setClickEvent(OperationSpec value) {
        DmcAttribute<?> attr = get(__clickEvent);
        if (attr == null)
            attr = new DmcTypeOperationSpecSV(__clickEvent);
        
        try{
            attr.set(value);
            set(__clickEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets clickEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpecSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setClickEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__clickEvent);
        if (attr == null)
            attr = new DmcTypeOperationSpecSV(__clickEvent);
        
        attr.set(value);
        set(__clickEvent,attr);
    }

    /**
     * Removes the clickEvent attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remClickEvent(){
         rem(__clickEvent);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public OperationSpec getModifyEvent(){
        DmcTypeOperationSpecSV attr = (DmcTypeOperationSpecSV) get(__modifyEvent);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets modifyEvent to the specified value.
     * @param value OperationSpec
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setModifyEvent(OperationSpec value) {
        DmcAttribute<?> attr = get(__modifyEvent);
        if (attr == null)
            attr = new DmcTypeOperationSpecSV(__modifyEvent);
        
        try{
            attr.set(value);
            set(__modifyEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets modifyEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpecSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setModifyEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__modifyEvent);
        if (attr == null)
            attr = new DmcTypeOperationSpecSV(__modifyEvent);
        
        attr.set(value);
        set(__modifyEvent,attr);
    }

    /**
     * Removes the modifyEvent attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remModifyEvent(){
         rem(__modifyEvent);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public OperationSpec getCreateEvent(){
        DmcTypeOperationSpecSV attr = (DmcTypeOperationSpecSV) get(__createEvent);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets createEvent to the specified value.
     * @param value OperationSpec
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setCreateEvent(OperationSpec value) {
        DmcAttribute<?> attr = get(__createEvent);
        if (attr == null)
            attr = new DmcTypeOperationSpecSV(__createEvent);
        
        try{
            attr.set(value);
            set(__createEvent,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets createEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpecSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setCreateEvent(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__createEvent);
        if (attr == null)
            attr = new DmcTypeOperationSpecSV(__createEvent);
        
        attr.set(value);
        set(__createEvent,attr);
    }

    /**
     * Removes the createEvent attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remCreateEvent(){
         rem(__createEvent);
    }

    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:583)
    public CamelCaseName getViewName(){
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(__viewName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets viewName to the specified value.
     * @param value CamelCaseName
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:620)
    public void setViewName(CamelCaseName value) {
        DmcAttribute<?> attr = get(__viewName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__viewName);
        
        try{
            attr.set(value);
            set(__viewName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets viewName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseNameSV
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:668)
    public void setViewName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__viewName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(__viewName);
        
        attr.set(value);
        set(__viewName,attr);
    }

    /**
     * Removes the viewName attribute value.
     */
    //  org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:683)
    public void remViewName(){
         rem(__viewName);
    }




}
