package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import java.util.ArrayList;                                                            // To support getMVCopy()
import java.util.Iterator;                                                             // To support getMVCopy()
import org.dmd.dmc.*;                                                                  // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                                // Primitive type
import org.dmd.dms.*;                                                                  // Always 2
import org.dmd.dms.generated.dmw.StringIterableDMW;                                    // For multi-valued String
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                  // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                          // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.View;                                   // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;                           // Class not auxiliary or abstract
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventWithArgsIterableDMW;          // For multi-valued EventWithArgs
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.MethodWithArgsIterableDMW;         // For multi-valued MethodWithArgs
import org.dmd.mvw.tools.mvwgenerator.generated.types.DisplayDataSpec;                 // Primitive type
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventSpec;                       // Primitive type
import org.dmd.mvw.tools.mvwgenerator.generated.types.OperationSpec;                   // Primitive type
import org.dmd.mvw.tools.mvwgenerator.types.EventWithArgs;                             // For multi-valued containsEventWithArgs
import org.dmd.mvw.tools.mvwgenerator.types.MethodWithArgs;                            // For multi-valued containsMethodWithArgs

/**
 * The View is used to define the aspects of two kinds of interfaces that
 * define the functionality provided by a view of a model; the event
 * interface and the  data interface.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class ViewDMW extends MvwDefinition implements DmcNamedObjectIF {

    public ViewDMW() {
        super(new ViewDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public ViewDMW(DmcTypeModifierMV mods) {
        super(new ViewDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public View getModificationRecorder(){
        View rc = new View();
        rc.setViewName(getViewName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public ViewDMW(ViewDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._View);
    }

    public ViewDMO getDMO() {
        return((ViewDMO) core);
    }

    protected ViewDMW(ViewDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((ViewDMO) core).getViewName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ViewDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ViewDMW){
            return( getObjectName().equals( ((ViewDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public Boolean isIsWidget(){
        return(((ViewDMO) core).isIsWidget());
    }

    /**
     * Sets isWidget to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setIsWidget(Object value) throws DmcValueException {
        ((ViewDMO) core).setIsWidget(value);
    }

    /**
     * Sets isWidget to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setIsWidget(Boolean value){
        ((ViewDMO) core).setIsWidget(value);
    }

    /**
     * Removes the isWidget attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remIsWidget(){
        ((ViewDMO) core).remIsWidget();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getExtendsInterfaceSize(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getExtendsInterfaceIsEmpty(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getExtendsInterfaceHasValue(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public StringIterableDMW getExtendsInterfaceIterable(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((ViewDMO) core).getExtendsInterface()));
    }

    /**
     * Adds another extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addExtendsInterface(Object value) throws DmcValueException {
        ((ViewDMO) core).addExtendsInterface(value);
    }

    /**
     * Adds another extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addExtendsInterface(String value){
        ((ViewDMO) core).addExtendsInterface(value);
    }

    /**
     * Returns true if the collection contains the extendsInterface value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean extendsInterfaceContains(String value){
        return(((ViewDMO) core).extendsInterfaceContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<String> getExtendsInterfaceCopy(){
        DmcAttribute<?> attr = core.get(ViewDMO.__extendsInterface);
        if (attr == null)
            return(new ArrayList<String>());
        
        ArrayList<String> rc = new ArrayList<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a extendsInterface value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delExtendsInterface(Object value) throws DmcValueException {
        ((ViewDMO) core).delExtendsInterface(value);
    }

    /**
     * Deletes a extendsInterface value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delExtendsInterface(String value){
        ((ViewDMO) core).delExtendsInterface(value);
    }

    /**
     * Removes the extendsInterface attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remExtendsInterface(){
        ((ViewDMO) core).remExtendsInterface();
    }

    /**
     * @return The number of EventWithArgs items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getBroadcastSize(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcast);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getBroadcastIsEmpty(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcast);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getBroadcastHasValue(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcast);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of EventWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public EventWithArgsIterableDMW getBroadcastIterable(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcast);
        if (attr == null)
            return(EventWithArgsIterableDMW.emptyList);
        
        return(new EventWithArgsIterableDMW(((ViewDMO) core).getBroadcast()));
    }

    /**
     * Adds another broadcast value.
     * @param value A value compatible with EventWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addBroadcast(Object value) throws DmcValueException {
        ((ViewDMO) core).addBroadcast(value);
    }

    /**
     * Adds another broadcast value.
     * @param value A value compatible with EventWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addBroadcast(EventWithArgs value){
        ((ViewDMO) core).addBroadcast(value);
    }

    /**
     * Returns true if the collection contains the broadcast value.
     * @param value A value compatible with EventWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean broadcastContains(EventWithArgs value){
        return(((ViewDMO) core).broadcastContains(value));
    }

    /**
     * @return A COPY of the collection of EventWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<EventWithArgs> getBroadcastCopy(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcast);
        if (attr == null)
            return(new ArrayList<EventWithArgs>());
        
        ArrayList<EventWithArgs> rc = new ArrayList<EventWithArgs>(attr.getMVSize());
        
        Iterator<EventWithArgs> it = (Iterator<EventWithArgs>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a broadcast value.
     * @param value The EventWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delBroadcast(Object value) throws DmcValueException {
        ((ViewDMO) core).delBroadcast(value);
    }

    /**
     * Deletes a broadcast value.
     * @param value The EventWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delBroadcast(EventWithArgs value){
        ((ViewDMO) core).delBroadcast(value);
    }

    /**
     * Removes the broadcast attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remBroadcast(){
        ((ViewDMO) core).remBroadcast();
    }

    /**
     * @return The number of EventWithArgs items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getBroadcastOnlySize(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcastOnly);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getBroadcastOnlyIsEmpty(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcastOnly);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getBroadcastOnlyHasValue(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcastOnly);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of EventWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public EventWithArgsIterableDMW getBroadcastOnlyIterable(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcastOnly);
        if (attr == null)
            return(EventWithArgsIterableDMW.emptyList);
        
        return(new EventWithArgsIterableDMW(((ViewDMO) core).getBroadcastOnly()));
    }

    /**
     * Adds another broadcastOnly value.
     * @param value A value compatible with EventWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addBroadcastOnly(Object value) throws DmcValueException {
        ((ViewDMO) core).addBroadcastOnly(value);
    }

    /**
     * Adds another broadcastOnly value.
     * @param value A value compatible with EventWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addBroadcastOnly(EventWithArgs value){
        ((ViewDMO) core).addBroadcastOnly(value);
    }

    /**
     * Returns true if the collection contains the broadcastOnly value.
     * @param value A value compatible with EventWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean broadcastOnlyContains(EventWithArgs value){
        return(((ViewDMO) core).broadcastOnlyContains(value));
    }

    /**
     * @return A COPY of the collection of EventWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<EventWithArgs> getBroadcastOnlyCopy(){
        DmcAttribute<?> attr = core.get(ViewDMO.__broadcastOnly);
        if (attr == null)
            return(new ArrayList<EventWithArgs>());
        
        ArrayList<EventWithArgs> rc = new ArrayList<EventWithArgs>(attr.getMVSize());
        
        Iterator<EventWithArgs> it = (Iterator<EventWithArgs>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a broadcastOnly value.
     * @param value The EventWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delBroadcastOnly(Object value) throws DmcValueException {
        ((ViewDMO) core).delBroadcastOnly(value);
    }

    /**
     * Deletes a broadcastOnly value.
     * @param value The EventWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delBroadcastOnly(EventWithArgs value){
        ((ViewDMO) core).delBroadcastOnly(value);
    }

    /**
     * Removes the broadcastOnly attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remBroadcastOnly(){
        ((ViewDMO) core).remBroadcastOnly();
    }

    /**
     * @return The number of MethodWithArgs items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getPresenterMethodSize(){
        DmcAttribute<?> attr = core.get(ViewDMO.__presenterMethod);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getPresenterMethodIsEmpty(){
        DmcAttribute<?> attr = core.get(ViewDMO.__presenterMethod);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getPresenterMethodHasValue(){
        DmcAttribute<?> attr = core.get(ViewDMO.__presenterMethod);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public MethodWithArgsIterableDMW getPresenterMethodIterable(){
        DmcAttribute<?> attr = core.get(ViewDMO.__presenterMethod);
        if (attr == null)
            return(MethodWithArgsIterableDMW.emptyList);
        
        return(new MethodWithArgsIterableDMW(((ViewDMO) core).getPresenterMethod()));
    }

    /**
     * Adds another presenterMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addPresenterMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).addPresenterMethod(value);
    }

    /**
     * Adds another presenterMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addPresenterMethod(MethodWithArgs value){
        ((ViewDMO) core).addPresenterMethod(value);
    }

    /**
     * Returns true if the collection contains the presenterMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean presenterMethodContains(MethodWithArgs value){
        return(((ViewDMO) core).presenterMethodContains(value));
    }

    /**
     * @return A COPY of the collection of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<MethodWithArgs> getPresenterMethodCopy(){
        DmcAttribute<?> attr = core.get(ViewDMO.__presenterMethod);
        if (attr == null)
            return(new ArrayList<MethodWithArgs>());
        
        ArrayList<MethodWithArgs> rc = new ArrayList<MethodWithArgs>(attr.getMVSize());
        
        Iterator<MethodWithArgs> it = (Iterator<MethodWithArgs>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a presenterMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delPresenterMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).delPresenterMethod(value);
    }

    /**
     * Deletes a presenterMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delPresenterMethod(MethodWithArgs value){
        ((ViewDMO) core).delPresenterMethod(value);
    }

    /**
     * Removes the presenterMethod attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remPresenterMethod(){
        ((ViewDMO) core).remPresenterMethod();
    }

    /**
     * @return The number of MethodWithArgs items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getViewMethodSize(){
        DmcAttribute<?> attr = core.get(ViewDMO.__viewMethod);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getViewMethodIsEmpty(){
        DmcAttribute<?> attr = core.get(ViewDMO.__viewMethod);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MethodWithArgsDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getViewMethodHasValue(){
        DmcAttribute<?> attr = core.get(ViewDMO.__viewMethod);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public MethodWithArgsIterableDMW getViewMethodIterable(){
        DmcAttribute<?> attr = core.get(ViewDMO.__viewMethod);
        if (attr == null)
            return(MethodWithArgsIterableDMW.emptyList);
        
        return(new MethodWithArgsIterableDMW(((ViewDMO) core).getViewMethod()));
    }

    /**
     * Adds another viewMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addViewMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).addViewMethod(value);
    }

    /**
     * Adds another viewMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addViewMethod(MethodWithArgs value){
        ((ViewDMO) core).addViewMethod(value);
    }

    /**
     * Returns true if the collection contains the viewMethod value.
     * @param value A value compatible with MethodWithArgs
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean viewMethodContains(MethodWithArgs value){
        return(((ViewDMO) core).viewMethodContains(value));
    }

    /**
     * @return A COPY of the collection of MethodWithArgs objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<MethodWithArgs> getViewMethodCopy(){
        DmcAttribute<?> attr = core.get(ViewDMO.__viewMethod);
        if (attr == null)
            return(new ArrayList<MethodWithArgs>());
        
        ArrayList<MethodWithArgs> rc = new ArrayList<MethodWithArgs>(attr.getMVSize());
        
        Iterator<MethodWithArgs> it = (Iterator<MethodWithArgs>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a viewMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delViewMethod(Object value) throws DmcValueException {
        ((ViewDMO) core).delViewMethod(value);
    }

    /**
     * Deletes a viewMethod value.
     * @param value The MethodWithArgs to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delViewMethod(MethodWithArgs value){
        ((ViewDMO) core).delViewMethod(value);
    }

    /**
     * Removes the viewMethod attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remViewMethod(){
        ((ViewDMO) core).remViewMethod();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public DisplayDataSpec getDisplayDMO(){
        return(((ViewDMO) core).getDisplayDMO());
    }

    /**
     * Sets displayDMO to the specified value.
     * @param value A value compatible with DmcTypeDisplayDataSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setDisplayDMO(Object value) throws DmcValueException {
        ((ViewDMO) core).setDisplayDMO(value);
    }

    /**
     * Sets displayDMO to the specified value.
     * @param value DisplayDataSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setDisplayDMO(DisplayDataSpec value){
        ((ViewDMO) core).setDisplayDMO(value);
    }

    /**
     * Removes the displayDMO attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remDisplayDMO(){
        ((ViewDMO) core).remDisplayDMO();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public EventSpec getSelectEvent(){
        return(((ViewDMO) core).getSelectEvent());
    }

    /**
     * Sets selectEvent to the specified value.
     * @param value A value compatible with DmcTypeEventSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setSelectEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).setSelectEvent(value);
    }

    /**
     * Sets selectEvent to the specified value.
     * @param value EventSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setSelectEvent(EventSpec value){
        ((ViewDMO) core).setSelectEvent(value);
    }

    /**
     * Removes the selectEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remSelectEvent(){
        ((ViewDMO) core).remSelectEvent();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public EventSpec getDeleteEvent(){
        return(((ViewDMO) core).getDeleteEvent());
    }

    /**
     * Sets deleteEvent to the specified value.
     * @param value A value compatible with DmcTypeEventSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setDeleteEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).setDeleteEvent(value);
    }

    /**
     * Sets deleteEvent to the specified value.
     * @param value EventSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setDeleteEvent(EventSpec value){
        ((ViewDMO) core).setDeleteEvent(value);
    }

    /**
     * Removes the deleteEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remDeleteEvent(){
        ((ViewDMO) core).remDeleteEvent();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public OperationSpec getClickEvent(){
        return(((ViewDMO) core).getClickEvent());
    }

    /**
     * Sets clickEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setClickEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).setClickEvent(value);
    }

    /**
     * Sets clickEvent to the specified value.
     * @param value OperationSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setClickEvent(OperationSpec value){
        ((ViewDMO) core).setClickEvent(value);
    }

    /**
     * Removes the clickEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remClickEvent(){
        ((ViewDMO) core).remClickEvent();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public OperationSpec getModifyEvent(){
        return(((ViewDMO) core).getModifyEvent());
    }

    /**
     * Sets modifyEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setModifyEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).setModifyEvent(value);
    }

    /**
     * Sets modifyEvent to the specified value.
     * @param value OperationSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setModifyEvent(OperationSpec value){
        ((ViewDMO) core).setModifyEvent(value);
    }

    /**
     * Removes the modifyEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remModifyEvent(){
        ((ViewDMO) core).remModifyEvent();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public OperationSpec getCreateEvent(){
        return(((ViewDMO) core).getCreateEvent());
    }

    /**
     * Sets createEvent to the specified value.
     * @param value A value compatible with DmcTypeOperationSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setCreateEvent(Object value) throws DmcValueException {
        ((ViewDMO) core).setCreateEvent(value);
    }

    /**
     * Sets createEvent to the specified value.
     * @param value OperationSpec
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setCreateEvent(OperationSpec value){
        ((ViewDMO) core).setCreateEvent(value);
    }

    /**
     * Removes the createEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remCreateEvent(){
        ((ViewDMO) core).remCreateEvent();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getViewName(){
        return(((ViewDMO) core).getViewName());
    }

    /**
     * Sets viewName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setViewName(Object value) throws DmcValueException {
        ((ViewDMO) core).setViewName(value);
    }

    /**
     * Sets viewName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setViewName(CamelCaseName value){
        ((ViewDMO) core).setViewName(value);
    }

    /**
     * Removes the viewName attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remViewName(){
        ((ViewDMO) core).remViewName();
    }


}
