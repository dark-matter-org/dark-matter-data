//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2011 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.mvw.tools.mvwgenerator.generated.dmo;

// Generated from: org.dmd.dms.util.GenUtility.formatImports(GenUtility.java:321)
import java.io.Serializable;                                                         // Always required
import java.util.*;                                                                  // Always required
import org.dmd.dmc.DmcAttribute;                                                     // Any attributes
import org.dmd.dmc.DmcNamedObjectIF;                                                 // Named object
import org.dmd.dmc.DmcSliceInfo;                                                     // Required for object slicing
import org.dmd.dmc.DmcValueException;                                                // Any attributes
import org.dmd.dmc.types.CamelCaseName;                                              // Naming attribute type
import org.dmd.dms.generated.types.DmcTypeCamelCaseNameSV;                           // Required type
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDefinitionDMO;                // Base class
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeImplAndClassMV;         // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.DmcTypeImplAndClassSV;         // Required type
import org.dmd.mvw.tools.mvwgenerator.generated.types.ImplAndClass;                  // Primitive type and !auxiliary class

import org.dmd.dms.generated.dmo.MetaVCAG;
import org.dmd.dmc.DmcClassInfo;
import org.dmd.dmc.DmcAttributeValidator;
import org.dmd.dmc.DmcObjectValidator;

/**
 * The MenuImplementationConfig is used to define the various classes that
 * will  be used to implement an actual menu structure based the MVW menu
 * definitions.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:133)
 */
@SuppressWarnings("serial")
public class MenuImplementationConfigDMO  extends MvwDefinitionDMO  implements DmcNamedObjectIF, Serializable  {

    public final static String constructionClassName = "MenuImplementationConfig";

    public final static DmcClassInfo classInfo = MvwDMSAG.__MenuImplementationConfig;

    static Map<Integer,HashMap<String,DmcAttributeValidator>> _AvDmAp;

    static Map<String ,DmcObjectValidator> _OvDmAp;


    static {

        _AvDmAp = new HashMap<Integer,HashMap<String,DmcAttributeValidator>>();

        _OvDmAp = new HashMap<String,DmcObjectValidator>();
        _OvDmAp.put(MetaVCAG.__AttributeSetValidator.getName(),MetaVCAG.__AttributeSetValidator);
    }

    public MenuImplementationConfigDMO() {
        super("MenuImplementationConfig");
    }

    protected MenuImplementationConfigDMO(String oc) {
        super(oc);
    }

    protected Map<Integer,HashMap<String,DmcAttributeValidator>> getAttributeValidators(){
        return(_AvDmAp);
    }

    protected Map<String,DmcObjectValidator> getObjectValidators(){
        return(_OvDmAp);
    }

    @Override
    public MenuImplementationConfigDMO getNew(){
        MenuImplementationConfigDMO rc = new MenuImplementationConfigDMO();
        return(rc);
    }

    @Override
    public MenuImplementationConfigDMO getSlice(DmcSliceInfo info){
        MenuImplementationConfigDMO rc = new MenuImplementationConfigDMO();
        populateSlice(rc,info);
        return(rc);
    }

    public MenuImplementationConfigDMO(DmcTypeModifierMV mods) {
        super("MenuImplementationConfig");
        modrec(true);
        setModifier(mods);
    }

    public MenuImplementationConfigDMO getModificationRecorder(){
        MenuImplementationConfigDMO rc = new MenuImplementationConfigDMO();
        rc.setConfigName(getConfigName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:735)
    public CamelCaseName getObjectName(){
        DmcAttribute<?> name = get(MvwDMSAG.__configName);
        if (name != null)
            return((CamelCaseName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(MvwDMSAG.__configName);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof MenuImplementationConfigDMO){
            return( getObjectName().equals( ((MenuImplementationConfigDMO) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return An Iterator of ImplAndClass objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:919)
    public Iterator<ImplAndClass> getAlternateMenuBar(){
        DmcTypeImplAndClassMV attr = (DmcTypeImplAndClassMV) get(MvwDMSAG.__alternateMenuBar);
        if (attr == null)
            return( ((List<ImplAndClass>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth ImplAndClass value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:931)
    public ImplAndClass getNthAlternateMenuBar(int i){
        DmcTypeImplAndClassMV attr = (DmcTypeImplAndClassMV) get(MvwDMSAG.__alternateMenuBar);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another alternateMenuBar to the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:945)
    public DmcAttribute<?> addAlternateMenuBar(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuBar);
        if (attr == null)
            attr = new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuBar);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__alternateMenuBar,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified ImplAndClass.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1009)
    public boolean alternateMenuBarContains(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuBar);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another alternateMenuBar value.
     * @param value A value compatible with ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1041)
    public DmcAttribute<?> addAlternateMenuBar(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuBar);
        if (attr == null)
            attr = new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuBar);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__alternateMenuBar,attr);
        return(attr);
    }

    /**
     * Returns the number of values in alternateMenuBar
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1058)
    public int getAlternateMenuBarSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuBar);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a alternateMenuBar value.
     * @param value The ImplAndClass to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1100)
    public DmcAttribute<?> delAlternateMenuBar(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuBar);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuBar), value);
        else
            attr = del(MvwDMSAG.__alternateMenuBar, value);
        
        return(attr);
    }

    /**
     * Deletes a alternateMenuBar from the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1116)
    public DmcAttribute<?> delAlternateMenuBar(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuBar);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuBar), value);
        else
            attr = del(MvwDMSAG.__alternateMenuBar, value);
        
        return(attr);
    }

    /**
     * Removes the alternateMenuBar attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1135)
    public void remAlternateMenuBar(){
         rem(MvwDMSAG.__alternateMenuBar);
    }

    /**
     * @return An Iterator of ImplAndClass objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:919)
    public Iterator<ImplAndClass> getAlternateSubMenu(){
        DmcTypeImplAndClassMV attr = (DmcTypeImplAndClassMV) get(MvwDMSAG.__alternateSubMenu);
        if (attr == null)
            return( ((List<ImplAndClass>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth ImplAndClass value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:931)
    public ImplAndClass getNthAlternateSubMenu(int i){
        DmcTypeImplAndClassMV attr = (DmcTypeImplAndClassMV) get(MvwDMSAG.__alternateSubMenu);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another alternateSubMenu to the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:945)
    public DmcAttribute<?> addAlternateSubMenu(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateSubMenu);
        if (attr == null)
            attr = new DmcTypeImplAndClassMV(MvwDMSAG.__alternateSubMenu);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__alternateSubMenu,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified ImplAndClass.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1009)
    public boolean alternateSubMenuContains(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateSubMenu);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another alternateSubMenu value.
     * @param value A value compatible with ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1041)
    public DmcAttribute<?> addAlternateSubMenu(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateSubMenu);
        if (attr == null)
            attr = new DmcTypeImplAndClassMV(MvwDMSAG.__alternateSubMenu);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__alternateSubMenu,attr);
        return(attr);
    }

    /**
     * Returns the number of values in alternateSubMenu
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1058)
    public int getAlternateSubMenuSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateSubMenu);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a alternateSubMenu value.
     * @param value The ImplAndClass to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1100)
    public DmcAttribute<?> delAlternateSubMenu(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateSubMenu);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeImplAndClassMV(MvwDMSAG.__alternateSubMenu), value);
        else
            attr = del(MvwDMSAG.__alternateSubMenu, value);
        
        return(attr);
    }

    /**
     * Deletes a alternateSubMenu from the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1116)
    public DmcAttribute<?> delAlternateSubMenu(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateSubMenu);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeImplAndClassMV(MvwDMSAG.__alternateSubMenu), value);
        else
            attr = del(MvwDMSAG.__alternateSubMenu, value);
        
        return(attr);
    }

    /**
     * Removes the alternateSubMenu attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1135)
    public void remAlternateSubMenu(){
         rem(MvwDMSAG.__alternateSubMenu);
    }

    /**
     * @return An Iterator of ImplAndClass objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:919)
    public Iterator<ImplAndClass> getAlternateMenuItem(){
        DmcTypeImplAndClassMV attr = (DmcTypeImplAndClassMV) get(MvwDMSAG.__alternateMenuItem);
        if (attr == null)
            return( ((List<ImplAndClass>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * @return The nth ImplAndClass value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:931)
    public ImplAndClass getNthAlternateMenuItem(int i){
        DmcTypeImplAndClassMV attr = (DmcTypeImplAndClassMV) get(MvwDMSAG.__alternateMenuItem);
        if (attr == null)
            return(null);

        return(attr.getMVnth(i));
    }

    /**
     * Adds another alternateMenuItem to the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:945)
    public DmcAttribute<?> addAlternateMenuItem(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuItem);
        if (attr == null)
            attr = new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuItem);
        
        try{
            setLastValue(attr.add(value));
            add(MvwDMSAG.__alternateMenuItem,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific add() method shouldn't throw exceptions!",ex));
        }
        return(attr);
    }

    /**
     * Returns true if we contain a valued keyed by the specified ImplAndClass.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1009)
    public boolean alternateMenuItemContains(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuItem);
        if (attr == null)
            return(false);
        return(attr.contains(value));
    }

    /**
     * Adds another alternateMenuItem value.
     * @param value A value compatible with ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1041)
    public DmcAttribute<?> addAlternateMenuItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuItem);
        if (attr == null)
            attr = new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuItem);
        
        setLastValue(attr.add(value));
        add(MvwDMSAG.__alternateMenuItem,attr);
        return(attr);
    }

    /**
     * Returns the number of values in alternateMenuItem
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1058)
    public int getAlternateMenuItemSize(){
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * Deletes a alternateMenuItem value.
     * @param value The ImplAndClass to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1100)
    public DmcAttribute<?> delAlternateMenuItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuItem);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuItem), value);
        else
            attr = del(MvwDMSAG.__alternateMenuItem, value);
        
        return(attr);
    }

    /**
     * Deletes a alternateMenuItem from the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1116)
    public DmcAttribute<?> delAlternateMenuItem(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__alternateMenuItem);
        
        if ( (attr == null) && (getModifier()!= null))
            delFromEmptyAttribute(new DmcTypeImplAndClassMV(MvwDMSAG.__alternateMenuItem), value);
        else
            attr = del(MvwDMSAG.__alternateMenuItem, value);
        
        return(attr);
    }

    /**
     * Removes the alternateMenuItem attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:1135)
    public void remAlternateMenuItem(){
         rem(MvwDMSAG.__alternateMenuItem);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:642)
    public CamelCaseName getConfigName(){
        DmcTypeCamelCaseNameSV attr = (DmcTypeCamelCaseNameSV) get(MvwDMSAG.__configName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets configName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:680)
    public void setConfigName(CamelCaseName value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__configName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__configName);
        
        try{
            attr.set(value);
            set(MvwDMSAG.__configName,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets configName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseNameSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:732)
    public void setConfigName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__configName);
        if (attr == null)
            attr = new DmcTypeCamelCaseNameSV(MvwDMSAG.__configName);
        
        attr.set(value);
        set(MvwDMSAG.__configName,attr);
    }

    /**
     * Removes the configName attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:747)
    public void remConfigName(){
         rem(MvwDMSAG.__configName);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:642)
    public ImplAndClass getDefaultMenuBar(){
        DmcTypeImplAndClassSV attr = (DmcTypeImplAndClassSV) get(MvwDMSAG.__defaultMenuBar);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets defaultMenuBar to the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:680)
    public void setDefaultMenuBar(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__defaultMenuBar);
        if (attr == null)
            attr = new DmcTypeImplAndClassSV(MvwDMSAG.__defaultMenuBar);
        
        try{
            attr.set(value);
            set(MvwDMSAG.__defaultMenuBar,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets defaultMenuBar to the specified value.
     * @param value A value compatible with DmcTypeImplAndClassSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:732)
    public void setDefaultMenuBar(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__defaultMenuBar);
        if (attr == null)
            attr = new DmcTypeImplAndClassSV(MvwDMSAG.__defaultMenuBar);
        
        attr.set(value);
        set(MvwDMSAG.__defaultMenuBar,attr);
    }

    /**
     * Removes the defaultMenuBar attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:747)
    public void remDefaultMenuBar(){
         rem(MvwDMSAG.__defaultMenuBar);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:642)
    public ImplAndClass getDefaultSubMenu(){
        DmcTypeImplAndClassSV attr = (DmcTypeImplAndClassSV) get(MvwDMSAG.__defaultSubMenu);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets defaultSubMenu to the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:680)
    public void setDefaultSubMenu(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__defaultSubMenu);
        if (attr == null)
            attr = new DmcTypeImplAndClassSV(MvwDMSAG.__defaultSubMenu);
        
        try{
            attr.set(value);
            set(MvwDMSAG.__defaultSubMenu,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets defaultSubMenu to the specified value.
     * @param value A value compatible with DmcTypeImplAndClassSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:732)
    public void setDefaultSubMenu(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__defaultSubMenu);
        if (attr == null)
            attr = new DmcTypeImplAndClassSV(MvwDMSAG.__defaultSubMenu);
        
        attr.set(value);
        set(MvwDMSAG.__defaultSubMenu,attr);
    }

    /**
     * Removes the defaultSubMenu attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:747)
    public void remDefaultSubMenu(){
         rem(MvwDMSAG.__defaultSubMenu);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:642)
    public ImplAndClass getDefaultMenuItem(){
        DmcTypeImplAndClassSV attr = (DmcTypeImplAndClassSV) get(MvwDMSAG.__defaultMenuItem);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets defaultMenuItem to the specified value.
     * @param value ImplAndClass
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:680)
    public void setDefaultMenuItem(ImplAndClass value) {
        DmcAttribute<?> attr = get(MvwDMSAG.__defaultMenuItem);
        if (attr == null)
            attr = new DmcTypeImplAndClassSV(MvwDMSAG.__defaultMenuItem);
        
        try{
            attr.set(value);
            set(MvwDMSAG.__defaultMenuItem,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets defaultMenuItem to the specified value.
     * @param value A value compatible with DmcTypeImplAndClassSV
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:732)
    public void setDefaultMenuItem(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(MvwDMSAG.__defaultMenuItem);
        if (attr == null)
            attr = new DmcTypeImplAndClassSV(MvwDMSAG.__defaultMenuItem);
        
        attr.set(value);
        set(MvwDMSAG.__defaultMenuItem,attr);
    }

    /**
     * Removes the defaultMenuItem attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:747)
    public void remDefaultMenuItem(){
         rem(MvwDMSAG.__defaultMenuItem);
    }




}
