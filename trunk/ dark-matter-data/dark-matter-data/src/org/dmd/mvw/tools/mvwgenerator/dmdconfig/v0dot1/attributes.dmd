AttributeDefinition
name			definedInModule
dmdID			0
type			Module
description		All MvwDefinitions are defined in an Module file that
 ends with a .mvw extension.

AttributeDefinition
name			firesEvent
dmdID			1
type			Event
valueType		TREEMAPPED
description		Indicates the MvwEvents that are fired by various MVW components.
 
AttributeDefinition
name 			handlesEvent
dmdID			2
type 			Event
valueType		TREEMAPPED
description 	This attributes holds a list of MvwEvents that are
 handled by various MVW components.

//AttributeDefinition
//name			userDataType
//dmdID			3
//type            String
//valueType		MULTI
//description		Various interfaces allow for the specification of user data that
// gets passed through them. For instance, an MvwEvent might carry a data payload
// of an ArrayList<String> or, TreeMap<Integer,MyDataDMO> or whatever. This attribute
// lets you specify that data type information. You will use this in conjunction with
// the userDataImport attribute that lets you tell the MVW Generator what import
// statements it needs.

AttributeDefinition
name			argVector
dmdID			3
type            String
nullReturnValue	"()"
description		Indicates an argument vector for an event or interface.

AttributeDefinition
name            userDataImport
dmdID			4
type            String
valueType       TREESET
description     The additionalImport attribute indicates the fully qualified class names
 of types that are required to support your userDataType indications. You need not explicitly
 indicate Java native types such as String, Integer etc. but you will have to specify
 things like java.util.TreeMap.

AttributeDefinition
name			dependsOnModule
dmdID			5
type			String
valueType		TREESET
description		This attribute allows a Module to refer to other Modules
 on which it depends.

AttributeDefinition
name			selectedDMO
dmdID			6
type			ClassDefinition
description		This attribute indicates the class of DMO that is selected by a 
 SingleDMOSelectedEvent.

AttributeDefinition
name			useBaseClass
dmdID			7
type			String
description		The useBaseClass attribute is used to specify the class from which a
 generated component class should be derived. It should be fully qualified name of a
 class.

//AttributeDefinition
//name			dependsOnSchema
//dmdID			8
//type			String
//valueType		MULTI
//description		Indicates the schema(s) on which a Module depends.
// Moved to meta

AttributeDefinition
name			eventName
dmdID			9
type			CamelCaseName
description		The name of an event.

AttributeDefinition
name			moduleName
dmdID			10
type			CamelCaseName
description		The name of a module.

AttributeDefinition
name			componentName
dmdID			11
type			CamelCaseName
description		The name of a component.

AttributeDefinition
name			viewName
dmdID			12
type			CamelCaseName
description		The name of a View.

AttributeDefinition
name			widget
dmdID			13
type			Boolean
nullReturnValue	true
description		Indicates if a View interface extends IsWidget. This defaults to true because
 most of our views will be displayed in a manner where implementing IsWidget is useful.

AttributeDefinition
name			localEvent
dmdID			14
type			EventWithArgs
description		Indicates a local event name. An example would be localEvent deleteButtonClicked, 
 which would result in a method named onDeleteButtonClicked() to be created for the Presenter interface.
 <P>
 If there are arguments associated with the event, use the form: deleteButtonClicked (ContactDMO contact)

//AttributeDefinition
//name			broadcast
//dmdID			15
//type			String
//description		Indicates a broadcast event name.

AttributeDefinition
name			displayDMO
dmdID			16
type			DisplayDataSpec
valueType		MULTI
description		Indicates data to be displayed in a View. The attributes takes the form
 Class SINGLE|MULTI varname.
 
AttributeDefinition
name			selectEvent
dmdID			17
type			EventSpec
valueType		MULTI
description		Indicates type of events to be generated when data is selected.

AttributeDefinition
name			deleteEvent
dmdID			18
type			EventSpec
valueType		MULTI
description		Indicates type of events to be generated when data is deleted.

AttributeDefinition
name			clickEvent
dmdID			19
type			OperationSpec
valueType		MULTI
description		Indicates type of event to be generated when an object is clicked.

AttributeDefinition
name			modifyEvent
dmdID			20
type			OperationSpec
description		Indicates type of event to be generated when an object is modified.

AttributeDefinition
name			createEvent
dmdID			21
type			OperationSpec
description		Indicates type of event to be generated when an object is created.

AttributeDefinition
name			broadcast
dmdID			22
type			Event
valueType		MULTI
description		Indicates an event that a View will first call on its Presenter interface and then
 broadcast on the event bus.

AttributeDefinition
name			broadcastOnly
dmdID			23
//type			EventWithArgs
type			Event
valueType		MULTI
description		Indicates an event tha a View will broadcast only on the event bus; it is not 
 sent to its presenter.

AttributeDefinition
name			presenterMethod
dmdID			24
type			MethodWithArgs
valueType		MULTI
description		Indicates a local function name (on the Presenter), optionally followed by an argument vector
 and, if required fully qualified class names.

AttributeDefinition
name			viewMethod
dmdID			25
type			MethodWithArgs
valueType		MULTI
description		Indicates a local function name (on the View), optionally followed by an argument vector
 and, if required fully qualified class names.

AttributeDefinition
name			useClass
dmdID			26
type			String
description		The fully qualified class name of a RunContextItem.

AttributeDefinition
name			itemName
dmdID			27
type			CamelCaseName
description		The name of a RunContextItem.

AttributeDefinition
name			construction
dmdID			28
type			String
description		The statement used to construct the RunContextItem instance.

AttributeDefinition
name			itemOrder
dmdID			29
type			Integer
nullReturnValue	50
description		The order in which a RunContextItem should be instantiated.

AttributeDefinition
name			contextImpl
dmdID			30
type			String
nullReturnValue	"Default"
description		The context implementation in which this RunContextItem definition
 should be used. All items are part of the Default implementation, but if you need
 other implementations, just respecify the item with different useClass and/or
 different construction syntax.

AttributeDefinition
name            importThis
dmdID			31
type            String
valueType       TREESET
description		Allows for the specification of other import statements in various definitions.

AttributeDefinition
name            local
dmdID			32
type            Event
valueType       TREESET
description		Indicates that a View fires a local event to its Presenter. This is shorthand
 for a call to a member function on the Presenter.
 
AttributeDefinition
name			appName
dmdID			33
type			CamelCaseName
description		The name of an application.

AttributeDefinition
name			controllerName
dmdID			34
type			CamelCaseName
description		The name of a controller.

AttributeDefinition
name			usesRunContextItem
dmdID			35
type			RunContextItem
valueType		TREESET
description		Indicates a RunContextItem on which something depends. This implies that the 
 entity must have the overall run context injected at construction time. Run context items are 
 represented as private final members of the generated base implementation of the entity and
 are assigned from the run context.

AttributeDefinition
name            presenterImport
dmdID			36
type            String
valueType       TREESET
description		Indicates an import required by the Presenter interface of a View.

AttributeDefinition
name            viewImport
dmdID			37
type            String
valueType       TREESET
description		Indicates an import required by the View interface.

AttributeDefinition
name            sharedImport
dmdID			38
type            String
valueType       TREESET
description		Indicates an import required by both the View and Presenter interfaces.

AttributeDefinition
name			presenterName
dmdID			39
type			CamelCaseName
description		The name of a Presenter.

AttributeDefinition
name			activityName
dmdID			40
type			CamelCaseName
description		The name of an Activity.

AttributeDefinition
name			managesView
dmdID			41
type			View
valueType		MULTI
description		Indicates Views that are managed by a Component.

AttributeDefinition
name			usesController
dmdID			42
type			Controller
valueType		MULTI
description		Indicates Controllers that are used by an application or a site.

AttributeDefinition
name			useSchema
dmdID			43
type			SchemaDefinition
valueType		MULTI
description		Indicates the schemas that a component uses. Your module must specify dependsOnSchema
 for the appropriate schemas.

//AttributeDefinition
//name			sendsGetRequest
//dmdID			44
//type			GetWithOptions
//valueType		MULTI
//description		Indicates that a component performs get requests.

//AttributeDefinition
//name			sendsDeleteRequest
//dmdID			45
//type			RequestWithOptions
//valueType		MULTI
//description		Indicates that a component performs delete requests.
//
//AttributeDefinition
//name			sendsSetRequest
//dmdID			46
//type			RequestWithOptions
//valueType		MULTI
//description		Indicates that a component performs set requests.
//
//AttributeDefinition
//name			sendsCreateRequest
//dmdID			47
//type			RequestWithOptions
//valueType		MULTI
//description		Indicates that a component performs create requests.
//
//AttributeDefinition
//name			sendsActionRequest
//dmdID			48
//type			RequestWithOptions
//valueType		MULTI
//description		Indicates that a component performs action requests.
//
//AttributeDefinition
//name			sendsLoginRequest
//dmdID			49
//type			RequestWithOptions
//valueType		MULTI
//description		Indicates that a component performs login requests.
//
//AttributeDefinition
//name			sendsLogoutRequest
//dmdID			50
//type			RequestWithOptions
//valueType		MULTI
//description		Indicates that a component performs logout requests.

AttributeDefinition
name			centralDMPErrorHandler
dmdID			51
type			Boolean
description		Indicates that a controller is the target for centralized handling of Dark Matter Protocol errors.

AttributeDefinition
name			centralRPCErrorHandler
dmdID			52
type			Boolean
description		Indicates that a controller is the target for centralized handling of GWT RPC errors.

AttributeDefinition
name			placeName
dmdID			53
type			CamelCaseName
description		The name of a Place.

AttributeDefinition
name			placePrefix
dmdID			54
type			String
description		The prefix that globally identifies a Place. A Place url is composed of prefix:token.

AttributeDefinition
name			runsActivity
dmdID			55
type			Activity
description		Indicates the Activity that runs in a Place.

AttributeDefinition
name			parentPlace
dmdID			56
type			Place
description		Indicates the parent of a SubPlace.

AttributeDefinition
name			defaultPlace
dmdID			57
type			Place
description		Indicates the DefaultPlace for a WebApplication.

AttributeDefinition
name			abstractActivity
dmdID			58
type			Boolean
description		Indicates that an Activity should be derived from AbstractActivity

AttributeDefinition
name			addedToRunContext
dmdID			59
type			Boolean
nullReturnValue	true
description		Indicates whether a RunContextItem should be generated for a Controller; defaults to true.
 However, if you need manual control over ordering and creation of the context item, for example in the
 case of base Controllers like the CommController, this can be set to false.

AttributeDefinition
name			instantiatesPresenter
dmdID			60
type			Presenter
valueType		MULTI
description		Indicates that a Component makes use of a particular Presenter; a method
 will be created on the componet's BaseImpl that allows you to get a presenter of this
 type. This is used in conjunction with instantiatesView attribute, in that an appropriate 
 presenter must be passed to the generated get*View() method to get a view instance.

AttributeDefinition
name			createOnDemand
dmdID			61
type			Boolean
description		Indicates that a RunContextItem will be created on demand when requested
 from the RunContext.

AttributeDefinition
name			instantiatesView
dmdID			62
type			View
valueType		MULTI
description		Indicates that a component instantiates a particular View; a method
 will created on the component BaseImpl that allows you to get an instance of this
 view and bind it to the appropriate presenter.

AttributeDefinition
name			singleton
dmdID			63
type			Boolean
description		Indicates that a Presenter will be the only one created from
 the run context. If this flag is false (the default), calling getXPresenter()
 will return a new instance of the component. This is also used in conjunction (internally)
 with the createOnDemand attribute on RunContextItems.

AttributeDefinition
name			usingStandardSubpackages
dmdID			64
type			Boolean
description		When set on a Module, this indicates that extended classes for Activities,
 Controllers, Presenters and Views will be expected to be in standard subpackages beneath 
 your extended package i.e. extended.activities, extended.controllers etc. This way, you don't
 have to specify the subpackage attribute for each of these components. If the subpackage
 is specified for any of these components, it takes precidence over the standard

AttributeDefinition
name			configName
dmdID			65
type			CamelCaseName
description		The name of a menu implementation configuration.

AttributeDefinition
name			defaultMenuBar
dmdID			66
type			MenuElementTypeAndComment
description		The name and description of the default menu bar implementation.

AttributeDefinition
name			alternateMenuBar
dmdID			67
type			MenuElementTypeAndComment
valueType		MULTI
description		The name and description of various alternate menu bar implementations.

AttributeDefinition
name			elementName
dmdID			68
type			CamelCaseName
description		The name of a menu related element.

AttributeDefinition
name			useImpl
dmdID			69
type			String
description		The name of a menu element implementation.

AttributeDefinition
name			addToMenu
dmdID			70
type			Menu
description		Indicates the menu to which an MenuItem should be added.

AttributeDefinition
name			alwaysEnabled
dmdID			71
type			Boolean
description		Indicates if the item is always enabled. If not, there will be a
 method generated that is called before the menu is shown to determine if the item
 is enabled/disabled.

AttributeDefinition
name			menuOrder
dmdID			72
type			String
description		Indicates the lorder in which a sub menu or menu item
 should be displayed in the menu.

AttributeDefinition
name			displayLabel
dmdID			73
type			String
description		The label to be displayed on something.

AttributeDefinition
name			actionBindingName
dmdID			74
type			CamelCaseName
description		The name of an ActionBinding.

AttributeDefinition
name			triggersAction
dmdID			75
type			ActionBinding
description		Indicates the ActionBinding to be associated with a menu entry, button or
 other UI component.

AttributeDefinition
name			defaultSubMenu
dmdID			76
type			MenuElementTypeAndComment
description		The name and description of the default submenu implementation.

AttributeDefinition
name			alternateSubMenu
dmdID			77
type			MenuElementTypeAndComment
valueType		MULTI
description		The name and description of the various submenu implementations.

AttributeDefinition
name			defaultMenuItem
dmdID			78
type			MenuElementTypeAndComment
description		The name and description of the default menu item implementation.

AttributeDefinition
name			alternateMenuItem
dmdID			79
type			MenuElementTypeAndComment
valueType		MULTI
description		The name and description of various alternate Menu item implementations.

AttributeDefinition
name			implementsAction
dmdID			80
type			ActionBinding
valueType		MULTI
description		Indicates the ActionBindings to be implemented by a Component. 

AttributeDefinition
name			implementedBy
dmdID			81
type			Component
internalUse		true
description		Indicates the Component that implements an ActionBinding.

AttributeDefinition
name			defaultSeparator
dmdID			82
type			MenuElementTypeAndComment
description		The name and description of the default separator implementation.

AttributeDefinition
name			menuImplementation
dmdID			83
type			MenuImplementationConfig
description		A reference to a menu implementation.

AttributeDefinition
name			displayLabelI18N
dmdID			84
type			String
description		A reference to run context item with translated labels for your menu item.
 If you had defined a run context item called constants (whose base interface was generated
 by the GWT I18N creation mechanisms), you could use one its value by specifying constants.myLabel().

AttributeDefinition
name			bindingName
dmdID			85
type			CamelCaseName
description		The name of a FormBinding.

AttributeDefinition
name			editObject
dmdID			86
type			ClassDefinition
description		The class of object to be editted by a Form.

AttributeDefinition
name			editField
dmdID			87
type			EditField
valueType		MULTI
description		The specification of an attribute to the field editor to be used and optionally
 the label and tooltip to be used. The format for this attribute is <br>
 attribute_name field_editor [MUST|RO] [: label] [: tool tip]

AttributeDefinition
name			editorName
dmdID			88
type			CamelCaseName
description		The name of a FieldEditor.

AttributeDefinition
name			strictlyChecked
dmdID			89
type			Boolean
nullReturnValue	true
description		By default when creating form bindings, the MVW Generator will ensure that the 
 attributes you refer to in your editFields are part of the class specified by editObject. In cases
 where you might be using auxiliary classes though, you can turn strict checking off by setting
 it to false.

AttributeDefinition
name			mappingName
dmdID			90
type			CamelCaseName
description		The name of a GxtEnumMapping.

AttributeDefinition
name			unsetValue
dmdID			91
type			String
description		The enum value that indicates when an enum is not set i.e. its attribute would
 be removed.

AttributeDefinition
name			useNameAsLabel
dmdID			92
type			Boolean
description		Specifies that the mapping should use the enum value eg. VALUE1 as the display
 label for the value. It would be set to lower case and the first letter captitalized e.g. Value1.
 The default is to use the description part of the enum definition as the label.

AttributeDefinition
name			useI18NConfig
dmdID			93
type			I18NConfig
description		Specifies that a FormBindingDefinition or GxtEnumMapping should attempt to extract
 the labels for its attributes/enum values from the specified I18NConfig, which should refer to a
 class that extends com.google.gwt.i18n.client.Messages/Constants.
 <p />
 The convention used is that attribute labels are defined as [attribute_name]Label and enum value
 labels are defined as <enum_value>Label. When you define an editField, just omit the label portion
 and the label will be picked up from the I18N configuration; if you specify a label, it overrides
 the I18N config.

AttributeDefinition
name			tipsFromI18N
dmdID			94
type			Boolean
description		Specifies that tool tips should also be retrieved from an I18N configuration.
 The convention is that a tool tip for an attribute is named [attribute_name]Tip

AttributeDefinition
name			skipEnumValue
dmdID			95
type			String
valueType		HASHSET
description		Specifies an enum value that should be left out of the enum mapping.

AttributeDefinition
name			sendsRequest
dmdID			96
type			RequestTypeWithOptions
valueType		MULTI
description		Indicates that a component sends the specified type of request. This works for 
 standard requests from the Dark Matter Protocol as well as for requests that you have derived
 from Request. The classes you derive MUST end with the standard Request/Response suffixes e.g.
 if you had a request to perform some operation you could have OperationRequest and OperationResponse.
 <p/>
 The form of this attribute is: sendRequest requestName functionName [DMPERRORS RPCERRORS CENTRALDMPERRORS CENTRALRPCERRORS CENTRALERRORS]
 <p/>
 Or, for get requests: sendRequest GetRequest functionName [DMPERRORS RPCERRORS CENTRALDMPERRORS CENTRALRPCERRORS CENTRALERRORS CACHE EVENTS]

AttributeDefinition
name			autoCreated
dmdID			97
type			Boolean
description     This attribute is used to flag defintions that are created automatically by
 the MVW infrastructure.

AttributeDefinition
name			useSingleEditor
dmdID			98
type			Boolean
description     When dealing with indexed attributes, the default behaviour is to create a
 form binding with an editor instance for each index slot. However, in some cases, you
 want to use a single complex editor that handles the attribute. By setting useSingleEditor
 to true, the form binding will contain a single editor for an indexed attribute.

AttributeDefinition
name			firedInThisModule
dmdID			99
type			Boolean
nullReturnValue	true
description     This attribute is used to flag Events that are not fired in the module in which
 they are defined. Normally we complain about this situation, it indicates that you've defined
 extraneous Events that should be removed. However, in the case of Events defined by base modules,
 this isn't always the case; you may define Eevents that are intended to be fired from modules
 that depend on the base module's handling of those events.

AttributeDefinition
name			codeSplit
dmdID			100
type			Boolean
nullReturnValue	false
description     This attribute is used to flag components that are intended to be loaded using 
 GWTs code splitting mechanisms. In order to successfully make use of these mechanisms, you
 have to structure your code in such a way that the component marked as a split point has no
 direct dependencies on components outside of its own area. For the most part, this is
 accomplished by dependency injection and ensuring that the component is using interfaces to
 interact with other components. 

AttributeDefinition
name			centralAsyncErrorHandler
dmdID			101
type			Boolean
description		Indicates that a controller is the target for centralized handling of asyncronous
 code loading errors.


//AttributeDefinition
//name			mandatoryStyle
//dmdID			89
//type			String
//description		The style to be used to indicate that a field is mandatory. How this is used
// will depend on the implementation of FieldEditors that are being used.



//AttributeDefinition
//name			triggersAction
//dmdID			73
//type			MVWAction
//description		Indicates the MVWAction to be associated with a menu entry, button or
//other UI component.

//AttributeDefinition
//name			dependsOnMVW
//dmdID			0
//type			MVWConfig
//valueType		MULTI
//description		This attribute allows and MVWConfig to refer to other configurations
// on which it depends.
 
//AttributeDefinition
//name 			definesEvent
//dmdID			1
//type 			MVWEvent
//valueType		MULTI
//description 	This attributes holds a list of MVWEvent names that are
// defined by MVWControllers. A particular event must be defined only once;
// but it can be emitted and handled by many different components.

//AttributeDefinition
//name			definedBy
//dmdID			4
//type			String
//valueType		MULTI
//description		This attribute indicates which controller defines an event.

//AttributeDefinition
//name			emittedBy
//dmdID			5
//type			String
//valueType		MULTI
//description		This attribute is populated automatically on MVWEvent objects
// as the MVW definitions are read. Any MVWController or MVWView that emits an event
// will be added to this attribute. This helps with documentation.
 
//AttributeDefinition
//name			handledBy
//dmdID			6
//type			String
//valueType		MULTI
//description		This attribute is populated automatically on MVWEvent objects
// as the MVW definitions are read. Any MVWController or MVWView that handles an event
// will be added to this attribute. This helps with documentation.
 
//AttributeDefinition
//name			controllers
//dmdID			7
//type			MVWController
//valueType		MULTI
//description		The controllers attribute refers to MVWControllers that comprise an 
// MVWApplication.
// 
////AttributeDefinition
////name			registryItem
////type            MVWRegistryItem
////isMultiValued	true
////description		In ExtGWT, the Registry provides global access to objects
//// by name. The registryItem attribute is composed of a name for the registry item
//// as well as the fully qualified name of the class of object that's associated
//// with the entry. The convention for naming items is to use the name of component
//// that creates the entry followed by 
//
//AttributeDefinition
//name			userDataType
//dmdID			8
//type            String
//description		In ExtGWT, Events can also have user data associated with them. That is,
// you would call Dispatcher.forwardEvent(AppEvents.Init,someuserData). By specifying 
// eventDataType, the Dark Matter Generator will create appropriately typed convenience
// functions to forward and receive the event and its user data. The value for this 
// attribute should be the fully qualified name of the class you're passing with the event.
// <P>
// This attribute is also used when specified the data type of an MVWRegistryItem
//
//AttributeDefinition
//name            eventDataType
//dmdID			9
//type            String
//description		The fully qualified name of the class that a particular server event
// contains. The class must be an auto generated DMO.
//
//AttributeDefinition
//name 			handlesServerEvent
//dmdID			10
//type 			MVWServerEvent
//valueType		MULTI
//description 	This attributes holds a list of MVWServerEvent names that are
// handled by MVWControllers or MVWViews. Controllers and Views that handle server
// events are automatically registered with the DMMVWEventController and are called
// when they're interested in are received.
// 
//AttributeDefinition
//name			createsRegistryItem
//dmdID			11
//type			MVWRegistryItem
//valueType		MULTI
//description		A reference to a registry item that is created by a controller or view.
//
//AttributeDefinition
//name			usesRegistryItem
//dmdID			12
//type			MVWRegistryItem
//valueType		MULTI
//description		A reference to a registry item used by a controller or view.
//
//AttributeDefinition
//name			prefix
//dmdID			13
//type			String
//description		This attribute defines a prefix used by the overall application
// or a controller to indicate the events or registry items that belong to it.
//
//AttributeDefinition
//name			controlsView
//dmdID			14
//type			MVWView
//valueType		MULTI
//description		Indicates an MVWView that is controlled by an MVWController
//
//AttributeDefinition
//name			controlsMultiView
//dmdID			15
//type			MVWMultiView
//valueType		MULTI
//description		Indicates an MVWMultiView that is controlled by an MVWController
//
//AttributeDefinition
//name			definedInMVWConfig
//dmdID			16
//type			MVWConfig
//description		All MVWControllers have to know what config they were defined in
// so that when the overall application is built, the MVWApplication knows how to
// instantiate the controllers that make up the application.
// 
//AttributeDefinition
//name			isHistoryEvent
//dmdID			17
//type			Boolean
//description		When set to true for an MVWEvent, the event is flagged as a history
// event within the Dispatcher.
//
//AttributeDefinition
//name			parentController
//dmdID			18
//type			MVWController
//description		Controllers can be arranged in a hierarchy. If you want to create that 
// hierarchy, simply indicate which MVWController is to be your parent. The MVW generation
// framework will take care of instantiating the controllers in the appropriate order.
// 
////AttributeDefinition
////name			firesEvent
////dmdID			19
////type			MVWEvent
////description		Indicates that an MVWView fires the specified event. When a View fires
//// an event, it is NOT sent via the Dispatcher. Rather, it is propagated up the hierarchy
//// of controllers by which the View is controlled.
// 
//AttributeDefinition
//name			userDataCollection
//dmdID			20
//type			String
//description		The fully qualified name of the collection type to be used when passing
// the user data e.g. java.util.List.
//
//AttributeDefinition
//name			userDataGenericSpec
//dmdID			21
//type			String
//description		If the userDataCollection is a Map of some type, this attribute would
// indicate the generic arguments to be provided for the Map instance e.g. <String,MyData>
// In the case where the collection is just a list, the generation code knows to just
// use the userDataType as the generic argument.
// 
//AttributeDefinition
//name			startEvents
//dmdID			22
//valueType		MULTI
//type			MVWEvent
//description		Indicates the events that should be dispatched when the application
// is told to start.
//
//AttributeDefinition
//name			addToMenu
//dmdID			23
//type			MVWMenu
//description		Indicates the menu to which an MVWMenuItem should be added.
//
//AttributeDefinition
//name			alwaysEnabled
//dmdID			24
//type			Boolean
//description		Indicates if the item is always enabled. If not, there will be a
// method generated that is called before the menu is shown to determine if the item
// is enabled/disabled.
//
//AttributeDefinition
//name			menuOrder
//dmdID			25
//type			Integer
////type			String
//description		Indicates the lexicographic order in which a sub menu or menu item
// should be displayed in the menu. How you decide to specify this order is up to you.
// For instance, you might specify the orders as integer based strings e.g. 001, 100,
// 150, 151.
// 
//AttributeDefinition
//name			triggersAction
//dmdID			26
//type			MVWAction
//description		Indicates the MVWAction to be associated with a menu entry, button or
// other UI component.
//
//AttributeDefinition
//name			definesAction
//dmdID			27
//valueType		MULTI
//type			MVWAction
//description		Indicates that the controller defines the specified action. This attribute
// is auto populated by the MVWDefinitionManager based on the associatedController of an action.
//
//AttributeDefinition
//name			definesMenu
//dmdID			28
//valueType		MULTI
//type			MVWMenu
//description		Indicates that the controller defines the specified menu. This attribute
// is auto populated by the MVWDefinitionManager based on the associatedController of a menu.
//
//AttributeDefinition
//name			definesMenuItem
//dmdID			29
//valueType		MULTI
//type			MVWMenuItem
//description		Indicates that the controller defines the specified menu item. This attribute
// is auto populated by the MVWDefinitionManager based on the associatedController of a menu item.
//
//AttributeDefinition
//name			definesMenuSeparator
//dmdID			30
//valueType		MULTI
//type			MVWMenuSeparator
//description		Indicates that the controller defines the specified menu separator. This attribute
// is auto populated by the MVWDefinitionManager based on the associatedController of a menu separator.
//
//AttributeDefinition
//name			associatedController
//dmdID			31
//type			MVWController
//description		Indicates that something is associated with the specified controller.
//
//AttributeDefinition
//name			useForModelClass
//dmdID			32
//type			String
//description		Indicates the fully qualified name of the DMO class on which
// a popup menu should be defined.
//
//AttributeDefinition
//name			displayLabel
//dmdID			33
//type			String
//description		The label to be displayed on something.
//
//AttributeDefinition
//name            customRender
//dmdID			34
//type            Boolean
//description     Indicates if you want to be able to custom render your menu or menu item.
// If so, an abstract class will be generated to represent the component and you will have
// create a derivative in your extended folder to provide the required behaviour.


