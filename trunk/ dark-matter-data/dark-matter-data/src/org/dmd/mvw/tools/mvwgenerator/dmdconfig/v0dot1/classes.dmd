ClassDefinition
name 			MvwDefinition
classType   	ABSTRACT
useWrapperType	EXTENDED
isNamedBy		camelCaseName
must			camelCaseName
must			definedInModule
may         	file
may        		lineNumber
may         	description
description		The MvwDefinition class provide a common base for all MVW definition
 classes.

//ClassDefinition
//name 			MvwConfig
//derivedFrom		MvwDefinition
//classType   	STRUCTURAL
//useWrapperType	EXTENDED
//isNamedBy		camelCaseName
//must			camelCaseName
//must			genPackage
//may         	dependsOnMvw
//description The MvwConfig class is stored in a file with a .mvw suffix and contains
// various Model View Whatever (MVW) definitions. The name of the MvwConfig can be
// referred to via the dependsOnMvw attribute so that MVW definitions defined elsewhere
// can be used.

//ClassDefinition
//name			MvwEvent
//classType       ABSTRACT
//useWrapperType	EXTENDED
//derivedFrom		MvwDefinition
//isNamedBy		eventName
//must			eventName
//may				description
//may             argVector
//may             userDataImport
//description		The MvwEvent is an autonomous definition of some kind of event that is fired
// and handled by components in a Model-View-Whatever application. Specification of an MvwEvent
// will result the creation of a GwtEvent.Type<H> class and its associated EventHandler class.

//ClassDefinition
//name			LocalEvent
//classType       STRUCTURAL
//useWrapperType	EXTENDED
//derivedFrom		MvwEvent
//isNamedBy		eventCause
//must			eventCause
//description		The LocalEvent is fired by producers that want to define a tightly bound
// event interface so that consumers can register just for events that the producer fires.
 
//ClassDefinition
//name			BroadcastEvent
//classType       STRUCTURAL
//useWrapperType	EXTENDED
//derivedFrom		MvwEvent
//isNamedBy		eventName
//must			eventName
//description		The BroadcastEvent is fired by producers that want to publish an event on
// the Event Bus.

ClassDefinition
name			Event
classType       STRUCTURAL
useWrapperType	EXTENDED
derivedFrom		MvwDefinition
isNamedBy		eventName
must			eventName
may             argVector
may				importThis
description		The specification of an Event definition will result in the creation of
 a gwtEvent and its associated handler interface.


//ClassDefinition
//name			SingleDMOSelectedEvent
//classType       STRUCTURAL
//useWrapperType	EXTENDED
//derivedFrom		BroadcastEvent
//isNamedBy		eventName
//must			eventName
//must			selectedDMO
//description		The SingleDMOSelectedEvent is a BroadcastEvent that indicates that a single 
// Dark Matter Object has been selected, usually in an MvwView component. By defining an event
// of this type, your component will have the event added to its event interface and, when that
// event is fired, the framework will also fire a generic DMO event that is handled by the 
// MvwSelectionManager component. 
//
//ClassDefinition
//name			MultipleDMOSelectedEvent
//classType       STRUCTURAL
//useWrapperType	EXTENDED
//derivedFrom		BroadcastEvent
//isNamedBy		eventName
//must			eventName
//must			selectedDMO
//description		The MultipleDMOSelectedEvent is a BroadcastEvent that indicates that multiple
// DMOs have been selected. As with the single select event, a generic DMO event that is
// handled by the MvwSelectionManager is fired as well.

ClassDefinition
name			Module
classType       STRUCTURAL
useWrapperType	EXTENDED
derivedFrom		MvwDefinition
isNamedBy		moduleName
must			moduleName
must			genPackage
may				dependsOnModule
may				dependsOnSchema
description		The Module is used to define a reusable set of MVW functionality which
 can be referred to in Application definitions or other Module definitions. 

ClassDefinition
name			View
classType       STRUCTURAL
derivedFrom		MvwDefinition
useWrapperType	EXTENDED
isNamedBy		viewName
must			viewName
may				useBaseClass
may				local
may				broadcast
may				broadcastOnly
may				viewImport
may				presenterImport
may				sharedImport
//
may				useRunContextItem
//
may				widget
may				extendsInterface
//may				broadcast
//may				broadcastOnly
may				presenterMethod
may				viewMethod
may				displayDMO
may				selectEvent
may				deleteEvent
may				clickEvent
may				modifyEvent
may				createEvent
description		The View is used to define the aspects of two kinds of interfaces that
 define the functionality provided by a view of a model; the event interface and the 
 data interface.

ClassDefinition
name			Component
classType       ABSTRACT
useWrapperType	EXTENDED
derivedFrom		MvwDefinition
isNamedBy		componentName
must			componentName
may				firesEvent
may				handlesEvent
may				useSchema
may				useBaseClass
may				useRunContextItem
may				sendsGetRequest
may				sendsDeleteRequest
may				sendsSetRequest
may				sendsCreateRequest
may				sendsActionRequest
may				sendsLoginRequest
may				sendsLogoutRequest
may				subpackage
description		The Component is an abstract base for classes that define the building blocks
 of Applications. The primary feature of an Component is that it fires and/or handles events.
 Beyond that, a component can be whatever you require it to be. A variety of derived component types
 provide more focussed behavioural units.
 <p />
 Many of the classes generated by MVW must be extended in order to provide the actual
 behaviour of your application e.g. Controllers, Views, Presenters etc. Activities must
 also be extended to provide your behaviour, however, Activities are also referred to
 by generated code and must be in a known location. By default, the classes that extend
 the generated activity class will reside in the 'extended' package that lies beneath the
 genPackage specified for your module i.e. if your gen package is com.mine, then the 
 derived activity classes are expected to be in com.mine.extended. If you want to place
 these classes in a subpackage beneath extended, use the subpackage attribute to indicate
 the package name e.g. if subpackage is defined as 'activities', your activity implementation
 class will be expected to reside in com.mine.extended.activities.

ClassDefinition
name			Controller
classType       STRUCTURAL
useWrapperType	EXTENDED
derivedFrom		Component
isNamedBy		controllerName
must			controllerName
may				centralDMPErrorHandler
may				centralRPCErrorHandler
may				addedToRunContext
description		The Controller represents a behavioural component that lives throughout
 the entire lifecycle of an WebApplication or WebSite. Generally, it manages the Presenters
 and Views that are displayed, but may also provide behind the scenes management of things
 like communications, security, menu structure etc. Controllers do not implement Presenter
 interfaces i.e. they do not interact directly with Views; that is the role of Presenters.
 <p />
 Because of their implied lifetime, Controllers are made part of the overall RunContext for
 an application and are constructed during initialization of the application. There is no
 need to instantiate Controllers separately. The RunContextItem created for a controller
 has the same name as the Controller itself.
 <p />
 Controllers should not communicate with other Controllers directly; this type of communication
 should be performed using events. So, although it is possible to get the handle to another
 Controller via the RunContext, it is discouraged.

ClassDefinition
name			Presenter
classType       STRUCTURAL
useWrapperType	EXTENDED
derivedFrom		Component
isNamedBy		presenterName
must			presenterName
must			managesView
description		The Presenter is a behavioural component that manages one or more Views and
 thus implements the Presenter interface of any View it manages. Presenters populate and
 potentially update Views with data. This will often involve interacting with the communications
 interface(s) associated with an application. If a View allows the creation or alteration
 of data, those behaviours are usually handled directly by the View's Presenter.

//ClassDefinition
//name			DefaultPlace
//classType       STRUCTURAL
//useWrapperType	EXTENDED
//derivedFrom		MvwDefinition
//isNamedBy		placeName
//must			placeName
//may				placePrefix
//must			runsActivity

ClassDefinition
name			Place
classType       STRUCTURAL
useWrapperType	EXTENDED
derivedFrom		MvwDefinition
isNamedBy		placeName
must			placeName
must			placePrefix
must			runsActivity

ClassDefinition
name			SubPlace
classType       STRUCTURAL
useWrapperType	EXTENDED
derivedFrom		Place
isNamedBy		placeName
must			placeName
must			placePrefix
must			parentPlace

ClassDefinition
name			Activity
classType       STRUCTURAL
useWrapperType	EXTENDED
derivedFrom		Component
isNamedBy		activityName
must			activityName
may				useBaseClass
may				abstractActivity
may				useRunContextItem 
may				managesView
description		If you are making use of Places, you'll define an Activity for
 each of them; all activities are derived from com.google.gwt.app.place.Activity. If you
 have common functionality that you wish to use for your Activity classes, implement
 it in a class derived from com.google.gwt.app.place.Activity and specify that class
 in the useBaseClass attribute of your defined Activity.
 <p />
 Activities are meant to be short-lived, disposable entities that run in a particular Place.
 However, if you are building an application, it may be that you have a single Place and
 that all behaviour takes place within the guise of a single Activity.
 <p />
 If the Activity manages a view, it will be generated as implementing the View's 
 presenter interface.
 

ClassDefinition
name			RunContextItem
classType		STRUCTURAL
derivedFrom		MvwDefinition
useWrapperType	EXTENDED
isNamedBy		itemName
must			itemName
must			useClass
must			construction
may				itemOrder
may				contextImpl
may				importThis
description		The RunContextItem allows for the generation of an overall RunContext for
 a WebApplication or WebSite.
 
ClassDefinition
name			WebApplication
classType		STRUCTURAL
derivedFrom		MvwDefinition
useWrapperType	EXTENDED
isNamedBy		appName
must			appName
must			defaultPlace
may				usesController
description		The WebApplication definition allows for the definition of the superstructure
 for an application, basically it's the definition of the overall application controller. 
