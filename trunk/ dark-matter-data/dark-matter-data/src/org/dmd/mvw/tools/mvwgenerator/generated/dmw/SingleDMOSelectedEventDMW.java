package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import org.dmd.dmc.*;                                                                  // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                                // Primitive type
import org.dmd.dms.*;                                                                  // Always 2
import org.dmd.dms.generated.dmw.ClassDefinitionDMW;                                   // Is reference type aux
import org.dmd.dms.generated.types.ClassDefinitionREF;                                 // To support getMVCopy() for REFs
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                  // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.BroadcastEvent;                         // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.SingleDMOSelectedEvent;                 // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.SingleDMOSelectedEventDMO;         // Class not auxiliary or abstract

/**
 * The SingleDMOSelectedEvent is a BroadcastEvent that indicates that a
 * single  Dark Matter Object has been selected, usually in an MvwView
 * component. By defining an event of this type, your component will have the
 * event added to its event interface and, when that event is fired, the
 * framework will also fire a generic DMO event that is handled by the 
 * MvwSelectionManager component.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class SingleDMOSelectedEventDMW extends BroadcastEvent implements DmcNamedObjectIF {

    public SingleDMOSelectedEventDMW() {
        super(new SingleDMOSelectedEventDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._SingleDMOSelectedEvent);
    }

    public SingleDMOSelectedEventDMW(DmcTypeModifierMV mods) {
        super(new SingleDMOSelectedEventDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._SingleDMOSelectedEvent);
    }

    public SingleDMOSelectedEvent getModificationRecorder(){
        SingleDMOSelectedEvent rc = new SingleDMOSelectedEvent();
        rc.setEventCause(getEventCause());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public SingleDMOSelectedEventDMW(SingleDMOSelectedEventDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._SingleDMOSelectedEvent);
    }

    public SingleDMOSelectedEventDMO getDMO() {
        return((SingleDMOSelectedEventDMO) core);
    }

    protected SingleDMOSelectedEventDMW(SingleDMOSelectedEventDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((SingleDMOSelectedEventDMO) core).getEventCause());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((SingleDMOSelectedEventDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof SingleDMOSelectedEventDMW){
            return( getObjectName().equals( ((SingleDMOSelectedEventDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getEventCause(){
        return(((SingleDMOSelectedEventDMO) core).getEventCause());
    }

    /**
     * Sets eventCause to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setEventCause(Object value) throws DmcValueException {
        ((SingleDMOSelectedEventDMO) core).setEventCause(value);
    }

    /**
     * Sets eventCause to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setEventCause(CamelCaseName value){
        ((SingleDMOSelectedEventDMO) core).setEventCause(value);
    }

    /**
     * Removes the eventCause attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remEventCause(){
        ((SingleDMOSelectedEventDMO) core).remEventCause();
    }

    /**
     * @return A ClassDefinitionDMW object.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1030)
    public ClassDefinitionDMW getSelectedDMO(){
        ClassDefinitionREF ref = ((SingleDMOSelectedEventDMO) core).getSelectedDMO();
        if (ref == null)
            return(null);
        
        return((ClassDefinitionDMW)ref.getObject().getContainer());
    }

    /**
     * Sets the selectedDMO to the specified value.
     * @param value A value compatible with ClassDefinitionREF
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1075)
    public void setSelectedDMO(ClassDefinitionDMW value) {
        ((SingleDMOSelectedEventDMO) core).setSelectedDMO(value.getDMO());
    }

    /**
     * Removes the selectedDMO attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remSelectedDMO(){
        ((SingleDMOSelectedEventDMO) core).remSelectedDMO();
    }


}
