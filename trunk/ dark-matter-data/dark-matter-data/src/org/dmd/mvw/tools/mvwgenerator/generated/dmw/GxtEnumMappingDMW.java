package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.formatImports(BaseDMWGeneratorNew.java:950)
import java.util.HashSet;                                                      // To support getMVCopy()
import java.util.Iterator;                                                     // To support getMVCopy()
import org.dmd.dmc.*;                                                          // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                        // Primitive type
import org.dmd.dms.*;                                                          // Always 2
import org.dmd.dms.generated.dmo.MetaDMSAG;                                    // Required for MODREC constructor
import org.dmd.dms.generated.dmw.StringIterableDMW;                            // For multi-valued String
import org.dmd.dms.generated.types.DmcTypeModifierMV;                          // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                  // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.forms.GxtEnumMapping;           // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.GxtEnumMappingDMO;         // Class not auxiliary or abstract
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                  // Attribute from mvw schema

/**
 * The GxtEnumMapping class allows for generation of a set of static data
 * instances that represent the values from the specified enumeration (type).
 * NOTE: this mechanism is only  useful if you are using the Sencha's GXT
 * widget set. <p /> Enum values are comprised of an integer, a name, a
 * description and optionally, a label as follows - int name description :
 * label. If you specify useNameAsLabel, the uppercase name value of the enum
 * is used to display the value of the. If useNameAsLabel is not specified,
 * the label will be used if it has been specified. Otherwise, the
 * description is used.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:364)
 */
abstract public class GxtEnumMappingDMW extends MvwDefinition implements DmcNamedObjectIF {

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:441)
    public GxtEnumMappingDMW() {
        super(new GxtEnumMappingDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._GxtEnumMapping);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:447)
    public GxtEnumMappingDMW(DmcTypeModifierMV mods) {
        super(new GxtEnumMappingDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._GxtEnumMapping);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:489)
    public GxtEnumMapping getModificationRecorder(){
        GxtEnumMapping rc = new GxtEnumMapping();
        rc.setMappingName(getMappingName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:510)
    public GxtEnumMappingDMW(GxtEnumMappingDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._GxtEnumMapping);
    }

    public GxtEnumMapping cloneIt() {
        GxtEnumMapping rc = new GxtEnumMapping();
        rc.setDmcObject(getDMO().cloneIt());
        return(rc);
    }

    public GxtEnumMappingDMO getDMO() {
        return((GxtEnumMappingDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGeneratorNew.dumpWrapper(BaseDMWGeneratorNew.java:527)
    protected GxtEnumMappingDMW(GxtEnumMappingDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.getAccessFunctions(BaseDMWGeneratorNew.java:977)
    public CamelCaseName getObjectName(){
        return(((GxtEnumMappingDMO) core).getMappingName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((GxtEnumMappingDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof GxtEnumMappingDMW){
            return( getObjectName().equals( ((GxtEnumMappingDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1133)
    public Boolean isUseNameAsLabel(){
        return(((GxtEnumMappingDMO) core).isUseNameAsLabel());
    }

    /**
     * Sets useNameAsLabel to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1204)
    public void setUseNameAsLabel(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setUseNameAsLabel(value);
    }

    /**
     * Sets useNameAsLabel to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1213)
    public void setUseNameAsLabel(Boolean value){
        ((GxtEnumMappingDMO) core).setUseNameAsLabel(value);
    }

    /**
     * Removes the useNameAsLabel attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1239)
    public void remUseNameAsLabel(){
        ((GxtEnumMappingDMO) core).remUseNameAsLabel();
    }

    /**
     * @return The number of String items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1291)
    public int getSkipEnumValueSize(){
        return(((GxtEnumMappingDMO) core).getSkipEnumValueSize());
    }

    /**
     * @return true if there are no StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1299)
    public boolean getSkipEnumValueIsEmpty(){
        if (((GxtEnumMappingDMO) core).getSkipEnumValueSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any StringDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1309)
    public boolean getSkipEnumValueHasValue(){
        if (((GxtEnumMappingDMO) core).getSkipEnumValueSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1631)
    public StringIterableDMW getSkipEnumValueIterable(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__skipEnumValue);
        if (attr == null)
            return(StringIterableDMW.emptyList);
        
        return(new StringIterableDMW(((GxtEnumMappingDMO) core).getSkipEnumValue()));
    }

    /**
     * Adds another skipEnumValue value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1657)
    public void addSkipEnumValue(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).addSkipEnumValue(value);
    }

    /**
     * Adds another skipEnumValue value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1667)
    public void addSkipEnumValue(String value){
        ((GxtEnumMappingDMO) core).addSkipEnumValue(value);
    }

    /**
     * Returns true if the collection contains the skipEnumValue value.
     * @param value A value compatible with String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1724)
    public boolean skipEnumValueContains(String value){
        return(((GxtEnumMappingDMO) core).skipEnumValueContains(value));
    }

    /**
     * @return A COPY of the collection of String objects.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1764)
    @SuppressWarnings("unchecked")
    public HashSet<String> getSkipEnumValueCopy(){
        DmcAttribute<?> attr = core.get(MvwDMSAG.__skipEnumValue);
        if (attr == null)
            return(new HashSet<String>());
        
        HashSet<String> rc = new HashSet<String>(attr.getMVSize());
        
        Iterator<String> it = (Iterator<String>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a skipEnumValue value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1791)
    public void delSkipEnumValue(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).delSkipEnumValue(value);
    }

    /**
     * Deletes a skipEnumValue value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1800)
    public void delSkipEnumValue(String value){
        ((GxtEnumMappingDMO) core).delSkipEnumValue(value);
    }

    /**
     * Removes the skipEnumValue attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatMV(BaseDMWGeneratorNew.java:1812)
    public void remSkipEnumValue(){
        ((GxtEnumMappingDMO) core).remSkipEnumValue();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1133)
    public CamelCaseName getMappingName(){
        return(((GxtEnumMappingDMO) core).getMappingName());
    }

    /**
     * Sets mappingName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1204)
    public void setMappingName(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setMappingName(value);
    }

    /**
     * Sets mappingName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1213)
    public void setMappingName(CamelCaseName value){
        ((GxtEnumMappingDMO) core).setMappingName(value);
    }

    /**
     * Removes the mappingName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1239)
    public void remMappingName(){
        ((GxtEnumMappingDMO) core).remMappingName();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1133)
    public String getEnumName(){
        return(((GxtEnumMappingDMO) core).getEnumName());
    }

    /**
     * Sets enumName to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1204)
    public void setEnumName(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setEnumName(value);
    }

    /**
     * Sets enumName to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1213)
    public void setEnumName(String value){
        ((GxtEnumMappingDMO) core).setEnumName(value);
    }

    /**
     * Removes the enumName attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1239)
    public void remEnumName(){
        ((GxtEnumMappingDMO) core).remEnumName();
    }

    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1133)
    public String getUnsetValue(){
        return(((GxtEnumMappingDMO) core).getUnsetValue());
    }

    /**
     * Sets unsetValue to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1204)
    public void setUnsetValue(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setUnsetValue(value);
    }

    /**
     * Sets unsetValue to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1213)
    public void setUnsetValue(String value){
        ((GxtEnumMappingDMO) core).setUnsetValue(value);
    }

    /**
     * Removes the unsetValue attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGeneratorNew.formatSV(BaseDMWGeneratorNew.java:1239)
    public void remUnsetValue(){
        ((GxtEnumMappingDMO) core).remUnsetValue();
    }


}
