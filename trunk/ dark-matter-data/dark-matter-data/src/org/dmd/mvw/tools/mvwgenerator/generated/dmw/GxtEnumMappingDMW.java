package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:936)
import org.dmd.dmc.*;                                                          // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                        // Primitive type
import org.dmd.dms.*;                                                          // Always 2
import org.dmd.dms.generated.dmo.MetaDMSAG;                                    // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeModifierMV;                          // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                  // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.forms.GxtEnumMapping;           // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.GxtEnumMappingDMO;         // Class not auxiliary or abstract
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                  // Attribute from mvw schema

/**
 * The GxtEnumMapping class allows for generation of a set of static data
 * instances that represent the values from the specified enumeration (type).
 * NOTE: this mechanism is only  useful if you are using the Sencha's Gxt
 * widget set.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:349)
 */
abstract public class GxtEnumMappingDMW extends MvwDefinition implements DmcNamedObjectIF {

    public GxtEnumMappingDMW() {
        super(new GxtEnumMappingDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._GxtEnumMapping);
    }

    public GxtEnumMappingDMW(DmcTypeModifierMV mods) {
        super(new GxtEnumMappingDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._GxtEnumMapping);
    }

    public GxtEnumMapping getModificationRecorder(){
        GxtEnumMapping rc = new GxtEnumMapping();
        rc.setMappingName(getMappingName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    public GxtEnumMappingDMW(GxtEnumMappingDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._GxtEnumMapping);
    }

    public GxtEnumMappingDMO getDMO() {
        return((GxtEnumMappingDMO) core);
    }

    protected GxtEnumMappingDMW(GxtEnumMappingDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:964)
    public CamelCaseName getObjectName(){
        return(((GxtEnumMappingDMO) core).getMappingName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((GxtEnumMappingDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof GxtEnumMappingDMW){
            return( getObjectName().equals( ((GxtEnumMappingDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1104)
    public Boolean isUseNameAsLabel(){
        return(((GxtEnumMappingDMO) core).isUseNameAsLabel());
    }

    /**
     * Sets useNameAsLabel to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1151)
    public void setUseNameAsLabel(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setUseNameAsLabel(value);
    }

    /**
     * Sets useNameAsLabel to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1160)
    public void setUseNameAsLabel(Boolean value){
        ((GxtEnumMappingDMO) core).setUseNameAsLabel(value);
    }

    /**
     * Removes the useNameAsLabel attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1186)
    public void remUseNameAsLabel(){
        ((GxtEnumMappingDMO) core).remUseNameAsLabel();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1104)
    public CamelCaseName getMappingName(){
        return(((GxtEnumMappingDMO) core).getMappingName());
    }

    /**
     * Sets mappingName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1151)
    public void setMappingName(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setMappingName(value);
    }

    /**
     * Sets mappingName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1160)
    public void setMappingName(CamelCaseName value){
        ((GxtEnumMappingDMO) core).setMappingName(value);
    }

    /**
     * Removes the mappingName attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1186)
    public void remMappingName(){
        ((GxtEnumMappingDMO) core).remMappingName();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1104)
    public String getEnumName(){
        return(((GxtEnumMappingDMO) core).getEnumName());
    }

    /**
     * Sets enumName to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1151)
    public void setEnumName(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setEnumName(value);
    }

    /**
     * Sets enumName to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1160)
    public void setEnumName(String value){
        ((GxtEnumMappingDMO) core).setEnumName(value);
    }

    /**
     * Removes the enumName attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1186)
    public void remEnumName(){
        ((GxtEnumMappingDMO) core).remEnumName();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1104)
    public String getUnsetValue(){
        return(((GxtEnumMappingDMO) core).getUnsetValue());
    }

    /**
     * Sets unsetValue to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1151)
    public void setUnsetValue(Object value) throws DmcValueException {
        ((GxtEnumMappingDMO) core).setUnsetValue(value);
    }

    /**
     * Sets unsetValue to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1160)
    public void setUnsetValue(String value){
        ((GxtEnumMappingDMO) core).setUnsetValue(value);
    }

    /**
     * Removes the unsetValue attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1186)
    public void remUnsetValue(){
        ((GxtEnumMappingDMO) core).remUnsetValue();
    }


}
