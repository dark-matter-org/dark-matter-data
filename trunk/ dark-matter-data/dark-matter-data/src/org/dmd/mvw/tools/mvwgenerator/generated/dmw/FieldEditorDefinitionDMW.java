package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:936)
import org.dmd.dmc.*;                                                                 // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                               // Primitive type
import org.dmd.dms.*;                                                                 // Always 2
import org.dmd.dms.generated.dmo.MetaDMSAG;                                           // Required for MODREC constructor
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                 // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                         // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.forms.FieldEditorDefinition;           // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.FieldEditorDefinitionDMO;         // Class not auxiliary or abstract
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.MvwDMSAG;                         // Attribute from mvw schema

/**
 * The FieldEditor class allows for the definition of implementation specific
 * field editors. The specified class must implement the
 * org.dmd.mvw.client.mvwforms.interfaces.FieldInstanceIF interface so that
 * it can be initialized by the FormBinder that is generated for each
 * FormBindingDefinition instance and so that it can interact with the
 * AttributeTracker and the SetRequestGenerator.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:349)
 */
abstract public class FieldEditorDefinitionDMW extends MvwDefinition implements DmcNamedObjectIF {

    public FieldEditorDefinitionDMW() {
        super(new FieldEditorDefinitionDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._FieldEditorDefinition);
    }

    public FieldEditorDefinitionDMW(DmcTypeModifierMV mods) {
        super(new FieldEditorDefinitionDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._FieldEditorDefinition);
    }

    public FieldEditorDefinition getModificationRecorder(){
        FieldEditorDefinition rc = new FieldEditorDefinition();
        rc.setEditorName(getEditorName());
        rc.setModifier(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    public FieldEditorDefinitionDMW(FieldEditorDefinitionDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._FieldEditorDefinition);
    }

    public FieldEditorDefinitionDMO getDMO() {
        return((FieldEditorDefinitionDMO) core);
    }

    protected FieldEditorDefinitionDMW(FieldEditorDefinitionDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:964)
    public CamelCaseName getObjectName(){
        return(((FieldEditorDefinitionDMO) core).getEditorName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((FieldEditorDefinitionDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof FieldEditorDefinitionDMW){
            return( getObjectName().equals( ((FieldEditorDefinitionDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1104)
    public CamelCaseName getEditorName(){
        return(((FieldEditorDefinitionDMO) core).getEditorName());
    }

    /**
     * Sets editorName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1151)
    public void setEditorName(Object value) throws DmcValueException {
        ((FieldEditorDefinitionDMO) core).setEditorName(value);
    }

    /**
     * Sets editorName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1160)
    public void setEditorName(CamelCaseName value){
        ((FieldEditorDefinitionDMO) core).setEditorName(value);
    }

    /**
     * Removes the editorName attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1186)
    public void remEditorName(){
        ((FieldEditorDefinitionDMO) core).remEditorName();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1104)
    public String getUseClass(){
        return(((FieldEditorDefinitionDMO) core).getUseClass());
    }

    /**
     * Sets useClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1151)
    public void setUseClass(Object value) throws DmcValueException {
        ((FieldEditorDefinitionDMO) core).setUseClass(value);
    }

    /**
     * Sets useClass to the specified value.
     * @param value String
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1160)
    public void setUseClass(String value){
        ((FieldEditorDefinitionDMO) core).setUseClass(value);
    }

    /**
     * Removes the useClass attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1186)
    public void remUseClass(){
        ((FieldEditorDefinitionDMO) core).remUseClass();
    }


}
