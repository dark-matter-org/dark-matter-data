//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2011 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.mvw.tools.mvwgenerator.generated.types;

import java.io.Serializable;
import org.dmd.dmc.DmcInputStreamIF;
import org.dmd.dmc.DmcOutputStreamIF;
import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcValueException;
import org.dmd.dmc.DmcAttribute;
@SuppressWarnings("serial")
/**
 * The DmcTypeImplAndClass class.
 * This code was auto-generated by the createmeta utility and shouldn't be alterred
 * manually.
 * Generated from: org.dmd.dms.util.GenUtility.dumpComplexTypeDmcType(GenUtility.java:2705)
 *    Called from: Called from: org.dmd.dms.util.ComplexTypeFormatter.dumpComplexType(ComplexTypeFormatter.java:291)
 */
abstract public class DmcTypeImplAndClass extends DmcAttribute<ImplAndClass> implements Serializable {

    /**
     * Default constructor.
     */
    public DmcTypeImplAndClass(){
    }

    /**
     * Default constructor.
     */
    public DmcTypeImplAndClass(DmcAttributeInfo ai){
        super(ai);
    }

    protected ImplAndClass typeCheck(Object value) throws DmcValueException {
        ImplAndClass rc = null;

        if (value instanceof ImplAndClass){
            rc = (ImplAndClass)value;
        }
        else if (value instanceof String){
            rc = new ImplAndClass((String)value);
        }
        else{
            throw(new DmcValueException("Object of class: " + value.getClass().getName() + " passed where object compatible with ImplAndClass expected."));
        }
        return(rc);
    }

    /**
     * Returns a clone of a value associated with this type.
     */
    public ImplAndClass cloneValue(ImplAndClass val){
        return(new ImplAndClass(val));
    }

    /**
     * Writes a ImplAndClass.
     */
    @Override
    public void serializeValue(DmcOutputStreamIF dos, ImplAndClass value) throws Exception {
        value.serializeIt(dos);
    }

    /**
     * Reads a ImplAndClass.
     */
    @Override
    public ImplAndClass deserializeValue(DmcInputStreamIF dis) throws Exception {
        ImplAndClass rc = new ImplAndClass();
        rc.deserializeIt(dis);
        return(rc);
    }



}
