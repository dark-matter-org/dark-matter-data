package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import java.util.ArrayList;                                                                // To support getMVCopy()
import java.util.Iterator;                                                                 // To support getMVCopy()
import java.util.TreeSet;                                                                  // To support getMVCopy()
import org.dmd.dmc.*;                                                                      // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                                    // Primitive type
import org.dmd.dms.*;                                                                      // Always 2
import org.dmd.dms.generated.types.DmcTypeModifierMV;                                      // Required for MODREC constructor
import org.dmd.mvw.tools.mvwgenerator.extended.Component;                                  // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.Presenter;                                  // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.extended.RunContextItem;                             // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.extended.View;                                       // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.PresenterDMO;                          // Class not auxiliary or abstract
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                     // For multi-valued containsRunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ViewDMO;                               // For multi-valued containsView
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.GetWithOptionsIterableDMW;             // For multi-valued GetWithOptions
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RequestWithOptionsIterableDMW;         // For multi-valued RequestWithOptions
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW;             // For multi-valued RunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.ViewIterableDMW;                       // For multi-valued View
import org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF;                   // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.generated.types.ViewREF;                             // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.types.GetWithOptions;                                // For multi-valued containsGetWithOptions
import org.dmd.mvw.tools.mvwgenerator.types.RequestWithOptions;                            // For multi-valued containsRequestWithOptions

/**
 * The Presenter is a behavioural component that manages one or more Views
 * and thus implements the Presenter interface of any View it manages.
 * Presenters populate and potentially update Views with data. This will
 * often involve interacting with the communications interface(s) associated
 * with an application. If a View allows the creation or alteration of data,
 * those behaviours are usually handled directly by the View's Presenter.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class PresenterDMW extends Component implements DmcNamedObjectIF {

    public PresenterDMW() {
        super(new PresenterDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Presenter);
    }

    public PresenterDMW(DmcTypeModifierMV mods) {
        super(new PresenterDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Presenter);
    }

    public Presenter getModificationRecorder(){
        Presenter rc = new Presenter();
        rc.setPresenterName(getPresenterName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public PresenterDMW(PresenterDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Presenter);
    }

    public PresenterDMO getDMO() {
        return((PresenterDMO) core);
    }

    protected PresenterDMW(PresenterDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((PresenterDMO) core).getPresenterName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((PresenterDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof PresenterDMW){
            return( getObjectName().equals( ((PresenterDMW) obj).getObjectName()) );
        }
        return(false);
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public String getUseBaseClass(){
        return(((PresenterDMO) core).getUseBaseClass());
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setUseBaseClass(Object value) throws DmcValueException {
        ((PresenterDMO) core).setUseBaseClass(value);
    }

    /**
     * Sets useBaseClass to the specified value.
     * @param value String
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setUseBaseClass(String value){
        ((PresenterDMO) core).setUseBaseClass(value);
    }

    /**
     * Removes the useBaseClass attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remUseBaseClass(){
        ((PresenterDMO) core).remUseBaseClass();
    }

    /**
     * @return The number of RunContextItem items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getUseRunContextItemSize(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__useRunContextItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no RunContextItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getUseRunContextItemIsEmpty(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__useRunContextItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any RunContextItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getUseRunContextItemHasValue(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__useRunContextItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1229)
    public RunContextItemIterableDMW getUseRunContextItemIterable(){
        DmcAttribute attr = ((PresenterDMO) core).get(PresenterDMO.__useRunContextItem);
        if (attr == null)
            return(RunContextItemIterableDMW.emptyList);
        
        return(new RunContextItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another useRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public DmcAttribute<?> addUseRunContextItem(RunContextItem value){
        DmcAttribute<?> attr = ((PresenterDMO) core).addUseRunContextItem(((RunContextItemDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a useRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1258)
    public void delUseRunContextItem(RunContextItem value){
        ((PresenterDMO) core).delUseRunContextItem(value.getDMO());
    }

    /**
     * @return A COPY of the collection of RunContextItem objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1293)
    public TreeSet<RunContextItem> getUseRunContextItemCopy(){
        DmcAttribute<?> attr = ((PresenterDMO) core).get(PresenterDMO.__useRunContextItem);
        if (attr == null)
            return(new TreeSet<RunContextItem>());
        
        TreeSet<RunContextItem> rc = new TreeSet<RunContextItem>();
        
        RunContextItemIterableDMW it = getUseRunContextItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the useRunContextItem attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remUseRunContextItem(){
        ((PresenterDMO) core).remUseRunContextItem();
    }

    /**
     * @return The number of GetWithOptions items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getSendsGetRequestSize(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsGetRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no GetWithOptionsDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getSendsGetRequestIsEmpty(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsGetRequest);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any GetWithOptionsDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getSendsGetRequestHasValue(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsGetRequest);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of GetWithOptions objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public GetWithOptionsIterableDMW getSendsGetRequestIterable(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsGetRequest);
        if (attr == null)
            return(GetWithOptionsIterableDMW.emptyList);
        
        return(new GetWithOptionsIterableDMW(((PresenterDMO) core).getSendsGetRequest()));
    }

    /**
     * Adds another sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addSendsGetRequest(Object value) throws DmcValueException {
        ((PresenterDMO) core).addSendsGetRequest(value);
    }

    /**
     * Adds another sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addSendsGetRequest(GetWithOptions value){
        ((PresenterDMO) core).addSendsGetRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsGetRequest value.
     * @param value A value compatible with GetWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean sendsGetRequestContains(GetWithOptions value){
        return(((PresenterDMO) core).sendsGetRequestContains(value));
    }

    /**
     * @return A COPY of the collection of GetWithOptions objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<GetWithOptions> getSendsGetRequestCopy(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsGetRequest);
        if (attr == null)
            return(new ArrayList<GetWithOptions>());
        
        ArrayList<GetWithOptions> rc = new ArrayList<GetWithOptions>(attr.getMVSize());
        
        Iterator<GetWithOptions> it = (Iterator<GetWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsGetRequest value.
     * @param value The GetWithOptions to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delSendsGetRequest(Object value) throws DmcValueException {
        ((PresenterDMO) core).delSendsGetRequest(value);
    }

    /**
     * Deletes a sendsGetRequest value.
     * @param value The GetWithOptions to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delSendsGetRequest(GetWithOptions value){
        ((PresenterDMO) core).delSendsGetRequest(value);
    }

    /**
     * Removes the sendsGetRequest attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remSendsGetRequest(){
        ((PresenterDMO) core).remSendsGetRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getSendsDeleteRequestSize(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsDeleteRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getSendsDeleteRequestIsEmpty(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsDeleteRequest);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getSendsDeleteRequestHasValue(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsDeleteRequest);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public RequestWithOptionsIterableDMW getSendsDeleteRequestIterable(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsDeleteRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((PresenterDMO) core).getSendsDeleteRequest()));
    }

    /**
     * Adds another sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addSendsDeleteRequest(Object value) throws DmcValueException {
        ((PresenterDMO) core).addSendsDeleteRequest(value);
    }

    /**
     * Adds another sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addSendsDeleteRequest(RequestWithOptions value){
        ((PresenterDMO) core).addSendsDeleteRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsDeleteRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean sendsDeleteRequestContains(RequestWithOptions value){
        return(((PresenterDMO) core).sendsDeleteRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsDeleteRequestCopy(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsDeleteRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsDeleteRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delSendsDeleteRequest(Object value) throws DmcValueException {
        ((PresenterDMO) core).delSendsDeleteRequest(value);
    }

    /**
     * Deletes a sendsDeleteRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delSendsDeleteRequest(RequestWithOptions value){
        ((PresenterDMO) core).delSendsDeleteRequest(value);
    }

    /**
     * Removes the sendsDeleteRequest attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remSendsDeleteRequest(){
        ((PresenterDMO) core).remSendsDeleteRequest();
    }

    /**
     * @return The number of RequestWithOptions items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getSendsSetRequestSize(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsSetRequest);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no RequestWithOptionsDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getSendsSetRequestIsEmpty(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsSetRequest);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any RequestWithOptionsDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getSendsSetRequestHasValue(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsSetRequest);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of RequestWithOptions objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1321)
    public RequestWithOptionsIterableDMW getSendsSetRequestIterable(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsSetRequest);
        if (attr == null)
            return(RequestWithOptionsIterableDMW.emptyList);
        
        return(new RequestWithOptionsIterableDMW(((PresenterDMO) core).getSendsSetRequest()));
    }

    /**
     * Adds another sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1337)
    public void addSendsSetRequest(Object value) throws DmcValueException {
        ((PresenterDMO) core).addSendsSetRequest(value);
    }

    /**
     * Adds another sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void addSendsSetRequest(RequestWithOptions value){
        ((PresenterDMO) core).addSendsSetRequest(value);
    }

    /**
     * Returns true if the collection contains the sendsSetRequest value.
     * @param value A value compatible with RequestWithOptions
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1370)
    public boolean sendsSetRequestContains(RequestWithOptions value){
        return(((PresenterDMO) core).sendsSetRequestContains(value));
    }

    /**
     * @return A COPY of the collection of RequestWithOptions objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1410)
    @SuppressWarnings("unchecked")
    public ArrayList<RequestWithOptions> getSendsSetRequestCopy(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__sendsSetRequest);
        if (attr == null)
            return(new ArrayList<RequestWithOptions>());
        
        ArrayList<RequestWithOptions> rc = new ArrayList<RequestWithOptions>(attr.getMVSize());
        
        Iterator<RequestWithOptions> it = (Iterator<RequestWithOptions>) attr.getMV();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Deletes a sendsSetRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1437)
    public void delSendsSetRequest(Object value) throws DmcValueException {
        ((PresenterDMO) core).delSendsSetRequest(value);
    }

    /**
     * Deletes a sendsSetRequest value.
     * @param value The RequestWithOptions to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1446)
    public void delSendsSetRequest(RequestWithOptions value){
        ((PresenterDMO) core).delSendsSetRequest(value);
    }

    /**
     * Removes the sendsSetRequest attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remSendsSetRequest(){
        ((PresenterDMO) core).remSendsSetRequest();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getPresenterName(){
        return(((PresenterDMO) core).getPresenterName());
    }

    /**
     * Sets presenterName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setPresenterName(Object value) throws DmcValueException {
        ((PresenterDMO) core).setPresenterName(value);
    }

    /**
     * Sets presenterName to the specified value.
     * @param value CamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setPresenterName(CamelCaseName value){
        ((PresenterDMO) core).setPresenterName(value);
    }

    /**
     * Removes the presenterName attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remPresenterName(){
        ((PresenterDMO) core).remPresenterName();
    }

    /**
     * @return The number of View items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getManagesViewSize(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__managesView);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no ViewDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getManagesViewIsEmpty(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__managesView);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any ViewDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getManagesViewHasValue(){
        DmcAttribute<?> attr = core.get(PresenterDMO.__managesView);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of ViewDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1229)
    public ViewIterableDMW getManagesViewIterable(){
        DmcAttribute attr = ((PresenterDMO) core).get(PresenterDMO.__managesView);
        if (attr == null)
            return(ViewIterableDMW.emptyList);
        
        return(new ViewIterableDMW(attr.getMV()));
    }

    /**
     * Adds another managesView value.
     * @param value A value compatible with View
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public DmcAttribute<?> addManagesView(View value){
        DmcAttribute<?> attr = ((PresenterDMO) core).addManagesView(((ViewDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a managesView value.
     * @param value The View to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1258)
    public void delManagesView(View value){
        ((PresenterDMO) core).delManagesView(value.getDMO());
    }

    /**
     * @return A COPY of the collection of View objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1293)
    public ArrayList<View> getManagesViewCopy(){
        DmcAttribute<?> attr = ((PresenterDMO) core).get(PresenterDMO.__managesView);
        if (attr == null)
            return(new ArrayList<View>());
        
        ArrayList<View> rc = new ArrayList<View>(attr.getMVSize());
        
        ViewIterableDMW it = getManagesViewIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the managesView attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remManagesView(){
        ((PresenterDMO) core).remManagesView();
    }


}
