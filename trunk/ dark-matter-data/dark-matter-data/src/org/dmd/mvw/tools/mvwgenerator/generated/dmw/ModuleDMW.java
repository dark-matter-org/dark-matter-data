package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import java.util.Iterator;                                                     // To support getMVCopy()
import java.util.TreeSet;                                                      // To support getMVCopy()
import org.dmd.dmc.*;                                                          // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                        // Primitive type
import org.dmd.dms.*;                                                          // Always 2
import org.dmd.dms.generated.dmw.SchemaDefinitionDMW;                          // Is reference type aux
import org.dmd.dms.generated.types.DmcTypeModifierMV;                          // Required for MODREC constructor
import org.dmd.dms.generated.types.SchemaDefinitionREF;                        // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.extended.Module;                         // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                  // Derived class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ModuleDMO;                 // Class not auxiliary or abstract
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.ModuleIterableDMW;         // For multi-valued Module
import org.dmd.mvw.tools.mvwgenerator.generated.types.ModuleREF;               // To support getMVCopy() for REFs

/**
 * The Module is used to define a reusable set of MVW functionality which can
 * be referred to in Application definitions or other Module definitions.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class ModuleDMW extends MvwDefinition implements DmcNamedObjectIF {

    public ModuleDMW() {
        super(new ModuleDMO(), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Module);
    }

    public ModuleDMW(DmcTypeModifierMV mods) {
        super(new ModuleDMO(mods), org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Module);
    }

    public Module getModificationRecorder(){
        Module rc = new Module();
        rc.setCamelCaseName(getCamelCaseName());
        rc.setModifier(new DmcTypeModifierMV());
        return(rc);
    }

    public ModuleDMW(ModuleDMO obj) {
        super(obj, org.dmd.mvw.tools.mvwgenerator.generated.MvwSchemaAG._Module);
    }

    public ModuleDMO getDMO() {
        return((ModuleDMO) core);
    }

    protected ModuleDMW(ModuleDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((ModuleDMO) core).getCamelCaseName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ModuleDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ModuleDMW){
            return( getObjectName().equals( ((ModuleDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of Module items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getDependsOnModuleSize(){
        DmcAttribute<?> attr = core.get(ModuleDMO.__dependsOnModule);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no ModuleDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getDependsOnModuleIsEmpty(){
        DmcAttribute<?> attr = core.get(ModuleDMO.__dependsOnModule);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any ModuleDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getDependsOnModuleHasValue(){
        DmcAttribute<?> attr = core.get(ModuleDMO.__dependsOnModule);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of ModuleDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1229)
    public ModuleIterableDMW getDependsOnModuleIterable(){
        DmcAttribute attr = ((ModuleDMO) core).get(ModuleDMO.__dependsOnModule);
        if (attr == null)
            return(ModuleIterableDMW.emptyList);
        
        return(new ModuleIterableDMW(attr.getMV()));
    }

    /**
     * Adds another dependsOnModule value.
     * @param value A value compatible with Module
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public DmcAttribute<?> addDependsOnModule(Module value){
        DmcAttribute<?> attr = ((ModuleDMO) core).addDependsOnModule(((ModuleDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a dependsOnModule value.
     * @param value The Module to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1258)
    public void delDependsOnModule(Module value){
        ((ModuleDMO) core).delDependsOnModule(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Module objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1293)
    public TreeSet<Module> getDependsOnModuleCopy(){
        DmcAttribute<?> attr = ((ModuleDMO) core).get(ModuleDMO.__dependsOnModule);
        if (attr == null)
            return(new TreeSet<Module>());
        
        TreeSet<Module> rc = new TreeSet<Module>();
        
        ModuleIterableDMW it = getDependsOnModuleIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the dependsOnModule attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remDependsOnModule(){
        ((ModuleDMO) core).remDependsOnModule();
    }

    /**
     * @return A SchemaDefinitionDMW object.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1030)
    public SchemaDefinitionDMW getDependsOnSchema(){
        SchemaDefinitionREF ref = ((ModuleDMO) core).getDependsOnSchema();
        if (ref == null)
            return(null);
        
        return((SchemaDefinitionDMW)ref.getObject().getContainer());
    }

    /**
     * Sets the dependsOnSchema to the specified value.
     * @param value A value compatible with SchemaDefinitionREF
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1075)
    public void setDependsOnSchema(SchemaDefinitionDMW value) {
        ((ModuleDMO) core).setDependsOnSchema(value.getDMO());
    }

    /**
     * Removes the dependsOnSchema attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remDependsOnSchema(){
        ((ModuleDMO) core).remDependsOnSchema();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getCamelCaseName(){
        return(((ModuleDMO) core).getCamelCaseName());
    }

    /**
     * Sets camelCaseName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setCamelCaseName(Object value) throws DmcValueException {
        ((ModuleDMO) core).setCamelCaseName(value);
    }

    /**
     * Sets camelCaseName to the specified value.
     * @param value CamelCaseName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setCamelCaseName(CamelCaseName value){
        ((ModuleDMO) core).setCamelCaseName(value);
    }

    /**
     * Removes the camelCaseName attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remCamelCaseName(){
        ((ModuleDMO) core).remCamelCaseName();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public String getGenPackage(){
        return(((ModuleDMO) core).getGenPackage());
    }

    /**
     * Sets genPackage to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setGenPackage(Object value) throws DmcValueException {
        ((ModuleDMO) core).setGenPackage(value);
    }

    /**
     * Sets genPackage to the specified value.
     * @param value String
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setGenPackage(String value){
        ((ModuleDMO) core).setGenPackage(value);
    }

    /**
     * Removes the genPackage attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remGenPackage(){
        ((ModuleDMO) core).remGenPackage();
    }


}
