package org.dmd.mvw.tools.mvwgenerator.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:886)
import java.util.ArrayList;                                                            // To support getMVCopy()
import java.util.Iterator;                                                             // To support getMVCopy()
import java.util.TreeMap;                                                              // To support getMVCopy()
import java.util.TreeSet;                                                              // To support getMVCopy()
import org.dmd.dmc.*;                                                                  // If any attributes
import org.dmd.dmc.types.CamelCaseName;                                                // Primitive type
import org.dmd.dms.*;                                                                  // Always 2
import org.dmd.dms.generated.dmo.SchemaDefinitionDMO;                                  // For multi-valued containsSchemaDefinition
import org.dmd.dms.generated.dmw.SchemaDefinitionDMW;                                  // Is reference type aux
import org.dmd.dms.generated.dmw.SchemaDefinitionIterableDMW;                          // For multi-valued SchemaDefinition
import org.dmd.dms.generated.types.SchemaDefinitionREF;                                // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.extended.Component;                              // Required for getModificationRecorder()
import org.dmd.mvw.tools.mvwgenerator.extended.Event;                                  // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.extended.MvwDefinition;                          // Derived class
import org.dmd.mvw.tools.mvwgenerator.extended.RunContextItem;                         // Is reference type aux
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.ComponentDMO;                      // Abstract class
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.EventDMO;                          // For multi-valued containsEvent
import org.dmd.mvw.tools.mvwgenerator.generated.dmo.RunContextItemDMO;                 // For multi-valued containsRunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.EventIterableDMW;                  // For multi-valued Event
import org.dmd.mvw.tools.mvwgenerator.generated.dmw.RunContextItemIterableDMW;         // For multi-valued RunContextItem
import org.dmd.mvw.tools.mvwgenerator.generated.types.EventREF;                        // To support getMVCopy() for REFs
import org.dmd.mvw.tools.mvwgenerator.generated.types.RunContextItemREF;               // To support getMVCopy() for REFs

/**
 * The Component is an abstract base for classes that define the building
 * blocks of Applications. The primary feature of an Component is that it
 * fires and/or handles events. Beyond that, a component can be whatever you
 * require it to be. A variety of derived component types provide more
 * focussed behavioural units.
 * <P>
 * Generated from the mvw schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class ComponentDMW extends MvwDefinition implements DmcNamedObjectIF {

    protected ComponentDMW() {
        super();
    }

    abstract public Component getModificationRecorder();

    public ComponentDMO getDMO() {
        return((ComponentDMO) core);
    }

    protected ComponentDMW(ComponentDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:914)
    public CamelCaseName getObjectName(){
        return(((ComponentDMO) core).getComponentName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((ComponentDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof ComponentDMW){
            return( getObjectName().equals( ((ComponentDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of EventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1510)
    public int getFiresEventSize(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__firesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1522)
    public boolean getFiresEventIsEmpty(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__firesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1534)
    public boolean getFiresEventHasValue(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__firesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed Event object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1549)
    public Event getFiresEvent(Object key){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__firesEvent);
        if (attr == null)
            return(null);
        
        return((Event)attr.getByKey(key));
    }

    /**
     * @return An Iterable of Event objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1573)
    public EventIterableDMW getFiresEventIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(ComponentDMO.__firesEvent);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        Iterator<EventREF> it = ((ComponentDMO) core).getFiresEvent();
        
        if (it == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(it));
    }

    /**
     * Adds another firesEvent value.
     * @param value EventDMW
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1595)
    public DmcAttribute<?> addFiresEvent(Event value) {
        return(((ComponentDMO) core).addFiresEvent(value.getDMO()));
    }

    /**
     * Deletes a firesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1607)
    public void delFiresEvent(Event value){
        ((ComponentDMO) core).delFiresEvent(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1641)
    public TreeMap<CamelCaseName,Event> getFiresEventCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__firesEvent);
        if (attr == null)
            return(new TreeMap<CamelCaseName,Event>());
        
        TreeMap<CamelCaseName,Event> rc = new TreeMap<CamelCaseName,Event>();
        
        EventIterableDMW it = getFiresEventIterable();
        while(it.hasNext()){
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(),obj);
        }
        return(rc);
    }

    /**
     * Removes the firesEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1778)
    public void remFiresEvent(){
        ((ComponentDMO) core).remFiresEvent();
    }

    /**
     * @return The number of EventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1510)
    public int getHandlesEventSize(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__handlesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no EventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1522)
    public boolean getHandlesEventIsEmpty(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__handlesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any EventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1534)
    public boolean getHandlesEventHasValue(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__handlesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return The keyed Event object if it's available and null otherwise.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1549)
    public Event getHandlesEvent(Object key){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__handlesEvent);
        if (attr == null)
            return(null);
        
        return((Event)attr.getByKey(key));
    }

    /**
     * @return An Iterable of Event objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1573)
    public EventIterableDMW getHandlesEventIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(ComponentDMO.__handlesEvent);
        if (attr == null)
            return(EventIterableDMW.emptyList);
        
        Iterator<EventREF> it = ((ComponentDMO) core).getHandlesEvent();
        
        if (it == null)
            return(EventIterableDMW.emptyList);
        
        return(new EventIterableDMW(it));
    }

    /**
     * Adds another handlesEvent value.
     * @param value EventDMW
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1595)
    public DmcAttribute<?> addHandlesEvent(Event value) {
        return(((ComponentDMO) core).addHandlesEvent(value.getDMO()));
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The Event to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1607)
    public void delHandlesEvent(Event value){
        ((ComponentDMO) core).delHandlesEvent(value.getDMO());
    }

    /**
     * @return A COPY of the collection of Event objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1641)
    public TreeMap<CamelCaseName,Event> getHandlesEventCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__handlesEvent);
        if (attr == null)
            return(new TreeMap<CamelCaseName,Event>());
        
        TreeMap<CamelCaseName,Event> rc = new TreeMap<CamelCaseName,Event>();
        
        EventIterableDMW it = getHandlesEventIterable();
        while(it.hasNext()){
            Event obj = it.next();
            rc.put((CamelCaseName) obj.getObjectName(),obj);
        }
        return(rc);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMAPPED(DMWGenerator.java:1778)
    public void remHandlesEvent(){
        ((ComponentDMO) core).remHandlesEvent();
    }

    /**
     * @return The number of RunContextItem items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getUseRunContextItemSize(){
        DmcAttribute<?> attr = core.get(ComponentDMO.__useRunContextItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getUseRunContextItemIsEmpty(){
        DmcAttribute<?> attr = core.get(ComponentDMO.__useRunContextItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any RunContextItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getUseRunContextItemHasValue(){
        DmcAttribute<?> attr = core.get(ComponentDMO.__useRunContextItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of RunContextItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1229)
    public RunContextItemIterableDMW getUseRunContextItemIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(ComponentDMO.__useRunContextItem);
        if (attr == null)
            return(RunContextItemIterableDMW.emptyList);
        
        return(new RunContextItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another useRunContextItem value.
     * @param value A value compatible with RunContextItem
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public DmcAttribute<?> addUseRunContextItem(RunContextItem value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addUseRunContextItem(((RunContextItemDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a useRunContextItem value.
     * @param value The RunContextItem to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1258)
    public void delUseRunContextItem(RunContextItem value){
        ((ComponentDMO) core).delUseRunContextItem(value.getDMO());
    }

    /**
     * @return A COPY of the collection of RunContextItem objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1293)
    public TreeSet<RunContextItem> getUseRunContextItemCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__useRunContextItem);
        if (attr == null)
            return(new TreeSet<RunContextItem>());
        
        TreeSet<RunContextItem> rc = new TreeSet<RunContextItem>();
        
        RunContextItemIterableDMW it = getUseRunContextItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the useRunContextItem attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remUseRunContextItem(){
        ((ComponentDMO) core).remUseRunContextItem();
    }

    /**
     * @return The number of SchemaDefinition items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1185)
    public int getUseSchemaSize(){
        DmcAttribute<?> attr = core.get(ComponentDMO.__useSchema);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no SchemaDefinitionDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1197)
    public boolean getUseSchemaIsEmpty(){
        DmcAttribute<?> attr = core.get(ComponentDMO.__useSchema);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any SchemaDefinitionDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1209)
    public boolean getUseSchemaHasValue(){
        DmcAttribute<?> attr = core.get(ComponentDMO.__useSchema);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of SchemaDefinitionDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1229)
    public SchemaDefinitionIterableDMW getUseSchemaIterable(){
        DmcAttribute attr = ((ComponentDMO) core).get(ComponentDMO.__useSchema);
        if (attr == null)
            return(SchemaDefinitionIterableDMW.emptyList);
        
        return(new SchemaDefinitionIterableDMW(attr.getMV()));
    }

    /**
     * Adds another useSchema value.
     * @param value A value compatible with SchemaDefinition
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1245)
    public DmcAttribute<?> addUseSchema(SchemaDefinitionDMW value){
        DmcAttribute<?> attr = ((ComponentDMO) core).addUseSchema(((SchemaDefinitionDMO)value.getDmcObject()));
        return(attr);
    }

    /**
     * Deletes a useSchema value.
     * @param value The SchemaDefinition to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1258)
    public void delUseSchema(SchemaDefinitionDMW value){
        ((ComponentDMO) core).delUseSchema(value.getDMO());
    }

    /**
     * @return A COPY of the collection of SchemaDefinition objects.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1293)
    public ArrayList<SchemaDefinitionDMW> getUseSchemaCopy(){
        DmcAttribute<?> attr = ((ComponentDMO) core).get(ComponentDMO.__useSchema);
        if (attr == null)
            return(new ArrayList<SchemaDefinitionDMW>());
        
        ArrayList<SchemaDefinitionDMW> rc = new ArrayList<SchemaDefinitionDMW>(attr.getMVSize());
        
        SchemaDefinitionIterableDMW it = getUseSchemaIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the useSchema attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1458)
    public void remUseSchema(){
        ((ComponentDMO) core).remUseSchema();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1051)
    public CamelCaseName getComponentName(){
        return(((ComponentDMO) core).getComponentName());
    }

    /**
     * Sets componentName to the specified value.
     * @param value A value compatible with DmcTypeCamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1098)
    public void setComponentName(Object value) throws DmcValueException {
        ((ComponentDMO) core).setComponentName(value);
    }

    /**
     * Sets componentName to the specified value.
     * @param value CamelCaseName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1107)
    public void setComponentName(CamelCaseName value){
        ((ComponentDMO) core).setComponentName(value);
    }

    /**
     * Removes the componentName attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1133)
    public void remComponentName(){
        ((ComponentDMO) core).remComponentName();
    }


}
