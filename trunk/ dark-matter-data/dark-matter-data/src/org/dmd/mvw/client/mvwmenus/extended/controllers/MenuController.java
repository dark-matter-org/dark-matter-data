package org.dmd.mvw.client.mvwmenus.extended.controllers;

import java.util.TreeMap;

import org.dmd.dmc.DmcObject;
import org.dmd.features.extgwt.client.util.menu.BackgroundMenuInstance;
import org.dmd.features.extgwt.client.util.menu.MenuInstance;
import org.dmd.features.extgwt.client.util.menu.MenuItemInstance;
import org.dmd.features.extgwt.client.util.menu.MenuSubItemIF;
import org.dmd.features.extgwt.client.util.menu.PopupMenuInstance;
import org.dmd.features.extgwt.client.util.menu.SubmenuInstance;
import org.dmd.mvw.client.mvw.generated.mvw.MvwRunContextIF;
import org.dmd.mvw.client.mvwmenus.base.Action;
import org.dmd.mvw.client.mvwmenus.base.MvwMenu;
import org.dmd.mvw.client.mvwmenus.base.MvwMenuItem;
import org.dmd.mvw.client.mvwmenus.base.MvwSeparator;
import org.dmd.mvw.client.mvwmenus.base.MvwSubMenu;
import org.dmd.mvw.client.mvwmenus.generated.mvw.controllers.MenuControllerBaseImpl;

import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.widget.Component;
import com.extjs.gxt.ui.client.widget.menu.Menu;
import com.google.gwt.user.client.ui.Widget;

public class MenuController extends MenuControllerBaseImpl {
	
	// All registered actions
	TreeMap<String,Action>			actions;

	// All menu items
	TreeMap<String,MvwMenuItem>		menuItems;
	
	// All separators
	TreeMap<String,MvwSeparator>	separators;
	
	// All menus including submenus
	TreeMap<String,MvwMenu>			allMenus;
	
	// Just the submenus
	TreeMap<String,MvwSubMenu>		subMenus;
	
	// All top level menus - toolbars, menubars and popups
	TreeMap<String,MvwMenu>			topLevelMenus;
	
	// Key: class name
//	TreeMap<String,MvwMenu>			popups;
	
	// Key: menu name
//	TreeMap<String,MvwMenu>			backgroundMenus;

	public MenuController(MvwRunContextIF rc) {
		super(rc);
		actions 		= new TreeMap<String, Action>();
		menuItems		= new TreeMap<String, MvwMenuItem>();
		separators		= new TreeMap<String, MvwSeparator>();
		allMenus		= new TreeMap<String, MvwMenu>();
		subMenus		= new TreeMap<String, MvwSubMenu>();
		topLevelMenus	= new TreeMap<String, MvwMenu>();
		// popups
		// background
	}
	
	/**
	 * Returns the GXT component for the specified menu.
	 * @param n
	 * @return
	 */
	public Widget getMenu(String n){
		MvwMenu menu = allMenus.get(n);
		if (menu == null)
			return(null);
		return(menu.getMenu());
	}

	void initializeMenus() {
		
		// By now, everyone has registered their stuff, so start building the 
		// menu structure - first, assign actions to the menu items and, while
		// we're at it, add the items to their menus
		for(MvwMenuItem mii : menuItems.values()){
			Action action = actions.get(mii.getActionName());
			mii.setAction(action);
//			mii.initialize();
			
			MvwMenu menu = allMenus.get(mii.getAddToMenu());
			menu.addSubItem(mii);
		}
		
		// Add the separators
		for(MvwSeparator subitem: separators.values()){
			MvwMenu menu = allMenus.get(subitem.getAddToMenu());
			menu.addSubItem(subitem);
		}
		
		// Add the submenus to their menus
		for(MvwSubMenu sub : subMenus.values()){
			MvwMenu menu = allMenus.get(sub.getAddToMenu());
			menu.addSubItem(sub);
		}
		
		// Build the submenus
		for(MvwSubMenu sub : subMenus.values()){
			sub.buildMenu();
		}
		
		// Build the menus
		for(MvwMenu mi : topLevelMenus.values()){
			mi.buildMenu();
		}
		
	}
	
	/**
	 * Returns the named menu instance if it's available. 
	 * @param name
	 * @return
	 */
	public MvwMenu getMenuInstance(String name){
		return(topLevelMenus.get(name));
	}

	public void addAction(Action a){
System.out.println("MenuController.addAction() " + a.getName());
		actions.put(a.getName(), a);
	}

//	/**
//	 * Adds the specified menu item to our set of menu items. This method is used by 
//	 * the autogenerated code that's part of MvcControllers. Dynamic menus are build directly
//	 * by retrieving the base MenuInstance (getMenuInstance()) and manipulating the menu
//	 * contents directly.
//	 * @param mii
//	 */
//	public void addMenuItem(MenuItemInstance mii){
//System.out.println("MenuController.addMenuItem() " + mii.toString());
//		menuItems.put(mii.getName(), mii);
//	}
//	
//	public void addSeparator(MenuSubItemIF msi){
//		separators.put(msi.getName(), msi);
//	}
//	
//	public void removeSeparator(MenuSubItemIF msi){
//		separators.remove(msi.getName());
//	}
//	
//	public void addMenu(MenuInstance mi){
//		allMenus.put(mi.getName(),mi);
//		
//		if (mi instanceof SubmenuInstance){
//			subMenus.put(mi.getName(), (SubmenuInstance) mi);
//		}
//		else{
//			topLevelMenus.put(mi.getName(), mi);
//			
//			if (mi instanceof PopupMenuInstance){
//				PopupMenuInstance pmi = (PopupMenuInstance) mi;
//				popups.put(pmi.getForClass(), pmi);
//			}
//			if (mi instanceof BackgroundMenuInstance){
//				BackgroundMenuInstance bmi = (BackgroundMenuInstance) mi;
//				backgroundMenus.put(bmi.getName(), bmi);
//			}
//		}
//	}
//	
//	/**
//	 * Returns a popup menu if one was defined for this class of object.
//	 * @param obj
//	 * @return
//	 */
//	public Menu getPopupMenuForObject(DmcObject obj){
//		PopupMenuInstance pmi = popups.get(obj.getClass().getName());
//		
//		if (pmi == null)
//			return(null);
//		
//		if (lastSelectionModel != null){
//			// We're about to popup a menu, perform the enable check, but we
//			// only do this is item selection has taken place
//			for(Action action : actions.values()){
//				action.enableCheck();
//			}
//		}
//
//		return (Menu) (pmi.getMenu());
//	}
//	
//	/**
//	 * Return the specified background menu.
//	 * @param name The name of the menu
//	 * @return Menu
//	 */
//	public Menu getBackgroundMenu(String name){
//		BackgroundMenuInstance bmi = backgroundMenus.get(name);
//		
//		if (bmi == null)
//			return(null);
//		
//		return((Menu)bmi.getMenu());
//	}
	

}
