//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.dmg.generated.dmo;

// Generated from: org.dmd.dms.util.DmoFormatter.formatImports(DmoFormatter.java:707)
import java.util.*;                                       // Always required
import org.dmd.dmc.DmcAttribute;                          // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                      // Always required
import org.dmd.dmc.DmcValueException;                     // Any attributes
import org.dmd.dmc.types.DmcTypeString;                   // Required type
import org.dmd.dmg.types.DmcTypeGenerator;                // Required type
import org.dmd.dmg.types.Generator;                       // Primitive type and !auxiliary class
import org.dmd.dms.generated.dmo.DmwWrapperDMO;           // Structural class
import org.dmd.dms.generated.enums.ValueTypeEnum;         // Always required

/**
 * The DmgConfig class is used to specify a set of schemas and a set of  code
 * generators to be run when you want to generate various types of code.
 * <P>
 * Generated from the dmg schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:140)
 */
@SuppressWarnings("serial")
public class DmgConfigDMO  extends DmwWrapperDMO  {

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __configSuffix = new DmcAttributeInfo("configSuffix",202,"String",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __description = new DmcAttributeInfo("description",18,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __genPackage = new DmcAttributeInfo("genPackage",203,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __generatedFileHeader = new DmcAttributeInfo("generatedFileHeader",81,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __generator = new DmcAttributeInfo("generator",200,"Generator",ValueTypeEnum.MULTI,false);
    public final static DmcAttributeInfo __schemaToLoad = new DmcAttributeInfo("schemaToLoad",201,"String",ValueTypeEnum.SINGLE,false);

    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__configSuffix.id,__configSuffix);
        _ImAp.put(__description.id,__description);
        _ImAp.put(__genPackage.id,__genPackage);
        _ImAp.put(__generatedFileHeader.id,__generatedFileHeader);
        _ImAp.put(__generator.id,__generator);
        _ImAp.put(__schemaToLoad.id,__schemaToLoad);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__configSuffix.name,__configSuffix);
        _SmAp.put(__description.name,__description);
        _SmAp.put(__genPackage.name,__genPackage);
        _SmAp.put(__generatedFileHeader.name,__generatedFileHeader);
        _SmAp.put(__generator.name,__generator);
        _SmAp.put(__schemaToLoad.name,__schemaToLoad);
    }

    public DmgConfigDMO() {
        super("DmgConfig",_ImAp,_SmAp);
    }

    protected DmgConfigDMO(String oc) {
        super(oc,_ImAp,_SmAp);
    }

    public DmgConfigDMO(String oc, Map<Integer,DmcAttributeInfo> im, Map<String,DmcAttributeInfo> sm){
        super(oc,im,sm);
    }

    public DmgConfigDMO(DmgConfigDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    @Override
    public DmgConfigDMO getOneOfMe() {
        DmgConfigDMO rc = new DmgConfigDMO(this.getConstructionClassName());
        return(rc);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public String getSchemaToLoad(){
        DmcTypeString attr = (DmcTypeString) get(__schemaToLoad);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets schemaToLoad to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setSchemaToLoad(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__schemaToLoad);
        if (attr == null)
            attr = new DmcTypeString(__schemaToLoad);
        
        attr.set(value);
        set(__schemaToLoad,attr);
    }

    /**
     * Removes the schemaToLoad attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remSchemaToLoad(){
         rem(__schemaToLoad);
    }

    /**
     * @return An Iterator of String objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:432)
    public Iterator<String> getConfigSuffix(){
        DmcTypeString attr = (DmcTypeString) get(__configSuffix);
        if (attr == null)
            return( ((List<String>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * Adds another configSuffix value.
     * @param value A value compatible with String
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addConfigSuffix(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__configSuffix);
        if (attr == null)
            attr = new DmcTypeString(__configSuffix);
        
        attr.add(value);
        add(__configSuffix,attr);
        return(attr);
    }

    /**
     * Deletes a configSuffix value.
     * @param value The String to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:518)
    public DmcAttribute<?> delConfigSuffix(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__configSuffix, value);
        return(attr);
    }

    /**
     * Removes the configSuffix attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remConfigSuffix(){
         rem(__configSuffix);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public String getDescription(){
        DmcTypeString attr = (DmcTypeString) get(__description);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setDescription(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__description);
        if (attr == null)
            attr = new DmcTypeString(__description);
        
        attr.set(value);
        set(__description,attr);
    }

    /**
     * Removes the description attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remDescription(){
         rem(__description);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public String getGeneratedFileHeader(){
        DmcTypeString attr = (DmcTypeString) get(__generatedFileHeader);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets generatedFileHeader to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setGeneratedFileHeader(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__generatedFileHeader);
        if (attr == null)
            attr = new DmcTypeString(__generatedFileHeader);
        
        attr.set(value);
        set(__generatedFileHeader,attr);
    }

    /**
     * Removes the generatedFileHeader attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remGeneratedFileHeader(){
         rem(__generatedFileHeader);
    }

    /**
     * @return An Iterator of Generator objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:432)
    public Iterator<Generator> getGenerator(){
        DmcTypeGenerator attr = (DmcTypeGenerator) get(__generator);
        if (attr == null)
            return( ((List<Generator>) Collections.EMPTY_LIST).iterator());

        return(attr.getMV());
    }

    /**
     * Adds another generator value.
     * @param value A value compatible with Generator
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:452)
    public DmcAttribute<?> addGenerator(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__generator);
        if (attr == null)
            attr = new DmcTypeGenerator(__generator);
        
        attr.add(value);
        add(__generator,attr);
        return(attr);
    }

    /**
     * Deletes a generator value.
     * @param value The Generator to be deleted from set of attribute values.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:518)
    public DmcAttribute<?> delGenerator(Object value) throws DmcValueException {
        DmcAttribute<?> attr = del(__generator, value);
        return(attr);
    }

    /**
     * Removes the generator attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatMV(GenUtility.java:540)
    public void remGenerator(){
         rem(__generator);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:322)
    public String getGenPackage(){
        DmcTypeString attr = (DmcTypeString) get(__genPackage);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets genPackage to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:345)
    public void setGenPackage(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__genPackage);
        if (attr == null)
            attr = new DmcTypeString(__genPackage);
        
        attr.set(value);
        set(__genPackage,attr);
    }

    /**
     * Removes the genPackage attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:360)
    public void remGenPackage(){
         rem(__genPackage);
    }




}
