package org.dmd.features.extgwt.generated.dmw;

// Generated from: org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:613)
import java.util.*;                                                    // If not auxiliary
import org.dmd.dmc.*;                                                  // Always 2
import org.dmd.dmc.types.StringName;                                   // Primitive type
import org.dmd.dms.*;                                                  // Always 3
import org.dmd.features.extgwt.extended.MvcAction;                     // Is reference type
import org.dmd.features.extgwt.extended.MvcController;                 // Is reference type
import org.dmd.features.extgwt.extended.MvcDefinition;                 // Derived class
import org.dmd.features.extgwt.extended.MvcEvent;                      // Is reference type
import org.dmd.features.extgwt.extended.MvcMenu;                       // Is reference type
import org.dmd.features.extgwt.extended.MvcMenuItem;                   // Is reference type
import org.dmd.features.extgwt.extended.MvcMenuSeparator;              // Is reference type
import org.dmd.features.extgwt.extended.MvcMultiView;                  // Is reference type
import org.dmd.features.extgwt.extended.MvcRegistryItem;               // Is reference type
import org.dmd.features.extgwt.extended.MvcServerEvent;                // Is reference type
import org.dmd.features.extgwt.extended.MvcView;                       // Is reference type
import org.dmd.features.extgwt.generated.dmo.MvcControllerDMO;         // Class not auxiliary or abstract

/**
 * The MvcController class allows for the definition of controllers. The
 * abstract controller generated by this definition will automatically
 * register for the events you specify via the handlesEvent attribute.
 * Likewise, it will have a standard handleEvent() method that forwards typed
 * events to abstract handler functions that you'll have to write.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:291)
 */
abstract public class MvcControllerDMW extends MvcDefinition implements DmcNamedObjectIF {

    private MvcControllerDMO mycore;

    public MvcControllerDMW() {
        super(new MvcControllerDMO(), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcController);
        mycore = (MvcControllerDMO) core;
        mycore.setContainer(this);
    }

    public MvcControllerDMW(MvcControllerDMO obj) {
        super(obj, org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcController);
        mycore = (MvcControllerDMO) core;
        mycore.setContainer(this);
    }

    @Override
    public void setDmcObject(DmcObject obj) {
        mycore = (MvcControllerDMO) obj;
        mycore.setContainer(this);
        super.setDmcObject(obj);
    }

    protected MvcControllerDMW(MvcControllerDMO obj, ClassDefinition cd) {
        super(obj,cd);
        mycore = (MvcControllerDMO) core;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected ArrayList getAuxDataHolder() {
        return(new ArrayList<org.dmd.features.extgwt.extended.MvcController>());
    }

    // org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:639)
    public StringName getObjectName(){
        return(mycore.getName());
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcControllerDMW){
            return( getObjectName().equals( ((MvcControllerDMW) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:728)
    public String getAlias(){
        return(mycore.getAlias());
    }

    /**
     * Sets alias to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:756)
    public void setAlias(Object value) throws DmcValueException {
        mycore.setAlias(value);
    }

    /**
     * Removes the alias attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:767)
    public void remAlias(){
        mycore.remAlias();
    }

    /**
     * @return The number of MvcViewDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getControlsViewSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__controlsView);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcViewDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getControlsViewIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__controlsView);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcViewDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getControlsViewHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__controlsView);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcViewDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcViewIterableDMW getControlsViewIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__controlsView);
        if (attr == null)
            return(MvcViewIterableDMW.emptyList);
        
        return(new MvcViewIterableDMW(attr.getMV()));
    }

    /**
     * Adds another controlsView value.
     * @param value A value compatible with MvcView
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addControlsView(MvcView value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addControlsView(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a controlsView value.
     * @param value The MvcView to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delControlsView(MvcView value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delControlsView(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcView> refs = (ArrayList<MvcView>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the controlsView attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remControlsView(){
        mycore.remControlsView();
    }

    /**
     * @return The number of MvcMultiViewDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getControlsMultiViewSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__controlsMultiView);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcMultiViewDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getControlsMultiViewIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__controlsMultiView);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcMultiViewDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getControlsMultiViewHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__controlsMultiView);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcMultiViewDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcMultiViewIterableDMW getControlsMultiViewIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__controlsMultiView);
        if (attr == null)
            return(MvcMultiViewIterableDMW.emptyList);
        
        return(new MvcMultiViewIterableDMW(attr.getMV()));
    }

    /**
     * Adds another controlsMultiView value.
     * @param value A value compatible with MvcMultiView
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addControlsMultiView(MvcMultiView value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addControlsMultiView(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a controlsMultiView value.
     * @param value The MvcMultiView to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delControlsMultiView(MvcMultiView value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delControlsMultiView(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcMultiView> refs = (ArrayList<MvcMultiView>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the controlsMultiView attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remControlsMultiView(){
        mycore.remControlsMultiView();
    }

    /**
     * @return The number of MvcEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getHandlesEventSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__handlesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getHandlesEventIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__handlesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getHandlesEventHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__handlesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcEventIterableDMW getHandlesEventIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__handlesEvent);
        if (attr == null)
            return(MvcEventIterableDMW.emptyList);
        
        return(new MvcEventIterableDMW(attr.getMV()));
    }

    /**
     * Adds another handlesEvent value.
     * @param value A value compatible with MvcEvent
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addHandlesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addHandlesEvent(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delHandlesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delHandlesEvent(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remHandlesEvent(){
        mycore.remHandlesEvent();
    }

    /**
     * @return The number of MvcServerEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getHandlesServerEventSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__handlesServerEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcServerEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getHandlesServerEventIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__handlesServerEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcServerEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getHandlesServerEventHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__handlesServerEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcServerEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcServerEventIterableDMW getHandlesServerEventIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__handlesServerEvent);
        if (attr == null)
            return(MvcServerEventIterableDMW.emptyList);
        
        return(new MvcServerEventIterableDMW(attr.getMV()));
    }

    /**
     * Adds another handlesServerEvent value.
     * @param value A value compatible with MvcServerEvent
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addHandlesServerEvent(MvcServerEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addHandlesServerEvent(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a handlesServerEvent value.
     * @param value The MvcServerEvent to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delHandlesServerEvent(MvcServerEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delHandlesServerEvent(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcServerEvent> refs = (ArrayList<MvcServerEvent>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the handlesServerEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remHandlesServerEvent(){
        mycore.remHandlesServerEvent();
    }

    /**
     * @return The number of MvcEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getDispatchesEventSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__dispatchesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getDispatchesEventIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__dispatchesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcEventDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getDispatchesEventHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__dispatchesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcEventIterableDMW getDispatchesEventIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__dispatchesEvent);
        if (attr == null)
            return(MvcEventIterableDMW.emptyList);
        
        return(new MvcEventIterableDMW(attr.getMV()));
    }

    /**
     * Adds another dispatchesEvent value.
     * @param value A value compatible with MvcEvent
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addDispatchesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addDispatchesEvent(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a dispatchesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delDispatchesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delDispatchesEvent(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcEvent> refs = (ArrayList<MvcEvent>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the dispatchesEvent attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remDispatchesEvent(){
        mycore.remDispatchesEvent();
    }

    /**
     * @return The number of MvcRegistryItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getUsesRegistryItemSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__usesRegistryItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcRegistryItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getUsesRegistryItemIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__usesRegistryItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcRegistryItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getUsesRegistryItemHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__usesRegistryItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcRegistryItemIterableDMW getUsesRegistryItemIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__usesRegistryItem);
        if (attr == null)
            return(MvcRegistryItemIterableDMW.emptyList);
        
        return(new MvcRegistryItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another usesRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addUsesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addUsesRegistryItem(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a usesRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delUsesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delUsesRegistryItem(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the usesRegistryItem attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remUsesRegistryItem(){
        mycore.remUsesRegistryItem();
    }

    /**
     * @return The number of MvcRegistryItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getCreatesRegistryItemSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__createsRegistryItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcRegistryItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getCreatesRegistryItemIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__createsRegistryItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcRegistryItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getCreatesRegistryItemHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__createsRegistryItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcRegistryItemIterableDMW getCreatesRegistryItemIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__createsRegistryItem);
        if (attr == null)
            return(MvcRegistryItemIterableDMW.emptyList);
        
        return(new MvcRegistryItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another createsRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addCreatesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addCreatesRegistryItem(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a createsRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delCreatesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delCreatesRegistryItem(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcRegistryItem> refs = (ArrayList<MvcRegistryItem>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the createsRegistryItem attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remCreatesRegistryItem(){
        mycore.remCreatesRegistryItem();
    }

    /**
     * @return A MvcController object.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:714)
    public MvcController getParentController(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__parentController);
        if (attr == null)
            return(null);
        
        MvcController ref = (MvcController) attr.getAuxData();
        
        return(ref);
    }

    /**
     * Sets the parentController to the specified value.
     * @param value A value compatible with MvcControllerREF
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:743)
    public void setParentController(MvcController value) throws DmcValueException {
        mycore.setParentController(value.getDmcObject());
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__parentController);
        attr.setAuxData(value);
    }

    /**
     * Removes the parentController attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:767)
    public void remParentController(){
        mycore.remParentController();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:728)
    public String getSubpackage(){
        return(mycore.getSubpackage());
    }

    /**
     * Sets subpackage to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:756)
    public void setSubpackage(Object value) throws DmcValueException {
        mycore.setSubpackage(value);
    }

    /**
     * Removes the subpackage attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:767)
    public void remSubpackage(){
        mycore.remSubpackage();
    }

    /**
     * @return The number of MvcActionDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getDefinesActionSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesAction);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcActionDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getDefinesActionIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesAction);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcActionDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getDefinesActionHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesAction);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcActionDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcActionIterableDMW getDefinesActionIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__definesAction);
        if (attr == null)
            return(MvcActionIterableDMW.emptyList);
        
        return(new MvcActionIterableDMW(attr.getMV()));
    }

    /**
     * Adds another definesAction value.
     * @param value A value compatible with MvcAction
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addDefinesAction(MvcAction value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addDefinesAction(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a definesAction value.
     * @param value The MvcAction to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delDefinesAction(MvcAction value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delDefinesAction(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcAction> refs = (ArrayList<MvcAction>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the definesAction attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remDefinesAction(){
        mycore.remDefinesAction();
    }

    /**
     * @return The number of MvcMenuDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getDefinesMenuSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenu);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcMenuDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getDefinesMenuIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenu);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcMenuDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getDefinesMenuHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenu);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcMenuDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcMenuIterableDMW getDefinesMenuIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__definesMenu);
        if (attr == null)
            return(MvcMenuIterableDMW.emptyList);
        
        return(new MvcMenuIterableDMW(attr.getMV()));
    }

    /**
     * Adds another definesMenu value.
     * @param value A value compatible with MvcMenu
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addDefinesMenu(MvcMenu value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addDefinesMenu(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a definesMenu value.
     * @param value The MvcMenu to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delDefinesMenu(MvcMenu value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delDefinesMenu(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcMenu> refs = (ArrayList<MvcMenu>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the definesMenu attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remDefinesMenu(){
        mycore.remDefinesMenu();
    }

    /**
     * @return The number of MvcMenuItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getDefinesMenuItemSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenuItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcMenuItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getDefinesMenuItemIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenuItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcMenuItemDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getDefinesMenuItemHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenuItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcMenuItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcMenuItemIterableDMW getDefinesMenuItemIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__definesMenuItem);
        if (attr == null)
            return(MvcMenuItemIterableDMW.emptyList);
        
        return(new MvcMenuItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another definesMenuItem value.
     * @param value A value compatible with MvcMenuItem
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addDefinesMenuItem(MvcMenuItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addDefinesMenuItem(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a definesMenuItem value.
     * @param value The MvcMenuItem to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delDefinesMenuItem(MvcMenuItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delDefinesMenuItem(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcMenuItem> refs = (ArrayList<MvcMenuItem>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the definesMenuItem attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remDefinesMenuItem(){
        mycore.remDefinesMenuItem();
    }

    /**
     * @return The number of MvcMenuSeparatorDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:817)
    public int getDefinesMenuSeparatorSize(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenuSeparator);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcMenuSeparatorDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:829)
    public boolean getDefinesMenuSeparatorIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenuSeparator);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcMenuSeparatorDMO items.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:841)
    public boolean getDefinesMenuSeparatorHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcControllerDMO.__definesMenuSeparator);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcMenuSeparatorDMO objects.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:879)
    public MvcMenuSeparatorIterableDMW getDefinesMenuSeparatorIterable(){
        DmcAttribute attr = mycore.get(MvcControllerDMO.__definesMenuSeparator);
        if (attr == null)
            return(MvcMenuSeparatorIterableDMW.emptyList);
        
        return(new MvcMenuSeparatorIterableDMW(attr.getMV()));
    }

    /**
     * Adds another definesMenuSeparator value.
     * @param value A value compatible with MvcMenuSeparator
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:897)
    public DmcAttribute<?> addDefinesMenuSeparator(MvcMenuSeparator value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addDefinesMenuSeparator(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a definesMenuSeparator value.
     * @param value The MvcMenuSeparator to be deleted from set of attribute values.
     */
    @SuppressWarnings("unchecked")
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:918)
    public void delDefinesMenuSeparator(MvcMenuSeparator value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.delDefinesMenuSeparator(value);
        if (attr == null)
            return;
        
        attr.del(value.getDmcObject());
        
        ArrayList<MvcMenuSeparator> refs = (ArrayList<MvcMenuSeparator>) attr.getAuxData();
        
        if (refs != null){
            refs.remove(value);
        }
    }

    /**
     * Removes the definesMenuSeparator attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:974)
    public void remDefinesMenuSeparator(){
        mycore.remDefinesMenuSeparator();
    }

    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:728)
    public StringName getName(){
        return(mycore.getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:756)
    public void setName(Object value) throws DmcValueException {
        mycore.setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:767)
    public void remName(){
        mycore.remName();
    }


}
