package org.dmd.features.extgwt.examples.modules.client.applications.exapp.generated.mvc;

import com.extjs.gxt.ui.client.mvc.Controller;
import com.extjs.gxt.ui.client.mvc.View;
import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.event.EventType;
import com.extjs.gxt.ui.client.Registry;
import com.extjs.gxt.ui.client.widget.ContentPanel;
import com.extjs.gxt.ui.client.widget.LayoutContainer;
import com.extjs.gxt.ui.client.widget.Viewport;
import org.dmd.features.extgwt.examples.modules.client.applications.exapp.extended.ExampleAppController;

/**
 * The AppView has a dual responsibility, when it is first created by the
 * AppController, it creates and displays the Login dialog. Once login is
 * complete it dispatches the app.init event. Now, because the AppController
 * is the first controller registered with the dispatcher, it forwards the
 * app.init event to AppView and the AppView then initializes the overall
 * container for the application.
 * <P>
 * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.features.extgwt.extended.MvcView.initCodeGenInfo(MvcView.java:81)
 */
abstract public class ExampleAppViewMVC extends View {

    protected ExampleAppController myController;

    // Resources
    protected Viewport exappViewViewport;
    protected ContentPanel exappViewWestpanel;
    protected LayoutContainer exappViewCenter;

    protected ExampleAppViewMVC(Controller controller){
        super(controller);
        myController = (ExampleAppController) controller;
    }

    /**
     * Derived classes must override this method to perform their initialization behaviour.
     */
    abstract protected void initialize();

    public void handleEvent(AppEvent event) {
        EventType type = event.getType();
        if (type == myController.CommonInit) {
            handleCommonInitEvent(event);
        }
    }


    /**
     * The derived class must overload this method to handle the common.init event.
     * <P>
     * The init event is generated once the user has logged in to the system.
     */
    abstract protected void handleCommonInitEvent(AppEvent event);

    /**
     * @return The overall viewport of the application which is configured with a
     * border layout.
     */
    protected Viewport getExappViewViewport(){
        if (exappViewViewport == null)
            exappViewViewport = (Viewport) Registry.get("exapp.view.viewport");
        return(exappViewViewport);
    }

    /**
     * Adds the ExappViewViewport item to the Registry.
     * The overall viewport of the application which is configured with a border
     * layout.
     */
    protected void registerExappViewViewport(Viewport item){
            Registry.register("exapp.view.viewport", item);
    }

    /**
     * @return The west portion of the overall border layout that forms the main
     * window.
     */
    protected ContentPanel getExappViewWestpanel(){
        if (exappViewWestpanel == null)
            exappViewWestpanel = (ContentPanel) Registry.get("exapp.view.westpanel");
        return(exappViewWestpanel);
    }

    /**
     * Adds the ExappViewWestpanel item to the Registry.
     * The west portion of the overall border layout that forms the main window.
     */
    protected void registerExappViewWestpanel(ContentPanel item){
            Registry.register("exapp.view.westpanel", item);
    }

    /**
     * @return The center portion of the overall border layout configured with a
     * fit layout.
     */
    protected LayoutContainer getExappViewCenter(){
        if (exappViewCenter == null)
            exappViewCenter = (LayoutContainer) Registry.get("exapp.view.center");
        return(exappViewCenter);
    }

    /**
     * Adds the ExappViewCenter item to the Registry.
     * The center portion of the overall border layout configured with a fit
     * layout.
     */
    protected void registerExappViewCenter(LayoutContainer item){
            Registry.register("exapp.view.center", item);
    }

}
