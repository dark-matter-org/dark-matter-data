//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.examples.generated.dmo;

import java.util.*;

import org.dmd.dms.generated.enums.ValueTypeEnum;
import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
// import 3 Integer
import org.dmd.dmc.types.DmcTypeInteger;
// import 3 String
import org.dmd.dmc.types.DmcTypeString;

// import 5
import org.dmd.dms.generated.dmo.DmwWrapperDMO;
// import 7
import org.dmd.dmc.DmcNamedObjectIF;

@SuppressWarnings("serial")
/**
 * The MailItem class represents a single piece of email.
 * <P>
 * Generated from the mail schema at version unknown
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:659)
 */
public class MailItemDMO  extends DmwWrapperDMO  implements DmcNamedObjectIF  {

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __body = new DmcAttributeInfo("body",355,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __email = new DmcAttributeInfo("email",353,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __mailID = new DmcAttributeInfo("mailID",351,"Integer",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __sender = new DmcAttributeInfo("sender",352,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __subject = new DmcAttributeInfo("subject",354,"String",ValueTypeEnum.SINGLE,false);

    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__body.id,__body);
        _ImAp.put(__email.id,__email);
        _ImAp.put(__mailID.id,__mailID);
        _ImAp.put(__sender.id,__sender);
        _ImAp.put(__subject.id,__subject);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__body.name,__body);
        _SmAp.put(__email.name,__email);
        _SmAp.put(__mailID.name,__mailID);
        _SmAp.put(__sender.name,__sender);
        _SmAp.put(__subject.name,__subject);
    }

    public MailItemDMO() {
        super("MailItem",_ImAp,_SmAp);
    }

    protected MailItemDMO(String oc) {
        super(oc,_ImAp,_SmAp);
    }

    public MailItemDMO(String oc, Map<Integer,DmcAttributeInfo> im, Map<String,DmcAttributeInfo> sm){
        super(oc,im,sm);
    }

    public MailItemDMO(MailItemDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    @Override
    public MailItemDMO getOneOfMe() {
        MailItemDMO rc = new MailItemDMO(this.getConstructionClassName());
        return(rc);
    }

    @SuppressWarnings("unchecked")
    public String getObjectName(){
        DmcAttribute name = get(__mailID);
        if (name != null)
            return(name.getString());
    
        return(null);
    }

    public boolean equals(Object obj){
        if (obj instanceof MailItemDMO){
            return( getObjectName().equals( ((MailItemDMO) obj).getObjectName()) );
        }
        return(false);
    }

    public Integer getMailID(){
        DmcTypeInteger attr = (DmcTypeInteger) get(__mailID);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets mailID to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    @SuppressWarnings("unchecked")
    public void setMailID(Object value) throws DmcValueException {
        DmcAttribute attr = get(__mailID);
        if (attr == null)
            attr = new DmcTypeInteger();
        
        attr.set(value);
        set(__mailID,attr);
    }

    /**
     * Removes the mailID attribute value.
     */
    public void remMailID(){
         rem(__mailID);
    }

    public String getSender(){
        DmcTypeString attr = (DmcTypeString) get(__sender);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets sender to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setSender(Object value) throws DmcValueException {
        DmcAttribute attr = get(__sender);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(__sender,attr);
    }

    /**
     * Removes the sender attribute value.
     */
    public void remSender(){
         rem(__sender);
    }

    public String getEmail(){
        DmcTypeString attr = (DmcTypeString) get(__email);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets email to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setEmail(Object value) throws DmcValueException {
        DmcAttribute attr = get(__email);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(__email,attr);
    }

    /**
     * Removes the email attribute value.
     */
    public void remEmail(){
         rem(__email);
    }

    public String getSubject(){
        DmcTypeString attr = (DmcTypeString) get(__subject);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets subject to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setSubject(Object value) throws DmcValueException {
        DmcAttribute attr = get(__subject);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(__subject,attr);
    }

    /**
     * Removes the subject attribute value.
     */
    public void remSubject(){
         rem(__subject);
    }

    public String getBody(){
        DmcTypeString attr = (DmcTypeString) get(__body);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets body to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setBody(Object value) throws DmcValueException {
        DmcAttribute attr = get(__body);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(__body,attr);
    }

    /**
     * Removes the body attribute value.
     */
    public void remBody(){
         rem(__body);
    }




}
