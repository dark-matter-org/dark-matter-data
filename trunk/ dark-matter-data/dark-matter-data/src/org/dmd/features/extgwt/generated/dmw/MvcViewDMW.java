package org.dmd.features.extgwt.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:835)
import java.util.ArrayList;                                                      // To support getMVCopy()
import java.util.Iterator;                                                       // To support getMVCopy()
import org.dmd.dmc.*;                                                            // If any attributes
import org.dmd.dmc.types.StringName;                                             // Primitive type
import org.dmd.dms.*;                                                            // Always 2
import org.dmd.dms.generated.types.DmcTypeModifierMV;                            // Required for MODREC constructor
import org.dmd.features.extgwt.extended.MvcDefinition;                           // Derived class
import org.dmd.features.extgwt.extended.MvcEvent;                                // Is reference type aux
import org.dmd.features.extgwt.extended.MvcRegistryItem;                         // Is reference type aux
import org.dmd.features.extgwt.extended.MvcServerEvent;                          // Is reference type aux
import org.dmd.features.extgwt.extended.MvcView;                                 // Required for getModificationRecorder()
import org.dmd.features.extgwt.generated.dmo.MvcEventDMO;                        // For multi-valued containsMvcEvent
import org.dmd.features.extgwt.generated.dmo.MvcRegistryItemDMO;                 // For multi-valued containsMvcRegistryItem
import org.dmd.features.extgwt.generated.dmo.MvcServerEventDMO;                  // For multi-valued containsMvcServerEvent
import org.dmd.features.extgwt.generated.dmo.MvcViewDMO;                         // Class not auxiliary or abstract
import org.dmd.features.extgwt.generated.dmw.MvcEventIterableDMW;                // For multi-valued MvcEvent
import org.dmd.features.extgwt.generated.dmw.MvcRegistryItemIterableDMW;         // For multi-valued MvcRegistryItem
import org.dmd.features.extgwt.generated.dmw.MvcServerEventIterableDMW;          // For multi-valued MvcServerEvent
import org.dmd.features.extgwt.generated.types.MvcEventREF;                      // To support getMVCopy() for REFs
import org.dmd.features.extgwt.generated.types.MvcRegistryItemREF;               // To support getMVCopy() for REFs
import org.dmd.features.extgwt.generated.types.MvcServerEventREF;                // To support getMVCopy() for REFs

/**
 * The MvcView class allows for the definition of views. MvcView instance are
 * derived from the ExtGWT View class.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:343)
 */
abstract public class MvcViewDMW extends MvcDefinition implements DmcNamedObjectIF {

    private MvcViewDMO mycore;

    public MvcViewDMW() {
        super(new MvcViewDMO(), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcView);
        mycore = (MvcViewDMO) core;
        mycore.setContainer(this);
    }

    public MvcViewDMW(DmcTypeModifierMV mods) {
        super(new MvcViewDMO(mods), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcView);
        mycore = (MvcViewDMO) core;
        mycore.setContainer(this);
    }

    public MvcViewDMW getModificationRecorder(){
        MvcViewDMW rc = new MvcView();
        rc.setDmcObject(new MvcViewDMO(new DmcTypeModifierMV()));
        rc.setName(getName());
        return(rc);
    }

    public MvcViewDMW(MvcViewDMO obj) {
        super(obj, org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcView);
        mycore = (MvcViewDMO) core;
        mycore.setContainer(this);
    }

    @Override
    public void setDmcObject(DmcObject obj) {
        mycore = (MvcViewDMO) obj;
        mycore.setContainer(this);
        super.setDmcObject(obj);
    }

    public MvcViewDMO getDMO() {
        return(mycore);
    }

    protected MvcViewDMW(MvcViewDMO obj, ClassDefinition cd) {
        super(obj,cd);
        mycore = (MvcViewDMO) core;
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:861)
    public StringName getObjectName(){
        return(mycore.getName());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(mycore.getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcViewDMW){
            return( getObjectName().equals( ((MvcViewDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1107)
    public int getHandlesEventSize(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1119)
    public boolean getHandlesEventIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1131)
    public boolean getHandlesEventHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public MvcEventIterableDMW getHandlesEventIterable(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__handlesEvent);
        if (attr == null)
            return(MvcEventIterableDMW.emptyList);
        
        return(new MvcEventIterableDMW(attr.getMV()));
    }

    /**
     * Adds another handlesEvent value.
     * @param value A value compatible with MvcEvent
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1166)
    public DmcAttribute<?> addHandlesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addHandlesEvent(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1179)
    public void delHandlesEvent(MvcEvent value) throws DmcValueException {
        mycore.delHandlesEvent(value);
    }

    /**
     * @return A COPY of the collection of MvcEvent objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1214)
    public ArrayList<MvcEvent> getHandlesEventCopy(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesEvent);
        if (attr == null)
            return(new ArrayList<MvcEvent>());
        
        ArrayList<MvcEvent> rc = new ArrayList<MvcEvent>(attr.getMVSize());
        
        MvcEventIterableDMW it = getHandlesEventIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void remHandlesEvent(){
        mycore.remHandlesEvent();
    }

    /**
     * @return The number of MvcServerEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1107)
    public int getHandlesServerEventSize(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesServerEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcServerEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1119)
    public boolean getHandlesServerEventIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesServerEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcServerEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1131)
    public boolean getHandlesServerEventHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesServerEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcServerEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public MvcServerEventIterableDMW getHandlesServerEventIterable(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__handlesServerEvent);
        if (attr == null)
            return(MvcServerEventIterableDMW.emptyList);
        
        return(new MvcServerEventIterableDMW(attr.getMV()));
    }

    /**
     * Adds another handlesServerEvent value.
     * @param value A value compatible with MvcServerEvent
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1166)
    public DmcAttribute<?> addHandlesServerEvent(MvcServerEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addHandlesServerEvent(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a handlesServerEvent value.
     * @param value The MvcServerEvent to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1179)
    public void delHandlesServerEvent(MvcServerEvent value) throws DmcValueException {
        mycore.delHandlesServerEvent(value);
    }

    /**
     * @return A COPY of the collection of MvcServerEvent objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1214)
    public ArrayList<MvcServerEvent> getHandlesServerEventCopy(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__handlesServerEvent);
        if (attr == null)
            return(new ArrayList<MvcServerEvent>());
        
        ArrayList<MvcServerEvent> rc = new ArrayList<MvcServerEvent>(attr.getMVSize());
        
        MvcServerEventIterableDMW it = getHandlesServerEventIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the handlesServerEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void remHandlesServerEvent(){
        mycore.remHandlesServerEvent();
    }

    /**
     * @return A MvcEvent object.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:965)
    public MvcEvent getFiresEvent(){
        MvcEventREF ref = mycore.getFiresEvent();
        if (ref == null)
            return(null);
        
        return((MvcEvent)ref.getObject().getContainer());
    }

    /**
     * Sets the firesEvent to the specified value.
     * @param value A value compatible with MvcEventREF
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1010)
    public void setFiresEvent(MvcEvent value) {
        mycore.setFiresEvent(value.getDMO());
    }

    /**
     * Removes the firesEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1057)
    public void remFiresEvent(){
        mycore.remFiresEvent();
    }

    /**
     * @return The number of MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1107)
    public int getDispatchesEventSize(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__dispatchesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1119)
    public boolean getDispatchesEventIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__dispatchesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1131)
    public boolean getDispatchesEventHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__dispatchesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public MvcEventIterableDMW getDispatchesEventIterable(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__dispatchesEvent);
        if (attr == null)
            return(MvcEventIterableDMW.emptyList);
        
        return(new MvcEventIterableDMW(attr.getMV()));
    }

    /**
     * Adds another dispatchesEvent value.
     * @param value A value compatible with MvcEvent
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1166)
    public DmcAttribute<?> addDispatchesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addDispatchesEvent(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a dispatchesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1179)
    public void delDispatchesEvent(MvcEvent value) throws DmcValueException {
        mycore.delDispatchesEvent(value);
    }

    /**
     * @return A COPY of the collection of MvcEvent objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1214)
    public ArrayList<MvcEvent> getDispatchesEventCopy(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__dispatchesEvent);
        if (attr == null)
            return(new ArrayList<MvcEvent>());
        
        ArrayList<MvcEvent> rc = new ArrayList<MvcEvent>(attr.getMVSize());
        
        MvcEventIterableDMW it = getDispatchesEventIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the dispatchesEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void remDispatchesEvent(){
        mycore.remDispatchesEvent();
    }

    /**
     * @return The number of MvcRegistryItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1107)
    public int getUsesRegistryItemSize(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__usesRegistryItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcRegistryItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1119)
    public boolean getUsesRegistryItemIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__usesRegistryItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcRegistryItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1131)
    public boolean getUsesRegistryItemHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__usesRegistryItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public MvcRegistryItemIterableDMW getUsesRegistryItemIterable(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__usesRegistryItem);
        if (attr == null)
            return(MvcRegistryItemIterableDMW.emptyList);
        
        return(new MvcRegistryItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another usesRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1166)
    public DmcAttribute<?> addUsesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addUsesRegistryItem(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a usesRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1179)
    public void delUsesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        mycore.delUsesRegistryItem(value);
    }

    /**
     * @return A COPY of the collection of MvcRegistryItem objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1214)
    public ArrayList<MvcRegistryItem> getUsesRegistryItemCopy(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__usesRegistryItem);
        if (attr == null)
            return(new ArrayList<MvcRegistryItem>());
        
        ArrayList<MvcRegistryItem> rc = new ArrayList<MvcRegistryItem>(attr.getMVSize());
        
        MvcRegistryItemIterableDMW it = getUsesRegistryItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the usesRegistryItem attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void remUsesRegistryItem(){
        mycore.remUsesRegistryItem();
    }

    /**
     * @return The number of MvcRegistryItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1107)
    public int getCreatesRegistryItemSize(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__createsRegistryItem);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcRegistryItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1119)
    public boolean getCreatesRegistryItemIsEmpty(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__createsRegistryItem);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcRegistryItemDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1131)
    public boolean getCreatesRegistryItemHasValue(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__createsRegistryItem);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcRegistryItemDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1150)
    public MvcRegistryItemIterableDMW getCreatesRegistryItemIterable(){
        DmcAttribute attr = mycore.get(MvcViewDMO.__createsRegistryItem);
        if (attr == null)
            return(MvcRegistryItemIterableDMW.emptyList);
        
        return(new MvcRegistryItemIterableDMW(attr.getMV()));
    }

    /**
     * Adds another createsRegistryItem value.
     * @param value A value compatible with MvcRegistryItem
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1166)
    public DmcAttribute<?> addCreatesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        DmcAttribute<?> attr = mycore.addCreatesRegistryItem(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a createsRegistryItem value.
     * @param value The MvcRegistryItem to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1179)
    public void delCreatesRegistryItem(MvcRegistryItem value) throws DmcValueException {
        mycore.delCreatesRegistryItem(value);
    }

    /**
     * @return A COPY of the collection of MvcRegistryItem objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1214)
    public ArrayList<MvcRegistryItem> getCreatesRegistryItemCopy(){
        DmcAttribute<?> attr = mycore.get(MvcViewDMO.__createsRegistryItem);
        if (attr == null)
            return(new ArrayList<MvcRegistryItem>());
        
        ArrayList<MvcRegistryItem> rc = new ArrayList<MvcRegistryItem>(attr.getMVSize());
        
        MvcRegistryItemIterableDMW it = getCreatesRegistryItemIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the createsRegistryItem attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1346)
    public void remCreatesRegistryItem(){
        mycore.remCreatesRegistryItem();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:986)
    public String getDescription(){
        return(mycore.getDescription());
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1033)
    public void setDescription(Object value) throws DmcValueException {
        mycore.setDescription(value);
    }

    /**
     * Sets description to the specified value.
     * @param value String
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1042)
    public void setDescription(String value){
        mycore.setDescription(value);
    }

    /**
     * Removes the description attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1057)
    public void remDescription(){
        mycore.remDescription();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:986)
    public StringName getName(){
        return(mycore.getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1033)
    public void setName(Object value) throws DmcValueException {
        mycore.setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1042)
    public void setName(StringName value){
        mycore.setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1057)
    public void remName(){
        mycore.remName();
    }


}
