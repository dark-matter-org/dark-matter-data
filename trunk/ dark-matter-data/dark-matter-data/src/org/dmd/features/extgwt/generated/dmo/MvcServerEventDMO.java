//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
// import 3 String
import org.dmd.dmc.types.DmcTypeString;

// import 6
import org.dmd.features.extgwt.generated.dmo.MvcDefinitionDMO;
// import 7
import org.dmd.dmc.DmcNamedObjectIF;

@SuppressWarnings("serial")
/**
 * null
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:451)
 */
public class MvcServerEventDMO  extends MvcDefinitionDMO  implements DmcNamedObjectIF  {

    public final static String _description = "description";
    public final static String _camelCaseName = "camelCaseName";
    public final static String _name = "name";
    public final static String _eventDataType = "eventDataType";

    public MvcServerEventDMO() {
        super("MvcServerEvent");
    }

    protected MvcServerEventDMO(String oc) {
        super(oc);
    }

    @SuppressWarnings("unchecked")
    public String getObjectName(){
        DmcAttribute name = get(_name);
        if (name != null)
            return(name.getString());
    
        return(null);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcServerEventDMO){
            return( getObjectName().equals( ((MvcServerEventDMO) obj).getObjectName()) );
        }
        return(false);
    }

    public String getDescription(){
        DmcTypeString attr = (DmcTypeString) get(_description);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setDescription(Object value) throws DmcValueException {
        DmcAttribute attr = get(_description);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_description,attr);
    }

    /**
     * Removes the description attribute value.
     */
    public void remDescription(){
         rem(_description);
    }

    public String getCamelCaseName(){
        DmcTypeString attr = (DmcTypeString) get(_camelCaseName);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets camelCaseName to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setCamelCaseName(Object value) throws DmcValueException {
        DmcAttribute attr = get(_camelCaseName);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_camelCaseName,attr);
    }

    /**
     * Removes the camelCaseName attribute value.
     */
    public void remCamelCaseName(){
         rem(_camelCaseName);
    }

    public String getName(){
        DmcTypeString attr = (DmcTypeString) get(_name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setName(Object value) throws DmcValueException {
        DmcAttribute attr = get(_name);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    public void remName(){
         rem(_name);
    }

    public String getEventDataType(){
        DmcTypeString attr = (DmcTypeString) get(_eventDataType);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets eventDataType to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setEventDataType(Object value) throws DmcValueException {
        DmcAttribute attr = get(_eventDataType);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_eventDataType,attr);
    }

    /**
     * Removes the eventDataType attribute value.
     */
    public void remEventDataType(){
         rem(_eventDataType);
    }




}
