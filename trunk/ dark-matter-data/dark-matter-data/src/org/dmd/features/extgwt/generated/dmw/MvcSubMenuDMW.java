package org.dmd.features.extgwt.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:715)
import java.util.*;                                                 // If not auxiliary
import org.dmd.dmc.*;                                               // If any attributes
import org.dmd.dmc.types.StringName;                                // Primitive type
import org.dmd.dms.*;                                               // Always 2
import org.dmd.features.extgwt.extended.MvcMenu;                    // Derived class
import org.dmd.features.extgwt.generated.dmo.MvcSubMenuDMO;         // Class not auxiliary or abstract
import org.dmd.features.extgwt.generated.types.MvcMenuREF;          // Is reference type

/**
 * null
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:339)
 */
abstract public class MvcSubMenuDMW extends MvcMenu implements DmcNamedObjectIF {

    private MvcSubMenuDMO mycore;

    public MvcSubMenuDMW() {
        super(new MvcSubMenuDMO(), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcSubMenu);
        mycore = (MvcSubMenuDMO) core;
        mycore.setContainer(this);
    }

    public MvcSubMenuDMW(MvcSubMenuDMO obj) {
        super(obj, org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcSubMenu);
        mycore = (MvcSubMenuDMO) core;
        mycore.setContainer(this);
    }

    @Override
    public void setDmcObject(DmcObject obj) {
        mycore = (MvcSubMenuDMO) obj;
        mycore.setContainer(this);
        super.setDmcObject(obj);
    }

    protected MvcSubMenuDMW(MvcSubMenuDMO obj, ClassDefinition cd) {
        super(obj,cd);
        mycore = (MvcSubMenuDMO) core;
    }

    @Override
    protected ArrayList<?> getAuxDataHolder() {
        return(new ArrayList<org.dmd.features.extgwt.extended.MvcSubMenu>());
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:741)
    public StringName getObjectName(){
        return(mycore.getName());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(mycore.getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcSubMenuDMW){
            return( getObjectName().equals( ((MvcSubMenuDMW) obj).getObjectName()) );
        }
        return(false);
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:844)
    public String getDisplayLabel(){
        return(mycore.getDisplayLabel());
    }

    /**
     * Sets displayLabel to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:873)
    public void setDisplayLabel(Object value) throws DmcValueException {
        mycore.setDisplayLabel(value);
    }

    /**
     * Sets displayLabel to the specified value.
     * @param value String
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:882)
    public void setDisplayLabel(String value){
        mycore.setDisplayLabel(value);
    }

    /**
     * Removes the displayLabel attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:897)
    public void remDisplayLabel(){
        mycore.remDisplayLabel();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:844)
    public StringName getName(){
        return(mycore.getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:873)
    public void setName(Object value) throws DmcValueException {
        mycore.setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:882)
    public void setName(StringName value){
        mycore.setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:897)
    public void remName(){
        mycore.remName();
    }

    /**
     * @return A MvcMenu object.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:825)
    public MvcMenu getAddToMenu(){
        MvcMenuREF ref = mycore.getAddToMenu();
        if (ref == null)
            return(null);
        
        return((MvcMenu)ref.getObject().getContainer());
    }

    /**
     * Sets the addToMenu to the specified value.
     * @param value A value compatible with MvcMenuREF
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:861)
    public void setAddToMenu(MvcMenu value) throws DmcValueException {
        mycore.setAddToMenu(value.getDmcObject());
    }

    /**
     * Removes the addToMenu attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:897)
    public void remAddToMenu(){
        mycore.remAddToMenu();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:844)
    public Integer getMenuOrder(){
        return(mycore.getMenuOrder());
    }

    /**
     * Sets menuOrder to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:873)
    public void setMenuOrder(Object value) throws DmcValueException {
        mycore.setMenuOrder(value);
    }

    /**
     * Sets menuOrder to the specified value.
     * @param value Integer
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:882)
    public void setMenuOrder(Integer value){
        mycore.setMenuOrder(value);
    }

    /**
     * Removes the menuOrder attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:897)
    public void remMenuOrder(){
        mycore.remMenuOrder();
    }


}
