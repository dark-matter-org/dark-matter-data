package org.dmd.features.extgwt.extended;

import java.util.Iterator;

import org.dmd.features.extgwt.generated.dmw.MvcApplicationDMW;
import org.dmd.util.exceptions.DebugInfo;
import org.dmd.util.formatting.CodeFormatter;

public class MvcApplication extends MvcApplicationDMW {

//	ConfigLocation	configLocation;
//	String			genPackage;
	
	StringBuffer					importDefs;
	
	// The class comment
	StringBuffer					classComments;
	
	// The local variables we need - this is for views and resources
	StringBuffer					localVariables;
	
	public MvcApplication(){
		super();
	}
		
	public String getImportDefs(){
		return(importDefs.toString());
	}
	
	public String getClassComments(){
		return(classComments.toString());
	}
	
	public String getLocalVariables(){
		return(localVariables.toString());
	}

	/**
	 * Initializes the code generation information for the application.
	 */
	public void initCodeGenInfo(){
//	public void initCodeGenInfo(ConfigLocation loc, String gp){
		if (importDefs == null){
//			configLocation 	= loc;
//			genPackage 		= gp;
			importDefs 		= new StringBuffer();
			classComments	= new StringBuffer();
			localVariables	= new StringBuffer();
			
			initImportDefs();
			
			initLocalVariables();
			
			classComments.append("/**\n");
			CodeFormatter.dumpCodeComment(getDescription(), classComments, " * ");
			classComments.append(" * <P>\n");
			classComments.append(" * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!\n");
			classComments.append(" * Generated from: " + DebugInfo.getWhereWeAreNow() + "\n");
			classComments.append(" */\n");

			
		}
	}
	
	void initImportDefs(){
		importDefs.append("import java.util.TreeMap;\n");
		importDefs.append("import com.extjs.gxt.ui.client.mvc.Dispatcher;\n");
		importDefs.append("import com.extjs.gxt.ui.client.event.EventType;\n");
		importDefs.append("import com.extjs.gxt.ui.client.Registry;\n");
		importDefs.append("import org.dmd.features.extgwt.client.ApplicationIF;\n");
		
		Iterator<MvcController> controllers = getControllers();
		while(controllers.hasNext()){
			MvcController 	controller 	= controllers.next();
			
			importDefs.append("import " + controller.getExtendedImportDef() + ";\n");
			
//			File extended = new File(configLocation.getConfigParentDirectory() + File.separator + "extended" + File.separator + controller.getName() + ".java");
//			if (!extended.exists()){
//				System.out.println("Have to create: " + extended.getAbsolutePath());
//			}
			
		}
	}
	
	void initLocalVariables(){
		localVariables.append("    TreeMap<String,EventType> events;\n");
	}
}
