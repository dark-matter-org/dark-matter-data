package org.dmd.features.extgwt.examples.modules.client.features.exsecurity.generated.mvc;

import com.extjs.gxt.ui.client.mvc.Controller;
import java.util.ArrayList;
import com.extjs.gxt.ui.client.mvc.AppEvent;
import com.extjs.gxt.ui.client.event.EventType;
import com.extjs.gxt.ui.client.Registry;
import org.dmd.features.extgwt.client.ApplicationIF;
import org.dmd.features.extgwt.client.extended.MenuController;
import org.dmd.features.extgwt.client.extended.ServerEventController;
import org.dmd.features.extgwt.client.util.menu.DefaultMenuItem;
import org.dmd.features.extgwt.client.util.menu.DefaultToolbarSubmenu;
import org.dmd.features.extgwt.examples.modules.client.features.exsecurity.extended.ActionLogout;
import org.dmd.features.extgwt.examples.modules.client.features.exsecurity.extended.SecurityView;
import org.dmd.features.extgwt.examples.modules.client.features.exsecurity.extended.UserView;
import org.dmd.features.extgwt.client.ServerEventHandlerIF;
import org.dmd.dmp.shared.generated.dmo.EventDMO;
import org.dmd.dmp.shared.generated.enums.EventTypeEnum;
import org.dmd.features.extgwt.examples.modules.shared.features.security.generated.dmo.UserGroupDMO;

/**
 * The SecurityController handles our login and feature access.
 * <P>
 * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!
 * Generated from: org.dmd.features.extgwt.extended.MvcController.initCodeGenInfo(MvcController.java:97)
 */
abstract public class SecurityControllerMVC extends Controller implements ServerEventHandlerIF {

    // Resources
    protected ApplicationIF application;
    protected ServerEventController mvcServerEventController;

    // Events
    public EventType CommonInit;
    public EventType CommonPerformLogin;
    public EventType MvcInitEventFramework;
    public EventType MvcRegisterMenus;

    // View(s)
    protected SecurityView securityView;

    // MultiView(s)
    protected ArrayList<UserView> userViews;

    // Action(s)
    protected ActionLogout actionLogout;

    // Menus
    protected DefaultToolbarSubmenu secMenu;

    // Menu items
    protected DefaultMenuItem secMenuLogout;

    protected SecurityControllerMVC(){
        // Resolve our events
        CommonInit = getApplication().getEvent("common.init");
        CommonPerformLogin = getApplication().getEvent("common.performLogin");
        MvcInitEventFramework = getApplication().getEvent("mvc.init.eventFramework");
        MvcRegisterMenus = getApplication().getEvent("mvc.registerMenus");

        registerEventTypes(CommonInit);
        registerEventTypes(CommonPerformLogin);
        registerEventTypes(MvcInitEventFramework);
        registerEventTypes(MvcRegisterMenus);

        // Instantiate our views
        securityView = new SecurityView(this);

        // Instantiate our multiviews
        userViews = new ArrayList<UserView>();

        // Instantiate our actions
        actionLogout = new ActionLogout(this);

        // Instantiate our menus
        secMenu = new DefaultToolbarSubmenu("sec.menu", "050", "common.mainMenuBar", "Security");

        // Instantiate our menu items
        secMenuLogout = new DefaultMenuItem("sec.menu.logout","010","action.logout","sec.menu","Logout");    }

    /**
     * Derived classes must override this method to perform their initialization behaviour.
     */
    abstract protected void initialize();

    public void handleEvent(AppEvent event) {
        EventType type = event.getType();
        if (type == CommonInit) {
            handleCommonInitEvent(event);
            forwardToView(securityView,event);
            for(UserView view: userViews){
                forwardToView(view,event);
            }
        }
        else if (type == CommonPerformLogin) {
            handleCommonPerformLoginEvent(event);
        }
        else if (type == MvcInitEventFramework) {
            handleMvcInitEventFrameworkEvent(event);
            forwardToView(securityView,event);
        }
        else if (type == MvcRegisterMenus) {
            handleMvcRegisterMenusEvent(event,(MenuController)event.getData());
        }
    }

    /**
     * The derived class must overload this method to handle the common.init event.
     * <P>
     * The init event is generated once the user has logged in to the system.
     */
    abstract protected void handleCommonInitEvent(AppEvent event);

    /**
     * The derived class must overload this method to handle the common.performLogin event.
     * <P>
     * The performLogin event is usually generated when an application wants to
     * perform its login behaviour.
     */
    abstract protected void handleCommonPerformLoginEvent(AppEvent event);

    /**
     * When we receive this event, we add ourselves to handle various server events.
     */
    protected void handleMvcInitEventFrameworkEvent(AppEvent event){
        getMvcServerEventController().addEventHandler(this,"UserGroup");
    }

    /**
     * When we receive this event, we add our menus, items and actions
     * to the menu controller.
     */
    protected void handleMvcRegisterMenusEvent(AppEvent event, MenuController mc){
        mc.addAction(actionLogout);
        mc.addMenu(secMenu);
        mc.addMenuItem(secMenuLogout);
    }

    /**
     * @return This is the universal handle to the application.
     */
    protected ApplicationIF getApplication(){
        if (application == null)
            application = (ApplicationIF) Registry.get("application");
        return(application);
    }

    /**
     * @return Handle to the server event controller.
     */
    protected ServerEventController getMvcServerEventController(){
        if (mvcServerEventController == null)
            mvcServerEventController = (ServerEventController) Registry.get("mvc.serverEventController");
        return(mvcServerEventController);
    }

    public UserView createUserView(String instanceName){
        UserView rc = new UserView(instanceName,this);
        userViews.add(rc);
        return(rc);
    }

    public boolean removeUserView(UserView instance){
        return(userViews.remove(instance));
    }

    public void handleServerEvent(EventDMO event) {
        if (event.getObjClass().equals("UserGroup"))
            handleSecUserGroupUpdate(event.getEventType(),(UserGroupDMO)event.getEventObject());
    }

    /**
     * The derived class must overload this method to handle the sec.userGroupUpdate event.
     * <P>
     * The sec.userGroupUpdate event is relayed to us when server events are
     * generated for UserGroup objects.
     */
    abstract protected void handleSecUserGroupUpdate(EventTypeEnum etype, UserGroupDMO obj);

}
