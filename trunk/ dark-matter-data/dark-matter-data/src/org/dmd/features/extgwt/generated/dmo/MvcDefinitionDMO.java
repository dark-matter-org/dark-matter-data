//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

// Generated from: org.dmd.dms.util.DmoFormatter.formatImports(DmoFormatter.java:713)
import java.util.*;                                                         // Always required
import org.dmd.dmc.DmcAttribute;                                            // Any attributes
import org.dmd.dmc.DmcAttributeInfo;                                        // Always required
import org.dmd.dmc.DmcNamedObjectIF;                                        // Named object
import org.dmd.dmc.DmcValueException;                                       // Any attributes
import org.dmd.dmc.types.DmcTypeInteger;                                    // Required type
import org.dmd.dmc.types.DmcTypeString;                                     // Required type
import org.dmd.dmc.types.DmcTypeStringName;                                 // Required type
import org.dmd.dmc.types.StringName;                                        // Naming attribute type
import org.dmd.dms.generated.dmo.DmwWrapperDMO;                             // Structural class
import org.dmd.dms.generated.enums.ValueTypeEnum;                           // Required if we have any attributes
import org.dmd.features.extgwt.generated.dmo.MvcConfigDMO;                  // Type specific set/add
import org.dmd.features.extgwt.generated.types.DmcTypeMvcConfigREF;         // Reference type
import org.dmd.features.extgwt.generated.types.MvcConfigREF;                // Helper class

/**
 * The MvcDefinition class provide a common base for all MVC definition
 * classes.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.dumpDMO(DmoFormatter.java:139)
 */
@SuppressWarnings("serial")
abstract public class MvcDefinitionDMO  extends DmwWrapperDMO  implements DmcNamedObjectIF  {

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __definedInMVCConfig = new DmcAttributeInfo("definedInMVCConfig",616,"MvcConfig",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __description = new DmcAttributeInfo("description",18,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __file = new DmcAttributeInfo("file",74,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __lineNumber = new DmcAttributeInfo("lineNumber",75,"Integer",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __name = new DmcAttributeInfo("name",2,"StringName",ValueTypeEnum.SINGLE,false);

    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__definedInMVCConfig.id,__definedInMVCConfig);
        _ImAp.put(__description.id,__description);
        _ImAp.put(__file.id,__file);
        _ImAp.put(__lineNumber.id,__lineNumber);
        _ImAp.put(__name.id,__name);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__definedInMVCConfig.name,__definedInMVCConfig);
        _SmAp.put(__description.name,__description);
        _SmAp.put(__file.name,__file);
        _SmAp.put(__lineNumber.name,__lineNumber);
        _SmAp.put(__name.name,__name);
    }

    public MvcDefinitionDMO() {
        super("MvcDefinition",_ImAp,_SmAp);
    }

    protected MvcDefinitionDMO(String oc) {
        super(oc,_ImAp,_SmAp);
    }

    public MvcDefinitionDMO(String oc, Map<Integer,DmcAttributeInfo> im, Map<String,DmcAttributeInfo> sm){
        super(oc,im,sm);
    }

    public MvcDefinitionDMO(MvcDefinitionDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    // org.dmd.dms.util.DmoFormatter.getAccessFunctions(DmoFormatter.java:789)
    public StringName getObjectName(){
        DmcAttribute<?> name = get(__name);
        if (name != null)
            return((StringName)name.getSV());
    
        return(null);
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        DmcAttribute<?> name = get(__name);
        return(name);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcDefinitionDMO){
            return( getObjectName().equals( ((MvcDefinitionDMO) obj).getObjectName()) );
        }
        return(false);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:372)
    public String getFile(){
        DmcTypeString attr = (DmcTypeString) get(__file);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets file to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:393)
    public void setFile(String value) {
        DmcAttribute<?> attr = get(__file);
        if (attr == null)
            attr = new DmcTypeString(__file);
        
        try{
            attr.set(value);
            set(__file,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets file to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:420)
    public void setFile(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__file);
        if (attr == null)
            attr = new DmcTypeString(__file);
        
        attr.set(value);
        set(__file,attr);
    }

    /**
     * Removes the file attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:435)
    public void remFile(){
         rem(__file);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:372)
    public Integer getLineNumber(){
        DmcTypeInteger attr = (DmcTypeInteger) get(__lineNumber);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets lineNumber to the specified value.
     * @param value Integer
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:393)
    public void setLineNumber(Integer value) {
        DmcAttribute<?> attr = get(__lineNumber);
        if (attr == null)
            attr = new DmcTypeInteger(__lineNumber);
        
        try{
            attr.set(value);
            set(__lineNumber,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets lineNumber to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:420)
    public void setLineNumber(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__lineNumber);
        if (attr == null)
            attr = new DmcTypeInteger(__lineNumber);
        
        attr.set(value);
        set(__lineNumber,attr);
    }

    /**
     * Removes the lineNumber attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:435)
    public void remLineNumber(){
         rem(__lineNumber);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:372)
    public String getDescription(){
        DmcTypeString attr = (DmcTypeString) get(__description);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets description to the specified value.
     * @param value String
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:393)
    public void setDescription(String value) {
        DmcAttribute<?> attr = get(__description);
        if (attr == null)
            attr = new DmcTypeString(__description);
        
        try{
            attr.set(value);
            set(__description,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:420)
    public void setDescription(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__description);
        if (attr == null)
            attr = new DmcTypeString(__description);
        
        attr.set(value);
        set(__description,attr);
    }

    /**
     * Removes the description attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:435)
    public void remDescription(){
         rem(__description);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:372)
    public StringName getName(){
        DmcTypeStringName attr = (DmcTypeStringName) get(__name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:393)
    public void setName(StringName value) {
        DmcAttribute<?> attr = get(__name);
        if (attr == null)
            attr = new DmcTypeStringName(__name);
        
        try{
            attr.set(value);
            set(__name,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:420)
    public void setName(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__name);
        if (attr == null)
            attr = new DmcTypeStringName(__name);
        
        attr.set(value);
        set(__name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:435)
    public void remName(){
         rem(__name);
    }

    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:323)
    public MvcConfigREF getDefinedInMVCConfig(){
        DmcTypeMvcConfigREF attr = (DmcTypeMvcConfigREF) get(__definedInMVCConfig);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets definedInMVCConfig to the specified value.
     * @param value MvcConfigDMO
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:355)
    public void setDefinedInMVCConfig(MvcConfigDMO value) {
        DmcAttribute<?> attr = get(__definedInMVCConfig);
        if (attr == null)
            attr = new DmcTypeMvcConfigREF(__definedInMVCConfig);
        
        try{
            attr.set(value);
            set(__definedInMVCConfig,attr);
        }
        catch(DmcValueException ex){
            throw(new IllegalStateException("The type specific set() method shouldn't throw exceptions!",ex));
        }
    }

    /**
     * Sets definedInMVCConfig to the specified value.
     * @param value A value compatible with DmcTypeMvcConfigREF
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:420)
    public void setDefinedInMVCConfig(Object value) throws DmcValueException {
        DmcAttribute<?> attr = get(__definedInMVCConfig);
        if (attr == null)
            attr = new DmcTypeMvcConfigREF(__definedInMVCConfig);
        
        attr.set(value);
        set(__definedInMVCConfig,attr);
    }

    /**
     * Removes the definedInMVCConfig attribute value.
     */
    // org.dmd.dms.util.GenUtility.formatSV(GenUtility.java:435)
    public void remDefinedInMVCConfig(){
         rem(__definedInMVCConfig);
    }




}
