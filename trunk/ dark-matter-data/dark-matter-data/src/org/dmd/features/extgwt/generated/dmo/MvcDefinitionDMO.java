//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.generated.dmo;

import java.util.*;

import org.dmd.dms.generated.enums.ValueTypeEnum;
import org.dmd.dmc.DmcAttributeInfo;
import org.dmd.dmc.DmcAttribute;
import org.dmd.dmc.DmcValueException;
// import 3 Integer
import org.dmd.dmc.types.DmcTypeInteger;
// import 3 MvcConfig
import org.dmd.features.extgwt.generated.types.DmcTypeMvcConfigREF;
import org.dmd.features.extgwt.generated.types.MvcConfigREF;
// import 4
import org.dmd.features.extgwt.generated.types.MvcConfigREF;
// import 3 String
import org.dmd.dmc.types.DmcTypeString;

// import 5
import org.dmd.dms.generated.dmo.DmwWrapperDMO;
// import 7
import org.dmd.dmc.DmcNamedObjectIF;

@SuppressWarnings("serial")
/**
 * The MvcDefinition class provide a common base for all MVC definition
 * classes.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmogenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dms.util.DmoFormatter.getClassHeader(DmoFormatter.java:655)
 */
abstract public class MvcDefinitionDMO  extends DmwWrapperDMO  implements DmcNamedObjectIF  {

    public final static String _file = "file";
    public final static String _lineNumber = "lineNumber";
    public final static String _description = "description";
    public final static String _name = "name";
    public final static String _definedInMVCConfig = "definedInMVCConfig";

    static Map<Integer,DmcAttributeInfo> _ImAp;

    static Map<String ,DmcAttributeInfo> _SmAp;

    public final static DmcAttributeInfo __definedInMVCConfig = new DmcAttributeInfo("definedInMVCConfig",616,"MvcConfig",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __description = new DmcAttributeInfo("description",18,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __file = new DmcAttributeInfo("file",74,"String",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __lineNumber = new DmcAttributeInfo("lineNumber",75,"Integer",ValueTypeEnum.SINGLE,false);
    public final static DmcAttributeInfo __name = new DmcAttributeInfo("name",2,"String",ValueTypeEnum.SINGLE,false);

    static {
        _ImAp = new HashMap<Integer,DmcAttributeInfo>();
        _ImAp.put(__definedInMVCConfig.id,__definedInMVCConfig);
        _ImAp.put(__description.id,__description);
        _ImAp.put(__file.id,__file);
        _ImAp.put(__lineNumber.id,__lineNumber);
        _ImAp.put(__name.id,__name);

        _SmAp = new HashMap<String ,DmcAttributeInfo>();
        _SmAp.put(__definedInMVCConfig.name,__definedInMVCConfig);
        _SmAp.put(__description.name,__description);
        _SmAp.put(__file.name,__file);
        _SmAp.put(__lineNumber.name,__lineNumber);
        _SmAp.put(__name.name,__name);
    }

    public MvcDefinitionDMO() {
        super("MvcDefinition",_ImAp,_SmAp);
    }

    protected MvcDefinitionDMO(String oc) {
        super(oc,_ImAp,_SmAp);
    }

    public MvcDefinitionDMO(String oc, Map<Integer,DmcAttributeInfo> im, Map<String,DmcAttributeInfo> sm){
        super(oc,im,sm);
    }

    public MvcDefinitionDMO(MvcDefinitionDMO original) {
        super(original.getConstructionClassName());
        System.out.println("Full object cloning not implemented...");
    }

    @SuppressWarnings("unchecked")
    public String getObjectName(){
        DmcAttribute name = get(_name);
        if (name != null)
            return(name.getString());
    
        return(null);
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcDefinitionDMO){
            return( getObjectName().equals( ((MvcDefinitionDMO) obj).getObjectName()) );
        }
        return(false);
    }

    public String getFile(){
        DmcTypeString attr = (DmcTypeString) get(_file);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets file to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setFile(Object value) throws DmcValueException {
        DmcAttribute attr = get(_file);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_file,attr);
    }

    /**
     * Removes the file attribute value.
     */
    public void remFile(){
         rem(_file);
    }

    public Integer getLineNumber(){
        DmcTypeInteger attr = (DmcTypeInteger) get(_lineNumber);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets lineNumber to the specified value.
     * @param value A value compatible with DmcTypeInteger
     */
    @SuppressWarnings("unchecked")
    public void setLineNumber(Object value) throws DmcValueException {
        DmcAttribute attr = get(_lineNumber);
        if (attr == null)
            attr = new DmcTypeInteger();
        
        attr.set(value);
        set(_lineNumber,attr);
    }

    /**
     * Removes the lineNumber attribute value.
     */
    public void remLineNumber(){
         rem(_lineNumber);
    }

    public String getDescription(){
        DmcTypeString attr = (DmcTypeString) get(_description);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets description to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setDescription(Object value) throws DmcValueException {
        DmcAttribute attr = get(_description);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_description,attr);
    }

    /**
     * Removes the description attribute value.
     */
    public void remDescription(){
         rem(_description);
    }

    public String getName(){
        DmcTypeString attr = (DmcTypeString) get(_name);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeString
     */
    @SuppressWarnings("unchecked")
    public void setName(Object value) throws DmcValueException {
        DmcAttribute attr = get(_name);
        if (attr == null)
            attr = new DmcTypeString();
        
        attr.set(value);
        set(_name,attr);
    }

    /**
     * Removes the name attribute value.
     */
    public void remName(){
         rem(_name);
    }

    public MvcConfigREF getDefinedInMVCConfig(){
        DmcTypeMvcConfigREF attr = (DmcTypeMvcConfigREF) get(_definedInMVCConfig);
        if (attr == null)
            return(null);

        return(attr.getSV());
    }

    /**
     * Sets definedInMVCConfig to the specified value.
     * @param value A value compatible with DmcTypeMvcConfigREF
     */
    @SuppressWarnings("unchecked")
    public void setDefinedInMVCConfig(Object value) throws DmcValueException {
        DmcAttribute attr = get(_definedInMVCConfig);
        if (attr == null)
            attr = new DmcTypeMvcConfigREF();
        
        attr.set(value);
        set(_definedInMVCConfig,attr);
    }

    /**
     * Removes the definedInMVCConfig attribute value.
     */
    public void remDefinedInMVCConfig(){
         rem(_definedInMVCConfig);
    }




}
