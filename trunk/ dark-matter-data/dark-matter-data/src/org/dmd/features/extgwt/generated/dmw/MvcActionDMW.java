package org.dmd.features.extgwt.generated.dmw;

// Generated from:  org.dmd.dmg.generators.DMWGenerator.formatImports(DMWGenerator.java:847)
import java.util.ArrayList;                                               // To support getMVCopy()
import java.util.Iterator;                                                // To support getMVCopy()
import org.dmd.dmc.*;                                                     // If any attributes
import org.dmd.dmc.types.StringName;                                      // Primitive type
import org.dmd.dms.*;                                                     // Always 2
import org.dmd.dms.generated.types.DmcTypeModifierMV;                     // Required for MODREC constructor
import org.dmd.features.extgwt.extended.MvcAction;                        // Required for getModificationRecorder()
import org.dmd.features.extgwt.extended.MvcController;                    // Is reference type aux
import org.dmd.features.extgwt.extended.MvcDefinition;                    // Derived class
import org.dmd.features.extgwt.extended.MvcEvent;                         // Is reference type aux
import org.dmd.features.extgwt.generated.dmo.MvcActionDMO;                // Class not auxiliary or abstract
import org.dmd.features.extgwt.generated.dmo.MvcEventDMO;                 // For multi-valued containsMvcEvent
import org.dmd.features.extgwt.generated.dmw.MvcEventIterableDMW;         // For multi-valued MvcEvent
import org.dmd.features.extgwt.generated.types.MvcControllerREF;          // To support getMVCopy() for REFs
import org.dmd.features.extgwt.generated.types.MvcEventREF;               // To support getMVCopy() for REFs

/**
 * The MvcAction class allows for the definition of behaviour that can be
 * associated with menus, buttons and other UI components. Actions are
 * associated with controllers so that they can be informed of events in
 * which they're interested, since only controllers can register for events.
 * Actions may be defined and used by  menu items defined in other
 * Controllers.
 * <P>
 * Generated from the extgwt schema at version 0.1
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from:  org.dmd.dmg.generators.DMWGenerator.dumpWrapper(DMWGenerator.java:347)
 */
abstract public class MvcActionDMW extends MvcDefinition implements DmcNamedObjectIF {

    public MvcActionDMW() {
        super(new MvcActionDMO(), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcAction);
    }

    public MvcActionDMW(DmcTypeModifierMV mods) {
        super(new MvcActionDMO(mods), org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcAction);
    }

    public MvcAction getModificationRecorder(){
        MvcAction rc = new MvcAction();
        rc.setDmcObject(new MvcActionDMO(new DmcTypeModifierMV()));
        rc.setName(getName());
        return(rc);
    }

    public MvcActionDMW(MvcActionDMO obj) {
        super(obj, org.dmd.features.extgwt.generated.ExtgwtSchemaAG._MvcAction);
    }

    public MvcActionDMO getDMO() {
        return((MvcActionDMO) core);
    }

    protected MvcActionDMW(MvcActionDMO obj, ClassDefinition cd) {
        super(obj,cd);
    }

    //  org.dmd.dmg.generators.DMWGenerator.getAccessFunctions(DMWGenerator.java:875)
    public StringName getObjectName(){
        return(((MvcActionDMO) core).getName());
    }

    public int hashCode(){
        return(getObjectName().hashCode());
    }

    public DmcAttribute<?> getObjectNameAttribute(){
        return(((MvcActionDMO) core).getObjectNameAttribute());
    }

    public boolean equals(Object obj){
        if (obj instanceof MvcActionDMW){
            return( getObjectName().equals( ((MvcActionDMW) obj).getObjectName()) );
        }
        return(false);
    }

    /**
     * @return The number of MvcEvent items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1146)
    public int getHandlesEventSize(){
        DmcAttribute<?> attr = core.get(MvcActionDMO.__handlesEvent);
        if (attr == null)
            return(0);
        
        return(attr.getMVSize());
    }

    /**
     * @return true if there are no MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1158)
    public boolean getHandlesEventIsEmpty(){
        DmcAttribute<?> attr = core.get(MvcActionDMO.__handlesEvent);
        if (attr == null)
            return(true);
        
        return(false);
    }

    /**
     * @return true if there are any MvcEventDMO items.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1170)
    public boolean getHandlesEventHasValue(){
        DmcAttribute<?> attr = core.get(MvcActionDMO.__handlesEvent);
        if (attr == null)
            return(false);
        
        return(true);
    }

    /**
     * @return An Iterator of MvcEventDMO objects.
     */
    @SuppressWarnings("unchecked")
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1189)
    public MvcEventIterableDMW getHandlesEventIterable(){
        DmcAttribute attr = ((MvcActionDMO) core).get(MvcActionDMO.__handlesEvent);
        if (attr == null)
            return(MvcEventIterableDMW.emptyList);
        
        return(new MvcEventIterableDMW(attr.getMV()));
    }

    /**
     * Adds another handlesEvent value.
     * @param value A value compatible with MvcEvent
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1205)
    public DmcAttribute<?> addHandlesEvent(MvcEvent value) throws DmcValueException {
        DmcAttribute<?> attr = ((MvcActionDMO) core).addHandlesEvent(value.getDmcObject());
        return(attr);
    }

    /**
     * Deletes a handlesEvent value.
     * @param value The MvcEvent to be deleted from set of attribute values.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1218)
    public void delHandlesEvent(MvcEvent value) throws DmcValueException {
        ((MvcActionDMO) core).delHandlesEvent(value);
    }

    /**
     * @return A COPY of the collection of MvcEvent objects.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1253)
    public ArrayList<MvcEvent> getHandlesEventCopy(){
        DmcAttribute<?> attr = ((MvcActionDMO) core).get(MvcActionDMO.__handlesEvent);
        if (attr == null)
            return(new ArrayList<MvcEvent>());
        
        ArrayList<MvcEvent> rc = new ArrayList<MvcEvent>(attr.getMVSize());
        
        MvcEventIterableDMW it = getHandlesEventIterable();
        while(it.hasNext()){
            rc.add(it.next());
        }
        
        return(rc);
    }

    /**
     * Removes the handlesEvent attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatMV(DMWGenerator.java:1385)
    public void remHandlesEvent(){
        ((MvcActionDMO) core).remHandlesEvent();
    }

    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1012)
    public StringName getName(){
        return(((MvcActionDMO) core).getName());
    }

    /**
     * Sets name to the specified value.
     * @param value A value compatible with DmcTypeStringName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1059)
    public void setName(Object value) throws DmcValueException {
        ((MvcActionDMO) core).setName(value);
    }

    /**
     * Sets name to the specified value.
     * @param value StringName
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1068)
    public void setName(StringName value){
        ((MvcActionDMO) core).setName(value);
    }

    /**
     * Removes the name attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1094)
    public void remName(){
        ((MvcActionDMO) core).remName();
    }

    /**
     * @return A MvcController object.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:991)
    public MvcController getAssociatedController(){
        MvcControllerREF ref = ((MvcActionDMO) core).getAssociatedController();
        if (ref == null)
            return(null);
        
        return((MvcController)ref.getObject().getContainer());
    }

    /**
     * Sets the associatedController to the specified value.
     * @param value A value compatible with MvcControllerREF
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1036)
    public void setAssociatedController(MvcController value) {
        ((MvcActionDMO) core).setAssociatedController(value.getDMO());
    }

    /**
     * Removes the associatedController attribute value.
     */
    //  org.dmd.dmg.generators.DMWGenerator.formatSV(DMWGenerator.java:1094)
    public void remAssociatedController(){
        ((MvcActionDMO) core).remAssociatedController();
    }


}
