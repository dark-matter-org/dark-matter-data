//	---------------------------------------------------------------------------
//	dark-matter-data
//	Copyright (c) 2010 dark-matter-data committers
//	---------------------------------------------------------------------------
//	This program is free software; you can redistribute it and/or modify it
//	under the terms of the GNU Lesser General Public License as published by the
//	Free Software Foundation; either version 3 of the License, or (at your
//	option) any later version.
//	This program is distributed in the hope that it will be useful, but WITHOUT
//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
//	more details.
//	You should have received a copy of the GNU Lesser General Public License along
//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
//	---------------------------------------------------------------------------
package org.dmd.features.extgwt.extended;

import java.util.TreeMap;

import org.dmd.dms.ClassDefinition;
import org.dmd.features.extgwt.generated.dmo.MvcViewDMO;
import org.dmd.features.extgwt.generated.dmw.MvcViewDMW;
import org.dmd.util.exceptions.DebugInfo;
import org.dmd.util.formatting.CodeFormatter;

public class MvcView extends MvcViewDMW {

	// The import statements we need
	StringBuffer					importDefs;
	
	StringBuffer					classComments;
	
	// The local variables we need - this is for views and resources
	StringBuffer					localVariables;
	
	StringBuffer					handleEventFunction;
	
	// The abstract event handlers for all events we handle
	StringBuffer					eventHandlers;
	
	StringBuffer					dispatchedEvents;
	
	StringBuffer					firedEvents;
	
	// The functions that grab resources from the registry
	StringBuffer					resourceAccessFunctions;
	
	// We may have many resources of the same type, this hash maintains the unique set of
	// imports we require (without duplicates).
	TreeMap<String,String>			uniqueResourceImports;
	
	// By convention, our name starts with a capital e.g. AppView
	// but this is the same name with the first character in lowercase
	String variableName;
	
	
	Boolean							haveServerEvents;
	
	// Key: class name
	TreeMap<String,MvcServerEvent>	serverEvents;
	
	// The abstract event handler functions for each server event
	StringBuffer					serverEventHandlers;
	
	StringBuffer					handleServerEventFunction;
	
	String							additionalInterfaces;

	
	public MvcView(){
		super();
	}
	
	public MvcView(MvcViewDMO obj, ClassDefinition cd) {
		super(obj,cd);
	}

	public void initCodeGenInfo(){
		if (importDefs == null){
			importDefs 				= new StringBuffer();
			classComments 			= new StringBuffer();
			localVariables 			= new StringBuffer();
			handleEventFunction 	= new StringBuffer();
			eventHandlers 			= new StringBuffer();
			
			serverEvents			= new TreeMap<String, MvcServerEvent>();
			serverEventHandlers		= new StringBuffer();
			handleServerEventFunction	= new StringBuffer();
			additionalInterfaces	= "";
			
			dispatchedEvents 		= new StringBuffer();
			firedEvents				= new StringBuffer();
			resourceAccessFunctions = new StringBuffer();
			uniqueResourceImports 	= new TreeMap<String, String>();
			
			classComments.append("/**\n");
			CodeFormatter.dumpCodeComment(getDescription(), classComments, " * ");
			classComments.append(" * <P>\n");
			classComments.append(" * This code was auto-generated by the mvcgenerator utility and shouldn't be altered manually!\n");
			classComments.append(" * Generated from: " + DebugInfo.getWhereWeAreNow() + "\n");
			classComments.append(" */\n");
			
			initEventHandlers();
			
			initResourceAccessFunctions();
			
			initImportDefs();
			
			initServerEventInfo();
		}
	}
	
	void initServerEventInfo(){
		
//		Iterator<MvcServerEvent> events = getHandlesServerEvent();
		if (getHandlesServerEventHasValue()){
//		if (events != null){
			importDefs.append("import org.dmd.features.extgwt.client.ServerEventHandlerIF;\n");
			importDefs.append("import org.dmd.dmp.shared.generated.dmo.EventDMO;\n");
			importDefs.append("import org.dmd.dmp.shared.generated.enums.EventTypeEnum;\n");

			additionalInterfaces = " implements ServerEventHandlerIF";
			handleServerEventFunction.append("    public void handleServerEvent(EventDMO event) {\n");
			boolean first = true;

			for(MvcServerEvent event: getHandlesServerEventIterable()){
//			while(events.hasNext()){
//				MvcServerEvent event = events.next();
				
				if (first){
					handleServerEventFunction.append("        if (event.getObjClass().equals(\"" + event.getObjClass() + "\"))\n");
					handleServerEventFunction.append("            handle" + event.getCamelCaseName() + "(event.getEventType(),(" + event.getDMOClass() + ")event.getEventObject());\n");
					first = false;
				}
				else{
					handleServerEventFunction.append("        else if (event.getObjClass().equals(\"" + event.getObjClass() + "\"))\n");
					handleServerEventFunction.append("            handle" + event.getCamelCaseName() + "(event.getEventType(),(" + event.getDMOClass() + ")event.getEventObject());\n");
				}
				
				serverEventHandlers.append(event.getAbstractFunction());
				importDefs.append("import " + event.getEventDataType() + ";\n");

			}
			
			handleServerEventFunction.append("    }\n\n");
		}
	}
	
	public boolean usesServerEvents(){
		if (haveServerEvents == null){
			if (getHandlesServerEventHasValue())
				haveServerEvents = true;
			else
				haveServerEvents = false;
//			if (getHandlesServerEvent() == null)
//				haveServerEvents = new Boolean(false);
//			else
//				haveServerEvents = new Boolean(true);
		}
		return(haveServerEvents);
	}
	
	public String getAdditionalInterfaces(){
		return(additionalInterfaces);
	}
	
	public String getHandleServerEventFunction(){
		return(handleServerEventFunction.toString());
	}
	
	public String getServerEventHandlers(){
		return(serverEventHandlers.toString());
	}
	
	
	
	public String getImportDefs(){
		return(importDefs.toString());
	}
	
	public String getLocalVariables(){
		return(localVariables.toString());
	}
	
	public String getHandleEventFunction(){
		return(handleEventFunction.toString());
	}
	
	public String getEventHandlers(){
		return(eventHandlers.toString());
	}
	
	public String getResourceAccessFunctions(){
		return(resourceAccessFunctions.toString());
	}
	
	/**
	 * Initializes the event handle functions.
	 */
	void initEventHandlers(){
		boolean first = true;
		String	prefix = "if";
		
		// We gather all of the events that we handle and any events that our
		// views want to handle
//		Iterator<MvcEvent> events = getHandlesEvent();
		if (getHandlesEventHasValue()){
//		if (events != null){
	        handleEventFunction.append("    public void handleEvent(AppEvent event) {\n");
	        handleEventFunction.append("        EventType type = event.getType();\n");
	        
	        for(MvcEvent event: getHandlesEventIterable()){
//			while(events.hasNext()){
//				MvcEvent event = events.next();
				
				if (event.getName().equals("mvc.init.eventFramework")){
					// If this is the init event for the server event framework, we actually insert
					// a real function here, not an abstract
					eventHandlers.append("    /**\n");
					eventHandlers.append("     * When we receive this event, we add ourselves to handle various server events.\n");
					eventHandlers.append("     */\n");
					eventHandlers.append("    protected void handleMvcInitEventFrameworkEvent(AppEvent event){\n");
					
					for(MvcServerEvent se: getHandlesServerEventIterable()){
//					Iterator<MvcServerEvent> sevents = getHandlesServerEvent();
//					while(sevents.hasNext()){
//						MvcServerEvent se = sevents.next();
						eventHandlers.append("        getMvcServerEventController().addEventHandler(this,\"" + se.getObjClass() + "\");\n");
					}
					eventHandlers.append("    }\n\n");
				}
				else{
					eventHandlers.append(event.getAbstractFunction() + "\n");
				}
				
				handleEventFunction.append("        " + prefix + " (type == myController." + event.getCamelCaseName() + ") {\n");

				handleEventFunction.append(event.getHandleLocalFunctionCall());
				
				handleEventFunction.append("        }\n");

				if (first){
					first = false;
					prefix = "else if";
				}

				if (event.getUserDataType() != null)
					uniqueResourceImports.put(event.getUserDataType(), event.getUserDataType());
				if (event.getUserDataCollection() != null)
					uniqueResourceImports.put(event.getUserDataCollection(), event.getUserDataCollection());

			}
			
			handleEventFunction.append("    }\n\n");

		}
	}
	
	/**
	 * Initializes the resourceAccessFunctionand uniqueResourceImports
	 */
	void initResourceAccessFunctions(){
		for(MvcRegistryItem item: getUsesRegistryItemIterable()){
//		Iterator<MvcRegistryItem> items = getUsesRegistryItem();
//		if (items != null){
//			while(items.hasNext()){
//				MvcRegistryItem item = items.next();
				
				resourceAccessFunctions.append(item.getAccessFunction());
				
				uniqueResourceImports.put(item.getUserDataType(), item.getUserDataType());
				
				if (localVariables.length() == 0)
					localVariables.append("    // Resources\n");
				
				// NOTE: these are private because they should only be accessed via the resource
				// access functions.
				localVariables.append("    private " + item.getItemType() + " " + item.getVariableName() + ";\n");
//			}
		}
		
		for(MvcRegistryItem item: getCreatesRegistryItemIterable()){
//		items = getCreatesRegistryItem();
//		if (items != null){
//			while(items.hasNext()){
//				MvcRegistryItem item = items.next();
				
				resourceAccessFunctions.append(item.getAccessFunction());
				resourceAccessFunctions.append(item.getRegisterFunction());
				
				uniqueResourceImports.put(item.getUserDataType(), item.getUserDataType());
				
				if (localVariables.length() == 0)
					localVariables.append("    // Resources\n");
				localVariables.append("    protected " + item.getItemType() + " " + item.getVariableName() + ";\n");
//			}
		}

	}
	
	void initImportDefs(){
		importDefs.append("import com.extjs.gxt.ui.client.mvc.Controller;\n");
//		importDefs.append("import com.extjs.gxt.ui.client.mvc.View;\n");
		
		if (eventHandlers.length() > 0){
			importDefs.append("import com.extjs.gxt.ui.client.mvc.AppEvent;\n");
			importDefs.append("import com.extjs.gxt.ui.client.event.EventType;\n");
		}
			
		if (resourceAccessFunctions.length() > 0)
			importDefs.append("import com.extjs.gxt.ui.client.Registry;\n");
		
		for(String s : uniqueResourceImports.values()){
			importDefs.append("import " + s + ";\n");
		}
		
	}
	
	public String getClassComments(){
		return(classComments.toString());
	}

//	/**
//	 * @return The variable name used for this view in the controller.
//	 */
//	public String getVariableName(){
//		if (variableName == null){
//			StringBuffer sb = new StringBuffer(getName());
//			sb.setCharAt(0, Character.toLowerCase(sb.charAt(0)));
//			variableName = sb.toString();
//		}
//		return(variableName);
//	}
	
	/**
	 * @return An abstract event handler for each of the events we handle.
	 */
	public String getEventHandlerFunctions(){
		return(eventHandlers.toString());
	}
	
}
